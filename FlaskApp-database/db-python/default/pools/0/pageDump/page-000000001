b'
    Wrap lru_cache to support storing the cache data in the object instances.

    Abstracts the common paradigm where the method explicitly saves an
    underscore-prefixed protected property on first call and returns that
    subsequently.

    >>> class MyClass:
    ...     calls = 0
    ...
    ...     @method_cache
    ...     def method(self, value):
    ...         self.calls += 1
    ...         return value

    >>> a = MyClass()
    >>> a.method(3)
    3
    >>> for x in range(75):
    ...     res = a.method(x)
    >>> a.calls
    75

    Note that the apparent behavior will be exactly like that of lru_cache
    except that the cache is stored on each instance, so values in one
    instance will not flush values from another, and when an instance is
    deleted, so are the cached values for that instance.

    >>> b = MyClass()
    >>> for x in range(35):
    ...     res = b.method(x)
    >>> b.calls
    35
    >>> a.method(0)
    0
    >>> a.calls
    75

    Note that if method had been decorated with ``functools.lru_cache()``,
    a.calls would have been 76 (due to the cached value of 0 having been
    flushed by the 'b' instance).

    Clear the cache with ``.cache_clear()``

    >>> a.method.cache_clear()

    Same for a method that hasn't yet been called.

    >>> c = MyClass()
    >>> c.method.cache_clear()

    Another cache wrapper may be supplied:

    >>> cache = functools.lru_cache(maxsize=2)
    >>> MyClass.method2 = method_cache(lambda self: 3, cache_wrapper=cache)
    >>> a = MyClass()
    >>> a.method2()
    3

    Caution - do not subsequently wrap the method with another decorator, such
    as ``@property``, which changes the semantics of the function.

    See also
    http://code.activestate.com/recipes/577452-a-memoize-decorator-for-instance-methods/
    for another implementation and additional justification.
    'u'
    Wrap lru_cache to support storing the cache data in the object instances.

    Abstracts the common paradigm where the method explicitly saves an
    underscore-prefixed protected property on first call and returns that
    subsequently.

    >>> class MyClass:
    ...     calls = 0
    ...
    ...     @method_cache
    ...     def method(self, value):
    ...         self.calls += 1
    ...         return value

    >>> a = MyClass()
    >>> a.method(3)
    3
    >>> for x in range(75):
    ...     res = a.method(x)
    >>> a.calls
    75

    Note that the apparent behavior will be exactly like that of lru_cache
    except that the cache is stored on each instance, so values in one
    instance will not flush values from another, and when an instance is
    deleted, so are the cached values for that instance.

    >>> b = MyClass()
    >>> for x in range(35):
    ...     res = b.method(x)
    >>> b.calls
    35
    >>> a.method(0)
    0
    >>> a.calls
    75

    Note that if method had been decorated with ``functools.lru_cache()``,
    a.calls would have been 76 (due to the cached value of 0 having been
    flushed by the 'b' instance).

    Clear the cache with ``.cache_clear()``

    >>> a.method.cache_clear()

    Same for a method that hasn't yet been called.

    >>> c = MyClass()
    >>> c.method.cache_clear()

    Another cache wrapper may be supplied:

    >>> cache = functools.lru_cache(maxsize=2)
    >>> MyClass.method2 = method_cache(lambda self: 3, cache_wrapper=cache)
    >>> a = MyClass()
    >>> a.method2()
    3

    Caution - do not subsequently wrap the method with another decorator, such
    as ``@property``, which changes the semantics of the function.

    See also
    http://code.activestate.com/recipes/577452-a-memoize-decorator-for-instance-methods/
    for another implementation and additional justification.
    'b'
    Wrap func so it's not called if its first param is None

    >>> print_text = pass_none(print)
    >>> print_text('text')
    text
    >>> print_text(None)
    'u'
    Wrap func so it's not called if its first param is None

    >>> print_text = pass_none(print)
    >>> print_text('text')
    text
    >>> print_text(None)
    'u'importlib_metadata._functools'u'Heap queues

[explanation by Fran√ßois Pinard]

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

The strange invariant above is meant to be an efficient memory
representation for a tournament.  The numbers below are `k', not a[k]:

                                   0

                  1                                 2

          3               4                5               6

      7       8       9       10      11      12      13      14

    15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30


In the tree above, each cell `k' is topping `2*k+1' and `2*k+2'.  In
a usual binary tournament we see in sports, each cell is the winner
over the two cells it tops, and we can trace the winner down the tree
to see all opponents s/he had.  However, in many computer applications
of such tournaments, we do not need to trace the history of a winner.
To be more memory efficient, when a winner is promoted, we try to
replace it by something else at a lower level, and the rule becomes
that a cell and the two cells it tops contain three different items,
but the top cell "wins" over the two topped cells.

If this heap invariant is protected at all time, index 0 is clearly
the overall winner.  The simplest algorithmic way to remove it and
find the "next" winner is to move some loser (let's say cell 30 in the
diagram above) into the 0 position, and then percolate this new 0 down
the tree, exchanging values, until the invariant is re-established.
This is clearly logarithmic on the total number of items in the tree.
By iterating over all items, you get an O(n ln n) sort.

A nice feature of this sort is that you can efficiently insert new
items while the sort is going on, provided that the inserted items are
not "better" than the last 0'th element you extracted.  This is
especially useful in simulation contexts, where the tree holds all
incoming events, and the "win" condition means the smallest scheduled
time.  When an event schedule other events for execution, they are
scheduled into the future, so they can easily go into the heap.  So, a
heap is a good structure for implementing schedulers (this is what I
used for my MIDI sequencer :-).

Various structures for implementing schedulers have been extensively
studied, and heaps are good for this, as they are reasonably speedy,
the speed is almost constant, and the worst case is not much different
than the average case.  However, there are other representations which
are more efficient overall, yet the worst cases might be terrible.

Heaps are also very useful in big disk sorts.  You most probably all
know that a big sort implies producing "runs" (which are pre-sorted
sequences, which size is usually related to the amount of CPU memory),
followed by a merging passes for these runs, which merging is often
very cleverly organised[1].  It is very important that the initial
sort produces the longest runs possible.  Tournaments are a good way
to that.  If, using all the memory available to hold a tournament, you
replace and percolate items that happen to fit the current run, you'll
produce runs which are twice the size of the memory for random input,
and much better for input fuzzily ordered.

Moreover, if you output the 0'th item on disk and get an input which
may not fit in the current tournament (because the value "wins" over
the last output value), it cannot fit in the heap, so the size of the
heap decreases.  The freed memory could be cleverly reused immediately
for progressively building a second heap, which grows at exactly the
same rate the first heap is melting.  When the first heap completely
vanishes, you switch heaps and start a new run.  Clever and quite
effective!

In a word, heaps are useful memory structures to know.  I use them in
a few applications, and I think it is good to keep a `heap' module
around. :-)

--------------------
[1] The disk balancing algorithms which are current, nowadays, are
more annoying than clever, and this is a consequence of the seeking
capabilities of the disks.  On devices which cannot seek, like big
tape drives, the story was quite different, and one had to be very
clever to ensure (far in advance) that each tape movement will be the
most effective possible (that is, will best participate at
"progressing" the merge).  Some tapes were even able to read
backwards, and this was also used to avoid the rewinding time.
Believe me, real good tape sorts were quite spectacular to watch!
From all times, sorting has always been a Great Art! :-)
'u'Heap queue algorithm (a.k.a. priority queue).

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

Usage:

heap = []            # creates an empty heap
heappush(heap, item) # pushes a new item on the heap
item = heappop(heap) # pops the smallest item from the heap
item = heap[0]       # smallest item on the heap without popping it
heapify(x)           # transforms list into a heap, in-place, in linear time
item = heapreplace(heap, item) # pops and returns smallest item, and adds
                               # new item; the heap size is unchanged

Our API differs from textbook heap algorithms as follows:

- We use 0-based indexing.  This makes the relationship between the
  index for a node and the indexes for its children slightly less
  obvious, but is more suitable since Python uses 0-based indexing.

- Our heappop() method returns the smallest item, not the largest.

These two make it possible to view the heap as a regular Python list
without surprises: heap[0] is the smallest item, and heap.sort()
maintains the heap invariant!
'_heapify_max_heappop_max_heapreplace_maxheapifyheappopheappushheappushpopheapreplace[\w¬∑ÃÄ-ÕØŒá“É-“á÷ë-÷Ω÷ø◊Å◊Ç◊Ñ◊Ö◊áÿê-ÿöŸã-ŸüŸ∞€ñ-€ú€ü-€§€ß€®€™-€≠‹ë‹∞-›äﬁ¶-ﬁ∞ﬂ´-ﬂ≥ﬂΩ‡†ñ-‡†ô‡†õ-‡†£‡†•-‡†ß‡†©-‡†≠‡°ô-‡°õ‡£ì-‡£°‡££-‡§É‡§∫-‡§º‡§æ-‡•è‡•ë-‡•ó‡•¢‡•£‡¶Å-‡¶É‡¶º‡¶æ-‡ßÑ‡ßá‡ßà‡ßã-‡ßç‡ßó‡ß¢‡ß£‡ßæ‡®Å-‡®É‡®º‡®æ-‡©Ç‡©á‡©à‡©ã-‡©ç‡©ë‡©∞‡©±‡©µ‡™Å-‡™É‡™º‡™æ-‡´Ö‡´á-‡´â‡´ã-‡´ç‡´¢‡´£‡´∫-‡´ø‡¨Å-‡¨É‡¨º‡¨æ-‡≠Ñ‡≠á‡≠à‡≠ã-‡≠ç‡≠ñ‡≠ó‡≠¢‡≠£‡ÆÇ‡Ææ-‡ØÇ‡ØÜ-‡Øà‡Øä-‡Øç‡Øó‡∞Ä-‡∞Ñ‡∞æ-‡±Ñ‡±Ü-‡±à‡±ä-‡±ç‡±ï‡±ñ‡±¢‡±£‡≤Å-‡≤É‡≤º‡≤æ-‡≥Ñ‡≥Ü-‡≥à‡≥ä-‡≥ç‡≥ï‡≥ñ‡≥¢‡≥£‡¥Ä-‡¥É‡¥ª‡¥º‡¥æ-‡µÑ‡µÜ-‡µà‡µä-‡µç‡µó‡µ¢‡µ£‡∂Ç‡∂É‡∑ä‡∑è-‡∑î‡∑ñ‡∑ò-‡∑ü‡∑≤‡∑≥‡∏±‡∏¥-‡∏∫‡πá-‡πé‡∫±‡∫¥-‡∫π‡∫ª‡∫º‡ªà-‡ªç‡ºò‡ºô‡ºµ‡º∑‡ºπ‡ºæ‡ºø‡Ω±-‡æÑ‡æÜ‡æá‡æç-‡æó‡æô-‡æº‡øÜ·Ä´-·Äæ·Åñ-·Åô·Åû-·Å†·Å¢-·Å§·Åß-·Å≠·Å±-·Å¥·ÇÇ-·Çç·Çè·Çö-·Çù·çù-·çü·úí-·úî·ú≤-·ú¥·ùí·ùì·ù≤·ù≥·û¥-·üì·üù·†ã-·†ç·¢Ö·¢Ü·¢©·§†-·§´·§∞-·§ª·®ó-·®õ·©ï-·©û·©†-·©º·©ø·™∞-·™Ω·¨Ä-·¨Ñ·¨¥-·≠Ñ·≠´-·≠≥·ÆÄ-·ÆÇ·Æ°-·Æ≠·Ø¶-·Ø≥·∞§-·∞∑·≥ê-·≥í·≥î-·≥®·≥≠·≥≤-·≥¥·≥∑-·≥π·∑Ä-·∑π·∑ª-·∑ø‚Äø‚ÅÄ‚Åî‚Éê-‚Éú‚É°‚É•-‚É∞‚Ñò‚ÑÆ‚≥Ø-‚≥±‚µø‚∑†-‚∑ø„Ä™-„ÄØ„Çô„ÇöÍôØÍô¥-ÍôΩÍöûÍöüÍõ∞Íõ±Í†ÇÍ†ÜÍ†ãÍ†£-Í†ßÍ¢ÄÍ¢ÅÍ¢¥-Í£ÖÍ£†-Í£±Í£øÍ§¶-Í§≠Í•á-Í•ìÍ¶Ä-Í¶ÉÍ¶≥-ÍßÄÍß•Í®©-Í®∂Í©ÉÍ©åÍ©çÍ©ª-Í©ΩÍ™∞Í™≤-Í™¥Í™∑Í™∏Í™æÍ™øÍ´ÅÍ´´-Í´ØÍ´µÍ´∂ÍØ£-ÍØ™ÍØ¨ÍØ≠Ô¨ûÔ∏Ä-Ô∏èÔ∏†-Ô∏ØÔ∏≥Ô∏¥Ôπç-ÔπèÔºøÔøΩÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩÔøΩÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩÔøΩÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩÔøΩÔøΩ-ÔøΩÔøΩÔøΩÔøΩ-ÔøΩÔøΩÔøΩÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩÔøΩÔøΩÔøΩ-ÔøΩÔøΩÔøΩ-ÔøΩÔøΩÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩ]+# generated by scripts/generate_identifier_pattern.py# noqa: B950u'[\w¬∑ÃÄ-ÕØŒá“É-“á÷ë-÷Ω÷ø◊Å◊Ç◊Ñ◊Ö◊áÿê-ÿöŸã-ŸüŸ∞€ñ-€ú€ü-€§€ß€®€™-€≠‹ë‹∞-›äﬁ¶-ﬁ∞ﬂ´-ﬂ≥ﬂΩ‡†ñ-‡†ô‡†õ-‡†£‡†•-‡†ß‡†©-‡†≠‡°ô-‡°õ‡£ì-‡£°‡££-‡§É‡§∫-‡§º‡§æ-‡•è‡•ë-‡•ó‡•¢‡•£‡¶Å-‡¶É‡¶º‡¶æ-‡ßÑ‡ßá‡ßà‡ßã-‡ßç‡ßó‡ß¢‡ß£‡ßæ‡®Å-‡®É‡®º‡®æ-‡©Ç‡©á‡©à‡©ã-‡©ç‡©ë‡©∞‡©±‡©µ‡™Å-‡™É‡™º‡™æ-‡´Ö‡´á-‡´â‡´ã-‡´ç‡´¢‡´£‡´∫-‡´ø‡¨Å-‡¨É‡¨º‡¨æ-‡≠Ñ‡≠á‡≠à‡≠ã-‡≠ç‡≠ñ‡≠ó‡≠¢‡≠£‡ÆÇ‡Ææ-‡ØÇ‡ØÜ-‡Øà‡Øä-‡Øç‡Øó‡∞Ä-‡∞Ñ‡∞æ-‡±Ñ‡±Ü-‡±à‡±ä-‡±ç‡±ï‡±ñ‡±¢‡±£‡≤Å-‡≤É‡≤º‡≤æ-‡≥Ñ‡≥Ü-‡≥à‡≥ä-‡≥ç‡≥ï‡≥ñ‡≥¢‡≥£‡¥Ä-‡¥É‡¥ª‡¥º‡¥æ-‡µÑ‡µÜ-‡µà‡µä-‡µç‡µó‡µ¢‡µ£‡∂Ç‡∂É‡∑ä‡∑è-‡∑î‡∑ñ‡∑ò-‡∑ü‡∑≤‡∑≥‡∏±‡∏¥-‡∏∫‡πá-‡πé‡∫±‡∫¥-‡∫π‡∫ª‡∫º‡ªà-‡ªç‡ºò‡ºô‡ºµ‡º∑‡ºπ‡ºæ‡ºø‡Ω±-‡æÑ‡æÜ‡æá‡æç-‡æó‡æô-‡æº‡øÜ·Ä´-·Äæ·Åñ-·Åô·Åû-·Å†·Å¢-·Å§·Åß-·Å≠·Å±-·Å¥·ÇÇ-·Çç·Çè·Çö-·Çù·çù-·çü·úí-·úî·ú≤-·ú¥·ùí·ùì·ù≤·ù≥·û¥-·üì·üù·†ã-·†ç·¢Ö·¢Ü·¢©·§†-·§´·§∞-·§ª·®ó-·®õ·©ï-·©û·©†-·©º·©ø·™∞-·™Ω·¨Ä-·¨Ñ·¨¥-·≠Ñ·≠´-·≠≥·ÆÄ-·ÆÇ·Æ°-·Æ≠·Ø¶-·Ø≥·∞§-·∞∑·≥ê-·≥í·≥î-·≥®·≥≠·≥≤-·≥¥·≥∑-·≥π·∑Ä-·∑π·∑ª-·∑ø‚Äø‚ÅÄ‚Åî‚Éê-‚Éú‚É°‚É•-‚É∞‚Ñò‚ÑÆ‚≥Ø-‚≥±‚µø‚∑†-‚∑ø„Ä™-„ÄØ„Çô„ÇöÍôØÍô¥-ÍôΩÍöûÍöüÍõ∞Íõ±Í†ÇÍ†ÜÍ†ãÍ†£-Í†ßÍ¢ÄÍ¢ÅÍ¢¥-Í£ÖÍ£†-Í£±Í£øÍ§¶-Í§≠Í•á-Í•ìÍ¶Ä-Í¶ÉÍ¶≥-ÍßÄÍß•Í®©-Í®∂Í©ÉÍ©åÍ©çÍ©ª-Í©ΩÍ™∞Í™≤-Í™¥Í™∑Í™∏Í™æÍ™øÍ´ÅÍ´´-Í´ØÍ´µÍ´∂ÍØ£-ÍØ™ÍØ¨ÍØ≠Ô¨ûÔ∏Ä-Ô∏èÔ∏†-Ô∏ØÔ∏≥Ô∏¥Ôπç-ÔπèÔºøÔøΩÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩÔøΩÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩÔøΩÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩÔøΩÔøΩ-ÔøΩÔøΩÔøΩÔøΩ-ÔøΩÔøΩÔøΩÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩÔøΩÔøΩÔøΩ-ÔøΩÔøΩÔøΩ-ÔøΩÔøΩÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩÔøΩ-ÔøΩ]+'u'jinja2._identifier'u'_identifier'u'(Extremely) low-level import machinery bits as used by importlib and imp.'init_frozenlock_held_logger_Missingno value_missingoverload_make_encode_wrapperreferenceCreate a function that will be called with a string argument. If
    the reference is bytes, values will be encoded to bytes.
    methodcallerlatin1_check_str_tupleEnsure tuple items are all strings or all bytes.item_typeCannot mix str and bytes arguments (got _default_encoding_to_bytesExpected bytes_to_strallow_none_charset_wsgi_decoding_dance_wsgi_encoding_dance_get_environ is not a WSGI environment (has to be a dict)_has_level_handlerCheck if there is a handler in the logging chain that will handle
    the given logger's effective level.
    _ColorStreamHandlerOn Windows, wrap stream with Colorama for ANSI style support.Log a message to the 'werkzeug' logger.

    The logger is created the first time it is needed. If there is no
    level set, it is set to :data:`logging.INFO`. If there is no handler
    for the logger's effective level, a :class:`logging.StreamHandler`
    is added.
    werkzeug_dt_as_utc_TAccessorValue_DictAccessorPropertyGenericBaseclass for `environ_property` and `header_property`.read_onlyload_funcdump_funcstorageread only property_decode_idnadomainidna-?\d+_plain_int_re-?\d+\.\d+_plain_float_re_plain_intParse an int only if it is only ASCII digits and ``-``.

    This disallows ``+``, ``_``, and non-ASCII digits, which are accepted by ``int`` but
    are not allowed in HTTP header values.
    _plain_floatParse a float only if it is only ASCII digits and ``-``, and contains digits
    before and after the ``.``.

    This disallows ``+``, ``_``, non-ASCII digits, and ``.123``, which are accepted by
    ``float`` but are not allowed in HTTP header values.
    # If the domain is not ASCII, it's decoded already.# Try decoding in one shot.# Decode each part separately, leaving invalid parts as punycode.b'no value'u'no value'b'_missing'u'_missing'b'Create a function that will be called with a string argument. If
    the reference is bytes, values will be encoded to bytes.
    'u'Create a function that will be called with a string argument. If
    the reference is bytes, values will be encoded to bytes.
    'b'latin1'u'latin1'b'Ensure tuple items are all strings or all bytes.'u'Ensure tuple items are all strings or all bytes.'b'Cannot mix str and bytes arguments (got 'u'Cannot mix str and bytes arguments (got 'b'Expected bytes'u'Expected bytes'b'environ'u'environ'b' is not a WSGI environment (has to be a dict)'u' is not a WSGI environment (has to be a dict)'b'Check if there is a handler in the logging chain that will handle
    the given logger's effective level.
    'u'Check if there is a handler in the logging chain that will handle
    the given logger's effective level.
    'b'On Windows, wrap stream with Colorama for ANSI style support.'u'On Windows, wrap stream with Colorama for ANSI style support.'b'Log a message to the 'werkzeug' logger.

    The logger is created the first time it is needed. If there is no
    level set, it is set to :data:`logging.INFO`. If there is no handler
    for the logger's effective level, a :class:`logging.StreamHandler`
    is added.
    'u'Log a message to the 'werkzeug' logger.

    The logger is created the first time it is needed. If there is no
    level set, it is set to :data:`logging.INFO`. If there is no handler
    for the logger's effective level, a :class:`logging.StreamHandler`
    is added.
    'b'werkzeug'b'_TAccessorValue'u'_TAccessorValue'b'Baseclass for `environ_property` and `header_property`.'u'Baseclass for `environ_property` and `header_property`.'b'read only property'u'read only property'b'idna'u'idna'b'-?\d+'u'-?\d+'b'-?\d+\.\d+'u'-?\d+\.\d+'b'Parse an int only if it is only ASCII digits and ``-``.

    This disallows ``+``, ``_``, and non-ASCII digits, which are accepted by ``int`` but
    are not allowed in HTTP header values.
    'u'Parse an int only if it is only ASCII digits and ``-``.

    This disallows ``+``, ``_``, and non-ASCII digits, which are accepted by ``int`` but
    are not allowed in HTTP header values.
    'b'Parse a float only if it is only ASCII digits and ``-``, and contains digits
    before and after the ``.``.

    This disallows ``+``, ``_``, non-ASCII digits, and ``.123``, which are accepted by
    ``float`` but are not allowed in HTTP header values.
    'u'Parse a float only if it is only ASCII digits and ``-``, and contains digits
    before and after the ``.``.

    This disallows ``+``, ``_``, non-ASCII digits, and ``.123``, which are accepted by
    ``float`` but are not allowed in HTTP header values.
    'u'werkzeug._internal'u'_internal'u'A buffered reader and writer object together.

A buffered reader object and buffered writer object put together to
form a sequential IO object that can read and write. This is typically
used with a socket or two-way pipe.

reader and writer are RawIOBase objects that are readable and
writeable respectively. If the buffer_size is omitted it defaults to
DEFAULT_BUFFER_SIZE.'u'BufferedRWPair.closed'peekreadinto1u'Base class for buffered IO objects.

The main difference with RawIOBase is that the read() method
supports omitting the size argument, and does not have a default
implementation that defers to readinto().

In addition, read(), readinto() and write() may raise
BlockingIOError if the underlying raw stream is in non-blocking
mode and not ready; unlike their raw counterparts, they will never
return None.

A typical implementation should not inherit from a RawIOBase
implementation, but wrap one.
'_io._BufferedIOBase_io.BufferedRWPairBufferedRWPairu'A buffered interface to random access streams.

The constructor creates a reader and writer for a seekable stream,
raw, given in the first argument. If the buffer_size is omitted it
defaults to DEFAULT_BUFFER_SIZE.'_dealloc_warnu'BufferedRandom.closed'u'BufferedRandom.mode'u'BufferedRandom.name'raw_io.BufferedRandomBufferedRandomu'Create a new buffered reader using the given readable raw IO object.'u'BufferedReader.closed'u'BufferedReader.mode'u'BufferedReader.name'_io.BufferedReaderBufferedReaderu'A buffer for a writeable sequential RawIO object.

The constructor creates a BufferedWriter for the given writeable raw
stream. If the buffer_size is not given, it defaults to
DEFAULT_BUFFER_SIZE.'u'BufferedWriter.closed'u'BufferedWriter.mode'u'BufferedWriter.name'_io.BufferedWriteru'Buffered I/O implementation using an in-memory bytes buffer.'u'True if the file is closed.'u'BytesIO.closed'getbuffer_io.BytesIOu'Open a file.

The mode can be 'r' (default), 'w', 'x' or 'a' for reading,
writing, exclusive creation or appending.  The file will be created if it
doesn't exist when opened for writing or appending; it will be truncated
when opened for writing.  A FileExistsError will be raised if it already
exists when opened for creating. Opening a file for creating implies
writing so this mode behaves in a similar way to 'w'.Add a '+' to the mode
to allow simultaneous reading and writing. A custom opener can be used by
passing a callable as *opener*. The underlying file descriptor for the file
object is then obtained by calling opener with (*name*, *flags*).
*opener* must return an open file descriptor (passing os.open as *opener*
results in functionality similar to passing None).'_blksizeu'True if the file is closed'u'FileIO.closed'u'True if the file descriptor will be closed by close().'u'FileIO.closefd'closefdu'String giving the file mode'u'FileIO.mode'u'Base class for raw binary I/O.'_io._RawIOBase_io.FileIOu'Codec used when reading a file in universal newlines mode.

It wraps another incremental decoder, translating \r\n and \r into \n.
It also records the types of newlines encountered.  When used with
translate=False, it ensures that the newline sequence is returned in
one piece. When used with decoder=None, it expects unicode strings as
decode input and translates newlines without first invoking an external
decoder.'getstateu'IncrementalNewlineDecoder.newlines'setstate_io.IncrementalNewlineDecoderu'Text I/O implementation using an in-memory buffer.

The initial_value argument sets the value of object.  The newline
argument is like the one of TextIOWrapper's constructor.'u'StringIO.closed'u'StringIO.line_buffering'u'StringIO.newlines'_io.StringIOu'UnsupportedOperation.__weakref__'io.UnsupportedOperation_BufferedIOBase_IOBase_RawIOBase_TextIOBaseu'Open a console buffer by file descriptor.

The mode can be 'rb' (default), or 'wb' for reading or writing bytes. All
other mode characters will be ignored. Mode 'b' will be assumed if it is
omitted. The *opener* parameter is always ignored.'u'_WindowsConsoleIO.closed'u'_WindowsConsoleIO.closefd'u'_WindowsConsoleIO.mode'_io._WindowsConsoleIO_WindowsConsoleIOu'The io module provides the Python interfaces to stream handling. The
builtin open function is defined in this module.

At the top of the I/O hierarchy is the abstract base class IOBase. It
defines the basic interface to a stream. Note, however, that there is no
separation between reading and writing to streams; implementations are
allowed to raise an OSError if they do not support a given operation.

Extending IOBase is RawIOBase which deals simply with the reading and
writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide
an interface to OS files.

BufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its
subclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer
streams that are readable, writable, and both respectively.
BufferedRandom provides a buffered interface to random access
streams. BytesIO is a simple stream of in-memory bytes.

Another IOBase subclass, TextIOBase, deals with the encoding and decoding
of streams into text. TextIOWrapper, which extends it, is a buffered text
interface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO
is an in-memory stream for text.

Argument names are not part of the specification, and only the arguments
of open() are intended to be used as keyword arguments.

data:

DEFAULT_BUFFER_SIZE

   An int containing the default buffer size used by the module's buffered
   I/O classes. open() uses the file's blksize (as obtained by os.stat) if
   possible.
'List unique elements, preserving order. Remember all elements ever seen.seen_addbase_typeIf *obj* is iterable, return an iterator over its items::

        >>> obj = (1, 2, 3)
        >>> list(always_iterable(obj))
        [1, 2, 3]

    If *obj* is not iterable, return a one-item iterable containing *obj*::

        >>> obj = 1
        >>> list(always_iterable(obj))
        [1]

    If *obj* is ``None``, return an empty iterable:

        >>> obj = None
        >>> list(always_iterable(None))
        []

    By default, binary and text strings are not considered iterable::

        >>> obj = 'foo'
        >>> list(always_iterable(obj))
        ['foo']

    If *base_type* is set, objects for which ``isinstance(obj, base_type)``
    returns ``True`` won't be considered iterable.

        >>> obj = {'a': 1}
        >>> list(always_iterable(obj))  # Iterate over the dict's keys
        ['a']
        >>> list(always_iterable(obj, base_type=dict))  # Treat dicts as a unit
        [{'a': 1}]

    Set *base_type* to ``None`` to avoid any special handling and treat objects
    Python considers iterable as iterable:

        >>> obj = 'foo'
        >>> list(always_iterable(obj, base_type=None))
        ['f', 'o', 'o']
    # unique_everseen('AAAABBBCCDAABBB') --> A B C D# unique_everseen('ABBCcAD', str.lower) --> A B C D# copied from more_itertools 8.8b'List unique elements, preserving order. Remember all elements ever seen.'u'List unique elements, preserving order. Remember all elements ever seen.'b'If *obj* is iterable, return an iterator over its items::

        >>> obj = (1, 2, 3)
        >>> list(always_iterable(obj))
        [1, 2, 3]

    If *obj* is not iterable, return a one-item iterable containing *obj*::

        >>> obj = 1
        >>> list(always_iterable(obj))
        [1]

    If *obj* is ``None``, return an empty iterable:

        >>> obj = None
        >>> list(always_iterable(None))
        []

    By default, binary and text strings are not considered iterable::

        >>> obj = 'foo'
        >>> list(always_iterable(obj))
        ['foo']

    If *base_type* is set, objects for which ``isinstance(obj, base_type)``
    returns ``True`` won't be considered iterable.

        >>> obj = {'a': 1}
        >>> list(always_iterable(obj))  # Iterate over the dict's keys
        ['a']
        >>> list(always_iterable(obj, base_type=dict))  # Treat dicts as a unit
        [{'a': 1}]

    Set *base_type* to ``None`` to avoid any special handling and treat objects
    Python considers iterable as iterable:

        >>> obj = 'foo'
        >>> list(always_iterable(obj, base_type=None))
        ['f', 'o', 'o']
    'u'If *obj* is iterable, return an iterator over its items::

        >>> obj = (1, 2, 3)
        >>> list(always_iterable(obj))
        [1, 2, 3]

    If *obj* is not iterable, return a one-item iterable containing *obj*::

        >>> obj = 1
        >>> list(always_iterable(obj))
        [1]

    If *obj* is ``None``, return an empty iterable:

        >>> obj = None
        >>> list(always_iterable(None))
        []

    By default, binary and text strings are not considered iterable::

        >>> obj = 'foo'
        >>> list(always_iterable(obj))
        ['foo']

    If *base_type* is set, objects for which ``isinstance(obj, base_type)``
    returns ``True`` won't be considered iterable.

        >>> obj = {'a': 1}
        >>> list(always_iterable(obj))  # Iterate over the dict's keys
        ['a']
        >>> list(always_iterable(obj, base_type=dict))  # Treat dicts as a unit
        [{'a': 1}]

    Set *base_type* to ``None`` to avoid any special handling and treat objects
    Python considers iterable as iterable:

        >>> obj = 'foo'
        >>> list(always_iterable(obj, base_type=None))
        ['f', 'o', 'o']
    'u'importlib_metadata._itertools'u'_itertools'_t_CompactJSONWrapper around json module that strips whitespace.payloadb'Wrapper around json module that strips whitespace.'u'Wrapper around json module that strips whitespace.'b'ensure_ascii'u'ensure_ascii'b'separators'u'separators'u'itsdangerous._json'u'json speedups
'encode_basestringencode_basestring_asciiu'_iterencode(obj, _current_indent_level) -> iterable'item_separatorkey_separator_json.Encodermake_encoderu'JSON scanner object'_json.Scannermake_scannerscanstringCHAR_MAXu'locale'locale.ErrorLC_ALLLC_COLLATELC_CTYPELC_MONETARYLC_NUMERICLC_TIMEu'Support for POSIX locales.'localeconvstrcollstrxfrmu'md5.block_size'u'md5.digest_size'u'md5.name'_md5.md5MD5Typemd5_md5_Tfailobj
        Return all values associated with a possibly multi-valued key.
        
        A JSON-compatible form of the metadata.
        
    A minimal subset of pathlib.Path required by PathDistribution.
    # overload per python/importlib_metadata#435b'_T'u'_T'b'
        Return all values associated with a possibly multi-valued key.
        'u'
        Return all values associated with a possibly multi-valued key.
        'b'
        A JSON-compatible form of the metadata.
        'u'
        A JSON-compatible form of the metadata.
        'b'
    A minimal subset of pathlib.Path required by PathDistribution.
    'u'
    A minimal subset of pathlib.Path required by PathDistribution.
    'u'importlib_metadata._meta'u'_meta'Replace the characters ``&``, ``<``, ``>``, ``'``, and ``"`` in
    the string with HTML-safe sequences. Use this if you need to display
    text that might contain such characters in HTML.

    If the object has an ``__html__`` method, it is called and the
    return value is assumed to already be safe for HTML.

    :param s: An object to be converted to a string and escaped.
    :return: A :class:`Markup` string with the escaped text.
    &#39;&#34;Like :func:`escape` but treats ``None`` as the empty string.
    Useful with optional values, as otherwise you get the string
    ``'None'`` when the value is ``None``.

    >>> escape(None)
    Markup('None')
    >>> escape_silent(None)
    Markup('')
    Convert an object to a string if it isn't already. This preserves
    a :class:`Markup` string rather than converting it back to a basic
    string, so it will still be marked as safe and won't be escaped
    again.

    >>> value = escape("<User 1>")
    >>> value
    Markup('&lt;User 1&gt;')
    >>> escape(str(value))
    Markup('&amp;lt;User 1&amp;gt;')
    >>> escape(soft_str(value))
    Markup('&lt;User 1&gt;')
    b'Replace the characters ``&``, ``<``, ``>``, ``'``, and ``"`` in
    the string with HTML-safe sequences. Use this if you need to display
    text that might contain such characters in HTML.

    If the object has an ``__html__`` method, it is called and the
    return value is assumed to already be safe for HTML.

    :param s: An object to be converted to a string and escaped.
    :return: A :class:`Markup` string with the escaped text.
    'u'Replace the characters ``&``, ``<``, ``>``, ``'``, and ``"`` in
    the string with HTML-safe sequences. Use this if you need to display
    text that might contain such characters in HTML.

    If the object has an ``__html__`` method, it is called and the
    return value is assumed to already be safe for HTML.

    :param s: An object to be converted to a string and escaped.
    :return: A :class:`Markup` string with the escaped text.
    'b'&#39;'u'&#39;'b'&#34;'u'&#34;'b'Like :func:`escape` but treats ``None`` as the empty string.
    Useful with optional values, as otherwise you get the string
    ``'None'`` when the value is ``None``.

    >>> escape(None)
    Markup('None')
    >>> escape_silent(None)
    Markup('')
    'u'Like :func:`escape` but treats ``None`` as the empty string.
    Useful with optional values, as otherwise you get the string
    ``'None'`` when the value is ``None``.

    >>> escape(None)
    Markup('None')
    >>> escape_silent(None)
    Markup('')
    'b'Convert an object to a string if it isn't already. This preserves
    a :class:`Markup` string rather than converting it back to a basic
    string, so it will still be marked as safe and won't be escaped
    again.

    >>> value = escape("<User 1>")
    >>> value
    Markup('&lt;User 1&gt;')
    >>> escape(str(value))
    Markup('&amp;lt;User 1&amp;gt;')
    >>> escape(soft_str(value))
    Markup('&lt;User 1&gt;')
    'u'Convert an object to a string if it isn't already. This preserves
    a :class:`Markup` string rather than converting it back to a basic
    string, so it will still be marked as safe and won't be escaped
    again.

    >>> value = escape("<User 1>")
    >>> value
    Markup('&lt;User 1&gt;')
    >>> escape(str(value))
    Markup('&amp;lt;User 1&amp;gt;')
    >>> escape(soft_str(value))
    Markup('&lt;User 1&gt;')
    'u'markupsafe._native'u'_native'u'Opcode support module.'stack_effect_opcodeu'Operator interface.

This module exports a set of functions implemented in C corresponding
to the intrinsic operators of Python.  For example, operator.add(x, y)
is equivalent to the expression x+y.  The function names are those
used for special methods; variants without leading and trailing
'__' are also provided for convenience.'_compare_digestand_u'attrgetter(attr, ...) --> attrgetter object

Return a callable object that fetches the given attribute(s) from its operand.
After f = attrgetter('name'), the call f(r) returns r.name.
After g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date).
After h = attrgetter('name.first', 'name.last'), the call h(r) returns
(r.name.first, r.name.last).'operator.attrgetterattrgetterconcatcontainscountOfdelitemfloordivgegetitemgtiaddiandiconcatifloordivilshiftimatmulimodimulindexOfinvinvertioripowirshiftis_is_notisubu'itemgetter(item, ...) --> itemgetter object

Return a callable object that fetches the given item(s) from its operand.
After f = itemgetter(2), the call f(r) returns r[2].
After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])'operator.itemgetteritruedivixorlelength_hintlshiftltmatmulu'methodcaller(name, ...) --> methodcaller object

Return a callable object that calls the given method on its operand.
After f = methodcaller('name'), the call f(r) returns r.name().
After g = methodcaller('name', 'date', foo=1), the call g(r) returns
r.name('date', foo=1).'operator.methodcallermulnenegnot_or_posrshiftsetitemtruedivtruthxor_operatorShared OS X support functions.compiler_fixupcustomize_config_varsget_platform_osxCFLAGSLDFLAGSCPPFLAGSBASECFLAGSBLDSHAREDLDSHAREDCCCXXPY_LDFLAGSPY_CPPFLAGSPY_CORE_CFLAGSPY_CORE_LDFLAGS_UNIVERSAL_CONFIG_VARS_COMPILER_CONFIG_VARS_OSX_SUPPORT_INITIAL__INITPRE_find_executableTries to find 'executable' in the directories listed in 'path'.

    A string listing directories separated by 'os.pathsep'; defaults to
    os.environ['PATH'].  Returns the complete filename or None if not found.
    PATHpathsep.exe_read_outputcommandstringcapture_stderrOutput from successful command execution or None/tmp/_osx_support.%sw+bclosing%s >'%s' 2>&1%s 2>/dev/null >'%s'_find_build_tooltoolnameFind a build tool on current path or using xcrun/usr/bin/xcrun -find %s_SYSTEM_VERSION_get_system_versionReturn the OS X system version as a string/System/Library/CoreServices/SystemVersion.plist<key>ProductUserVisibleVersion</key>\s*<string>(.*?)</string>r'<key>ProductUserVisibleVersion</key>\s*'r'<string>(.*?)</string>'_SYSTEM_VERSION_TUPLE_get_system_version_tuple
    Return the macOS system version as a tuple

    The return value is safe to use to compare
    two version numbers.
    osx_version_remove_original_values_config_varsRemove original unmodified values for testing_save_modified_valuecvnewvalueSave modified and original unmodified value of configuration varoldvalue_cache_default_sysroot_default_sysrootcc Returns the root of the default SDK for this system, or '/' %s -c -E -v - </dev/nullin_incdirs#include <...>End of search list/usr/include.sdk/usr/include_supports_universal_buildsReturns True if universal builds are supported on this system_supports_arm64_buildsReturns True if arm64 builds are supported on this system_find_appropriate_compilerFind appropriate C compiler for extension module buildsoldccclanggcc'%s' --version'"'"'llvm-gccCannot locate working compilercv_split++_remove_universal_flagsRemove all universal build arguments from config vars-arch\s+\w+\s-isysroot\s*\S+_remove_unsupported_archsRemove any unsupported archs from config vars-arch\s+ppcecho 'int main{};' | '%s' -c -arch ppc -x c -o /dev/null /dev/null 2>/dev/null"""echo 'int main{};' | """"""'%s' -c -arch ppc -x c -o /dev/null /dev/null 2>/dev/null"""-arch\s+ppc\w*\s_override_all_archsAllow override of all archs with ARCHFLAGS env varARCHFLAGSarch-arch_check_for_unavailable_sdkRemove references to any SDKs not available-isysroot\s*(\S+)sdk-isysroot\s*\S+(?:\s|$)compiler_socc_args
    This function will strip '-isysroot PATH' and '-arch ARCH' from the
    compile flags if the user has specified one them in extra_compile_flags.

    This is needed because '-arch ARCH' adds another architecture to the
    build, without a way to remove an architecture. Furthermore GCC will
    barf if multiple '-isysroot' arguments are present.
    stripArchstripSysroot-isysrootidxarm64sysrootargvarCompiling with an SDK that doesn't seem to exist: %sPlease check your Xcode installationCustomize Python build configuration variables.

    Called internally from sysconfig with a mutable mapping
    containing name/value pairs parsed from the configured
    makefile used to build this interpreter.  Returns
    the mapping updated as needed to reflect the environment
    in which the interpreter is running; in the case of
    a Python from a binary installer, the installed
    environment may be very different from the build
    environment, i.e. different OS levels, different
    built tools, different available CPU architectures.

    This customization is performed whenever
    distutils.sysconfig.get_config_vars() is first
    called.  It may be used in environments where no
    compilers are present, i.e. when installing pure
    Python dists.  Customization of compiler paths
    and detection of unavailable archs is deferred
    until the first extension module build is
    requested (in distutils.sysconfig.customize_compiler).

    Currently called from distutils.sysconfig
    Customize compiler path and configuration variables.

    This customization is performed when the first
    extension module build is requested
    in distutils.sysconfig.customize_compiler).
    osnameFilter values for get_platform()MACOSX_DEPLOYMENT_TARGETmacvermacreleasemacosxfat-arch\s+(\S+)archsx86_64universal2i386ppcintelfat3ppc64fat64universalDon't know machine value for archs=%rPowerPCPower_Macintosh# configuration variables that may contain universal build flags,# like "-arch" or "-isdkroot", that may need customization for# the user environment# configuration variables that may contain compiler calls# prefix added to original configuration variable names# the file exists, we have a shot at spawn working# Similar to os.popen(commandstring, "r").read(),# but without actually using os.popen because that# function is not usable during python bootstrap.# tempfile is also not available then.# Reading this plist is a documented way to get the system# version (see the documentation for the Gestalt Manager)# We avoid using platform.mac_ver to avoid possible bootstrap issues during# the build of Python itself (distutils is used to build standard library# extensions).# We're on a plain darwin box, fall back to the default# behaviour.# else: fall back to the default behaviour# This is needed for higher-level cross-platform tests of get_platform.# As an approximation, we assume that if we are running on 10.4 or above,# then we are running with an Xcode environment that supports universal# builds, in particular -isysroot and -arch arguments to the compiler. This# is in support of allowing 10.4 universal builds to run on 10.3.x systems.# There are two sets of systems supporting macOS/arm64 builds:# 1. macOS 11 and later, unconditionally# 2. macOS 10.15 with Xcode 12.2 or later# For now the second category is ignored.# Issue #13590:#    The OSX location for the compiler varies between OSX#    (or rather Xcode) releases.  With older releases (up-to 10.5)#    the compiler is in /usr/bin, with newer releases the compiler#    can only be found inside Xcode.app if the "Command Line Tools"#    are not installed.#    Furthermore, the compiler that can be used varies between#    Xcode releases. Up to Xcode 4 it was possible to use 'gcc-4.2'#    as the compiler, after that 'clang' should be used because#    gcc-4.2 is either not present, or a copy of 'llvm-gcc' that#    miscompiles Python.# skip checks if the compiler was overridden with a CC env variable# The CC config var might contain additional arguments.# Ignore them while searching.# Compiler is not found on the shell search PATH.# Now search for clang, first on PATH (if the Command LIne# Tools have been installed in / or if the user has provided# another location via CC).  If not found, try using xcrun# to find an uninstalled clang (within a selected Xcode).# NOTE: Cannot use subprocess here because of bootstrap# issues when building Python itself (and os.popen is# implemented on top of subprocess and is therefore not# usable as well)# Compiler is GCC, check if it is LLVM-GCC# Found LLVM-GCC, fall back to clang# Found a replacement compiler.# Modify config vars using new compiler, if not already explicitly# overridden by an env variable, preserving additional arguments.# Do not alter a config var explicitly overridden by env var# Different Xcode releases support different sets for '-arch'# flags. In particular, Xcode 4.x no longer supports the# PPC architectures.# This code automatically removes '-arch ppc' and '-arch ppc64'# when these are not supported. That makes it possible to# build extensions on OSX 10.7 and later with the prebuilt# 32-bit installer on the python.org website.# issues when building Python itself# The compile failed for some reason.  Because of differences# across Xcode and compiler versions, there is no reliable way# to be sure why it failed.  Assume here it was due to lack of# PPC support and remove the related '-arch' flags from each# config variables not explicitly overridden by an environment# variable.  If the error was for some other reason, we hope the# failure will show up again when trying to compile an extension# module.# NOTE: This name was introduced by Apple in OSX 10.5 and# is used by several scripting languages distributed with# that OS release.# If we're on OSX 10.5 or later and the user tries to# compile an extension using an SDK that is not present# on the current machine it is better to not use an SDK# than to fail.  This is particularly important with# the standalone Command Line Tools alternative to a# full-blown Xcode install since the CLT packages do not# provide SDKs.  If the SDK is not present, it is assumed# that the header files and dev libs have been installed# to /usr and /System/Library by either a standalone CLT# package or the CLT component within Xcode.# OSX before 10.4.0, these don't support -arch and -isysroot at# all.# Strip this argument and the next one:# Look for "-arch arm64" and drop that# User specified different -arch flags in the environ,# see also distutils.sysconfig# It's '-isysroot/some/path' in one arg# Check if the SDK that is used during compilation actually exists,# the universal build requires the usage of a universal SDK and not all# users have that installed by default.# On Mac OS X before 10.4, check if -arch and -isysroot# are in CFLAGS or LDFLAGS and remove them if they are.# This is needed when building extensions on a 10.3 system# using a universal build of python.# Allow user to override all archs with ARCHFLAGS env var# Remove references to sdks that are not found# Find a compiler to use for extension module builds# Remove ppc arch flags if not supported here# called from get_platform() in sysconfig and distutils.util# For our purposes, we'll assume that the system version from# distutils' perspective is what MACOSX_DEPLOYMENT_TARGET is set# to. This makes the compatibility story a bit more sane because the# machine is going to compile and link as if it were# MACOSX_DEPLOYMENT_TARGET.# Use the original CFLAGS value, if available, so that we# return the same machine type for the platform string.# Otherwise, distutils may consider this a cross-compiling# case and disallow installs.# assume no universal support# The universal build will build fat binaries, but not on# systems before 10.4# On OSX the machine type returned by uname is always the# 32-bit variant, even if the executable architecture is# the 64-bit variant# Pick a sane name for the PPC architecture.# See 'i386' caseb'Shared OS X support functions.'u'Shared OS X support functions.'b'compiler_fixup'u'compiler_fixup'b'customize_config_vars'u'customize_config_vars'b'customize_compiler'u'customize_compiler'b'get_platform_osx'u'get_platform_osx'b'CFLAGS'u'CFLAGS'b'LDFLAGS'u'LDFLAGS'b'CPPFLAGS'u'CPPFLAGS'b'BASECFLAGS'u'BASECFLAGS'b'BLDSHARED'u'BLDSHARED'b'LDSHARED'u'LDSHARED'b'CC'u'CC'b'CXX'u'CXX'b'PY_LDFLAGS'u'PY_LDFLAGS'b'PY_CPPFLAGS'u'PY_CPPFLAGS'b'PY_CORE_CFLAGS'u'PY_CORE_CFLAGS'b'PY_CORE_LDFLAGS'u'PY_CORE_LDFLAGS'b'_OSX_SUPPORT_INITIAL_'u'_OSX_SUPPORT_INITIAL_'b'Tries to find 'executable' in the directories listed in 'path'.

    A string listing directories separated by 'os.pathsep'; defaults to
    os.environ['PATH'].  Returns the complete filename or None if not found.
    'u'Tries to find 'executable' in the directories listed in 'path'.

    A string listing directories separated by 'os.pathsep'; defaults to
    os.environ['PATH'].  Returns the complete filename or None if not found.
    'b'PATH'u'PATH'b'.exe'u'.exe'b'Output from successful command execution or None'u'Output from successful command execution or None'b'/tmp/_osx_support.%s'u'/tmp/_osx_support.%s'b'w+b'u'w+b'b'%s >'%s' 2>&1'u'%s >'%s' 2>&1'b'%s 2>/dev/null >'%s''u'%s 2>/dev/null >'%s''b'Find a build tool on current path or using xcrun'u'Find a build tool on current path or using xcrun'b'/usr/bin/xcrun -find %s'u'/usr/bin/xcrun -find %s'b'Return the OS X system version as a string'u'Return the OS X system version as a string'b'/System/Library/CoreServices/SystemVersion.plist'u'/System/Library/CoreServices/SystemVersion.plist'b'<key>ProductUserVisibleVersion</key>\s*<string>(.*?)</string>'u'<key>ProductUserVisibleVersion</key>\s*<string>(.*?)</string>'b'
    Return the macOS system version as a tuple

    The return value is safe to use to compare
    two version numbers.
    'u'
    Return the macOS system version as a tuple

    The return value is safe to use to compare
    two version numbers.
    'b'Remove original unmodified values for testing'u'Remove original unmodified values for testing'b'Save modified and original unmodified value of configuration var'u'Save modified and original unmodified value of configuration var'b' Returns the root of the default SDK for this system, or '/' 'u' Returns the root of the default SDK for this system, or '/' 'b'%s -c -E -v - </dev/null'u'%s -c -E -v - </dev/null'b'#include <...>'u'#include <...>'b'End of search list'u'End of search list'b'/usr/include'u'/usr/include'b'.sdk/usr/include'u'.sdk/usr/include'b'Returns True if universal builds are supported on this system'u'Returns True if universal builds are supported on this system'b'Returns True if arm64 builds are supported on this system'u'Returns True if arm64 builds are supported on this system'b'Find appropriate C compiler for extension module builds'u'Find appropriate C compiler for extension module builds'b'clang'u'clang'b'gcc'u'gcc'b''%s' --version'u''%s' --version'b''"'"''u''"'"''b'llvm-gcc'u'llvm-gcc'b'Cannot locate working compiler'u'Cannot locate working compiler'b'++'u'++'b'Remove all universal build arguments from config vars'u'Remove all universal build arguments from config vars'b'-arch\s+\w+\s'u'-arch\s+\w+\s'b'-isysroot\s*\S+'u'-isysroot\s*\S+'b'Remove any unsupported archs from config vars'u'Remove any unsupported archs from config vars'b'-arch\s+ppc'u'-arch\s+ppc'b'echo 'int main{};' | '%s' -c -arch ppc -x c -o /dev/null /dev/null 2>/dev/null'u'echo 'int main{};' | '%s' -c -arch ppc -x c -o /dev/null /dev/null 2>/dev/null'b'-arch\s+ppc\w*\s'u'-arch\s+ppc\w*\s'b'Allow override of all archs with ARCHFLAGS env var'u'Allow override of all archs with ARCHFLAGS env var'b'ARCHFLAGS'u'ARCHFLAGS'b'-arch'u'-arch'b'Remove references to any SDKs not available'u'Remove references to any SDKs not available'b'-isysroot\s*(\S+)'u'-isysroot\s*(\S+)'b'-isysroot\s*\S+(?:\s|$)'u'-isysroot\s*\S+(?:\s|$)'b'
    This function will strip '-isysroot PATH' and '-arch ARCH' from the
    compile flags if the user has specified one them in extra_compile_flags.

    This is needed because '-arch ARCH' adds another architecture to the
    build, without a way to remove an architecture. Furthermore GCC will
    barf if multiple '-isysroot' arguments are present.
    'u'
    This function will strip '-isysroot PATH' and '-arch ARCH' from the
    compile flags if the user has specified one them in extra_compile_flags.

    This is needed because '-arch ARCH' adds another architecture to the
    build, without a way to remove an architecture. Furthermore GCC will
    barf if multiple '-isysroot' arguments are present.
    'b'-isysroot'u'-isysroot'b'arm64'u'arm64'b'Compiling with an SDK that doesn't seem to exist: %s'u'Compiling with an SDK that doesn't seem to exist: %s'b'Please check your Xcode installation'u'Please check your Xcode installation'b'Customize Python build configuration variables.

    Called internally from sysconfig with a mutable mapping
    containing name/value pairs parsed from the configured
    makefile used to build this interpreter.  Returns
    the mapping updated as needed to reflect the environment
    in which the interpreter is running; in the case of
    a Python from a binary installer, the installed
    environment may be very different from the build
    environment, i.e. different OS levels, different
    built tools, different available CPU architectures.

    This customization is performed whenever
    distutils.sysconfig.get_config_vars() is first
    called.  It may be used in environments where no
    compilers are present, i.e. when installing pure
    Python dists.  Customization of compiler paths
    and detection of unavailable archs is deferred
    until the first extension module build is
    requested (in distutils.sysconfig.customize_compiler).

    Currently called from distutils.sysconfig
    'u'Customize Python build configuration variables.

    Called internally from sysconfig with a mutable mapping
    containing name/value pairs parsed from the configured
    makefile used to build this interpreter.  Returns
    the mapping updated as needed to reflect the environment
    in which the interpreter is running; in the case of
    a Python from a binary installer, the installed
    environment may be very different from the build
    environment, i.e. different OS levels, different
    built tools, different available CPU architectures.

    This customization is performed whenever
    distutils.sysconfig.get_config_vars() is first
    called.  It may be used in environments where no
    compilers are present, i.e. when installing pure
    Python dists.  Customization of compiler paths
    and detection of unavailable archs is deferred
    until the first extension module build is
    requested (in distutils.sysconfig.customize_compiler).

    Currently called from distutils.sysconfig
    'b'Customize compiler path and configuration variables.

    This customization is performed when the first
    extension module build is requested
    in distutils.sysconfig.customize_compiler).
    'u'Customize compiler path and configuration variables.

    This customization is performed when the first
    extension module build is requested
    in distutils.sysconfig.customize_compiler).
    'b'Filter values for get_platform()'u'Filter values for get_platform()'b'MACOSX_DEPLOYMENT_TARGET'u'MACOSX_DEPLOYMENT_TARGET'b'macosx'u'macosx'b'fat'u'fat'b'-arch\s+(\S+)'u'-arch\s+(\S+)'b'x86_64'u'x86_64'b'universal2'u'universal2'b'i386'u'i386'b'ppc'u'ppc'b'intel'u'intel'b'fat3'u'fat3'b'ppc64'u'ppc64'b'fat64'u'fat64'b'universal'u'universal'b'Don't know machine value for archs=%r'u'Don't know machine value for archs=%r'b'PowerPC'u'PowerPC'b'Power_Macintosh'u'Power_Macintosh'u'Python.Python39.lib._osx_support'u'Python39.lib._osx_support'u'lib._osx_support'u'_osx_support'Email address parsing code.

Lifted directly from rfc822.py.  This should eventually be rewritten.
mktime_tzparsedateparsedate_tzcalendarSPACEEMPTYSTRINGCOMMASPACEjanfebmaraprmayjunjulaugnovjanuaryfebruarymarchapriljunejulyaugustseptemberoctobernovemberdecember_monthnamesmontuewedthufrisatsun_daynamesUTUTCGMTADTESTEDT600CSTCDT700MSTMDT800PSTPDT_timezonesConvert a date string to a time tuple.

    Accounts for military timezones.
    _parsedate_tzConvert date to extended time tuple.

    The last (additional) element is the time zone offset in seconds, except if
    the timezone was specified as -0000.  In that case the last element is
    None.  This indicates a UTC timestamp that explicitly declaims knowledge of
    the source timezone, as opposed to a +0000 timestamp that indicates the
    source timezone really was UTC.

    stuffddmmyytmthhtmmtss6819002000tzoffsettzsign3600Convert a time string to a time tuple.Turn a 10-tuple as returned by parsedate_tz() into a POSIX timestamp.mktimetimegmPrepare string to be used in a quoted string.

    Turns backslash and double quote characters into quoted pairs.  These
    are the only characters that need to be quoted inside a quoted string.
    Does not add the surrounding double quotes.
    \"AddrlistClassAddress parser class by Ben Escoto.

    To understand what this class does, it helps to have a copy of RFC 2822 in
    front of you.

    Note: this class interface is deprecated and may be removed in the future.
    Use email.utils.AddressList instead.
    fieldInitialize a new instance.

        `field' is an unparsed address header field, containing
        one or more addresses.
        ()<>@,:;."[]specials 	LWSCRFWSatomendsphraseendscommentlistgotonextSkip white space and extract comments.wslist
getcommentgetaddrlistParse all addresses.

        Returns a list containing all of the addresses.
        getaddressadParse the next address.oldposoldclgetphraselistplistreturnlist.@getaddrspecaddrspecfieldlengetrouteaddrrouteaddrParse a route address (Return-path value).

        This method just skips all the route stuff and returns the addrspec.
        expectrouteadlistgetdomainParse an RFC 2822 addr-spec.aslistpreserve_ws"%s"getquotegetatomGet the complete domain name from an address.sdlistgetdomainliteralgetdelimitedbegincharendcharsallowcommentsParse a header fragment delimited by special characters.

        `beginchar' is the start character for the fragment.
        If self is not looking at an instance of `beginchar' then
        getdelimited returns the empty string.

        `endchars' is a sequence of allowable end-delimiting characters.
        Parsing stops when one of these is encountered.

        If `allowcomments' is non-zero, embedded RFC 2822 comments are allowed
        within the parsed fragment.
        slistGet a quote-delimited fragment from self's field."Get a parenthesis-delimited fragment from self's field.)Parse an RFC 2822 domain-literal.]Parse an RFC 2822 atom.

        Optional atomends specifies a different set of end token delimiters
        (the default is to use self.atomends).  This is used e.g. in
        getphraselist() since phrase endings must not include the `.' (which
        is legal in phrases).atomlistParse a sequence of RFC 2822 phrases.

        A phrase is a sequence of words, which are in turn either RFC 2822
        atoms or quoted-strings.  Phrases are canonicalized by squeezing all
        runs of continuous whitespace into one space.
        AddressListAn AddressList encapsulates a list of parsed RFC 2822 addresses.addresslistnewaddr# Copyright (C) 2002-2007 Python Software Foundation# Parse a date field# The timezone table does not include the military time zones defined# in RFC822, other than Z.  According to RFC1123, the description in# RFC822 gets the signs wrong, so we can't rely on any such time# zones.  RFC1123 recommends that numeric timezone indicators be used# instead of timezone names.# Atlantic (used in Canada)# Eastern# Central# Mountain# Pacific# This happens for whitespace-only input.# The FWS after the comma after the day-of-week is optional, so search and# adjust for this.# There's a dayname here. Skip it# RFC 850 date, deprecated# Dummy tz# Some non-compliant MUAs use '.' to separate time elements.# Check for a yy specified in two-digit format, then convert it to the# appropriate four-digit format, according to the POSIX standard. RFC 822# calls for a two-digit yy, but RFC 2822 (which obsoletes RFC 822)# mandates a 4-digit yy. For more information, see the documentation for# the time module.# The year is between 1969 and 1999 (inclusive).# The year is between 2000 and 2068 (inclusive).# Convert a timezone offset into seconds ; -0500 -> -18000# Daylight Saving Time flag is set to -1, since DST is unknown.# No zone info, so localtime is better assumption than GMT# Note that RFC 2822 now specifies `.' as obs-phrase, meaning that it# is obsolete syntax.  RFC 2822 requires that we recognize obsolete# syntax, so allow dots in phrases.# Bad email address technically, no domain.# email address is just an addrspec# this isn't very efficient since we start over# address is a group# Address is a phrase then a route addr# Invalid domain, return an empty address instead of returning a# local part to denote failed parsing.# bpo-34155: Don't parse domains with two `@` like# `a@malicious.org@important.com`.# have already advanced pos from getcomment# Set union# Set union, in-place# Set difference# Set difference, in-place# Make indexing, slices, and 'in' workb'Email address parsing code.

Lifted directly from rfc822.py.  This should eventually be rewritten.
'u'Email address parsing code.

Lifted directly from rfc822.py.  This should eventually be rewritten.
'b'mktime_tz'u'mktime_tz'b'parsedate'u'parsedate'b'parsedate_tz'u'parsedate_tz'b'jan'u'jan'b'feb'u'feb'b'mar'u'mar'b'apr'u'apr'b'may'u'may'b'jun'u'jun'b'jul'u'jul'b'aug'u'aug'b'sep'u'sep'b'oct'u'oct'b'nov'u'nov'b'dec'u'dec'b'january'u'january'b'february'u'february'b'march'u'march'b'april'u'april'b'june'u'june'b'july'u'july'b'august'u'august'b'september'u'september'b'october'u'october'b'november'u'november'b'december'u'december'b'mon'u'mon'b'tue'u'tue'b'wed'u'wed'b'thu'u'thu'b'fri'u'fri'b'sat'u'sat'b'sun'u'sun'b'UT'u'UT'b'UTC'u'UTC'b'GMT'u'GMT'b'AST'u'AST'b'ADT'u'ADT'b'EST'u'EST'b'EDT'u'EDT'b'CST'u'CST'b'CDT'u'CDT'b'MST'u'MST'b'MDT'u'MDT'b'PST'u'PST'b'PDT'u'PDT'b'Convert a date string to a time tuple.

    Accounts for military timezones.
    'u'Convert a date string to a time tuple.

    Accounts for military timezones.
    'b'Convert date to extended time tuple.

    The last (additional) element is the time zone offset in seconds, except if
    the timezone was specified as -0000.  In that case the last element is
    None.  This indicates a UTC timestamp that explicitly declaims knowledge of
    the source timezone, as opposed to a +0000 timestamp that indicates the
    source timezone really was UTC.

    'u'Convert date to extended time tuple.

    The last (additional) element is the time zone offset in seconds, except if
    the timezone was specified as -0000.  In that case the last element is
    None.  This indicates a UTC timestamp that explicitly declaims knowledge of
    the source timezone, as opposed to a +0000 timestamp that indicates the
    source timezone really was UTC.

    'b'Convert a time string to a time tuple.'u'Convert a time string to a time tuple.'b'Turn a 10-tuple as returned by parsedate_tz() into a POSIX timestamp.'u'Turn a 10-tuple as returned by parsedate_tz() into a POSIX timestamp.'b'Prepare string to be used in a quoted string.

    Turns backslash and double quote characters into quoted pairs.  These
    are the only characters that need to be quoted inside a quoted string.
    Does not add the surrounding double quotes.
    'u'Prepare string to be used in a quoted string.

    Turns backslash and double quote characters into quoted pairs.  These
    are the only characters that need to be quoted inside a quoted string.
    Does not add the surrounding double quotes.
    'b'\"'u'\"'b'Address parser class by Ben Escoto.

    To understand what this class does, it helps to have a copy of RFC 2822 in
    front of you.

    Note: this class interface is deprecated and may be removed in the future.
    Use email.utils.AddressList instead.
    'u'Address parser class by Ben Escoto.

    To understand what this class does, it helps to have a copy of RFC 2822 in
    front of you.

    Note: this class interface is deprecated and may be removed in the future.
    Use email.utils.AddressList instead.
    'b'Initialize a new instance.

        `field' is an unparsed address header field, containing
        one or more addresses.
        'u'Initialize a new instance.

        `field' is an unparsed address header field, containing
        one or more addresses.
        'b'()<>@,:;."[]'u'()<>@,:;."[]'b' 	'u' 	'u'
'b'Skip white space and extract comments.'u'Skip white space and extract comments.'b'
'u'
'b'Parse all addresses.

        Returns a list containing all of the addresses.
        'u'Parse all addresses.

        Returns a list containing all of the addresses.
        'b'Parse the next address.'u'Parse the next address.'b'.@'u'.@'b'Parse a route address (Return-path value).

        This method just skips all the route stuff and returns the addrspec.
        'u'Parse a route address (Return-path value).

        This method just skips all the route stuff and returns the addrspec.
        'b'Parse an RFC 2822 addr-spec.'u'Parse an RFC 2822 addr-spec.'b'"%s"'u'"%s"'b'Get the complete domain name from an address.'u'Get the complete domain name from an address.'b'Parse a header fragment delimited by special characters.

        `beginchar' is the start character for the fragment.
        If self is not looking at an instance of `beginchar' then
        getdelimited returns the empty string.

        `endchars' is a sequence of allowable end-delimiting characters.
        Parsing stops when one of these is encountered.

        If `allowcomments' is non-zero, embedded RFC 2822 comments are allowed
        within the parsed fragment.
        'u'Parse a header fragment delimited by special characters.

        `beginchar' is the start character for the fragment.
        If self is not looking at an instance of `beginchar' then
        getdelimited returns the empty string.

        `endchars' is a sequence of allowable end-delimiting characters.
        Parsing stops when one of these is encountered.

        If `allowcomments' is non-zero, embedded RFC 2822 comments are allowed
        within the parsed fragment.
        'b'Get a quote-delimited fragment from self's field.'u'Get a quote-delimited fragment from self's field.'b'"'u'"'b'Get a parenthesis-delimited fragment from self's field.'u'Get a parenthesis-delimited fragment from self's field.'b')'u')'b'Parse an RFC 2822 domain-literal.'u'Parse an RFC 2822 domain-literal.'b']'u']'b'Parse an RFC 2822 atom.

        Optional atomends specifies a different set of end token delimiters
        (the default is to use self.atomends).  This is used e.g. in
        getphraselist() since phrase endings must not include the `.' (which
        is legal in phrases).'u'Parse an RFC 2822 atom.

        Optional atomends specifies a different set of end token delimiters
        (the default is to use self.atomends).  This is used e.g. in
        getphraselist() since phrase endings must not include the `.' (which
        is legal in phrases).'b'Parse a sequence of RFC 2822 phrases.

        A phrase is a sequence of words, which are in turn either RFC 2822
        atoms or quoted-strings.  Phrases are canonicalized by squeezing all
        runs of continuous whitespace into one space.
        'u'Parse a sequence of RFC 2822 phrases.

        A phrase is a sequence of words, which are in turn either RFC 2822
        atoms or quoted-strings.  Phrases are canonicalized by squeezing all
        runs of continuous whitespace into one space.
        'b'An AddressList encapsulates a list of parsed RFC 2822 addresses.'u'An AddressList encapsulates a list of parsed RFC 2822 addresses.'u'Python39.lib.email._parseaddr'u'lib.email._parseaddr'u'email._parseaddr'u'_parseaddr'u'Wrapper for potentially out-of-band buffers'pickle.PickleBufferPickleBufferu'PickleError.__weakref__'_pickle.PickleErrorPickleErroru'This takes a binary file for writing a pickle data stream.

The optional *protocol* argument tells the pickler to use the given
protocol; supported protocols are 0, 1, 2, 3, 4 and 5.  The default
protocol is 4. It was introduced in Python 3.4, and is incompatible
with previous versions.

Specifying a negative protocol version selects the highest protocol
version supported.  The higher the protocol used, the more recent the
version of Python needed to read the pickle produced.

The *file* argument must have a write() method that accepts a single
bytes argument. It can thus be a file object opened for binary
writing, an io.BytesIO instance, or any other custom object that meets
this interface.

If *fix_imports* is True and protocol is less than 3, pickle will try
to map the new Python 3 names to the old module names used in Python
2, so that the pickle data stream is readable with Python 2.

If *buffer_callback* is None (the default), buffer views are
serialized into *file* as part of the pickle stream.

If *buffer_callback* is not None, then it can be called any number
of times with a buffer view.  If the callback returns a false value
(such as None), the given buffer is out-of-band; otherwise the
buffer is serialized in-band, i.e. inside the pickle stream.

It is an error if *buffer_callback* is not None and *protocol*
is None or smaller than 5.'clear_memodispatch_tablefastu'Pickler.memo'memou'Pickler.persistent_id'persistent_id_pickle.PicklerPickler_pickle.PicklingErroru'This takes a binary file for reading a pickle data stream.

The protocol version of the pickle is detected automatically, so no
protocol argument is needed.  Bytes past the pickled object's
representation are ignored.

The argument *file* must have two methods, a read() method that takes
an integer argument, and a readline() method that requires no
arguments.  Both methods should return bytes.  Thus *file* can be a
binary file object opened for reading, an io.BytesIO object, or any
other custom object that meets this interface.

Optional keyword arguments are *fix_imports*, *encoding* and *errors*,
which are used to control compatibility support for pickle stream
generated by Python 2.  If *fix_imports* is True, pickle will try to
map the old Python 2 names to the new names used in Python 3.  The
*encoding* and *errors* tell pickle how to decode 8-bit string
instances pickled by Python 2; these default to 'ASCII' and 'strict',
respectively.  The *encoding* can be 'bytes' to read these 8-bit
string instances as bytes objects.'find_classu'Unpickler.memo'u'Unpickler.persistent_load'persistent_load_pickle.UnpicklerUnpickler_pickle.UnpicklingErrorUnpicklingErroru'Optimized C implementation for the Python pickle module.'Policy framework for the email package.

Allows fine grained feature control of how the package parses and emits data.
_charsetemail.utils_has_surrogatesPolicyCompat32compat32_PolicyBasePolicy Object basic framework.

    This class is useless unless subclassed.  A subclass should define
    class attributes with defaults for any values that are to be
    managed by the Policy object.  The constructor will then allow
    non-default values to be set for these attributes at instance
    creation time.  The instance will be callable, taking these same
    attributes keyword arguments, and returning a new instance
    identical to the called instance except for those values changed
    by the keyword arguments.  Instances may be added, yielding new
    instances with any non-default values from the right hand
    operand overriding those in the left hand operand.  That is,

        A + B == A(<non-default values of B>)

    The repr of an instance can be used to reconstruct the object
    if and only if the repr of the values can be used to reconstruct
    those values.

    Create new Policy, possibly overriding some defaults.

        See class docstring for a list of overridable attributes.

        {!r} is an invalid keyword argument for {}{}={!r}cloneReturn a new instance with specified attributes changed.

        The new instance has the same attribute values as the current object,
        except for the changes passed in as keyword arguments.

        newpolicy{!r} object attribute {!r} is read-only{!r} object has no attribute {!r}Non-default values from right operand override those from left.

        The object returned is a new instance of the subclass.

        _append_docadded_doc_extend_docstringsControls for how messages are interpreted and formatted.

    Most of the classes and many of the methods in the email package accept
    Policy objects as parameters.  A Policy object contains a set of values and
    functions that control how input is interpreted and how output is rendered.
    For example, the parameter 'raise_on_defect' controls whether or not an RFC
    violation results in an error being raised or not, while 'max_line_length'
    controls the maximum length of output lines when a Message is serialized.

    Any valid attribute may be overridden when a Policy is created by passing
    it as a keyword argument to the constructor.  Policy objects are immutable,
    but a new Policy object can be created with only certain values changed by
    calling the Policy instance with keyword arguments.  Policy objects can
    also be added, producing a new Policy object in which the non-default
    attributes set in the right hand operand overwrite those specified in the
    left operand.

    Settable attributes:

    raise_on_defect     -- If true, then defects should be raised as errors.
                           Default: False.

    linesep             -- string containing the value to use as separation
                           between output lines.  Default '\n'.

    cte_type            -- Type of allowed content transfer encodings

                           7bit  -- ASCII only
                           8bit  -- Content-Transfer-Encoding: 8bit is allowed

                           Default: 8bit.  Also controls the disposition of
                           (RFC invalid) binary data in headers; see the
                           documentation of the binary_fold method.

    max_line_length     -- maximum length of lines, excluding 'linesep',
                           during serialization.  None or 0 means no line
                           wrapping is done.  Default is 78.

    mangle_from_        -- a flag that, when True escapes From_ lines in the
                           body of the message by putting a `>' in front of
                           them. This is used when the message is being
                           serialized by a generator. Default: True.

    message_factory     -- the class to use to create new message objects.
                           If the value is None, the default is Message.

    raise_on_defectlinesep8bitcte_type78max_line_lengthmangle_from_message_factoryhandle_defectdefectBased on policy, either raise defect or call register_defect.

            handle_defect(obj, defect)

        defect should be a Defect subclass, but in any case must be an
        Exception subclass.  obj is the object on which the defect should be
        registered if it is not raised.  If the raise_on_defect is True, the
        defect is raised as an error, otherwise the object and the defect are
        passed to register_defect.

        This method is intended to be called by parsers that discover defects.
        The email package parsers always call it with Defect instances.

        register_defectRecord 'defect' on 'obj'.

        Called by handle_defect if raise_on_defect is False.  This method is
        part of the Policy API so that Policy subclasses can implement custom
        defect handling.  The default implementation calls the append method of
        the defects attribute of obj.  The objects used by the email package by
        default that get passed to this method will always have a defects
        attribute with an append method.

        header_max_countReturn the maximum allowed number of headers named 'name'.

        Called when a header is added to a Message object.  If the returned
        value is not 0 or None, and there are already a number of headers with
        the name 'name' equal to the value returned, a ValueError is raised.

        Because the default behavior of Message's __setitem__ is to append the
        value to the list of headers, it is easy to create duplicate headers
        without realizing it.  This method allows certain headers to be limited
        in the number of instances of that header that may be added to a
        Message programmatically.  (The limit is not observed by the parser,
        which will faithfully produce as many headers as exist in the message
        being parsed.)

        The default implementation returns None for all header names.
        header_source_parsesourcelinesGiven a list of linesep terminated strings constituting the lines of
        a single header, return the (name, value) tuple that should be stored
        in the model.  The input lines should retain their terminating linesep
        characters.  The lines passed in by the email package may contain
        surrogateescaped binary data.
        header_store_parseGiven the header name and the value provided by the application
        program, return the (name, value) that should be stored in the model.
        header_fetch_parseGiven the header name and the value from the model, return the value
        to be returned to the application program that is requesting that
        header.  The value passed in by the email package may contain
        surrogateescaped binary data if the lines were parsed by a BytesParser.
        The returned value should not contain any surrogateescaped data.

        Given the header name and the value from the model, return a string
        containing linesep characters that implement the folding of the header
        according to the policy controls.  The value passed in by the email
        package may contain surrogateescaped binary data if the lines were
        parsed by a BytesParser.  The returned value should not contain any
        surrogateescaped data.

        fold_binaryGiven the header name and the value from the model, return binary
        data containing linesep characters that implement the folding of the
        header according to the policy controls.  The value passed in by the
        email package may contain surrogateescaped binary data.

        +
    This particular policy is the backward compatibility Policy.  It
    replicates the behavior of the email package version 5.1.
    _sanitize_headerHeaderUNKNOWN8BITheader_name+
        The name is parsed as everything up to the ':' and returned unmodified.
        The value is determined by stripping leading whitespace off the
        remainder of the first line, joining all subsequent lines together, and
        stripping any trailing carriage return or linefeed characters.

        +
        The name and value are returned unmodified.
        +
        If the value contains binary data, it is converted into a Header object
        using the unknown-8bit charset.  Otherwise it is returned unmodified.
        +
        Headers are folded using the Header folding algorithm, which preserves
        existing line breaks in the value, and wraps each resulting line to the
        max_line_length.  Non-ASCII binary data are CTE encoded using the
        unknown-8bit charset.

        _foldsanitize+
        Headers are folded using the Header folding algorithm, which preserves
        existing line breaks in the value, and wraps each resulting line to the
        max_line_length.  If cte_type is 7bit, non-ascii binary data is CTE
        encoded using the unknown-8bit charset.  Otherwise the original source
        header is used, with its existing line breaks and/or binary data.

        7bitfolded%s: maxlinelen# If the header value contains surrogates, return a Header using# the unknown-8bit charset to encode the bytes as encoded words.# Assume it is already a header object# If we have raw 8bit data in a byte string, we have no idea# what the encoding is.  There is no safe way to split this# string.  If it's ascii-subset, then we could do a normal# ascii split, but if it's multibyte then we could break the# string.  There's no way to know so the least harm seems to# be to not split the string and risk it being too long.# Assume it is a Header-like object.# The Header class interprets a value of None for maxlinelen as the# default value of 78, as recommended by RFC 2822.b'Policy framework for the email package.

Allows fine grained feature control of how the package parses and emits data.
'u'Policy framework for the email package.

Allows fine grained feature control of how the package parses and emits data.
'b'Policy'u'Policy'b'Compat32'u'Compat32'b'compat32'u'compat32'b'Policy Object basic framework.

    This class is useless unless subclassed.  A subclass should define
    class attributes with defaults for any values that are to be
    managed by the Policy object.  The constructor will then allow
    non-default values to be set for these attributes at instance
    creation time.  The instance will be callable, taking these same
    attributes keyword arguments, and returning a new instance
    identical to the called instance except for those values changed
    by the keyword arguments.  Instances may be added, yielding new
    instances with any non-default values from the right hand
    operand overriding those in the left hand operand.  That is,

        A + B == A(<non-default values of B>)

    The repr of an instance can be used to reconstruct the object
    if and only if the repr of the values can be used to reconstruct
    those values.

    'u'Policy Object basic framework.

    This class is useless unless subclassed.  A subclass should define
    class attributes with defaults for any values that are to be
    managed by the Policy object.  The constructor will then allow
    non-default values to be set for these attributes at instance
    creation time.  The instance will be callable, taking these same
    attributes keyword arguments, and returning a new instance
    identical to the called instance except for those values changed
    by the keyword arguments.  Instances may be added, yielding new
    instances with any non-default values from the right hand
    operand overriding those in the left hand operand.  That is,

        A + B == A(<non-default values of B>)

    The repr of an instance can be used to reconstruct the object
    if and only if the repr of the values can be used to reconstruct
    those values.

    'b'Create new Policy, possibly overriding some defaults.

        See class docstring for a list of overridable attributes.

        'u'Create new Policy, possibly overriding some defaults.

        See class docstring for a list of overridable attributes.

        'b'{!r} is an invalid keyword argument for {}'u'{!r} is an invalid keyword argument for {}'b'{}={!r}'u'{}={!r}'b'Return a new instance with specified attributes changed.

        The new instance has the same attribute values as the current object,
        except for the changes passed in as keyword arguments.

        'u'Return a new instance with specified attributes changed.

        The new instance has the same attribute values as the current object,
        except for the changes passed in as keyword arguments.

        'b'{!r} object attribute {!r} is read-only'u'{!r} object attribute {!r} is read-only'b'{!r} object has no attribute {!r}'u'{!r} object has no attribute {!r}'b'Non-default values from right operand override those from left.

        The object returned is a new instance of the subclass.

        'u'Non-default values from right operand override those from left.

        The object returned is a new instance of the subclass.

        'b'Controls for how messages are interpreted and formatted.

    Most of the classes and many of the methods in the email package accept
    Policy objects as parameters.  A Policy object contains a set of values and
    functions that control how input is interpreted and how output is rendered.
    For example, the parameter 'raise_on_defect' controls whether or not an RFC
    violation results in an error being raised or not, while 'max_line_length'
    controls the maximum length of output lines when a Message is serialized.

    Any valid attribute may be overridden when a Policy is created by passing
    it as a keyword argument to the constructor.  Policy objects are immutable,
    but a new Policy object can be created with only certain values changed by
    calling the Policy instance with keyword arguments.  Policy objects can
    also be added, producing a new Policy object in which the non-default
    attributes set in the right hand operand overwrite those specified in the
    left operand.

    Settable attributes:

    raise_on_defect     -- If true, then defects should be raised as errors.
                           Default: False.

    linesep             -- string containing the value to use as separation
                           between output lines.  Default '\n'.

    cte_type            -- Type of allowed content transfer encodings

                           7bit  -- ASCII only
                           8bit  -- Content-Transfer-Encoding: 8bit is allowed

                           Default: 8bit.  Also controls the disposition of
                           (RFC invalid) binary data in headers; see the
                           documentation of the binary_fold method.

    max_line_length     -- maximum length of lines, excluding 'linesep',
                           during serialization.  None or 0 means no line
                           wrapping is done.  Default is 78.

    mangle_from_        -- a flag that, when True escapes From_ lines in the
                           body of the message by putting a `>' in front of
                           them. This is used when the message is being
                           serialized by a generator. Default: True.

    message_factory     -- the class to use to create new message objects.
                           If the value is None, the default is Message.

    'u'Controls for how messages are interpreted and formatted.

    Most of the classes and many of the methods in the email package accept
    Policy objects as parameters.  A Policy object contains a set of values and
    functions that control how input is interpreted and how output is rendered.
    For example, the parameter 'raise_on_defect' controls whether or not an RFC
    violation results in an error being raised or not, while 'max_line_length'
    controls the maximum length of output lines when a Message is serialized.

    Any valid attribute may be overridden when a Policy is created by passing
    it as a keyword argument to the constructor.  Policy objects are immutable,
    but a new Policy object can be created with only certain values changed by
    calling the Policy instance with keyword arguments.  Policy objects can
    also be added, producing a new Policy object in which the non-default
    attributes set in the right hand operand overwrite those specified in the
    left operand.

    Settable attributes:

    raise_on_defect     -- If true, then defects should be raised as errors.
                           Default: False.

    linesep             -- string containing the value to use as separation
                           between output lines.  Default '\n'.

    cte_type            -- Type of allowed content transfer encodings

                           7bit  -- ASCII only
                           8bit  -- Content-Transfer-Encoding: 8bit is allowed

                           Default: 8bit.  Also controls the disposition of
                           (RFC invalid) binary data in headers; see the
                           documentation of the binary_fold method.

    max_line_length     -- maximum length of lines, excluding 'linesep',
                           during serialization.  None or 0 means no line
                           wrapping is done.  Default is 78.

    mangle_from_        -- a flag that, when True escapes From_ lines in the
                           body of the message by putting a `>' in front of
                           them. This is used when the message is being
                           serialized by a generator. Default: True.

    message_factory     -- the class to use to create new message objects.
                           If the value is None, the default is Message.

    'b'8bit'u'8bit'b'Based on policy, either raise defect or call register_defect.

            handle_defect(obj, defect)

        defect should be a Defect subclass, but in any case must be an
        Exception subclass.  obj is the object on which the defect should be
        registered if it is not raised.  If the raise_on_defect is True, the
        defect is raised as an error, otherwise the object and the defect are
        passed to register_defect.

        This method is intended to be called by parsers that discover defects.
        The email package parsers always call it with Defect instances.

        'u'Based on policy, either raise defect or call register_defect.

            handle_defect(obj, defect)

        defect should be a Defect subclass, but in any case must be an
        Exception subclass.  obj is the object on which the defect should be
        registered if it is not raised.  If the raise_on_defect is True, the
        defect is raised as an error, otherwise the object and the defect are
        passed to register_defect.

        This method is intended to be called by parsers that discover defects.
        The email package parsers always call it with Defect instances.

        'b'Record 'defect' on 'obj'.

        Called by handle_defect if raise_on_defect is False.  This method is
        part of the Policy API so that Policy subclasses can implement custom
        defect handling.  The default implementation calls the append method of
        the defects attribute of obj.  The objects used by the email package by
        default that get passed to this method will always have a defects
        attribute with an append method.

        'u'Record 'defect' on 'obj'.

        Called by handle_defect if raise_on_defect is False.  This method is
        part of the Policy API so that Policy subclasses can implement custom
        defect handling.  The default implementation calls the append method of
        the defects attribute of obj.  The objects used by the email package by
        default that get passed to this method will always have a defects
        attribute with an append method.

        'b'Return the maximum allowed number of headers named 'name'.

        Called when a header is added to a Message object.  If the returned
        value is not 0 or None, and there are already a number of headers with
        the name 'name' equal to the value returned, a ValueError is raised.

        Because the default behavior of Message's __setitem__ is to append the
        value to the list of headers, it is easy to create duplicate headers
        without realizing it.  This method allows certain headers to be limited
        in the number of instances of that header that may be added to a
        Message programmatically.  (The limit is not observed by the parser,
        which will faithfully produce as many headers as exist in the message
        being parsed.)

        The default implementation returns None for all header names.
        'u'Return the maximum allowed number of headers named 'name'.

        Called when a header is added to a Message object.  If the returned
        value is not 0 or None, and there are already a number of headers with
        the name 'name' equal to the value returned, a ValueError is raised.

        Because the default behavior of Message's __setitem__ is to append the
        value to the list of headers, it is easy to create duplicate headers
        without realizing it.  This method allows certain headers to be limited
        in the number of instances of that header that may be added to a
        Message programmatically.  (The limit is not observed by the parser,
        which will faithfully produce as many headers as exist in the message
        being parsed.)

        The default implementation returns None for all header names.
        'b'Given a list of linesep terminated strings constituting the lines of
        a single header, return the (name, value) tuple that should be stored
        in the model.  The input lines should retain their terminating linesep
        characters.  The lines passed in by the email package may contain
        surrogateescaped binary data.
        'u'Given a list of linesep terminated strings constituting the lines of
        a single header, return the (name, value) tuple that should be stored
        in the model.  The input lines should retain their terminating linesep
        characters.  The lines passed in by the email package may contain
        surrogateescaped binary data.
        'b'Given the header name and the value provided by the application
        program, return the (name, value) that should be stored in the model.
        'u'Given the header name and the value provided by the application
        program, return the (name, value) that should be stored in the model.
        'b'Given the header name and the value from the model, return the value
        to be returned to the application program that is requesting that
        header.  The value passed in by the email package may contain
        surrogateescaped binary data if the lines were parsed by a BytesParser.
        The returned value should not contain any surrogateescaped data.

        'u'Given the header name and the value from the model, return the value
        to be returned to the application program that is requesting that
        header.  The value passed in by the email package may contain
        surrogateescaped binary data if the lines were parsed by a BytesParser.
        The returned value should not contain any surrogateescaped data.

        'b'Given the header name and the value from the model, return a string
        containing linesep characters that implement the folding of the header
        according to the policy controls.  The value passed in by the email
        package may contain surrogateescaped binary data if the lines were
        parsed by a BytesParser.  The returned value should not contain any
        surrogateescaped data.

        'u'Given the header name and the value from the model, return a string
        containing linesep characters that implement the folding of the header
        according to the policy controls.  The value passed in by the email
        package may contain surrogateescaped binary data if the lines were
        parsed by a BytesParser.  The returned value should not contain any
        surrogateescaped data.

        'b'Given the header name and the value from the model, return binary
        data containing linesep characters that implement the folding of the
        header according to the policy controls.  The value passed in by the
        email package may contain surrogateescaped binary data.

        'u'Given the header name and the value from the model, return binary
        data containing linesep characters that implement the folding of the
        header according to the policy controls.  The value passed in by the
        email package may contain surrogateescaped binary data.

        'b'+
    This particular policy is the backward compatibility Policy.  It
    replicates the behavior of the email package version 5.1.
    'u'+
    This particular policy is the backward compatibility Policy.  It
    replicates the behavior of the email package version 5.1.
    'b'+
        The name is parsed as everything up to the ':' and returned unmodified.
        The value is determined by stripping leading whitespace off the
        remainder of the first line, joining all subsequent lines together, and
        stripping any trailing carriage return or linefeed characters.

        'u'+
        The name is parsed as everything up to the ':' and returned unmodified.
        The value is determined by stripping leading whitespace off the
        remainder of the first line, joining all subsequent lines together, and
        stripping any trailing carriage return or linefeed characters.

        'b'+
        The name and value are returned unmodified.
        'u'+
        The name and value are returned unmodified.
        'b'+
        If the value contains binary data, it is converted into a Header object
        using the unknown-8bit charset.  Otherwise it is returned unmodified.
        'u'+
        If the value contains binary data, it is converted into a Header object
        using the unknown-8bit charset.  Otherwise it is returned unmodified.
        'b'+
        Headers are folded using the Header folding algorithm, which preserves
        existing line breaks in the value, and wraps each resulting line to the
        max_line_length.  Non-ASCII binary data are CTE encoded using the
        unknown-8bit charset.

        'u'+
        Headers are folded using the Header folding algorithm, which preserves
        existing line breaks in the value, and wraps each resulting line to the
        max_line_length.  Non-ASCII binary data are CTE encoded using the
        unknown-8bit charset.

        'b'+
        Headers are folded using the Header folding algorithm, which preserves
        existing line breaks in the value, and wraps each resulting line to the
        max_line_length.  If cte_type is 7bit, non-ascii binary data is CTE
        encoded using the unknown-8bit charset.  Otherwise the original source
        header is used, with its existing line breaks and/or binary data.

        'u'+
        Headers are folded using the Header folding algorithm, which preserves
        existing line breaks in the value, and wraps each resulting line to the
        max_line_length.  If cte_type is 7bit, non-ascii binary data is CTE
        encoded using the unknown-8bit charset.  Otherwise the original source
        header is used, with its existing line breaks and/or binary data.

        'b'7bit'u'7bit'b'%s: 'u'%s: 'u'Python39.lib.email._policybase'u'lib.email._policybase'u'email._policybase'u'_policybase'
Compatibility layer with Python 3.8/3.9

    Honor name normalization for distributions that don't provide ``_normalized_name``.
    
    Workaround for ``EntryPoint`` objects without the ``matches`` method.
    # Prevent circular imports on runtime.# -> delay to prevent circular imports.# Reconstruct the EntryPoint object to make sure it is compatible.b'
Compatibility layer with Python 3.8/3.9
'u'
Compatibility layer with Python 3.8/3.9
'b'
    Honor name normalization for distributions that don't provide ``_normalized_name``.
    'u'
    Honor name normalization for distributions that don't provide ``_normalized_name``.
    'b'
    Workaround for ``EntryPoint`` objects without the ``matches`` method.
    'u'
    Workaround for ``EntryPoint`` objects without the ``matches`` method.
    'u'importlib_metadata._py39compat'u'_py39compat'_weakrefsetReturns the current ABC cache token.

    The token is an opaque object (supporting equality testing) identifying the
    current version of the ABC cache for virtual subclasses. The token changes
    with every call to ``register()`` on any ABC.
    _abc_invalidation_counterMetaclass for defining Abstract Base Classes (ABCs).

    Use this metaclass to create an ABC.  An ABC can be subclassed
    directly, and then acts as a mix-in class.  You can also register
    unrelated concrete classes (even built-in classes) and unrelated
    ABCs as 'virtual subclasses' -- these and their descendants will
    be considered subclasses of the registering ABC by the built-in
    issubclass() function, but the registering ABC won't show up in
    their MRO (Method Resolution Order) nor will method
    implementations defined by the registering ABC be callable (not
    even via super()).
    mclsbasesabstracts_abc_registry_abc_cache_abc_negative_cache_abc_negative_cache_versionRegister a virtual subclass of an ABC.

        Returns the subclass, to allow usage as a class decorator.
        Can only register classesRefusing to create an inheritance cycle_dump_registryDebug helper to print the ABC registry.Class: Inv. counter: _abc__abc_registry_clearClear the registry (for debugging or testing)._abc_caches_clearClear the caches (for debugging or testing).Override for isinstance(instance, cls).subtypeOverride for issubclass(subclass, cls).issubclass() arg 1 must be a classrclsscls# A global counter that is incremented each time a class is# registered as a virtual subclass of anything.  It forces the# negative cache to be cleared before its next use.# Note: this counter is private. Use `abc.get_cache_token()` for#       external code.# Compute set of abstract method names# Set up inheritance registry# Already a subclass# Subtle: test for cycles *after* testing for "already a subclass";# this means we allow X.register(X) and interpret it as a no-op.# This would create a cycle, which is bad for the algorithm below# Invalidate negative cache# Inline the cache checking# Fall back to the subclass check.# Check cache# Check negative cache; may have to invalidate# Invalidate the negative cache# Check the subclass hook# Check if it's a direct subclass# Check if it's a subclass of a registered class (recursive)# Check if it's a subclass of a subclass (recursive)# No dice; update negative cacheb'Returns the current ABC cache token.

    The token is an opaque object (supporting equality testing) identifying the
    current version of the ABC cache for virtual subclasses. The token changes
    with every call to ``register()`` on any ABC.
    'u'Returns the current ABC cache token.

    The token is an opaque object (supporting equality testing) identifying the
    current version of the ABC cache for virtual subclasses. The token changes
    with every call to ``register()`` on any ABC.
    'b'Metaclass for defining Abstract Base Classes (ABCs).

    Use this metaclass to create an ABC.  An ABC can be subclassed
    directly, and then acts as a mix-in class.  You can also register
    unrelated concrete classes (even built-in classes) and unrelated
    ABCs as 'virtual subclasses' -- these and their descendants will
    be considered subclasses of the registering ABC by the built-in
    issubclass() function, but the registering ABC won't show up in
    their MRO (Method Resolution Order) nor will method
    implementations defined by the registering ABC be callable (not
    even via super()).
    'u'Metaclass for defining Abstract Base Classes (ABCs).

    Use this metaclass to create an ABC.  An ABC can be subclassed
    directly, and then acts as a mix-in class.  You can also register
    unrelated concrete classes (even built-in classes) and unrelated
    ABCs as 'virtual subclasses' -- these and their descendants will
    be considered subclasses of the registering ABC by the built-in
    issubclass() function, but the registering ABC won't show up in
    their MRO (Method Resolution Order) nor will method
    implementations defined by the registering ABC be callable (not
    even via super()).
    'b'__abstractmethods__'u'__abstractmethods__'b'Register a virtual subclass of an ABC.

        Returns the subclass, to allow usage as a class decorator.
        'u'Register a virtual subclass of an ABC.

        Returns the subclass, to allow usage as a class decorator.
        'b'Can only register classes'u'Can only register classes'b'Refusing to create an inheritance cycle'u'Refusing to create an inheritance cycle'b'Debug helper to print the ABC registry.'u'Debug helper to print the ABC registry.'b'Class: 'u'Class: 'b'Inv. counter: 'u'Inv. counter: 'b'_abc_'u'_abc_'b'Clear the registry (for debugging or testing).'u'Clear the registry (for debugging or testing).'b'Clear the caches (for debugging or testing).'u'Clear the caches (for debugging or testing).'b'Override for isinstance(instance, cls).'u'Override for isinstance(instance, cls).'b'Override for issubclass(subclass, cls).'u'Override for issubclass(subclass, cls).'b'issubclass() arg 1 must be a class'u'issubclass() arg 1 must be a class'b'__mro__'u'__mro__'u'Python.Python39.lib._py_abc'u'Python39.lib._py_abc'u'lib._py_abc'u'_py_abc'
This is an implementation of decimal floating point arithmetic based on
the General Decimal Arithmetic Specification:

    http://speleotrove.com/decimal/decarith.html

and IEEE standard 854-1987:

    http://en.wikipedia.org/wiki/IEEE_854-1987

Decimal floating point has finite precision with arbitrarily large bounds.

The purpose of this module is to support arithmetic using familiar
"schoolhouse" rules and to avoid some of the tricky representation
issues associated with binary floating point.  The package is especially
useful for financial applications or for contexts where users have
expectations that are at odds with binary floating point (for instance,
in binary floating point, 1.00 % 0.1 gives 0.09999999999999995 instead
of 0.0; Decimal('1.00') % Decimal('0.1') returns the expected
Decimal('0.00')).

Here are some examples of using the decimal module:

>>> from decimal import *
>>> setcontext(ExtendedContext)
>>> Decimal(0)
Decimal('0')
>>> Decimal('1')
Decimal('1')
>>> Decimal('-.0123')
Decimal('-0.0123')
>>> Decimal(123456)
Decimal('123456')
>>> Decimal('123.45e12345678')
Decimal('1.2345E+12345680')
>>> Decimal('1.33') + Decimal('1.27')
Decimal('2.60')
>>> Decimal('12.34') + Decimal('3.87') - Decimal('18.41')
Decimal('-2.20')
>>> dig = Decimal(1)
>>> print(dig / Decimal(3))
0.333333333
>>> getcontext().prec = 18
>>> print(dig / Decimal(3))
0.333333333333333333
>>> print(dig.sqrt())
1
>>> print(Decimal(3).sqrt())
1.73205080756887729
>>> print(Decimal(3) ** 123)
4.85192780976896427E+58
>>> inf = Decimal(1) / Decimal(0)
>>> print(inf)
Infinity
>>> neginf = Decimal(-1) / Decimal(0)
>>> print(neginf)
-Infinity
>>> print(neginf + inf)
NaN
>>> print(neginf * inf)
-Infinity
>>> print(dig / 0)
Infinity
>>> getcontext().traps[DivisionByZero] = 1
>>> print(dig / 0)
Traceback (most recent call last):
  ...
  ...
  ...
decimal.DivisionByZero: x / 0
>>> c = Context()
>>> c.traps[InvalidOperation] = 0
>>> print(c.flags[InvalidOperation])
0
>>> c.divide(Decimal(0), Decimal(0))
Decimal('NaN')
>>> c.traps[InvalidOperation] = 1
>>> print(c.flags[InvalidOperation])
1
>>> c.flags[InvalidOperation] = 0
>>> print(c.flags[InvalidOperation])
0
>>> print(c.divide(Decimal(0), Decimal(0)))
Traceback (most recent call last):
  ...
  ...
  ...
decimal.InvalidOperation: 0 / 0
>>> print(c.flags[InvalidOperation])
1
>>> c.flags[InvalidOperation] = 0
>>> c.traps[InvalidOperation] = 0
>>> print(c.divide(Decimal(0), Decimal(0)))
NaN
>>> print(c.flags[InvalidOperation])
1
>>>
DecimalTupleDefaultContextBasicContextExtendedContextDecimalExceptionClampedInvalidOperationDivisionByZeroInexactRoundedSubnormalOverflowUnderflowFloatOperationDivisionImpossibleInvalidContextConversionSyntaxDivisionUndefinedROUND_DOWNROUND_HALF_UPROUND_HALF_EVENROUND_CEILINGROUND_FLOORROUND_UPROUND_HALF_DOWNROUND_05UPsetcontextgetcontextMAX_PRECMAX_EMAXMIN_EMINMIN_ETINYHAVE_THREADSHAVE_CONTEXTVAR__xname__1.702.4.2__libmpdec_version__math_mathnumbers_numbers_namedtuplesign digits exponent999999999999999999425000000Base exception class.

    Used exceptions derive from this.
    If an exception derives from another exception besides this (such as
    Underflow (Inexact, Rounded, Subnormal) that indicates that it is only
    called if the others are present.  This isn't actually used for
    anything, though.

    handle  -- Called when context._raise_error is called and the
               trap_enabler is not set.  First argument is self, second is the
               context.  More arguments can be given, those being after
               the explanation in _raise_error (For example,
               context._raise_error(NewError, '(-x)!', self._sign) would
               call NewError().handle(context, self._sign).)

    To define a new exception, it should be sufficient to have it derive
    from DecimalException.
    Exponent of a 0 changed to fit bounds.

    This occurs and signals clamped if the exponent of a result has been
    altered in order to fit the constraints of a specific concrete
    representation.  This may occur when the exponent of a zero result would
    be outside the bounds of a representation, or when a large normal
    number would have an encoded exponent that cannot be represented.  In
    this latter case, the exponent is reduced to fit and the corresponding
    number of zero digits are appended to the coefficient ("fold-down").
    An invalid operation was performed.

    Various bad things cause this:

    Something creates a signaling NaN
    -INF + INF
    0 * (+-)INF
    (+-)INF / (+-)INF
    x % 0
    (+-)INF % x
    x._rescale( non-integer )
    sqrt(-x) , x > 0
    0 ** 0
    x ** (non-integer)
    x ** (+-)INF
    An operand is invalid

    The result of the operation after these is a quiet positive NaN,
    except when the cause is a signaling NaN, in which case the result is
    also a quiet NaN, but with the original sign, and an optional
    diagnostic information.
    _dec_from_triple_sign_intans_fix_nan_NaNTrying to convert badly formed string.

    This occurs and signals invalid-operation if a string is being
    converted to a number and it does not conform to the numeric string
    syntax.  The result is [0,qNaN].
    Division by 0.

    This occurs and signals division-by-zero if division of a finite number
    by zero was attempted (during a divide-integer or divide operation, or a
    power operation with negative right-hand operand), and the dividend was
    not zero.

    The result of the operation is [sign,inf], where sign is the exclusive
    or of the signs of the operands for divide, or is 1 for an odd power of
    -0, for power.
    sign_SignedInfinityCannot perform the division adequately.

    This occurs and signals invalid-operation if the integer result of a
    divide-integer or remainder operation had too many digits (would be
    longer than precision).  The result is [0,qNaN].
    Undefined result of division.

    This occurs and signals invalid-operation if division by zero was
    attempted (during a divide-integer, divide, or remainder operation), and
    the dividend is also zero.  The result is [0,qNaN].
    Had to round, losing information.

    This occurs and signals inexact whenever the result of an operation is
    not exact (that is, it needed to be rounded and any discarded digits
    were non-zero), or if an overflow or underflow condition occurs.  The
    result in all cases is unchanged.

    The inexact signal may be tested (or trapped) to determine if a given
    operation (or sequence of operations) was inexact.
    Invalid context.  Unknown rounding, for example.

    This occurs and signals invalid-operation if an invalid context was
    detected during an operation.  This can occur if contexts are not checked
    on creation and either the precision exceeds the capability of the
    underlying concrete representation or an unknown or unsupported rounding
    was specified.  These aspects of the context need only be checked when
    the values are required to be used.  The result is [0,qNaN].
    Number got rounded (not  necessarily changed during rounding).

    This occurs and signals rounded whenever the result of an operation is
    rounded (that is, some zero or non-zero digits were discarded from the
    coefficient), or if an overflow or underflow condition occurs.  The
    result in all cases is unchanged.

    The rounded signal may be tested (or trapped) to determine if a given
    operation (or sequence of operations) caused a loss of precision.
    Exponent < Emin before rounding.

    This occurs and signals subnormal whenever the result of a conversion or
    operation is subnormal (that is, its adjusted exponent is less than
    Emin, before any rounding).  The result in all cases is unchanged.

    The subnormal signal may be tested (or trapped) to determine if a given
    or operation (or sequence of operations) yielded a subnormal result.
    Numerical overflow.

    This occurs and signals overflow if the adjusted exponent of a result
    (from a conversion or from an operation that is not an attempt to divide
    by zero), after rounding, would be greater than the largest value that
    can be handled by the implementation (the value Emax).

    The result depends on the rounding mode:

    For round-half-up and round-half-even (and for round-half-down and
    round-up, if implemented), the result of the operation is [sign,inf],
    where sign is the sign of the intermediate result.  For round-down, the
    result is the largest finite number that can be represented in the
    current precision, with the sign of the intermediate result.  For
    round-ceiling, the result is the same as for round-down if the sign of
    the intermediate result is 1, or is [0,inf] otherwise.  For round-floor,
    the result is the same as for round-down if the sign of the intermediate
    result is 0, or is [1,inf] otherwise.  In all cases, Inexact and Rounded
    will also be raised.
    roundingEmaxNumerical underflow with result rounded to 0.

    This occurs and signals underflow if a result is inexact and the
    adjusted exponent of the result would be smaller (more negative) than
    the smallest value that can be handled by the implementation (the value
    Emin).  That is, the result is both inexact and subnormal.

    The result after an underflow will be a subnormal number rounded, if
    necessary, so that its exponent is not less than Etiny.  This may result
    in 0 with the sign of the intermediate result and an exponent of Etiny.

    In all cases, Inexact, Rounded, and Subnormal will also be raised.
    Enable stricter semantics for mixing floats and Decimals.

    If the signal is not trapped (default), mixing floats and Decimals is
    permitted in the Decimal() constructor, context.create_decimal() and
    all comparison operators. Both conversion and comparisons are exact.
    Any occurrence of a mixed operation is silently recorded by setting
    FloatOperation in the context flags.  Explicit conversions with
    Decimal.from_float() or context.create_decimal_from_float() do not
    set the flag.

    Otherwise (the signal is trapped), only equality comparisons and explicit
    conversions are silent. All other mixed operations raise FloatOperation.
    _signals_condition_map_rounding_modescontextvarsdecimal_context_current_context_varReturns this thread's context.

    If this thread does not yet have a context, returns
    a new context and sets this thread's context.
    New contexts are copies of DefaultContext.
    Set this thread's context to context.clear_flagsReturn a context manager for a copy of the supplied context

    Uses a copy of the current context if no context is specified
    The returned context manager creates a local decimal context
    in a with statement:
        def sin(x):
             with localcontext() as ctx:
                 ctx.prec += 2
                 # Rest of sin calculation algorithm
                 # uses a precision 2 greater than normal
             return +s  # Convert result to normal precision

         def sin(x):
             with localcontext(ExtendedContext):
                 # Rest of sin calculation algorithm
                 # uses the Extended Context from the
                 # General Decimal Arithmetic Specification
             return +s  # Convert result to normal context

    >>> setcontext(DefaultContext)
    >>> print(getcontext().prec)
    28
    >>> with localcontext():
    ...     ctx = getcontext()
    ...     ctx.prec += 2
    ...     print(ctx.prec)
    ...
    30
    >>> with localcontext(ExtendedContext):
    ...     print(getcontext().prec)
    ...
    9
    >>> print(getcontext().prec)
    28
    _ContextManagerFloating point class for decimal arithmetic._exp_is_specialCreate a decimal point instance.

        >>> Decimal('3.14')              # string input
        Decimal('3.14')
        >>> Decimal((0, (3, 1, 4), -2))  # tuple (sign, digit_tuple, exponent)
        Decimal('3.14')
        >>> Decimal(314)                 # int
        Decimal('314')
        >>> Decimal(Decimal(314))        # another decimal instance
        Decimal('314')
        >>> Decimal('  3.14  \n')        # leading and trailing whitespace okay
        Decimal('3.14')
        _raise_errorInvalid literal for Decimal: %rintpartfracfracpartexpdiagF_WorkRepInvalid tuple size in creation of Decimal from list or tuple.  The list or tuple should have exactly three elements.'Invalid tuple size in creation of Decimal ''from list or tuple.  The list or tuple ''should have exactly three elements.'Invalid sign.  The first value in the tuple should be an integer; either 0 for a positive number or 1 for a negative number."Invalid sign.  The first value in the tuple ""should be an integer; either 0 for a ""positive number or 1 for a negative number."digitThe second value in the tuple must be composed of integers in the range 0 through 9."The second value in the tuple must ""be composed of integers in the range ""0 through 9."The third value in the tuple must be an integer, or one of the strings 'F', 'n', 'N'."The third value in the tuple must ""be an integer, or one of the ""strings 'F', 'n', 'N'."strict semantics for mixing floats and Decimals are enabled"strict semantics for mixing floats and Decimals are ""enabled"from_floatCannot convert %r to DecimalConverts a float to a decimal number, exactly.

        Note that Decimal.from_float(0.1) is not the same as Decimal('0.1').
        Since 0.1 is not exactly representable in binary floating point, the
        value is stored as the nearest representable value which is
        0x1.999999999999ap-4.  The exact equivalent of the value in decimal
        is 0.1000000000000000055511151231257827021181583404541015625.

        >>> Decimal.from_float(0.1)
        Decimal('0.1000000000000000055511151231257827021181583404541015625')
        >>> Decimal.from_float(float('nan'))
        Decimal('NaN')
        >>> Decimal.from_float(float('inf'))
        Decimal('Infinity')
        >>> Decimal.from_float(-float('inf'))
        Decimal('-Infinity')
        >>> Decimal.from_float(-0.0)
        Decimal('-0')

        coeffisinfisnancopysignargument must be int or float._isnanReturns whether the number is not actually one.

        0 if a number
        1 if NaN
        2 if sNaN
        _isinfinityReturns whether the number is infinite

        0 if finite or not a number
        1 if +INF
        -1 if -INF
        _check_nansReturns whether the number is not actually one.

        if self, other are sNaN, signal
        if self, other are NaN return nan
        return 0

        Done before operations.
        self_is_nanother_is_nansNaN_compare_check_nansVersion of _check_nans used for the signaling comparisons
        compare_signal, __le__, __lt__, __ge__, __gt__.

        Signal InvalidOperation if either self or other is a (quiet
        or signaling) NaN.  Signaling NaNs take precedence over quiet
        NaNs.

        Return 0 if neither operand is a NaN.

        is_snancomparison involving sNaNis_qnancomparison involving NaNReturn True if self is nonzero; otherwise return False.

        NaNs and infinities are considered nonzero.
        _cmpCompare the two non-NaN decimal instances self and other.

        Returns -1 if self < other, 0 if self == other and 1
        if self > other.  This routine is for internal use only.self_infother_infadjustedself_adjustedother_adjustedself_paddedother_padded_convert_for_comparisonequality_opCompare self to other.  Return a decimal value:

        a or b is a NaN ==> Decimal('NaN')
        a < b           ==> Decimal('-1')
        a == b          ==> Decimal('0')
        a > b           ==> Decimal('1')
        _convert_otherraiseitx.__hash__() <==> hash(x)Cannot hash a signaling NaN value.is_nan_PyHASH_NAN_PyHASH_INF_PyHASH_MODULUSexp_hash_PyHASH_10INVhash_as_tupleRepresents the number as a triple tuple.

        To show the internals exactly as they are.
        Express a finite Decimal instance in the form n / d.

        Returns a pair (n, d) of integers.  When called on an infinity
        or NaN, raises OverflowError or ValueError respectively.

        >>> Decimal('3.14').as_integer_ratio()
        (157, 50)
        >>> Decimal('-123e5').as_integer_ratio()
        (-12300000, 1)
        >>> Decimal('0.00').as_integer_ratio()
        (0, 1)

        cannot convert NaN to integer ratiocannot convert Infinity to integer ratiod5d2shift2Represents the number as an instance of Decimal.Decimal('%s')engReturn string representation of the number in scientific notation.

        Captures all of the information in the underlying representation.
        InfinityNaNleftdigitsdotplacecapitals%+dto_eng_stringConvert to a string, using engineering notation if an exponent is needed.

        Engineering notation has an exponent which is a multiple of 3.  This
        can leave up to 3 digits to the left of the decimal place and may
        require the addition of either one or two trailing zeros.
        Returns a copy with the sign switched.

        Rounds, if it has reason.
        copy_abscopy_negate_fixReturns a copy, unless it is a sNaN.

        Rounds the number (if more than precision digits)
        Returns the absolute value of self.

        If the keyword argument 'round' is false, do not round.  The
        expression self.__abs__(round=False) is equivalent to
        self.copy_abs().
        Returns self + other.

        -INF + INF (or the reverse) cause InvalidOperation errors.
        -INF + INFnegativezero_rescaleop1op2_normalizeReturn self - otherReturn other - selfReturn self * other.

        (+-) INF * 0 (or its reverse) raise InvalidOperation.
        resultsign(+-)INF * 00 * (+-)INFresultexpReturn self / other.(+-)INF/(+-)INFDivision by infinityEtiny0 / 0x / 0shiftremainderideal_exp_divideReturn (self // other, self % other), to context.prec precision.

        Assumes that neither self nor other is a NaN, that self is not
        infinite and that other is nonzero.
        expdiffquotient too large in //, % or divmodSwaps self/other and returns __truediv__.
        Return (self // other, self % other)
        divmod(INF, INF)INF % xdivmod(0, 0)x // 0x % 0quotientSwaps self/other and returns __divmod__.
        self % other
        0 % 0Swaps self/other and returns __mod__.remainder_near
        Remainder nearest to 0-  abs(remainder-near) <= other/2
        remainder_near(infinity, x)remainder_near(x, 0)remainder_near(0, 0)ideal_exponentself // otherINF // INF0 // 0Swaps self/other and returns __floordiv__.Float representation.Cannot convert signaling NaN to float-nanConverts self to an int, truncating if necessary.Cannot convert NaN to integerCannot convert infinity to integerDecapitate the payload of a NaN to fit the contextclampmax_payload_lenRound if it is necessary to keep self within prec precision.

        Rounds and fixes the exponent.  Does not raise on a sNaN.

        Arguments:
        self - Decimal instance
        context - context used.
        Etopexp_maxnew_expexp_minabove Emaxself_is_subnormal_pick_rounding_functionrounding_methodchanged_round_downAlso known as round-towards-0, truncate._all_zeros_round_upRounds away from 0._round_half_upRounds 5 up (away from 0)56789_round_half_downRound 5 down_exact_half_round_half_evenRound 5 to even, rest to nearest.02468_round_ceilingRounds up (not away from 0 if negative.)_round_floorRounds down (not towards 0 if negative)_round_05upRound down unless digit prec-1 is 0 or 5.05Round self to the nearest integer, or to a given precision.

        If only one argument is supplied, round a finite Decimal
        instance self to the nearest integer.  If self is infinite or
        a NaN then a Python exception is raised.  If self is finite
        and lies exactly halfway between two integers then it is
        rounded to the integer with even last digit.

        >>> round(Decimal('123.456'))
        123
        >>> round(Decimal('-456.789'))
        -457
        >>> round(Decimal('-3.0'))
        -3
        >>> round(Decimal('2.5'))
        2
        >>> round(Decimal('3.5'))
        4
        >>> round(Decimal('Inf'))
        Traceback (most recent call last):
          ...
        OverflowError: cannot round an infinity
        >>> round(Decimal('NaN'))
        Traceback (most recent call last):
          ...
        ValueError: cannot round a NaN

        If a second argument n is supplied, self is rounded to n
        decimal places using the rounding mode for the current
        context.

        For an integer n, round(self, -n) is exactly equivalent to
        self.quantize(Decimal('1En')).

        >>> round(Decimal('123.456'), 0)
        Decimal('123')
        >>> round(Decimal('123.456'), 2)
        Decimal('123.46')
        >>> round(Decimal('123.456'), -2)
        Decimal('1E+2')
        >>> round(Decimal('-Infinity'), 37)
        Decimal('NaN')
        >>> round(Decimal('sNaN123'), 0)
        Decimal('NaN123')

        Second argument to round should be integralquantizecannot round a NaNcannot round an infinityReturn the floor of self, as an integer.

        For a finite Decimal instance self, return the greatest
        integer n such that n <= self.  If self is infinite or a NaN
        then a Python exception is raised.

        Return the ceiling of self, as an integer.

        For a finite Decimal instance self, return the least integer n
        such that n >= self.  If self is infinite or a NaN then a
        Python exception is raised.

        fmathirdFused multiply-add.

        Returns self*other+third with no rounding of the intermediate
        product self*other.

        self and other are multiplied together, with no rounding of
        the result.  The third operand is then added to the result,
        and a single final rounding is performed.
        productINF * 0 in fma0 * INF in fma_power_modulomoduloThree argument version of __pow__modulo_is_nan_isintegerpow() 3rd argument not allowed unless all arguments are integers'pow() 3rd argument not allowed ''unless all arguments are integers'pow() 2nd argument cannot be negative when 3rd argument specified'pow() 2nd argument cannot be ''negative when 3rd argument specified'pow() 3rd argument cannot be 0insufficient precision: pow() 3rd argument must not have more than precision digits'insufficient precision: pow() 3rd ''argument must not have more than ''precision digits'at least one of pow() 1st argument and 2nd argument must be nonzero; 0**0 is not defined'at least one of pow() 1st argument ''and 2nd argument must be nonzero; ''0**0 is not defined'_isevento_integral_valueexponent_power_exactAttempt to compute self**other exactly.

        Given Decimals self and other and an integer p, attempt to
        compute an exact result for the power self**other, with p
        digits of precision.  Return None if self**other is not
        exactly representable in p digits.

        Assumes that elimination of special cases has already been
        performed: self and other must both be nonspecial; self must
        be positive and not numerically equal to 1; other must be
        nonzero.  For efficiency, other._exp should not be too large,
        so that 10**abs(other._exp) is a feasible calculation.xcxeycyezeroslast_digit_nbits9365emax_decimal_lshift_exactxc_bitsrem_log10_lbstr_xcReturn self ** other [ % modulo].

        With two arguments, compute self**other.

        With three arguments, compute (self**other) % modulo.  For the
        three argument form, the following restrictions on the
        arguments hold:

         - all three arguments must be integral
         - other must be nonnegative
         - either self or other (or both) must be nonzero
         - modulo must be nonzero and must have at most p digits,
           where p is the context precision.

        If any of these restrictions is violated the InvalidOperation
        flag is raised.

        The result of pow(self, other, modulo) is identical to the
        result that would be obtained by computing (self**other) %
        modulo with unbounded precision, but is computed more
        efficiently.  It is always exact.
        0 ** 0_Oneresult_signx ** y with x negative and y not an integermultiplierself_adj_log10_exp_boundbound_dpowernewcontexttrapsSwaps self/other and returns __pow__.Normalize- strip trailing 0s, change anything equal to 0 to 0e0Quantize self so its exponent is the same as that of exp.

        Similar to self._rescale(exp._exp) but with error checking.
        quantize with one INFtarget exponent out of bounds in quantizeexponent of quantize result too large for current contextquantize result has too many digits for current contextEminsame_quantumReturn True if self and other have the same exponent; otherwise
        return False.

        If either operand is a special value, the following rules are used:
           * return True if both operands are infinities
           * return True if both operands are NaNs
           * otherwise, return False.
        is_infiniteRescale self so that the exponent is exp, either by padding with zeros
        or by truncating digits, using the given rounding mode.

        Specials are returned without change.  This operation is
        quiet: it raises no flags, and uses no information from the
        context.

        exp = exp to scale to (an integer)
        rounding = rounding mode
        this_function_roundplacesRound a nonzero, nonspecial Decimal to a fixed number of
        significant figures, using the given rounding mode.

        Infinities, NaNs and zeros are returned unaltered.

        This operation is quiet: it raises no flags, and uses no
        information from the context.

        argument should be at least 1 in _roundto_integral_exactRounds to a nearby integer.

        If no rounding mode is specified, take the rounding mode from
        the context.  This method raises the Rounded and Inexact flags
        when appropriate.

        See also: to_integral_value, which does exactly the same as
        this method except that it doesn't raise Inexact or Rounded.
        Rounds to the nearest integer, without raising inexact, rounded.to_integralReturn the square root of self.sqrt(-x), x > 0_shallow_copy_set_roundingReturns the larger value.

        Like max(self, other) except if one is not a number, returns
        NaN (and signals if one is sNaN).  Also rounds.
        snoncompare_totalReturns the smaller value.

        Like min(self, other) except if one is not a number, returns
        NaN (and signals if one is sNaN).  Also rounds.
        Returns whether self is an integerReturns True if self is even.  Assumes self is an integer.Return the adjusted exponent of selfcanonicalReturns the same Decimal object.

        As we do not have different encodings for the same number, the
        received object already is in its canonical form.
        compare_signalCompares self to the other operand numerically.

        It's pretty much like compare(), but all NaNs signal, with signaling
        NaNs taking precedence over quiet NaNs.
        Compares self to other using the abstract representations.

        This is not like the standard compare, which use their numerical
        value. Note that a total ordering is defined for all possible abstract
        representations.
        _NegativeOneself_nanother_nanself_keyother_key_Zerocompare_total_magCompares self to other using abstract repr., ignoring sign.

        Like compare_total, but with operand's sign ignored and assumed to be 0.
        Returns a copy with the sign set to 0. Returns a copy with the sign inverted.copy_signReturns self with the sign of other.Returns e ** self.adj_dexpis_canonicalReturn True if self is canonical; otherwise return False.

        Currently, the encoding of a Decimal instance is always
        canonical, so this method returns True for any Decimal.
        is_finiteReturn True if self is finite; otherwise return False.

        A Decimal instance is considered finite if it is neither
        infinite nor a NaN.
        Return True if self is infinite; otherwise return False.Return True if self is a qNaN or sNaN; otherwise return False.is_normalReturn True if self is a normal number; otherwise return False.Return True if self is a quiet NaN; otherwise return False.is_signedReturn True if self is negative; otherwise return False.Return True if self is a signaling NaN; otherwise return False.is_subnormalReturn True if self is subnormal; otherwise return False.is_zeroReturn True if self is a zero; otherwise return False._ln_exp_boundCompute a lower bound for the adjusted exponent of self.ln().
        In other words, compute r such that self.ln() >= 10**r.  Assumes
        that self is finite and positive and that self != 1.
        denlnReturns the natural (base e) logarithm of self._NegativeInfinity_Infinityln of a negative value_dlogCompute a lower bound for the adjusted exponent of self.log10().
        In other words, find r such that self.log10() >= 10**r.
        Assumes that self is finite and positive and that self != 1.
        231log10Returns the base 10 logarithm of self.log10 of a negative value_dlog10logb Returns the exponent of the magnitude of self's MSD.

        The result is the integer which is the exponent of the magnitude
        of the most significant digit of self (as though it were truncated
        to a single digit while maintaining the value of that digit and
        without limiting the resulting exponent).
        logb(0)_islogicalReturn True if self is a logical operand.

        For being logical, it must be a finite number with a sign of 0,
        an exponent of 0, and a coefficient whose digits must all be
        either 0 or 1.
        01_fill_logicalopaopbdiflogical_andApplies an 'and' operation between self and other's digits.logical_invertInvert all its digits.logical_xorlogical_orApplies an 'or' operation between self and other's digits.Applies an 'xor' operation between self and other's digits.max_magCompares the values numerically with their sign ignored.min_magnext_minusReturns the largest representable number smaller than itself._ignore_all_flagsnew_selfnext_plusReturns the smallest representable number larger than itself.next_towardReturns the number closest to self, in the direction towards other.

        The result is the closest representable number to self
        (excluding self) that is in the direction towards other,
        unless both have the same value.  If the two operands are
        numerically equal, then the result is a copy of self with the
        sign set to be the same as the sign of other.
        comparisonInfinite result from next_towardnumber_classReturns an indication of the class of self.

        The class is one of the following strings:
          sNaN
          NaN
          -Infinity
          -Normal
          -Subnormal
          -Zero
          +Zero
          +Subnormal
          +Normal
          +Infinity
        +Infinity-Infinity-Zero+Zero-Subnormal+Subnormal-Normal+NormalJust returns 10, as this is Decimal, :)Returns a rotated copy of self, value-of-other times.torotrotdigtopadrotatedscalebReturns self operand after adding the second value to its exp.liminflimsupReturns a shifted copy of self, value-of-other times.shiftedspecifier_localeconvFormat a Decimal instance according to the given specifier.

        The specifier should be a standard format specifier, with the
        form described in PEP 3101.  Formatting types 'e', 'E', 'f',
        'F', 'g', 'G', 'n' and '%' are supported.  If the formatting
        type is omitted it defaults to 'g' or 'G', depending on the
        value of context.capitals.
        _parse_format_specifier_format_signbody_format_alignGprecisioneEfF%gG_format_numbercoefficientspecialCreate a decimal instance directly, without any validation,
    normalization (e.g. removal of leading zeros) or argument
    conversion.

    This function is for *internal use only*.
    NumberContext manager class to support localcontext().

      Sets a copy of the supplied context in __enter__() and restores
      the previous decimal context in __exit__()
    new_contextsaved_contextContains the context for a Decimal instance.

    Contains:
    prec - precision (for use in rounding, division, square roots..)
    rounding - rounding type (how you round)
    traps - If traps[exception] = 1, then the exception is
                    raised when it is caused.  Otherwise, a value is
                    substituted in.
    flags  - When an exception is caused, flags[exception] is set.
             (Whether or not the trap_enabler is set)
             Should be reset by user of Decimal instance.
    Emin -   Minimum exponent
    Emax -   Maximum exponent
    capitals -      If 1, 1*10^1 is printed as 1E+1.
                    If 0, printed as 1e1
    clamp -  If 1, change exponents if too high (Default 0)
    _ignored_flags_set_integer_checkvminvmax%s must be an integer-inf%s must be in [%s, %d]. got: %s%s must be in [%d, %s]. got: %s%s must be in [%d, %d]. got %s_set_signal_dict%s must be a signal dict%s is not a valid signal dict%s: invalid rounding mode'decimal.Context' object has no attribute '%s'%s cannot be deletedsigShow the current context.Context(prec=%(prec)d, rounding=%(rounding)s, Emin=%(Emin)d, Emax=%(Emax)d, capitals=%(capitals)d, clamp=%(clamp)d'Context(prec=%(prec)d, rounding=%(rounding)s, ''Emin=%(Emin)d, Emax=%(Emax)d, capitals=%(capitals)d, ''clamp=%(clamp)d'flags=[traps=[Reset all flags to zeroclear_trapsReset all traps to zeroReturns a shallow copy from self.ncReturns a deep copy from self.explanationHandles an error

        If the flag is in _ignored_flags, returns the default response.
        Otherwise, it sets the flag, then, if the corresponding
        trap_enabler is set, it reraises the exception.  Otherwise, it returns
        the default value after setting the flag.
        Ignore all flags, if they are raised_ignore_flagsIgnore the flags, if they are raised_regard_flagsStop ignoring the flags, if they are raisedReturns Etiny (= Emin - prec + 1)Returns maximum exponent (= Emax - prec + 1)Sets the rounding type.

        Sets the rounding type, and returns the current (previous)
        rounding type.  Often used like:

        context = context.copy()
        # so you don't change the calling context
        # if an error occurs in the middle.
        rounding = context._set_rounding(ROUND_UP)
        val = self.__sub__(other, context=context)
        context._set_rounding(rounding)

        This will make it round up for that operation.
        create_decimalCreates a new Decimal instance but using self as context.

        This method implements the to-number operation of the
        IBM Decimal specification.trailing or leading whitespace and underscores are not permitted."trailing or leading whitespace and ""underscores are not permitted."diagnostic info too long in NaNcreate_decimal_from_floatCreates a new Decimal instance from a float but rounding using self
        as the context.

        >>> context = Context(prec=5, rounding=ROUND_DOWN)
        >>> context.create_decimal_from_float(3.1415926535897932)
        Decimal('3.1415')
        >>> context = Context(prec=5, traps=[Inexact])
        >>> context.create_decimal_from_float(3.1415926535897932)
        Traceback (most recent call last):
            ...
        decimal.Inexact: None

        Returns the absolute value of the operand.

        If the operand is negative, the result is the same as using the minus
        operation on the operand.  Otherwise, the result is the same as using
        the plus operation on the operand.

        >>> ExtendedContext.abs(Decimal('2.1'))
        Decimal('2.1')
        >>> ExtendedContext.abs(Decimal('-100'))
        Decimal('100')
        >>> ExtendedContext.abs(Decimal('101.5'))
        Decimal('101.5')
        >>> ExtendedContext.abs(Decimal('-101.5'))
        Decimal('101.5')
        >>> ExtendedContext.abs(-1)
        Decimal('1')
        Return the sum of the two operands.

        >>> ExtendedContext.add(Decimal('12'), Decimal('7.00'))
        Decimal('19.00')
        >>> ExtendedContext.add(Decimal('1E+2'), Decimal('1.01E+4'))
        Decimal('1.02E+4')
        >>> ExtendedContext.add(1, Decimal(2))
        Decimal('3')
        >>> ExtendedContext.add(Decimal(8), 5)
        Decimal('13')
        >>> ExtendedContext.add(5, 5)
        Decimal('10')
        Unable to convert %s to Decimal_applyReturns the same Decimal object.

        As we do not have different encodings for the same number, the
        received object already is in its canonical form.

        >>> ExtendedContext.canonical(Decimal('2.50'))
        Decimal('2.50')
        canonical requires a Decimal as an argument.Compares values numerically.

        If the signs of the operands differ, a value representing each operand
        ('-1' if the operand is less than zero, '0' if the operand is zero or
        negative zero, or '1' if the operand is greater than zero) is used in
        place of that operand for the comparison instead of the actual
        operand.

        The comparison is then effected by subtracting the second operand from
        the first and then returning a value according to the result of the
        subtraction: '-1' if the result is less than zero, '0' if the result is
        zero or negative zero, or '1' if the result is greater than zero.

        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('3'))
        Decimal('-1')
        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('2.1'))
        Decimal('0')
        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('2.10'))
        Decimal('0')
        >>> ExtendedContext.compare(Decimal('3'), Decimal('2.1'))
        Decimal('1')
        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('-3'))
        Decimal('1')
        >>> ExtendedContext.compare(Decimal('-3'), Decimal('2.1'))
        Decimal('-1')
        >>> ExtendedContext.compare(1, 2)
        Decimal('-1')
        >>> ExtendedContext.compare(Decimal(1), 2)
        Decimal('-1')
        >>> ExtendedContext.compare(1, Decimal(2))
        Decimal('-1')
        Compares the values of the two operands numerically.

        It's pretty much like compare(), but all NaNs signal, with signaling
        NaNs taking precedence over quiet NaNs.

        >>> c = ExtendedContext
        >>> c.compare_signal(Decimal('2.1'), Decimal('3'))
        Decimal('-1')
        >>> c.compare_signal(Decimal('2.1'), Decimal('2.1'))
        Decimal('0')
        >>> c.flags[InvalidOperation] = 0
        >>> print(c.flags[InvalidOperation])
        0
        >>> c.compare_signal(Decimal('NaN'), Decimal('2.1'))
        Decimal('NaN')
        >>> print(c.flags[InvalidOperation])
        1
        >>> c.flags[InvalidOperation] = 0
        >>> print(c.flags[InvalidOperation])
        0
        >>> c.compare_signal(Decimal('sNaN'), Decimal('2.1'))
        Decimal('NaN')
        >>> print(c.flags[InvalidOperation])
        1
        >>> c.compare_signal(-1, 2)
        Decimal('-1')
        >>> c.compare_signal(Decimal(-1), 2)
        Decimal('-1')
        >>> c.compare_signal(-1, Decimal(2))
        Decimal('-1')
        Compares two operands using their abstract representation.

        This is not like the standard compare, which use their numerical
        value. Note that a total ordering is defined for all possible abstract
        representations.

        >>> ExtendedContext.compare_total(Decimal('12.73'), Decimal('127.9'))
        Decimal('-1')
        >>> ExtendedContext.compare_total(Decimal('-127'),  Decimal('12'))
        Decimal('-1')
        >>> ExtendedContext.compare_total(Decimal('12.30'), Decimal('12.3'))
        Decimal('-1')
        >>> ExtendedContext.compare_total(Decimal('12.30'), Decimal('12.30'))
        Decimal('0')
        >>> ExtendedContext.compare_total(Decimal('12.3'),  Decimal('12.300'))
        Decimal('1')
        >>> ExtendedContext.compare_total(Decimal('12.3'),  Decimal('NaN'))
        Decimal('-1')
        >>> ExtendedContext.compare_total(1, 2)
        Decimal('-1')
        >>> ExtendedContext.compare_total(Decimal(1), 2)
        Decimal('-1')
        >>> ExtendedContext.compare_total(1, Decimal(2))
        Decimal('-1')
        Compares two operands using their abstract representation ignoring sign.

        Like compare_total, but with operand's sign ignored and assumed to be 0.
        Returns a copy of the operand with the sign set to 0.

        >>> ExtendedContext.copy_abs(Decimal('2.1'))
        Decimal('2.1')
        >>> ExtendedContext.copy_abs(Decimal('-100'))
        Decimal('100')
        >>> ExtendedContext.copy_abs(-1)
        Decimal('1')
        copy_decimalReturns a copy of the decimal object.

        >>> ExtendedContext.copy_decimal(Decimal('2.1'))
        Decimal('2.1')
        >>> ExtendedContext.copy_decimal(Decimal('-1.00'))
        Decimal('-1.00')
        >>> ExtendedContext.copy_decimal(1)
        Decimal('1')
        Returns a copy of the operand with the sign inverted.

        >>> ExtendedContext.copy_negate(Decimal('101.5'))
        Decimal('-101.5')
        >>> ExtendedContext.copy_negate(Decimal('-101.5'))
        Decimal('101.5')
        >>> ExtendedContext.copy_negate(1)
        Decimal('-1')
        Copies the second operand's sign to the first one.

        In detail, it returns a copy of the first operand with the sign
        equal to the sign of the second operand.

        >>> ExtendedContext.copy_sign(Decimal( '1.50'), Decimal('7.33'))
        Decimal('1.50')
        >>> ExtendedContext.copy_sign(Decimal('-1.50'), Decimal('7.33'))
        Decimal('1.50')
        >>> ExtendedContext.copy_sign(Decimal( '1.50'), Decimal('-7.33'))
        Decimal('-1.50')
        >>> ExtendedContext.copy_sign(Decimal('-1.50'), Decimal('-7.33'))
        Decimal('-1.50')
        >>> ExtendedContext.copy_sign(1, -2)
        Decimal('-1')
        >>> ExtendedContext.copy_sign(Decimal(1), -2)
        Decimal('-1')
        >>> ExtendedContext.copy_sign(1, Decimal(-2))
        Decimal('-1')
        divideDecimal division in a specified context.

        >>> ExtendedContext.divide(Decimal('1'), Decimal('3'))
        Decimal('0.333333333')
        >>> ExtendedContext.divide(Decimal('2'), Decimal('3'))
        Decimal('0.666666667')
        >>> ExtendedContext.divide(Decimal('5'), Decimal('2'))
        Decimal('2.5')
        >>> ExtendedContext.divide(Decimal('1'), Decimal('10'))
        Decimal('0.1')
        >>> ExtendedContext.divide(Decimal('12'), Decimal('12'))
        Decimal('1')
        >>> ExtendedContext.divide(Decimal('8.00'), Decimal('2'))
        Decimal('4.00')
        >>> ExtendedContext.divide(Decimal('2.400'), Decimal('2.0'))
        Decimal('1.20')
        >>> ExtendedContext.divide(Decimal('1000'), Decimal('100'))
        Decimal('10')
        >>> ExtendedContext.divide(Decimal('1000'), Decimal('1'))
        Decimal('1000')
        >>> ExtendedContext.divide(Decimal('2.40E+6'), Decimal('2'))
        Decimal('1.20E+6')
        >>> ExtendedContext.divide(5, 5)
        Decimal('1')
        >>> ExtendedContext.divide(Decimal(5), 5)
        Decimal('1')
        >>> ExtendedContext.divide(5, Decimal(5))
        Decimal('1')
        divide_intDivides two numbers and returns the integer part of the result.

        >>> ExtendedContext.divide_int(Decimal('2'), Decimal('3'))
        Decimal('0')
        >>> ExtendedContext.divide_int(Decimal('10'), Decimal('3'))
        Decimal('3')
        >>> ExtendedContext.divide_int(Decimal('1'), Decimal('0.3'))
        Decimal('3')
        >>> ExtendedContext.divide_int(10, 3)
        Decimal('3')
        >>> ExtendedContext.divide_int(Decimal(10), 3)
        Decimal('3')
        >>> ExtendedContext.divide_int(10, Decimal(3))
        Decimal('3')
        Return (a // b, a % b).

        >>> ExtendedContext.divmod(Decimal(8), Decimal(3))
        (Decimal('2'), Decimal('2'))
        >>> ExtendedContext.divmod(Decimal(8), Decimal(4))
        (Decimal('2'), Decimal('0'))
        >>> ExtendedContext.divmod(8, 4)
        (Decimal('2'), Decimal('0'))
        >>> ExtendedContext.divmod(Decimal(8), 4)
        (Decimal('2'), Decimal('0'))
        >>> ExtendedContext.divmod(8, Decimal(4))
        (Decimal('2'), Decimal('0'))
        Returns e ** a.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.exp(Decimal('-Infinity'))
        Decimal('0')
        >>> c.exp(Decimal('-1'))
        Decimal('0.367879441')
        >>> c.exp(Decimal('0'))
        Decimal('1')
        >>> c.exp(Decimal('1'))
        Decimal('2.71828183')
        >>> c.exp(Decimal('0.693147181'))
        Decimal('2.00000000')
        >>> c.exp(Decimal('+Infinity'))
        Decimal('Infinity')
        >>> c.exp(10)
        Decimal('22026.4658')
        Returns a multiplied by b, plus c.

        The first two operands are multiplied together, using multiply,
        the third operand is then added to the result of that
        multiplication, using add, all with only one final rounding.

        >>> ExtendedContext.fma(Decimal('3'), Decimal('5'), Decimal('7'))
        Decimal('22')
        >>> ExtendedContext.fma(Decimal('3'), Decimal('-5'), Decimal('7'))
        Decimal('-8')
        >>> ExtendedContext.fma(Decimal('888565290'), Decimal('1557.96930'), Decimal('-86087.7578'))
        Decimal('1.38435736E+12')
        >>> ExtendedContext.fma(1, 3, 4)
        Decimal('7')
        >>> ExtendedContext.fma(1, Decimal(3), 4)
        Decimal('7')
        >>> ExtendedContext.fma(1, 3, Decimal(4))
        Decimal('7')
        Return True if the operand is canonical; otherwise return False.

        Currently, the encoding of a Decimal instance is always
        canonical, so this method returns True for any Decimal.

        >>> ExtendedContext.is_canonical(Decimal('2.50'))
        True
        is_canonical requires a Decimal as an argument.Return True if the operand is finite; otherwise return False.

        A Decimal instance is considered finite if it is neither
        infinite nor a NaN.

        >>> ExtendedContext.is_finite(Decimal('2.50'))
        True
        >>> ExtendedContext.is_finite(Decimal('-0.3'))
        True
        >>> ExtendedContext.is_finite(Decimal('0'))
        True
        >>> ExtendedContext.is_finite(Decimal('Inf'))
        False
        >>> ExtendedContext.is_finite(Decimal('NaN'))
        False
        >>> ExtendedContext.is_finite(1)
        True
        Return True if the operand is infinite; otherwise return False.

        >>> ExtendedContext.is_infinite(Decimal('2.50'))
        False
        >>> ExtendedContext.is_infinite(Decimal('-Inf'))
        True
        >>> ExtendedContext.is_infinite(Decimal('NaN'))
        False
        >>> ExtendedContext.is_infinite(1)
        False
        Return True if the operand is a qNaN or sNaN;
        otherwise return False.

        >>> ExtendedContext.is_nan(Decimal('2.50'))
        False
        >>> ExtendedContext.is_nan(Decimal('NaN'))
        True
        >>> ExtendedContext.is_nan(Decimal('-sNaN'))
        True
        >>> ExtendedContext.is_nan(1)
        False
        Return True if the operand is a normal number;
        otherwise return False.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.is_normal(Decimal('2.50'))
        True
        >>> c.is_normal(Decimal('0.1E-999'))
        False
        >>> c.is_normal(Decimal('0.00'))
        False
        >>> c.is_normal(Decimal('-Inf'))
        False
        >>> c.is_normal(Decimal('NaN'))
        False
        >>> c.is_normal(1)
        True
        Return True if the operand is a quiet NaN; otherwise return False.

        >>> ExtendedContext.is_qnan(Decimal('2.50'))
        False
        >>> ExtendedContext.is_qnan(Decimal('NaN'))
        True
        >>> ExtendedContext.is_qnan(Decimal('sNaN'))
        False
        >>> ExtendedContext.is_qnan(1)
        False
        Return True if the operand is negative; otherwise return False.

        >>> ExtendedContext.is_signed(Decimal('2.50'))
        False
        >>> ExtendedContext.is_signed(Decimal('-12'))
        True
        >>> ExtendedContext.is_signed(Decimal('-0'))
        True
        >>> ExtendedContext.is_signed(8)
        False
        >>> ExtendedContext.is_signed(-8)
        True
        Return True if the operand is a signaling NaN;
        otherwise return False.

        >>> ExtendedContext.is_snan(Decimal('2.50'))
        False
        >>> ExtendedContext.is_snan(Decimal('NaN'))
        False
        >>> ExtendedContext.is_snan(Decimal('sNaN'))
        True
        >>> ExtendedContext.is_snan(1)
        False
        Return True if the operand is subnormal; otherwise return False.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.is_subnormal(Decimal('2.50'))
        False
        >>> c.is_subnormal(Decimal('0.1E-999'))
        True
        >>> c.is_subnormal(Decimal('0.00'))
        False
        >>> c.is_subnormal(Decimal('-Inf'))
        False
        >>> c.is_subnormal(Decimal('NaN'))
        False
        >>> c.is_subnormal(1)
        False
        Return True if the operand is a zero; otherwise return False.

        >>> ExtendedContext.is_zero(Decimal('0'))
        True
        >>> ExtendedContext.is_zero(Decimal('2.50'))
        False
        >>> ExtendedContext.is_zero(Decimal('-0E+2'))
        True
        >>> ExtendedContext.is_zero(1)
        False
        >>> ExtendedContext.is_zero(0)
        True
        Returns the natural (base e) logarithm of the operand.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.ln(Decimal('0'))
        Decimal('-Infinity')
        >>> c.ln(Decimal('1.000'))
        Decimal('0')
        >>> c.ln(Decimal('2.71828183'))
        Decimal('1.00000000')
        >>> c.ln(Decimal('10'))
        Decimal('2.30258509')
        >>> c.ln(Decimal('+Infinity'))
        Decimal('Infinity')
        >>> c.ln(1)
        Decimal('0')
        Returns the base 10 logarithm of the operand.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.log10(Decimal('0'))
        Decimal('-Infinity')
        >>> c.log10(Decimal('0.001'))
        Decimal('-3')
        >>> c.log10(Decimal('1.000'))
        Decimal('0')
        >>> c.log10(Decimal('2'))
        Decimal('0.301029996')
        >>> c.log10(Decimal('10'))
        Decimal('1')
        >>> c.log10(Decimal('70'))
        Decimal('1.84509804')
        >>> c.log10(Decimal('+Infinity'))
        Decimal('Infinity')
        >>> c.log10(0)
        Decimal('-Infinity')
        >>> c.log10(1)
        Decimal('0')
         Returns the exponent of the magnitude of the operand's MSD.

        The result is the integer which is the exponent of the magnitude
        of the most significant digit of the operand (as though the
        operand were truncated to a single digit while maintaining the
        value of that digit and without limiting the resulting exponent).

        >>> ExtendedContext.logb(Decimal('250'))
        Decimal('2')
        >>> ExtendedContext.logb(Decimal('2.50'))
        Decimal('0')
        >>> ExtendedContext.logb(Decimal('0.03'))
        Decimal('-2')
        >>> ExtendedContext.logb(Decimal('0'))
        Decimal('-Infinity')
        >>> ExtendedContext.logb(1)
        Decimal('0')
        >>> ExtendedContext.logb(10)
        Decimal('1')
        >>> ExtendedContext.logb(100)
        Decimal('2')
        Applies the logical operation 'and' between each operand's digits.

        The operands must be both logical numbers.

        >>> ExtendedContext.logical_and(Decimal('0'), Decimal('0'))
        Decimal('0')
        >>> ExtendedContext.logical_and(Decimal('0'), Decimal('1'))
        Decimal('0')
        >>> ExtendedContext.logical_and(Decimal('1'), Decimal('0'))
        Decimal('0')
        >>> ExtendedContext.logical_and(Decimal('1'), Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.logical_and(Decimal('1100'), Decimal('1010'))
        Decimal('1000')
        >>> ExtendedContext.logical_and(Decimal('1111'), Decimal('10'))
        Decimal('10')
        >>> ExtendedContext.logical_and(110, 1101)
        Decimal('100')
        >>> ExtendedContext.logical_and(Decimal(110), 1101)
        Decimal('100')
        >>> ExtendedContext.logical_and(110, Decimal(1101))
        Decimal('100')
        Invert all the digits in the operand.

        The operand must be a logical number.

        >>> ExtendedContext.logical_invert(Decimal('0'))
        Decimal('111111111')
        >>> ExtendedContext.logical_invert(Decimal('1'))
        Decimal('111111110')
        >>> ExtendedContext.logical_invert(Decimal('111111111'))
        Decimal('0')
        >>> ExtendedContext.logical_invert(Decimal('101010101'))
        Decimal('10101010')
        >>> ExtendedContext.logical_invert(1101)
        Decimal('111110010')
        Applies the logical operation 'or' between each operand's digits.

        The operands must be both logical numbers.

        >>> ExtendedContext.logical_or(Decimal('0'), Decimal('0'))
        Decimal('0')
        >>> ExtendedContext.logical_or(Decimal('0'), Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.logical_or(Decimal('1'), Decimal('0'))
        Decimal('1')
        >>> ExtendedContext.logical_or(Decimal('1'), Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.logical_or(Decimal('1100'), Decimal('1010'))
        Decimal('1110')
        >>> ExtendedContext.logical_or(Decimal('1110'), Decimal('10'))
        Decimal('1110')
        >>> ExtendedContext.logical_or(110, 1101)
        Decimal('1111')
        >>> ExtendedContext.logical_or(Decimal(110), 1101)
        Decimal('1111')
        >>> ExtendedContext.logical_or(110, Decimal(1101))
        Decimal('1111')
        Applies the logical operation 'xor' between each operand's digits.

        The operands must be both logical numbers.

        >>> ExtendedContext.logical_xor(Decimal('0'), Decimal('0'))
        Decimal('0')
        >>> ExtendedContext.logical_xor(Decimal('0'), Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.logical_xor(Decimal('1'), Decimal('0'))
        Decimal('1')
        >>> ExtendedContext.logical_xor(Decimal('1'), Decimal('1'))
        Decimal('0')
        >>> ExtendedContext.logical_xor(Decimal('1100'), Decimal('1010'))
        Decimal('110')
        >>> ExtendedContext.logical_xor(Decimal('1111'), Decimal('10'))
        Decimal('1101')
        >>> ExtendedContext.logical_xor(110, 1101)
        Decimal('1011')
        >>> ExtendedContext.logical_xor(Decimal(110), 1101)
        Decimal('1011')
        >>> ExtendedContext.logical_xor(110, Decimal(1101))
        Decimal('1011')
        max compares two values numerically and returns the maximum.

        If either operand is a NaN then the general rules apply.
        Otherwise, the operands are compared as though by the compare
        operation.  If they are numerically equal then the left-hand operand
        is chosen as the result.  Otherwise the maximum (closer to positive
        infinity) of the two operands is chosen as the result.

        >>> ExtendedContext.max(Decimal('3'), Decimal('2'))
        Decimal('3')
        >>> ExtendedContext.max(Decimal('-10'), Decimal('3'))
        Decimal('3')
        >>> ExtendedContext.max(Decimal('1.0'), Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.max(Decimal('7'), Decimal('NaN'))
        Decimal('7')
        >>> ExtendedContext.max(1, 2)
        Decimal('2')
        >>> ExtendedContext.max(Decimal(1), 2)
        Decimal('2')
        >>> ExtendedContext.max(1, Decimal(2))
        Decimal('2')
        Compares the values numerically with their sign ignored.

        >>> ExtendedContext.max_mag(Decimal('7'), Decimal('NaN'))
        Decimal('7')
        >>> ExtendedContext.max_mag(Decimal('7'), Decimal('-10'))
        Decimal('-10')
        >>> ExtendedContext.max_mag(1, -2)
        Decimal('-2')
        >>> ExtendedContext.max_mag(Decimal(1), -2)
        Decimal('-2')
        >>> ExtendedContext.max_mag(1, Decimal(-2))
        Decimal('-2')
        min compares two values numerically and returns the minimum.

        If either operand is a NaN then the general rules apply.
        Otherwise, the operands are compared as though by the compare
        operation.  If they are numerically equal then the left-hand operand
        is chosen as the result.  Otherwise the minimum (closer to negative
        infinity) of the two operands is chosen as the result.

        >>> ExtendedContext.min(Decimal('3'), Decimal('2'))
        Decimal('2')
        >>> ExtendedContext.min(Decimal('-10'), Decimal('3'))
        Decimal('-10')
        >>> ExtendedContext.min(Decimal('1.0'), Decimal('1'))
        Decimal('1.0')
        >>> ExtendedContext.min(Decimal('7'), Decimal('NaN'))
        Decimal('7')
        >>> ExtendedContext.min(1, 2)
        Decimal('1')
        >>> ExtendedContext.min(Decimal(1), 2)
        Decimal('1')
        >>> ExtendedContext.min(1, Decimal(29))
        Decimal('1')
        Compares the values numerically with their sign ignored.

        >>> ExtendedContext.min_mag(Decimal('3'), Decimal('-2'))
        Decimal('-2')
        >>> ExtendedContext.min_mag(Decimal('-3'), Decimal('NaN'))
        Decimal('-3')
        >>> ExtendedContext.min_mag(1, -2)
        Decimal('1')
        >>> ExtendedContext.min_mag(Decimal(1), -2)
        Decimal('1')
        >>> ExtendedContext.min_mag(1, Decimal(-2))
        Decimal('1')
        minusMinus corresponds to unary prefix minus in Python.

        The operation is evaluated using the same rules as subtract; the
        operation minus(a) is calculated as subtract('0', a) where the '0'
        has the same exponent as the operand.

        >>> ExtendedContext.minus(Decimal('1.3'))
        Decimal('-1.3')
        >>> ExtendedContext.minus(Decimal('-1.3'))
        Decimal('1.3')
        >>> ExtendedContext.minus(1)
        Decimal('-1')
        multiplymultiply multiplies two operands.

        If either operand is a special value then the general rules apply.
        Otherwise, the operands are multiplied together
        ('long multiplication'), resulting in a number which may be as long as
        the sum of the lengths of the two operands.

        >>> ExtendedContext.multiply(Decimal('1.20'), Decimal('3'))
        Decimal('3.60')
        >>> ExtendedContext.multiply(Decimal('7'), Decimal('3'))
        Decimal('21')
        >>> ExtendedContext.multiply(Decimal('0.9'), Decimal('0.8'))
        Decimal('0.72')
        >>> ExtendedContext.multiply(Decimal('0.9'), Decimal('-0'))
        Decimal('-0.0')
        >>> ExtendedContext.multiply(Decimal('654321'), Decimal('654321'))
        Decimal('4.28135971E+11')
        >>> ExtendedContext.multiply(7, 7)
        Decimal('49')
        >>> ExtendedContext.multiply(Decimal(7), 7)
        Decimal('49')
        >>> ExtendedContext.multiply(7, Decimal(7))
        Decimal('49')
        Returns the largest representable number smaller than a.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> ExtendedContext.next_minus(Decimal('1'))
        Decimal('0.999999999')
        >>> c.next_minus(Decimal('1E-1007'))
        Decimal('0E-1007')
        >>> ExtendedContext.next_minus(Decimal('-1.00000003'))
        Decimal('-1.00000004')
        >>> c.next_minus(Decimal('Infinity'))
        Decimal('9.99999999E+999')
        >>> c.next_minus(1)
        Decimal('0.999999999')
        Returns the smallest representable number larger than a.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> ExtendedContext.next_plus(Decimal('1'))
        Decimal('1.00000001')
        >>> c.next_plus(Decimal('-1E-1007'))
        Decimal('-0E-1007')
        >>> ExtendedContext.next_plus(Decimal('-1.00000003'))
        Decimal('-1.00000002')
        >>> c.next_plus(Decimal('-Infinity'))
        Decimal('-9.99999999E+999')
        >>> c.next_plus(1)
        Decimal('1.00000001')
        Returns the number closest to a, in direction towards b.

        The result is the closest representable number from the first
        operand (but not the first operand) that is in the direction
        towards the second operand, unless the operands have the same
        value.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.next_toward(Decimal('1'), Decimal('2'))
        Decimal('1.00000001')
        >>> c.next_toward(Decimal('-1E-1007'), Decimal('1'))
        Decimal('-0E-1007')
        >>> c.next_toward(Decimal('-1.00000003'), Decimal('0'))
        Decimal('-1.00000002')
        >>> c.next_toward(Decimal('1'), Decimal('0'))
        Decimal('0.999999999')
        >>> c.next_toward(Decimal('1E-1007'), Decimal('-100'))
        Decimal('0E-1007')
        >>> c.next_toward(Decimal('-1.00000003'), Decimal('-10'))
        Decimal('-1.00000004')
        >>> c.next_toward(Decimal('0.00'), Decimal('-0.0000'))
        Decimal('-0.00')
        >>> c.next_toward(0, 1)
        Decimal('1E-1007')
        >>> c.next_toward(Decimal(0), 1)
        Decimal('1E-1007')
        >>> c.next_toward(0, Decimal(1))
        Decimal('1E-1007')
        normalize reduces an operand to its simplest form.

        Essentially a plus operation with all trailing zeros removed from the
        result.

        >>> ExtendedContext.normalize(Decimal('2.1'))
        Decimal('2.1')
        >>> ExtendedContext.normalize(Decimal('-2.0'))
        Decimal('-2')
        >>> ExtendedContext.normalize(Decimal('1.200'))
        Decimal('1.2')
        >>> ExtendedContext.normalize(Decimal('-120'))
        Decimal('-1.2E+2')
        >>> ExtendedContext.normalize(Decimal('120.00'))
        Decimal('1.2E+2')
        >>> ExtendedContext.normalize(Decimal('0.00'))
        Decimal('0')
        >>> ExtendedContext.normalize(6)
        Decimal('6')
        Returns an indication of the class of the operand.

        The class is one of the following strings:
          -sNaN
          -NaN
          -Infinity
          -Normal
          -Subnormal
          -Zero
          +Zero
          +Subnormal
          +Normal
          +Infinity

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.number_class(Decimal('Infinity'))
        '+Infinity'
        >>> c.number_class(Decimal('1E-10'))
        '+Normal'
        >>> c.number_class(Decimal('2.50'))
        '+Normal'
        >>> c.number_class(Decimal('0.1E-999'))
        '+Subnormal'
        >>> c.number_class(Decimal('0'))
        '+Zero'
        >>> c.number_class(Decimal('-0'))
        '-Zero'
        >>> c.number_class(Decimal('-0.1E-999'))
        '-Subnormal'
        >>> c.number_class(Decimal('-1E-10'))
        '-Normal'
        >>> c.number_class(Decimal('-2.50'))
        '-Normal'
        >>> c.number_class(Decimal('-Infinity'))
        '-Infinity'
        >>> c.number_class(Decimal('NaN'))
        'NaN'
        >>> c.number_class(Decimal('-NaN'))
        'NaN'
        >>> c.number_class(Decimal('sNaN'))
        'sNaN'
        >>> c.number_class(123)
        '+Normal'
        plusPlus corresponds to unary prefix plus in Python.

        The operation is evaluated using the same rules as add; the
        operation plus(a) is calculated as add('0', a) where the '0'
        has the same exponent as the operand.

        >>> ExtendedContext.plus(Decimal('1.3'))
        Decimal('1.3')
        >>> ExtendedContext.plus(Decimal('-1.3'))
        Decimal('-1.3')
        >>> ExtendedContext.plus(-1)
        Decimal('-1')
        powerRaises a to the power of b, to modulo if given.

        With two arguments, compute a**b.  If a is negative then b
        must be integral.  The result will be inexact unless b is
        integral and the result is finite and can be expressed exactly
        in 'precision' digits.

        With three arguments, compute (a**b) % modulo.  For the
        three argument form, the following restrictions on the
        arguments hold:

         - all three arguments must be integral
         - b must be nonnegative
         - at least one of a or b must be nonzero
         - modulo must be nonzero and have at most 'precision' digits

        The result of pow(a, b, modulo) is identical to the result
        that would be obtained by computing (a**b) % modulo with
        unbounded precision, but is computed more efficiently.  It is
        always exact.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.power(Decimal('2'), Decimal('3'))
        Decimal('8')
        >>> c.power(Decimal('-2'), Decimal('3'))
        Decimal('-8')
        >>> c.power(Decimal('2'), Decimal('-3'))
        Decimal('0.125')
        >>> c.power(Decimal('1.7'), Decimal('8'))
        Decimal('69.7575744')
        >>> c.power(Decimal('10'), Decimal('0.301029996'))
        Decimal('2.00000000')
        >>> c.power(Decimal('Infinity'), Decimal('-1'))
        Decimal('0')
        >>> c.power(Decimal('Infinity'), Decimal('0'))
        Decimal('1')
        >>> c.power(Decimal('Infinity'), Decimal('1'))
        Decimal('Infinity')
        >>> c.power(Decimal('-Infinity'), Decimal('-1'))
        Decimal('-0')
        >>> c.power(Decimal('-Infinity'), Decimal('0'))
        Decimal('1')
        >>> c.power(Decimal('-Infinity'), Decimal('1'))
        Decimal('-Infinity')
        >>> c.power(Decimal('-Infinity'), Decimal('2'))
        Decimal('Infinity')
        >>> c.power(Decimal('0'), Decimal('0'))
        Decimal('NaN')

        >>> c.power(Decimal('3'), Decimal('7'), Decimal('16'))
        Decimal('11')
        >>> c.power(Decimal('-3'), Decimal('7'), Decimal('16'))
        Decimal('-11')
        >>> c.power(Decimal('-3'), Decimal('8'), Decimal('16'))
        Decimal('1')
        >>> c.power(Decimal('3'), Decimal('7'), Decimal('-16'))
        Decimal('11')
        >>> c.power(Decimal('23E12345'), Decimal('67E189'), Decimal('123456789'))
        Decimal('11729830')
        >>> c.power(Decimal('-0'), Decimal('17'), Decimal('1729'))
        Decimal('-0')
        >>> c.power(Decimal('-23'), Decimal('0'), Decimal('65537'))
        Decimal('1')
        >>> ExtendedContext.power(7, 7)
        Decimal('823543')
        >>> ExtendedContext.power(Decimal(7), 7)
        Decimal('823543')
        >>> ExtendedContext.power(7, Decimal(7), 2)
        Decimal('1')
        Returns a value equal to 'a' (rounded), having the exponent of 'b'.

        The coefficient of the result is derived from that of the left-hand
        operand.  It may be rounded using the current rounding setting (if the
        exponent is being increased), multiplied by a positive power of ten (if
        the exponent is being decreased), or is unchanged (if the exponent is
        already equal to that of the right-hand operand).

        Unlike other operations, if the length of the coefficient after the
        quantize operation would be greater than precision then an Invalid
        operation condition is raised.  This guarantees that, unless there is
        an error condition, the exponent of the result of a quantize is always
        equal to that of the right-hand operand.

        Also unlike other operations, quantize will never raise Underflow, even
        if the result is subnormal and inexact.

        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.001'))
        Decimal('2.170')
        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.01'))
        Decimal('2.17')
        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.1'))
        Decimal('2.2')
        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('1e+0'))
        Decimal('2')
        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('1e+1'))
        Decimal('0E+1')
        >>> ExtendedContext.quantize(Decimal('-Inf'), Decimal('Infinity'))
        Decimal('-Infinity')
        >>> ExtendedContext.quantize(Decimal('2'), Decimal('Infinity'))
        Decimal('NaN')
        >>> ExtendedContext.quantize(Decimal('-0.1'), Decimal('1'))
        Decimal('-0')
        >>> ExtendedContext.quantize(Decimal('-0'), Decimal('1e+5'))
        Decimal('-0E+5')
        >>> ExtendedContext.quantize(Decimal('+35236450.6'), Decimal('1e-2'))
        Decimal('NaN')
        >>> ExtendedContext.quantize(Decimal('-35236450.6'), Decimal('1e-2'))
        Decimal('NaN')
        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e-1'))
        Decimal('217.0')
        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e-0'))
        Decimal('217')
        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e+1'))
        Decimal('2.2E+2')
        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e+2'))
        Decimal('2E+2')
        >>> ExtendedContext.quantize(1, 2)
        Decimal('1')
        >>> ExtendedContext.quantize(Decimal(1), 2)
        Decimal('1')
        >>> ExtendedContext.quantize(1, Decimal(2))
        Decimal('1')
        Just returns 10, as this is Decimal, :)

        >>> ExtendedContext.radix()
        Decimal('10')
        Returns the remainder from integer division.

        The result is the residue of the dividend after the operation of
        calculating integer division as described for divide-integer, rounded
        to precision digits if necessary.  The sign of the result, if
        non-zero, is the same as that of the original dividend.

        This operation will fail under the same conditions as integer division
        (that is, if integer division on the same two operands would fail, the
        remainder cannot be calculated).

        >>> ExtendedContext.remainder(Decimal('2.1'), Decimal('3'))
        Decimal('2.1')
        >>> ExtendedContext.remainder(Decimal('10'), Decimal('3'))
        Decimal('1')
        >>> ExtendedContext.remainder(Decimal('-10'), Decimal('3'))
        Decimal('-1')
        >>> ExtendedContext.remainder(Decimal('10.2'), Decimal('1'))
        Decimal('0.2')
        >>> ExtendedContext.remainder(Decimal('10'), Decimal('0.3'))
        Decimal('0.1')
        >>> ExtendedContext.remainder(Decimal('3.6'), Decimal('1.3'))
        Decimal('1.0')
        >>> ExtendedContext.remainder(22, 6)
        Decimal('4')
        >>> ExtendedContext.remainder(Decimal(22), 6)
        Decimal('4')
        >>> ExtendedContext.remainder(22, Decimal(6))
        Decimal('4')
        Returns to be "a - b * n", where n is the integer nearest the exact
        value of "x / b" (if two integers are equally near then the even one
        is chosen).  If the result is equal to 0 then its sign will be the
        sign of a.

        This operation will fail under the same conditions as integer division
        (that is, if integer division on the same two operands would fail, the
        remainder cannot be calculated).

        >>> ExtendedContext.remainder_near(Decimal('2.1'), Decimal('3'))
        Decimal('-0.9')
        >>> ExtendedContext.remainder_near(Decimal('10'), Decimal('6'))
        Decimal('-2')
        >>> ExtendedContext.remainder_near(Decimal('10'), Decimal('3'))
        Decimal('1')
        >>> ExtendedContext.remainder_near(Decimal('-10'), Decimal('3'))
        Decimal('-1')
        >>> ExtendedContext.remainder_near(Decimal('10.2'), Decimal('1'))
        Decimal('0.2')
        >>> ExtendedContext.remainder_near(Decimal('10'), Decimal('0.3'))
        Decimal('0.1')
        >>> ExtendedContext.remainder_near(Decimal('3.6'), Decimal('1.3'))
        Decimal('-0.3')
        >>> ExtendedContext.remainder_near(3, 11)
        Decimal('3')
        >>> ExtendedContext.remainder_near(Decimal(3), 11)
        Decimal('3')
        >>> ExtendedContext.remainder_near(3, Decimal(11))
        Decimal('3')
        Returns a rotated copy of a, b times.

        The coefficient of the result is a rotated copy of the digits in
        the coefficient of the first operand.  The number of places of
        rotation is taken from the absolute value of the second operand,
        with the rotation being to the left if the second operand is
        positive or to the right otherwise.

        >>> ExtendedContext.rotate(Decimal('34'), Decimal('8'))
        Decimal('400000003')
        >>> ExtendedContext.rotate(Decimal('12'), Decimal('9'))
        Decimal('12')
        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('-2'))
        Decimal('891234567')
        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('0'))
        Decimal('123456789')
        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('+2'))
        Decimal('345678912')
        >>> ExtendedContext.rotate(1333333, 1)
        Decimal('13333330')
        >>> ExtendedContext.rotate(Decimal(1333333), 1)
        Decimal('13333330')
        >>> ExtendedContext.rotate(1333333, Decimal(1))
        Decimal('13333330')
        Returns True if the two operands have the same exponent.

        The result is never affected by either the sign or the coefficient of
        either operand.

        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('0.001'))
        False
        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('0.01'))
        True
        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('1'))
        False
        >>> ExtendedContext.same_quantum(Decimal('Inf'), Decimal('-Inf'))
        True
        >>> ExtendedContext.same_quantum(10000, -1)
        True
        >>> ExtendedContext.same_quantum(Decimal(10000), -1)
        True
        >>> ExtendedContext.same_quantum(10000, Decimal(-1))
        True
        Returns the first operand after adding the second value its exp.

        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('-2'))
        Decimal('0.0750')
        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('0'))
        Decimal('7.50')
        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('3'))
        Decimal('7.50E+3')
        >>> ExtendedContext.scaleb(1, 4)
        Decimal('1E+4')
        >>> ExtendedContext.scaleb(Decimal(1), 4)
        Decimal('1E+4')
        >>> ExtendedContext.scaleb(1, Decimal(4))
        Decimal('1E+4')
        Returns a shifted copy of a, b times.

        The coefficient of the result is a shifted copy of the digits
        in the coefficient of the first operand.  The number of places
        to shift is taken from the absolute value of the second operand,
        with the shift being to the left if the second operand is
        positive or to the right otherwise.  Digits shifted into the
        coefficient are zeros.

        >>> ExtendedContext.shift(Decimal('34'), Decimal('8'))
        Decimal('400000000')
        >>> ExtendedContext.shift(Decimal('12'), Decimal('9'))
        Decimal('0')
        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('-2'))
        Decimal('1234567')
        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('0'))
        Decimal('123456789')
        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('+2'))
        Decimal('345678900')
        >>> ExtendedContext.shift(88888888, 2)
        Decimal('888888800')
        >>> ExtendedContext.shift(Decimal(88888888), 2)
        Decimal('888888800')
        >>> ExtendedContext.shift(88888888, Decimal(2))
        Decimal('888888800')
        Square root of a non-negative number to context precision.

        If the result must be inexact, it is rounded using the round-half-even
        algorithm.

        >>> ExtendedContext.sqrt(Decimal('0'))
        Decimal('0')
        >>> ExtendedContext.sqrt(Decimal('-0'))
        Decimal('-0')
        >>> ExtendedContext.sqrt(Decimal('0.39'))
        Decimal('0.624499800')
        >>> ExtendedContext.sqrt(Decimal('100'))
        Decimal('10')
        >>> ExtendedContext.sqrt(Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.sqrt(Decimal('1.0'))
        Decimal('1.0')
        >>> ExtendedContext.sqrt(Decimal('1.00'))
        Decimal('1.0')
        >>> ExtendedContext.sqrt(Decimal('7'))
        Decimal('2.64575131')
        >>> ExtendedContext.sqrt(Decimal('10'))
        Decimal('3.16227766')
        >>> ExtendedContext.sqrt(2)
        Decimal('1.41421356')
        >>> ExtendedContext.prec
        9
        Return the difference between the two operands.

        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('1.07'))
        Decimal('0.23')
        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('1.30'))
        Decimal('0.00')
        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('2.07'))
        Decimal('-0.77')
        >>> ExtendedContext.subtract(8, 5)
        Decimal('3')
        >>> ExtendedContext.subtract(Decimal(8), 5)
        Decimal('3')
        >>> ExtendedContext.subtract(8, Decimal(5))
        Decimal('3')
        Convert to a string, using engineering notation if an exponent is needed.

        Engineering notation has an exponent which is a multiple of 3.  This
        can leave up to 3 digits to the left of the decimal place and may
        require the addition of either one or two trailing zeros.

        The operation is not affected by the context.

        >>> ExtendedContext.to_eng_string(Decimal('123E+1'))
        '1.23E+3'
        >>> ExtendedContext.to_eng_string(Decimal('123E+3'))
        '123E+3'
        >>> ExtendedContext.to_eng_string(Decimal('123E-10'))
        '12.3E-9'
        >>> ExtendedContext.to_eng_string(Decimal('-123E-12'))
        '-123E-12'
        >>> ExtendedContext.to_eng_string(Decimal('7E-7'))
        '700E-9'
        >>> ExtendedContext.to_eng_string(Decimal('7E+1'))
        '70'
        >>> ExtendedContext.to_eng_string(Decimal('0E+1'))
        '0.00E+3'

        to_sci_stringConverts a number to a string, using scientific notation.

        The operation is not affected by the context.
        Rounds to an integer.

        When the operand has a negative exponent, the result is the same
        as using the quantize() operation using the given operand as the
        left-hand-operand, 1E+0 as the right-hand-operand, and the precision
        of the operand as the precision setting; Inexact and Rounded flags
        are allowed in this operation.  The rounding mode is taken from the
        context.

        >>> ExtendedContext.to_integral_exact(Decimal('2.1'))
        Decimal('2')
        >>> ExtendedContext.to_integral_exact(Decimal('100'))
        Decimal('100')
        >>> ExtendedContext.to_integral_exact(Decimal('100.0'))
        Decimal('100')
        >>> ExtendedContext.to_integral_exact(Decimal('101.5'))
        Decimal('102')
        >>> ExtendedContext.to_integral_exact(Decimal('-101.5'))
        Decimal('-102')
        >>> ExtendedContext.to_integral_exact(Decimal('10E+5'))
        Decimal('1.0E+6')
        >>> ExtendedContext.to_integral_exact(Decimal('7.89E+77'))
        Decimal('7.89E+77')
        >>> ExtendedContext.to_integral_exact(Decimal('-Inf'))
        Decimal('-Infinity')
        Rounds to an integer.

        When the operand has a negative exponent, the result is the same
        as using the quantize() operation using the given operand as the
        left-hand-operand, 1E+0 as the right-hand-operand, and the precision
        of the operand as the precision setting, except that no flags will
        be set.  The rounding mode is taken from the context.

        >>> ExtendedContext.to_integral_value(Decimal('2.1'))
        Decimal('2')
        >>> ExtendedContext.to_integral_value(Decimal('100'))
        Decimal('100')
        >>> ExtendedContext.to_integral_value(Decimal('100.0'))
        Decimal('100')
        >>> ExtendedContext.to_integral_value(Decimal('101.5'))
        Decimal('102')
        >>> ExtendedContext.to_integral_value(Decimal('-101.5'))
        Decimal('-102')
        >>> ExtendedContext.to_integral_value(Decimal('10E+5'))
        Decimal('1.0E+6')
        >>> ExtendedContext.to_integral_value(Decimal('7.89E+77'))
        Decimal('7.89E+77')
        >>> ExtendedContext.to_integral_value(Decimal('-Inf'))
        Decimal('-Infinity')
        (%r, %r, %r)Normalizes op1, op2 to have the same exp and length of coefficient.

    Done during addition.
    tmptmp_lenother_len Given integers n and e, return n * 10**e if it's an integer, else None.

    The computation is designed to avoid computing large powers of 10
    unnecessarily.

    >>> _decimal_lshift_exact(3, 4)
    30000
    >>> _decimal_lshift_exact(300, -999999999)  # returns None

    str_nval_n_sqrt_nearestClosest integer to the square root of the positive integer n.  a is
    an initial approximation to the square root.  Any positive integer
    will do for a, but the closer a is to the square root of n the
    faster convergence will be.

    Both arguments to _sqrt_nearest should be positive._rshift_nearestGiven an integer x and a nonnegative integer shift, return closest
    integer to x / 2**shift; use round-to-even in case of a tie.

    _div_nearestClosest integer to a/b, a and b positive integers; rounds to even
    in the case of a tie.

    _ilogMInteger approximation to M*log(x/M), with absolute error boundable
    in terms only of x/M.

    Given positive integers x and M, return an integer approximation to
    M * log(x/M).  For L = 8 and 0.1 <= x/M <= 10 the difference
    between the approximation and the exact result is at most 22.  For
    L = 8 and 1.0 <= x/M <= 10.0 the difference is at most 15.  In
    both cases these are upper bounds on the error; it will usually be
    much smaller.RyshiftGiven integers c, e and p with c > 0, p >= 0, compute an integer
    approximation to 10**p * log10(c*10**e), with an absolute error of
    at most 1.  Assumes that c*10**e is not exactly 1.log_d_log10_digitslog_10log_tenpowerGiven integers c, e and p with c > 0, compute an integer
    approximation to 10**p * log(c*10**e), with an absolute error of
    at most 1.  Assumes that c*10**e is not exactly 1.f_log_ten_Log10MemoizeClass to compute, store, and allow retrieval of, digits of the
    constant log(10) = 2.302585....  This constant is needed by
    Decimal.ln, Decimal.log10, Decimal.exp and Decimal.__pow__.23025850929940456840179914546843642076011014886getdigitsGiven an integer p >= 0, return floor(10**p)*log(10).

        For example, self.getdigits(3) returns 2302.
        p should be nonnegative_iexpGiven integers x and M, M > 0, such that x/M is small in absolute
    value, compute an integer approximation to M*exp(x/M).  For 0 <=
    x/M <= 2.4, the absolute error in the result is bounded by 60 (and
    is usually much smaller).MshiftCompute an approximation to exp(c*10**e), with p decimal places of
    precision.

    Returns integers d, f such that:

      10**(p-1) <= d <= 10**p, and
      (d-1)*10**f < exp(c*10**e) < (d+1)*10**f

    In other words, d*10**f is an approximation to exp(c*10**e) with p
    digits of precision, and with an error in d of at most 1.  This is
    almost, but not quite, the same as the error being < 1ulp: when d
    = 10**(p-1) the error could be up to 10 ulp.cshiftquotGiven integers xc, xe, yc and ye representing Decimals x = xc*10**xe and
    y = yc*10**ye, compute x**y.  Returns a pair of integers (c, e) such that:

      10**(p-1) <= c <= 10**p, and
      (c-1)*10**e < x**y < (c+1)*10**e

    in other words, c*10**e is an approximation to x**y with p digits
    of precision, and with an error in c of at most 1.  (This is
    almost, but not quite, the same as the error being < 1ulp: when c
    == 10**(p-1) we can only guarantee error < 10ulp.)

    We assume that: x is positive and not equal to 1, and y is nonzero.
    lxcpc70correctionCompute a lower bound for 100*log10(c) for a positive integer c.The argument to _log10_lb should be nonnegative.str_callow_floatConvert other to Decimal.

    Verifies that it's ok to use in an implicit construction.
    If allow_float is true, allow conversion from float;  this
    is used in the comparison methods (__eq__ and friends).

    Given a Decimal instance self and a Python object other, return
    a pair (s, o) of Decimal instances such that "s op o" is
    equivalent to "self op other" for any of the 6 comparison
    operators "op".

    RationalComplex999999        # A numeric string consists of:
#    \s*
    (?P<sign>[-+])?              # an optional sign, followed by either...
    (
        (?=\d|\.\d)              # ...a number (with at least one digit)
        (?P<int>\d*)             # having a (possibly empty) integer part
        (\.(?P<frac>\d*))?       # followed by an optional fractional part
        (E(?P<exp>[-+]?\d+))?    # followed by an optional exponent, or...
    |
        Inf(inity)?              # ...an infinity, or...
    |
        (?P<signal>s)?           # ...an (optionally signaling)
        NaN                      # NaN
        (?P<diag>\d*)            # with (possibly empty) diagnostic info.
    )
#    \s*
    \Z
0*$50*$\A
(?:
   (?P<fill>.)?
   (?P<align>[<>=^])
)?
(?P<sign>[-+ ])?
(?P<alt>\#)?
(?P<zeropad>0)?
(?P<minimumwidth>(?!0)\d+)?
(?P<thousands_sep>,)?
(?:\.(?P<precision>0|(?!0)\d+))?
(?P<type>[eEfFgGn%])?
\Z
_parse_format_specifier_regexParse and validate a format specifier.

    Turns a standard numeric format specifier into a dict, with the
    following entries:

      fill: fill character to pad field to minimum width
      align: alignment type, either '<', '>', '=' or '^'
      sign: either '+', '-' or ' '
      minimumwidth: nonnegative integer giving minimum width
      zeropad: boolean, indicating whether to pad with zeros
      thousands_sep: string to use as thousands separator, or ''
      grouping: grouping for thousands separators, in format
        used by localeconv
      decimal_point: string to use for decimal point
      precision: nonnegative integer giving precision, or None
      type: one of the characters 'eEfFgG%', or None

    Invalid format specifier: format_dictfillalignzeropadFill character conflicts with '0' in format specifier: "Fill character conflicts with '0'"" in format specifier: "Alignment conflicts with '0' in format specifier: "Alignment conflicts with '0' in ""format specifier: "minimumwidthgGnthousands_sepExplicit thousands separator conflicts with 'n' type in format specifier: "Explicit thousands separator conflicts with ""'n' type in format specifier: "groupingdecimal_pointGiven an unpadded, non-aligned numeric string 'body' and sign
    string 'sign', add padding and alignment conforming to the given
    format specifier dictionary 'spec' (as produced by
    parse_format_specifier).

    ^halfUnrecognised alignment field_group_lengthsConvert a localeconv-style grouping into a (possibly infinite)
    iterable of integers representing group lengths.

    unrecognised format for grouping_insert_thousands_sepmin_widthInsert thousands separators into a digit string.

    spec is a dictionary whose keys should include 'thousands_sep' and
    'grouping'; typically it's the result of parsing the format
    specifier using _parse_format_specifier.

    The min_width keyword argument gives the minimum length of the
    result, which will be padded on the left with zeros if necessary.

    If necessary, the zero padding adds an extra '0' on the left to
    avoid a leading thousands separator.  For example, inserting
    commas every three digits in '123456', with min_width=8, gives
    '0,123,456', even though that has length 9.

    group length should be positiveis_negativeDetermine sign character. +Format a number, given the following data:

    is_negative: true if the number is negative, else false
    intpart: string of digits that must appear before the decimal point
    fracpart: string of digits that must come after the point
    exp: exponent, as an integer
    spec: dictionary resulting from parsing the format specifier

    This function uses the information in spec to:
      insert separators (decimal separator and thousands separators)
      format the sign
      format the exponent
      add trailing '%' for the '%' type
      zero-pad if necessary
      fill and align if necessary
    altechar{0}{1:+}Inf-Inf# Copyright (c) 2004 Python Software Foundation.# All rights reserved.# Written by Eric Price <eprice at tjhsst.edu>#    and Facundo Batista <facundo at taniquetil.com.ar>#    and Raymond Hettinger <python at rcn.com>#    and Aahz <aahz at pobox.com>#    and Tim Peters# This module should be kept in sync with the latest updates of the# IBM specification as it evolves.  Those updates will be treated# as bug fixes (deviation from the spec is a compatibility, usability# bug) and will be backported.  At this point the spec is stabilizing# and the updates are becoming fewer, smaller, and less significant.# Two major classes# Named tuple representation# Contexts# Exceptions# Exceptional conditions that trigger InvalidOperation# Constants for use in setting up contexts# Functions for manipulating contexts# Limits for the C version for compatibility# C version: compile time choice that enables the thread local context (deprecated, now always true)# C version: compile time choice that enables the coroutine local context# sys.modules lookup (--without-threads)# For pickling# Highest version of the spec this complies with# See http://speleotrove.com/decimal/# compatible libmpdec version# Rounding# Compatibility with the C version# Errors# List of public traps and flags# Map conditions (per the spec) to signals# Valid rounding modes##### Context Functions ################################################### The getcontext() and setcontext() function manage access to a thread-local# current context.# Don't contaminate the namespace##### Decimal class ######################################################## Do not subclass Decimal from numbers.Real and do not register it as such# (because Decimals are not interoperable with floats).  See the notes in# numbers.py for more detail.# Generally, the value of the Decimal instance is given by#  (-1)**_sign * _int * 10**_exp# Special values are signified by _is_special == True# We're immutable, so use __new__ not __init__# Note that the coefficient, self._int, is actually stored as# a string rather than as a tuple of digits.  This speeds up# the "digits to integer" and "integer to digits" conversions# that are used in almost every arithmetic operation on# Decimals.  This is an internal detail: the as_tuple function# and the Decimal constructor still deal with tuples of# digits.# From a string# REs insist on real strings, so we can too.# finite number# NaN# infinity# From an integer# From another decimal# From an internal working value# tuple/list conversion (possibly from as_tuple())# process sign.  The isinstance test rejects floats# infinity: value[1] is ignored# process and validate the digits in value[1]# skip leading zeros# NaN: digits form the diagnostic# finite number: digits give the coefficient# handle integer inputs# check for zeros;  Decimal('0') == Decimal('-0')# If different signs, neg one is less# self_adjusted < other_adjusted# Note: The Decimal standard doesn't cover rich comparisons for# Decimals.  In particular, the specification is silent on the# subject of what should happen for a comparison involving a NaN.# We take the following approach:#   == comparisons involving a quiet NaN always return False#   != comparisons involving a quiet NaN always return True#   == or != comparisons involving a signaling NaN signal#      InvalidOperation, and return False or True as above if the#      InvalidOperation is not trapped.#   <, >, <= and >= comparisons involving a (quiet or signaling)#      NaN signal InvalidOperation, and return False if the# This behavior is designed to conform as closely as possible to# that specified by IEEE 754.# Compare(NaN, NaN) = NaN# In order to make sure that the hash of a Decimal instance# agrees with the hash of a numerically equal integer, float# or Fraction, we follow the rules for numeric hashes outlined# in the documentation.  (See library docs, 'Built-in Types').# Find n, d in lowest terms such that abs(self) == n / d;# we'll deal with the sign later.# self is an integer.# Find d2, d5 such that abs(self) = n / (2**d2 * 5**d5).# (n & -n).bit_length() - 1 counts trailing zeros in binary# representation of n (provided n is nonzero).# Invariant:  eval(repr(d)) == d# self._exp == 'N'# number of digits of self._int to left of decimal point# dotplace is number of digits of self._int to the left of the# decimal point in the mantissa of the output string (that is,# after adjusting the exponent)# no exponent required# usual scientific notation: 1 digit on left of the point# engineering notation, zero# engineering notation, nonzero# -Decimal('0') is Decimal('0'), not Decimal('-0'), except# in ROUND_FLOOR rounding mode.# + (-0) = 0, except in ROUND_FLOOR rounding mode.# If both INF, same sign => same as both, opposite => error.# Can't both be infinity here# If the answer is 0, the sign should be negative, in this case.# Equal and opposite# OK, now abs(op1) > abs(op2)# So we know the sign, and op1 > 0.# Now, op1 > abs(op2) > 0# self - other is computed as self + other.copy_negate()# Special case for multiplying by zero# Fixing in case the exponent is out of bounds# Special case for multiplying by power of 10# Special cases for zeroes# OK, so neither = 0, INF or NaN# result is not exact; adjust to ensure correct rounding# result is exact; get as close to ideal exponent as possible# Here the quotient is too large to be representable# self == +/-infinity -> InvalidOperation# other == 0 -> either InvalidOperation or DivisionUndefined# other = +/-infinity -> remainder = self# self = 0 -> remainder = self, with ideal exponent# catch most cases of large or small quotient# expdiff >= prec+1 => abs(self/other) > 10**prec# expdiff <= -2 => abs(self/other) < 0.1# adjust both arguments to have the same exponent, then divide# remainder is r*10**ideal_exponent; other is +/-op2.int *# 10**ideal_exponent.   Apply correction to ensure that# abs(remainder) <= abs(other)/2# result has same sign as self unless r is negative# maximum length of payload is precision if clamp=0,# precision-1 if clamp=1.# decapitate payload if necessary# self is +/-Infinity; return unaltered# if self is zero then exponent should be between Etiny and# Emax if clamp==0, and between Etiny and Etop if clamp==1.# exp_min is the smallest allowable exponent of the result,# equal to max(self.adjusted()-context.prec+1, Etiny)# overflow: exp_min > Etop iff self.adjusted() > Emax# round if self has too many digits# check whether the rounding pushed the exponent out of range# raise the appropriate signals, taking care to respect# the precedence described in the specification# raise Clamped on underflow to 0# fold down if clamp == 1 and self has too few digits# here self was representable to begin with; return unchanged# for each of the rounding functions below:#   self is a finite, nonzero Decimal#   prec is an integer satisfying 0 <= prec < len(self._int)# each function returns either -1, 0, or 1, as follows:#   1 indicates that self should be rounded up (away from zero)#   0 indicates that self should be truncated, and that all the#     digits to be truncated are zeros (so the value is unchanged)#  -1 indicates that there are nonzero digits to be truncated# two-argument form: use the equivalent quantize call# one-argument form# compute product; raise InvalidOperation if either operand is# a signaling NaN or if the product is zero times infinity.# deal with NaNs: if there are any sNaNs then first one wins,# (i.e. behaviour for NaNs is identical to that of fma)# check inputs: we apply same restrictions as Python's pow()# additional restriction for decimal: the modulus must be less# than 10**prec in absolute value# define 0**0 == NaN, for consistency with two-argument pow# (even though it hurts!)# compute sign of result# convert modulo to a Python integer, and self and other to# Decimal integers (i.e. force their exponents to be >= 0)# compute result using integer pow()# In the comments below, we write x for the value of self and y for the# value of other.  Write x = xc*10**xe and abs(y) = yc*10**ye, with xc# and yc positive integers not divisible by 10.# The main purpose of this method is to identify the *failure*# of x**y to be exactly representable with as little effort as# possible.  So we look for cheap and easy tests that# eliminate the possibility of x**y being exact.  Only if all# these tests are passed do we go on to actually compute x**y.# Here's the main idea.  Express y as a rational number m/n, with m and# n relatively prime and n>0.  Then for x**y to be exactly# representable (at *any* precision), xc must be the nth power of a# positive integer and xe must be divisible by n.  If y is negative# then additionally xc must be a power of either 2 or 5, hence a power# of 2**n or 5**n.# There's a limit to how small |y| can be: if y=m/n as above# then:#  (1) if xc != 1 then for the result to be representable we#      need xc**(1/n) >= 2, and hence also xc**|y| >= 2.  So#      if |y| <= 1/nbits(xc) then xc < 2**nbits(xc) <=#      2**(1/|y|), hence xc**|y| < 2 and the result is not#      representable.#  (2) if xe != 0, |xe|*(1/n) >= 1, so |xe|*|y| >= 1.  Hence if#      |y| < 1/|xe| then the result is not representable.# Note that since x is not equal to 1, at least one of (1) and# (2) must apply.  Now |y| < 1/nbits(xc) iff |yc|*nbits(xc) <# 10**-ye iff len(str(|yc|*nbits(xc)) <= -ye.# There's also a limit to how large y can be, at least if it's# positive: the normalized result will have coefficient xc**y,# so if it's representable then xc**y < 10**p, and y <# p/log10(xc).  Hence if y*log10(xc) >= p then the result is# not exactly representable.# if len(str(abs(yc*xe)) <= -ye then abs(yc*xe) < 10**-ye,# so |y| < 1/xe and the result is not representable.# Similarly, len(str(abs(yc)*xc_bits)) <= -ye implies |y|# < 1/nbits(xc).# case where xc == 1: result is 10**(xe*y), with xe*y# required to be an integer# result is now 10**(xe * 10**ye);  xe * 10**ye must be integral# if other is a nonnegative integer, use ideal exponent# case where y is negative: xc must be either a power# of 2 or a power of 5.# quick test for power of 2# now xc is a power of 2; e is its exponent# We now have:#   x = 2**e * 10**xe, e > 0, and y < 0.# The exact result is:#   x**y = 5**(-e*y) * 10**(e*y + xe*y)# provided that both e*y and xe*y are integers.  Note that if# 5**(-e*y) >= 10**p, then the result can't be expressed# exactly with p digits of precision.# Using the above, we can guard against large values of ye.# 93/65 is an upper bound for log(10)/log(5), so if#   ye >= len(str(93*p//65))# then#   -e*y >= -y >= 10**ye > 93*p/65 > p*log(10)/log(5),# so 5**(-e*y) >= 10**p, and the coefficient of the result# can't be expressed in p digits.# emax >= largest e such that 5**e < 10**p.# Find -e*y and -xe*y; both must be integers# e >= log_5(xc) if xc is a power of 5; we have# equality all the way up to xc=5**2658# Guard against large values of ye, using the same logic as in# the 'xc is a power of 2' branch.  10/3 is an upper bound for# log(10)/log(2).# now y is positive; find m and n such that y = m/n# compute nth root of xc*10**xe# if 1 < xc < 2**n then xc isn't an nth power# compute nth root of xc using Newton's method# initial estimate# now xc*10**xe is the nth root of the original xc*10**xe# compute mth power of xc*10**xe# if m > p*100//_log10_lb(xc) then m > p/log10(xc), hence xc**m ># 10**p and the result is not representable.# by this point the result *is* exactly representable# adjust the exponent to get as close as possible to the ideal# exponent, if necessary# either argument is a NaN => result is NaN# 0**0 = NaN (!), x**0 = 1 for nonzero x (including +/-Infinity)# result has sign 1 iff self._sign is 1 and other is an odd integer# -ve**noninteger = NaN# (-0)**noninteger = 0**noninteger# negate self, without doing any unwanted rounding# 0**(+ve or Inf)= 0; 0**(-ve or -Inf) = Infinity# Inf**(+ve or Inf) = Inf; Inf**(-ve or -Inf) = 0# 1**other = 1, but the choice of exponent and the flags# depend on the exponent of self, and on whether other is a# positive integer, a negative integer, or neither# exp = max(self._exp*max(int(other), 0),# 1-context.prec) but evaluating int(other) directly# is dangerous until we know other is small (other# could be 1e999999999)# compute adjusted exponent of self# self ** infinity is infinity if self > 1, 0 if self < 1# self ** -infinity is infinity if self < 1, 0 if self > 1# from here on, the result always goes through the call# to _fix at the end of this function.# crude test to catch cases of extreme overflow/underflow.  If# log10(self)*other >= 10**bound and bound >= len(str(Emax))# then 10**bound >= 10**len(str(Emax)) >= Emax+1 and hence# self**other >= 10**(Emax+1), so overflow occurs.  The test# for underflow is similar.# self > 1 and other +ve, or self < 1 and other -ve# possibility of overflow# self > 1 and other -ve, or self < 1 and other +ve# possibility of underflow to 0# try for an exact result with precision +1# usual case: inexact result, x**y computed directly as exp(y*log(x))# compute correctly rounded result:  start with precision +3,# then increase precision until result is unambiguously roundable# unlike exp, ln and log10, the power function respects the# rounding mode; no need to switch to ROUND_HALF_EVEN here# There's a difficulty here when 'other' is not an integer and# the result is exact.  In this case, the specification# requires that the Inexact flag be raised (in spite of# exactness), but since the result is exact _fix won't do this# for us.  (Correspondingly, the Underflow signal should also# be raised for subnormal results.)  We can't directly raise# these signals either before or after calling _fix, since# that would violate the precedence for signals.  So we wrap# the ._fix call in a temporary context, and reraise# afterwards.# pad with zeros up to length context.prec+1 if necessary; this# ensures that the Rounded signal will be raised.# create a copy of the current context, with cleared flags/traps# round in the new context# raise Inexact, and if necessary, Underflow# propagate signals to the original context; _fix could# have raised any of Overflow, Underflow, Subnormal,# Inexact, Rounded, Clamped.  Overflow needs the correct# arguments.  Note that the order of the exceptions is# important here.# if both are inf, it is OK# exp._exp should be between Etiny and Emax# raise appropriate flags# call to fix takes care of any necessary folddown, and# signals Clamped if necessary# pad answer with zeros if necessary# too many digits; round and lose data.  If self.adjusted() <# exp-1, replace self by 10**(exp-1) before rounding# it can happen that the rescale alters the adjusted exponent;# for example when rounding 99.97 to 3 significant figures.# When this happens we end up with an extra 0 at the end of# the number; a second rescale fixes this.# the method name changed, but we provide also the old one, for compatibility# exponent = self._exp // 2.  sqrt(-0) = -0# At this point self represents a positive number.  Let p be# the desired precision and express self in the form c*100**e# with c a positive real number and e an integer, c and e# being chosen so that 100**(p-1) <= c < 100**p.  Then the# (exact) square root of self is sqrt(c)*10**e, and 10**(p-1)# <= sqrt(c) < 10**p, so the closest representable Decimal at# precision p is n*10**e where n = round_half_even(sqrt(c)),# the closest integer to sqrt(c) with the even integer chosen# in the case of a tie.# To ensure correct rounding in all cases, we use the# following trick: we compute the square root to an extra# place (precision p+1 instead of precision p), rounding down.# Then, if the result is inexact and its last digit is 0 or 5,# we increase the last digit to 1 or 6 respectively; if it's# exact we leave the last digit alone.  Now the final round to# p places (or fewer in the case of underflow) will round# correctly and raise the appropriate flags.# use an extra digit of precision# write argument in the form c*100**e where e = self._exp//2# is the 'ideal' exponent, to be used if the square root is# exactly representable.  l is the number of 'digits' of c in# base 100, so that 100**(l-1) <= c < 100**l.# rescale so that c has exactly prec base 100 'digits'# find n = floor(sqrt(c)) using Newton's method# result is exact; rescale to use ideal exponent e# assert n % 10**shift == 0# result is not exact; fix last digit as described above# round, and fit to current context# If one operand is a quiet NaN and the other is number, then the# number is always returned# If both operands are finite and equal in numerical value# then an ordering is applied:# If the signs differ then max returns the operand with the# positive sign and min returns the operand with the negative sign# If the signs are the same then the exponent is used to select# the result.  This is exactly the ordering used in compare_total.# If NaN or Infinity, self._exp is string# if one is negative and the other is positive, it's easy# let's handle both NaN types# compare payloads as though they're integers# exp(NaN) = NaN# exp(-Infinity) = 0# exp(0) = 1# exp(Infinity) = Infinity# the result is now guaranteed to be inexact (the true# mathematical result is transcendental). There's no need to# raise Rounded and Inexact here---they'll always be raised as# a result of the call to _fix.# we only need to do any computation for quite a small range# of adjusted exponents---for example, -29 <= adj <= 10 for# the default context.  For smaller exponent the result is# indistinguishable from 1 at the given precision, while for# larger exponent the result either overflows or underflows.# overflow# underflow to 0# p+1 digits; final round will raise correct flags# general case# compute correctly rounded result: increase precision by# 3 digits at a time until we get an unambiguously# roundable result# at this stage, ans should round correctly with *any*# rounding mode, not just with ROUND_HALF_EVEN# for 0.1 <= x <= 10 we use the inequalities 1-1/x <= ln(x) <= x-1# argument >= 10; we use 23/10 = 2.3 as a lower bound for ln(10)# argument <= 0.1# 1 < self < 10# adj == -1, 0.1 <= self < 1# ln(NaN) = NaN# ln(0.0) == -Infinity# ln(Infinity) = Infinity# ln(1.0) == 0.0# ln(negative) raises InvalidOperation# result is irrational, so necessarily inexact# correctly rounded result: repeatedly increase precision by 3# until we get an unambiguously roundable result# at least p+3 places# assert len(str(abs(coeff)))-p >= 1# For x >= 10 or x < 0.1 we only need a bound on the integer# part of log10(self), and this comes directly from the# exponent of x.  For 0.1 <= x <= 10 we use the inequalities# 1-1/x <= log(x) <= x-1. If x > 1 we have |log10(x)| ># (1-1/x)/2.31 > 0.  If x < 1 then |log10(x)| > (1-x)/2.31 > 0# self >= 10# self < 0.1# log10(NaN) = NaN# log10(0.0) == -Infinity# log10(Infinity) = Infinity# log10(negative or -Infinity) raises InvalidOperation# log10(10**n) = n# answer may need rounding# correctly rounded result: repeatedly increase precision# until result is unambiguously roundable# logb(NaN) = NaN# logb(+/-Inf) = +Inf# logb(0) = -Inf, DivisionByZero# otherwise, simply return the adjusted exponent of self, as a# Decimal.  Note that no attempt is made to fit the result# into the current context.# fill to context.prec# make the operation, and clean starting zeroes# comparison == 1# decide which flags to raise using value of ans# if precision == 1 then we don't raise Clamped for a# result 0E-Etiny.# just a normal, regular, boring number, :)# get values, pad if necessary# let's rotate!# let's shift!# Support for pickling, copy, and deepcopy# I'm immutable; therefore I am my own clone# My components are also immutable# PEP 3101 support.  the _localeconv keyword argument should be# considered private: it's provided for ease of testing only.# Note: PEP 3101 says that if the type is not present then# there should be at least one digit after the decimal point.# We take the liberty of ignoring this requirement for# Decimal---it's presumably there to make sure that# format(float, '') behaves similarly to str(float).# special values don't care about the type or precision# a type of None defaults to 'g' or 'G', depending on context# if type is '%', adjust exponent of self accordingly# round if necessary, taking rounding mode from the context# special case: zeros with a positive exponent can't be# represented in fixed point; rescale them to 0e0.# figure out placement of the decimal point# find digits before and after decimal point, and get exponent# done with the decimal-specific stuff;  hand over the rest# of the formatting to the _format_number function# Register Decimal as a kind of Number (an abstract base class).# However, do not register it as Real (because Decimals are not# interoperable with floats).##### Context class ######################################################## Set defaults; for everything except flags and _ignored_flags,# inherit from DefaultContext.# raise TypeError even for strings to have consistency# among various implementations.# Don't touch the flag# The errors define how to handle themselves.# Errors should only be risked on copies of the context# self._ignored_flags = []# Do not mutate-- This way, copies of a context leave the original# alone.# We inherit object.__hash__, so we must deny this explicitly# An exact conversion# Apply the context rounding# Methods# sign: 0 or 1# int:  int# exp:  None, int, or string# assert isinstance(value, tuple)# Let exp = min(tmp.exp - 1, tmp.adjusted() - precision - 1).# Then adding 10**exp to tmp has the same effect (after rounding)# as adding any positive quantity smaller than 10**exp; similarly# for subtraction.  So if other is smaller than 10**exp we replace# it with 10**exp.  This avoids tmp.exp - other.exp getting too large.##### Integer arithmetic functions used by ln, log10, exp and __pow__ ###### val_n = largest power of 10 dividing n.# The basic algorithm is the following: let log1p be the function# log1p(x) = log(1+x).  Then log(x/M) = log1p((x-M)/M).  We use# the reduction#    log1p(y) = 2*log1p(y/(1+sqrt(1+y)))# repeatedly until the argument to log1p is small (< 2**-L in# absolute value).  For small y we can use the Taylor series# expansion#    log1p(y) ~ y - y**2/2 + y**3/3 - ... - (-y)**T/T# truncating at T such that y**T is small enough.  The whole# computation is carried out in a form of fixed-point arithmetic,# with a real number z being represented by an integer# approximation to z*M.  To avoid loss of precision, the y below# is actually an integer approximation to 2**R*y*M, where R is the# number of reductions performed so far.# argument reduction; R = number of reductions performed# Taylor series with T terms# increase precision by 2; compensate for this by dividing# final result by 100# write c*10**e as d*10**f with either:#   f >= 0 and 1 <= d <= 10, or#   f <= 0 and 0.1 <= d <= 1.# Thus for c*10**e close to 1, f = 0# error < 5 + 22 = 27# error < 1# exact# error < 2.31# error < 0.5# Increase precision by 2. The precision increase is compensated# for at the end with a division by 100.# rewrite c*10**e as d*10**f with either f >= 0 and 1 <= d <= 10,# or f <= 0 and 0.1 <= d <= 1.  Then we can compute 10**p * log(c*10**e)# as 10**p * log(d) + 10**p*f * log(10).# compute approximation to 10**p*log(d), with error < 27# error of <= 0.5 in c# _ilog magnifies existing error in c by a factor of at most 10# p <= 0: just approximate the whole thing by 0; error < 2.31# compute approximation to f*10**p*log(10), with error < 11.# error in f * _log10_digits(p+extra) < |f| * 1 = |f|# after division, error < |f|/10**extra + 0.5 < 10 + 0.5 < 11# error in sum < 11+27 = 38; error after division < 0.38 + 0.5 < 1# digits are stored as a string, for quick conversion to# integer in the case that we've already computed enough# digits; the stored digits should always be correct# (truncated, not rounded to nearest).# compute p+3, p+6, p+9, ... digits; continue until at# least one of the extra digits is nonzero# compute p+extra digits, correct to within 1ulp# keep all reliable digits so far; remove trailing zeros# and next nonzero digit# Algorithm: to compute exp(z) for a real number z, first divide z# by a suitable power R of 2 so that |z/2**R| < 2**-L.  Then# compute expm1(z/2**R) = exp(z/2**R) - 1 using the usual Taylor# series#     expm1(x) = x + x**2/2! + x**3/3! + ...# Now use the identity#     expm1(2x) = expm1(x)*(expm1(x)+2)# R times to compute the sequence expm1(z/2**R),# expm1(z/2**(R-1)), ... , exp(z/2), exp(z).# Find R such that x/2**R/M <= 2**-L# Taylor series.  (2**L)**T > M# Expansion# we'll call iexp with M = 10**(p+2), giving p+3 digits of precision# compute log(10) with extra precision = adjusted exponent of c*10**e# compute quotient c*10**e/(log(10)) = c*10**(e+q)/(log(10)*10**q),# rounding down# reduce remainder back to original precision# error in result of _iexp < 120;  error after division < 0.62# Find b such that 10**(b-1) <= |y| <= 10**b# log(x) = lxc*10**(-p-b-1), to p+b+1 places after the decimal point# compute product y*log(x) = yc*lxc*10**(-p-b-1+ye) = pc*10**(-p-1)# we prefer a result that isn't exactly 1; this makes it# easier to compute a correctly rounded result in __pow__# if x**y > 1:##### Helper Functions ##################################################### Comparison with a Rational instance (also includes integers):# self op n/d <=> self*d op n (for n and d integers, d positive).# A NaN or infinity can be left unchanged without affecting the# comparison result.# Comparisons with float and complex types.  == and != comparisons# with complex numbers should succeed, returning either True or False# as appropriate.  Other comparisons return NotImplemented.##### Setup Specific Contexts ############################################# The default context prototype used by Context()# Is mutable, so that new contexts can have different default values# Pre-made alternate contexts offered by the specification# Don't change these; the user should be able to select these# contexts and be able to reproduce results from other implementations# of the spec.##### crud for parsing strings ############################################## Regular expression used for parsing numeric strings.  Additional# comments:# 1. Uncomment the two '\s*' lines to allow leading and/or trailing# whitespace.  But note that the specification disallows whitespace in# a numeric string.# 2. For finite numbers (not infinities and NaNs) the body of the# number between the optional sign and the optional exponent must have# at least one decimal digit, possibly after the decimal point.  The# lookahead expression '(?=\d|\.\d)' checks this.##### PEP3101 support functions ############################################### The functions in this section have little to do with the Decimal# class, and could potentially be reused or adapted for other pure# Python numeric classes that want to implement __format__# A format specifier for Decimal looks like:#   [[fill]align][sign][#][0][minimumwidth][,][.precision][type]# The locale module is only needed for the 'n' format specifier.  The# rest of the PEP 3101 code functions quite happily without it, so we# don't care too much if locale isn't present.# get the dictionary# zeropad; defaults for fill and alignment.  If zero padding# is requested, the fill and align fields should be absent.# PEP 3101 originally specified that the default alignment should# be left;  it was later agreed that right-aligned makes more sense# for numeric types.  See http://bugs.python.org/issue6857.# default sign handling: '-' for negative, '' for positive# minimumwidth defaults to 0; precision remains None if not given# if format type is 'g' or 'G' then a precision of 0 makes little# sense; convert it to 1.  Same if format type is unspecified.# determine thousands separator, grouping, and decimal separator, and# add appropriate entries to format_dict# apart from separators, 'n' behaves just like 'g'# how much extra space do we have to play with?# The result from localeconv()['grouping'], and the input to this# function, should be a list of integers in one of the# following three forms:#   (1) an empty list, or#   (2) nonempty list of positive integers + [0]#   (3) list of positive integers + [locale.CHAR_MAX], or# max(..., 1) forces at least 1 digit to the left of a separator##### Useful Constants (internal use only) ################################# Reusable defaults# _SignedInfinity[sign] is infinity w/ that sign# Constants related to the hash implementation;  hash(x) is based# on the reduction of x modulo _PyHASH_MODULUS# hash values to use for positive and negative infinities, and nans# _PyHASH_10INV is the inverse of 10 modulo the prime _PyHASH_MODULUSb'
This is an implementation of decimal floating point arithmetic based on
the General Decimal Arithmetic Specification:

    http://speleotrove.com/decimal/decarith.html

and IEEE standard 854-1987:

    http://en.wikipedia.org/wiki/IEEE_854-1987

Decimal floating point has finite precision with arbitrarily large bounds.

The purpose of this module is to support arithmetic using familiar
"schoolhouse" rules and to avoid some of the tricky representation
issues associated with binary floating point.  The package is especially
useful for financial applications or for contexts where users have
expectations that are at odds with binary floating point (for instance,
in binary floating point, 1.00 % 0.1 gives 0.09999999999999995 instead
of 0.0; Decimal('1.00') % Decimal('0.1') returns the expected
Decimal('0.00')).

Here are some examples of using the decimal module:

>>> from decimal import *
>>> setcontext(ExtendedContext)
>>> Decimal(0)
Decimal('0')
>>> Decimal('1')
Decimal('1')
>>> Decimal('-.0123')
Decimal('-0.0123')
>>> Decimal(123456)
Decimal('123456')
>>> Decimal('123.45e12345678')
Decimal('1.2345E+12345680')
>>> Decimal('1.33') + Decimal('1.27')
Decimal('2.60')
>>> Decimal('12.34') + Decimal('3.87') - Decimal('18.41')
Decimal('-2.20')
>>> dig = Decimal(1)
>>> print(dig / Decimal(3))
0.333333333
>>> getcontext().prec = 18
>>> print(dig / Decimal(3))
0.333333333333333333
>>> print(dig.sqrt())
1
>>> print(Decimal(3).sqrt())
1.73205080756887729
>>> print(Decimal(3) ** 123)
4.85192780976896427E+58
>>> inf = Decimal(1) / Decimal(0)
>>> print(inf)
Infinity
>>> neginf = Decimal(-1) / Decimal(0)
>>> print(neginf)
-Infinity
>>> print(neginf + inf)
NaN
>>> print(neginf * inf)
-Infinity
>>> print(dig / 0)
Infinity
>>> getcontext().traps[DivisionByZero] = 1
>>> print(dig / 0)
Traceback (most recent call last):
  ...
  ...
  ...
decimal.DivisionByZero: x / 0
>>> c = Context()
>>> c.traps[InvalidOperation] = 0
>>> print(c.flags[InvalidOperation])
0
>>> c.divide(Decimal(0), Decimal(0))
Decimal('NaN')
>>> c.traps[InvalidOperation] = 1
>>> print(c.flags[InvalidOperation])
1
>>> c.flags[InvalidOperation] = 0
>>> print(c.flags[InvalidOperation])
0
>>> print(c.divide(Decimal(0), Decimal(0)))
Traceback (most recent call last):
  ...
  ...
  ...
decimal.InvalidOperation: 0 / 0
>>> print(c.flags[InvalidOperation])
1
>>> c.flags[InvalidOperation] = 0
>>> c.traps[InvalidOperation] = 0
>>> print(c.divide(Decimal(0), Decimal(0)))
NaN
>>> print(c.flags[InvalidOperation])
1
>>>
'u'
This is an implementation of decimal floating point arithmetic based on
the General Decimal Arithmetic Specification:

    http://speleotrove.com/decimal/decarith.html

and IEEE standard 854-1987:

    http://en.wikipedia.org/wiki/IEEE_854-1987

Decimal floating point has finite precision with arbitrarily large bounds.

The purpose of this module is to support arithmetic using familiar
"schoolhouse" rules and to avoid some of the tricky representation
issues associated with binary floating point.  The package is especially
useful for financial applications or for contexts where users have
expectations that are at odds with binary floating point (for instance,
in binary floating point, 1.00 % 0.1 gives 0.09999999999999995 instead
of 0.0; Decimal('1.00') % Decimal('0.1') returns the expected
Decimal('0.00')).

Here are some examples of using the decimal module:

>>> from decimal import *
>>> setcontext(ExtendedContext)
>>> Decimal(0)
Decimal('0')
>>> Decimal('1')
Decimal('1')
>>> Decimal('-.0123')
Decimal('-0.0123')
>>> Decimal(123456)
Decimal('123456')
>>> Decimal('123.45e12345678')
Decimal('1.2345E+12345680')
>>> Decimal('1.33') + Decimal('1.27')
Decimal('2.60')
>>> Decimal('12.34') + Decimal('3.87') - Decimal('18.41')
Decimal('-2.20')
>>> dig = Decimal(1)
>>> print(dig / Decimal(3))
0.333333333
>>> getcontext().prec = 18
>>> print(dig / Decimal(3))
0.333333333333333333
>>> print(dig.sqrt())
1
>>> print(Decimal(3).sqrt())
1.73205080756887729
>>> print(Decimal(3) ** 123)
4.85192780976896427E+58
>>> inf = Decimal(1) / Decimal(0)
>>> print(inf)
Infinity
>>> neginf = Decimal(-1) / Decimal(0)
>>> print(neginf)
-Infinity
>>> print(neginf + inf)
NaN
>>> print(neginf * inf)
-Infinity
>>> print(dig / 0)
Infinity
>>> getcontext().traps[DivisionByZero] = 1
>>> print(dig / 0)
Traceback (most recent call last):
  ...
  ...
  ...
decimal.DivisionByZero: x / 0
>>> c = Context()
>>> c.traps[InvalidOperation] = 0
>>> print(c.flags[InvalidOperation])
0
>>> c.divide(Decimal(0), Decimal(0))
Decimal('NaN')
>>> c.traps[InvalidOperation] = 1
>>> print(c.flags[InvalidOperation])
1
>>> c.flags[InvalidOperation] = 0
>>> print(c.flags[InvalidOperation])
0
>>> print(c.divide(Decimal(0), Decimal(0)))
Traceback (most recent call last):
  ...
  ...
  ...
decimal.InvalidOperation: 0 / 0
>>> print(c.flags[InvalidOperation])
1
>>> c.flags[InvalidOperation] = 0
>>> c.traps[InvalidOperation] = 0
>>> print(c.divide(Decimal(0), Decimal(0)))
NaN
>>> print(c.flags[InvalidOperation])
1
>>>
'b'Decimal'u'Decimal'b'Context'u'Context'b'DecimalTuple'u'DecimalTuple'b'DefaultContext'u'DefaultContext'b'BasicContext'u'BasicContext'b'ExtendedContext'u'ExtendedContext'b'DecimalException'u'DecimalException'b'Clamped'u'Clamped'b'InvalidOperation'u'InvalidOperation'b'DivisionByZero'u'DivisionByZero'b'Inexact'u'Inexact'b'Rounded'u'Rounded'b'Subnormal'u'Subnormal'b'Overflow'u'Overflow'b'Underflow'u'Underflow'b'FloatOperation'u'FloatOperation'b'DivisionImpossible'u'DivisionImpossible'b'InvalidContext'u'InvalidContext'b'ConversionSyntax'u'ConversionSyntax'b'DivisionUndefined'u'DivisionUndefined'b'ROUND_DOWN'u'ROUND_DOWN'b'ROUND_HALF_UP'u'ROUND_HALF_UP'b'ROUND_HALF_EVEN'u'ROUND_HALF_EVEN'b'ROUND_CEILING'u'ROUND_CEILING'b'ROUND_FLOOR'u'ROUND_FLOOR'b'ROUND_UP'u'ROUND_UP'b'ROUND_HALF_DOWN'u'ROUND_HALF_DOWN'b'ROUND_05UP'u'ROUND_05UP'b'setcontext'u'setcontext'b'getcontext'u'getcontext'b'localcontext'u'localcontext'b'MAX_PREC'u'MAX_PREC'b'MAX_EMAX'u'MAX_EMAX'b'MIN_EMIN'u'MIN_EMIN'b'MIN_ETINY'u'MIN_ETINY'b'HAVE_THREADS'u'HAVE_THREADS'b'HAVE_CONTEXTVAR'u'HAVE_CONTEXTVAR'b'decimal'u'decimal'b'1.70'u'1.70'b'2.4.2'u'2.4.2'b'sign digits exponent'u'sign digits exponent'b'Base exception class.

    Used exceptions derive from this.
    If an exception derives from another exception besides this (such as
    Underflow (Inexact, Rounded, Subnormal) that indicates that it is only
    called if the others are present.  This isn't actually used for
    anything, though.

    handle  -- Called when context._raise_error is called and the
               trap_enabler is not set.  First argument is self, second is the
               context.  More arguments can be given, those being after
               the explanation in _raise_error (For example,
               context._raise_error(NewError, '(-x)!', self._sign) would
               call NewError().handle(context, self._sign).)

    To define a new exception, it should be sufficient to have it derive
    from DecimalException.
    'u'Base exception class.

    Used exceptions derive from this.
    If an exception derives from another exception besides this (such as
    Underflow (Inexact, Rounded, Subnormal) that indicates that it is only
    called if the others are present.  This isn't actually used for
    anything, though.

    handle  -- Called when context._raise_error is called and the
               trap_enabler is not set.  First argument is self, second is the
               context.  More arguments can be given, those being after
               the explanation in _raise_error (For example,
               context._raise_error(NewError, '(-x)!', self._sign) would
               call NewError().handle(context, self._sign).)

    To define a new exception, it should be sufficient to have it derive
    from DecimalException.
    'b'Exponent of a 0 changed to fit bounds.

    This occurs and signals clamped if the exponent of a result has been
    altered in order to fit the constraints of a specific concrete
    representation.  This may occur when the exponent of a zero result would
    be outside the bounds of a representation, or when a large normal
    number would have an encoded exponent that cannot be represented.  In
    this latter case, the exponent is reduced to fit and the corresponding
    number of zero digits are appended to the coefficient ("fold-down").
    'u'Exponent of a 0 changed to fit bounds.

    This occurs and signals clamped if the exponent of a result has been
    altered in order to fit the constraints of a specific concrete
    representation.  This may occur when the exponent of a zero result would
    be outside the bounds of a representation, or when a large normal
    number would have an encoded exponent that cannot be represented.  In
    this latter case, the exponent is reduced to fit and the corresponding
    number of zero digits are appended to the coefficient ("fold-down").
    'b'An invalid operation was performed.

    Various bad things cause this:

    Something creates a signaling NaN
    -INF + INF
    0 * (+-)INF
    (+-)INF / (+-)INF
    x % 0
    (+-)INF % x
    x._rescale( non-integer )
    sqrt(-x) , x > 0
    0 ** 0
    x ** (non-integer)
    x ** (+-)INF
    An operand is invalid

    The result of the operation after these is a quiet positive NaN,
    except when the cause is a signaling NaN, in which case the result is
    also a quiet NaN, but with the original sign, and an optional
    diagnostic information.
    'u'An invalid operation was performed.

    Various bad things cause this:

    Something creates a signaling NaN
    -INF + INF
    0 * (+-)INF
    (+-)INF / (+-)INF
    x % 0
    (+-)INF % x
    x._rescale( non-integer )
    sqrt(-x) , x > 0
    0 ** 0
    x ** (non-integer)
    x ** (+-)INF
    An operand is invalid

    The result of the operation after these is a quiet positive NaN,
    except when the cause is a signaling NaN, in which case the result is
    also a quiet NaN, but with the original sign, and an optional
    diagnostic information.
    'b'Trying to convert badly formed string.

    This occurs and signals invalid-operation if a string is being
    converted to a number and it does not conform to the numeric string
    syntax.  The result is [0,qNaN].
    'u'Trying to convert badly formed string.

    This occurs and signals invalid-operation if a string is being
    converted to a number and it does not conform to the numeric string
    syntax.  The result is [0,qNaN].
    'b'Division by 0.

    This occurs and signals division-by-zero if division of a finite number
    by zero was attempted (during a divide-integer or divide operation, or a
    power operation with negative right-hand operand), and the dividend was
    not zero.

    The result of the operation is [sign,inf], where sign is the exclusive
    or of the signs of the operands for divide, or is 1 for an odd power of
    -0, for power.
    'u'Division by 0.

    This occurs and signals division-by-zero if division of a finite number
    by zero was attempted (during a divide-integer or divide operation, or a
    power operation with negative right-hand operand), and the dividend was
    not zero.

    The result of the operation is [sign,inf], where sign is the exclusive
    or of the signs of the operands for divide, or is 1 for an odd power of
    -0, for power.
    'b'Cannot perform the division adequately.

    This occurs and signals invalid-operation if the integer result of a
    divide-integer or remainder operation had too many digits (would be
    longer than precision).  The result is [0,qNaN].
    'u'Cannot perform the division adequately.

    This occurs and signals invalid-operation if the integer result of a
    divide-integer or remainder operation had too many digits (would be
    longer than precision).  The result is [0,qNaN].
    'b'Undefined result of division.

    This occurs and signals invalid-operation if division by zero was
    attempted (during a divide-integer, divide, or remainder operation), and
    the dividend is also zero.  The result is [0,qNaN].
    'u'Undefined result of division.

    This occurs and signals invalid-operation if division by zero was
    attempted (during a divide-integer, divide, or remainder operation), and
    the dividend is also zero.  The result is [0,qNaN].
    'b'Had to round, losing information.

    This occurs and signals inexact whenever the result of an operation is
    not exact (that is, it needed to be rounded and any discarded digits
    were non-zero), or if an overflow or underflow condition occurs.  The
    result in all cases is unchanged.

    The inexact signal may be tested (or trapped) to determine if a given
    operation (or sequence of operations) was inexact.
    'u'Had to round, losing information.

    This occurs and signals inexact whenever the result of an operation is
    not exact (that is, it needed to be rounded and any discarded digits
    were non-zero), or if an overflow or underflow condition occurs.  The
    result in all cases is unchanged.

    The inexact signal may be tested (or trapped) to determine if a given
    operation (or sequence of operations) was inexact.
    'b'Invalid context.  Unknown rounding, for example.

    This occurs and signals invalid-operation if an invalid context was
    detected during an operation.  This can occur if contexts are not checked
    on creation and either the precision exceeds the capability of the
    underlying concrete representation or an unknown or unsupported rounding
    was specified.  These aspects of the context need only be checked when
    the values are required to be used.  The result is [0,qNaN].
    'u'Invalid context.  Unknown rounding, for example.

    This occurs and signals invalid-operation if an invalid context was
    detected during an operation.  This can occur if contexts are not checked
    on creation and either the precision exceeds the capability of the
    underlying concrete representation or an unknown or unsupported rounding
    was specified.  These aspects of the context need only be checked when
    the values are required to be used.  The result is [0,qNaN].
    'b'Number got rounded (not  necessarily changed during rounding).

    This occurs and signals rounded whenever the result of an operation is
    rounded (that is, some zero or non-zero digits were discarded from the
    coefficient), or if an overflow or underflow condition occurs.  The
    result in all cases is unchanged.

    The rounded signal may be tested (or trapped) to determine if a given
    operation (or sequence of operations) caused a loss of precision.
    'u'Number got rounded (not  necessarily changed during rounding).

    This occurs and signals rounded whenever the result of an operation is
    rounded (that is, some zero or non-zero digits were discarded from the
    coefficient), or if an overflow or underflow condition occurs.  The
    result in all cases is unchanged.

    The rounded signal may be tested (or trapped) to determine if a given
    operation (or sequence of operations) caused a loss of precision.
    'b'Exponent < Emin before rounding.

    This occurs and signals subnormal whenever the result of a conversion or
    operation is subnormal (that is, its adjusted exponent is less than
    Emin, before any rounding).  The result in all cases is unchanged.

    The subnormal signal may be tested (or trapped) to determine if a given
    or operation (or sequence of operations) yielded a subnormal result.
    'u'Exponent < Emin before rounding.

    This occurs and signals subnormal whenever the result of a conversion or
    operation is subnormal (that is, its adjusted exponent is less than
    Emin, before any rounding).  The result in all cases is unchanged.

    The subnormal signal may be tested (or trapped) to determine if a given
    or operation (or sequence of operations) yielded a subnormal result.
    'b'Numerical overflow.

    This occurs and signals overflow if the adjusted exponent of a result
    (from a conversion or from an operation that is not an attempt to divide
    by zero), after rounding, would be greater than the largest value that
    can be handled by the implementation (the value Emax).

    The result depends on the rounding mode:

    For round-half-up and round-half-even (and for round-half-down and
    round-up, if implemented), the result of the operation is [sign,inf],
    where sign is the sign of the intermediate result.  For round-down, the
    result is the largest finite number that can be represented in the
    current precision, with the sign of the intermediate result.  For
    round-ceiling, the result is the same as for round-down if the sign of
    the intermediate result is 1, or is [0,inf] otherwise.  For round-floor,
    the result is the same as for round-down if the sign of the intermediate
    result is 0, or is [1,inf] otherwise.  In all cases, Inexact and Rounded
    will also be raised.
    'u'Numerical overflow.

    This occurs and signals overflow if the adjusted exponent of a result
    (from a conversion or from an operation that is not an attempt to divide
    by zero), after rounding, would be greater than the largest value that
    can be handled by the implementation (the value Emax).

    The result depends on the rounding mode:

    For round-half-up and round-half-even (and for round-half-down and
    round-up, if implemented), the result of the operation is [sign,inf],
    where sign is the sign of the intermediate result.  For round-down, the
    result is the largest finite number that can be represented in the
    current precision, with the sign of the intermediate result.  For
    round-ceiling, the result is the same as for round-down if the sign of
    the intermediate result is 1, or is [0,inf] otherwise.  For round-floor,
    the result is the same as for round-down if the sign of the intermediate
    result is 0, or is [1,inf] otherwise.  In all cases, Inexact and Rounded
    will also be raised.
    'b'Numerical underflow with result rounded to 0.

    This occurs and signals underflow if a result is inexact and the
    adjusted exponent of the result would be smaller (more negative) than
    the smallest value that can be handled by the implementation (the value
    Emin).  That is, the result is both inexact and subnormal.

    The result after an underflow will be a subnormal number rounded, if
    necessary, so that its exponent is not less than Etiny.  This may result
    in 0 with the sign of the intermediate result and an exponent of Etiny.

    In all cases, Inexact, Rounded, and Subnormal will also be raised.
    'u'Numerical underflow with result rounded to 0.

    This occurs and signals underflow if a result is inexact and the
    adjusted exponent of the result would be smaller (more negative) than
    the smallest value that can be handled by the implementation (the value
    Emin).  That is, the result is both inexact and subnormal.

    The result after an underflow will be a subnormal number rounded, if
    necessary, so that its exponent is not less than Etiny.  This may result
    in 0 with the sign of the intermediate result and an exponent of Etiny.

    In all cases, Inexact, Rounded, and Subnormal will also be raised.
    'b'Enable stricter semantics for mixing floats and Decimals.

    If the signal is not trapped (default), mixing floats and Decimals is
    permitted in the Decimal() constructor, context.create_decimal() and
    all comparison operators. Both conversion and comparisons are exact.
    Any occurrence of a mixed operation is silently recorded by setting
    FloatOperation in the context flags.  Explicit conversions with
    Decimal.from_float() or context.create_decimal_from_float() do not
    set the flag.

    Otherwise (the signal is trapped), only equality comparisons and explicit
    conversions are silent. All other mixed operations raise FloatOperation.
    'u'Enable stricter semantics for mixing floats and Decimals.

    If the signal is not trapped (default), mixing floats and Decimals is
    permitted in the Decimal() constructor, context.create_decimal() and
    all comparison operators. Both conversion and comparisons are exact.
    Any occurrence of a mixed operation is silently recorded by setting
    FloatOperation in the context flags.  Explicit conversions with
    Decimal.from_float() or context.create_decimal_from_float() do not
    set the flag.

    Otherwise (the signal is trapped), only equality comparisons and explicit
    conversions are silent. All other mixed operations raise FloatOperation.
    'b'decimal_context'u'decimal_context'b'Returns this thread's context.

    If this thread does not yet have a context, returns
    a new context and sets this thread's context.
    New contexts are copies of DefaultContext.
    'u'Returns this thread's context.

    If this thread does not yet have a context, returns
    a new context and sets this thread's context.
    New contexts are copies of DefaultContext.
    'b'Set this thread's context to context.'u'Set this thread's context to context.'b'Return a context manager for a copy of the supplied context

    Uses a copy of the current context if no context is specified
    The returned context manager creates a local decimal context
    in a with statement:
        def sin(x):
             with localcontext() as ctx:
                 ctx.prec += 2
                 # Rest of sin calculation algorithm
                 # uses a precision 2 greater than normal
             return +s  # Convert result to normal precision

         def sin(x):
             with localcontext(ExtendedContext):
                 # Rest of sin calculation algorithm
                 # uses the Extended Context from the
                 # General Decimal Arithmetic Specification
             return +s  # Convert result to normal context

    >>> setcontext(DefaultContext)
    >>> print(getcontext().prec)
    28
    >>> with localcontext():
    ...     ctx = getcontext()
    ...     ctx.prec += 2
    ...     print(ctx.prec)
    ...
    30
    >>> with localcontext(ExtendedContext):
    ...     print(getcontext().prec)
    ...
    9
    >>> print(getcontext().prec)
    28
    'u'Return a context manager for a copy of the supplied context

    Uses a copy of the current context if no context is specified
    The returned context manager creates a local decimal context
    in a with statement:
        def sin(x):
             with localcontext() as ctx:
                 ctx.prec += 2
                 # Rest of sin calculation algorithm
                 # uses a precision 2 greater than normal
             return +s  # Convert result to normal precision

         def sin(x):
             with localcontext(ExtendedContext):
                 # Rest of sin calculation algorithm
                 # uses the Extended Context from the
                 # General Decimal Arithmetic Specification
             return +s  # Convert result to normal context

    >>> setcontext(DefaultContext)
    >>> print(getcontext().prec)
    28
    >>> with localcontext():
    ...     ctx = getcontext()
    ...     ctx.prec += 2
    ...     print(ctx.prec)
    ...
    30
    >>> with localcontext(ExtendedContext):
    ...     print(getcontext().prec)
    ...
    9
    >>> print(getcontext().prec)
    28
    'b'Floating point class for decimal arithmetic.'u'Floating point class for decimal arithmetic.'b'_exp'u'_exp'b'_int'u'_int'b'_sign'u'_sign'b'_is_special'u'_is_special'b'Create a decimal point instance.

        >>> Decimal('3.14')              # string input
        Decimal('3.14')
        >>> Decimal((0, (3, 1, 4), -2))  # tuple (sign, digit_tuple, exponent)
        Decimal('3.14')
        >>> Decimal(314)                 # int
        Decimal('314')
        >>> Decimal(Decimal(314))        # another decimal instance
        Decimal('314')
        >>> Decimal('  3.14  \n')        # leading and trailing whitespace okay
        Decimal('3.14')
        'u'Create a decimal point instance.

        >>> Decimal('3.14')              # string input
        Decimal('3.14')
        >>> Decimal((0, (3, 1, 4), -2))  # tuple (sign, digit_tuple, exponent)
        Decimal('3.14')
        >>> Decimal(314)                 # int
        Decimal('314')
        >>> Decimal(Decimal(314))        # another decimal instance
        Decimal('314')
        >>> Decimal('  3.14  \n')        # leading and trailing whitespace okay
        Decimal('3.14')
        'b'Invalid literal for Decimal: %r'u'Invalid literal for Decimal: %r'b'sign'u'sign'b'frac'u'frac'b'exp'u'exp'b'diag'u'diag'b'N'u'N'b'F'u'F'b'Invalid tuple size in creation of Decimal from list or tuple.  The list or tuple should have exactly three elements.'u'Invalid tuple size in creation of Decimal from list or tuple.  The list or tuple should have exactly three elements.'b'Invalid sign.  The first value in the tuple should be an integer; either 0 for a positive number or 1 for a negative number.'u'Invalid sign.  The first value in the tuple should be an integer; either 0 for a positive number or 1 for a negative number.'b'The second value in the tuple must be composed of integers in the range 0 through 9.'u'The second value in the tuple must be composed of integers in the range 0 through 9.'b'The third value in the tuple must be an integer, or one of the strings 'F', 'n', 'N'.'u'The third value in the tuple must be an integer, or one of the strings 'F', 'n', 'N'.'b'strict semantics for mixing floats and Decimals are enabled'u'strict semantics for mixing floats and Decimals are enabled'b'Cannot convert %r to Decimal'u'Cannot convert %r to Decimal'b'Converts a float to a decimal number, exactly.

        Note that Decimal.from_float(0.1) is not the same as Decimal('0.1').
        Since 0.1 is not exactly representable in binary floating point, the
        value is stored as the nearest representable value which is
        0x1.999999999999ap-4.  The exact equivalent of the value in decimal
        is 0.1000000000000000055511151231257827021181583404541015625.

        >>> Decimal.from_float(0.1)
        Decimal('0.1000000000000000055511151231257827021181583404541015625')
        >>> Decimal.from_float(float('nan'))
        Decimal('NaN')
        >>> Decimal.from_float(float('inf'))
        Decimal('Infinity')
        >>> Decimal.from_float(-float('inf'))
        Decimal('-Infinity')
        >>> Decimal.from_float(-0.0)
        Decimal('-0')

        'u'Converts a float to a decimal number, exactly.

        Note that Decimal.from_float(0.1) is not the same as Decimal('0.1').
        Since 0.1 is not exactly representable in binary floating point, the
        value is stored as the nearest representable value which is
        0x1.999999999999ap-4.  The exact equivalent of the value in decimal
        is 0.1000000000000000055511151231257827021181583404541015625.

        >>> Decimal.from_float(0.1)
        Decimal('0.1000000000000000055511151231257827021181583404541015625')
        >>> Decimal.from_float(float('nan'))
        Decimal('NaN')
        >>> Decimal.from_float(float('inf'))
        Decimal('Infinity')
        >>> Decimal.from_float(-float('inf'))
        Decimal('-Infinity')
        >>> Decimal.from_float(-0.0)
        Decimal('-0')

        'b'argument must be int or float.'u'argument must be int or float.'b'Returns whether the number is not actually one.

        0 if a number
        1 if NaN
        2 if sNaN
        'u'Returns whether the number is not actually one.

        0 if a number
        1 if NaN
        2 if sNaN
        'b'Returns whether the number is infinite

        0 if finite or not a number
        1 if +INF
        -1 if -INF
        'u'Returns whether the number is infinite

        0 if finite or not a number
        1 if +INF
        -1 if -INF
        'b'Returns whether the number is not actually one.

        if self, other are sNaN, signal
        if self, other are NaN return nan
        return 0

        Done before operations.
        'u'Returns whether the number is not actually one.

        if self, other are sNaN, signal
        if self, other are NaN return nan
        return 0

        Done before operations.
        'b'sNaN'u'sNaN'b'Version of _check_nans used for the signaling comparisons
        compare_signal, __le__, __lt__, __ge__, __gt__.

        Signal InvalidOperation if either self or other is a (quiet
        or signaling) NaN.  Signaling NaNs take precedence over quiet
        NaNs.

        Return 0 if neither operand is a NaN.

        'u'Version of _check_nans used for the signaling comparisons
        compare_signal, __le__, __lt__, __ge__, __gt__.

        Signal InvalidOperation if either self or other is a (quiet
        or signaling) NaN.  Signaling NaNs take precedence over quiet
        NaNs.

        Return 0 if neither operand is a NaN.

        'b'comparison involving sNaN'u'comparison involving sNaN'b'comparison involving NaN'u'comparison involving NaN'b'Return True if self is nonzero; otherwise return False.

        NaNs and infinities are considered nonzero.
        'u'Return True if self is nonzero; otherwise return False.

        NaNs and infinities are considered nonzero.
        'b'Compare the two non-NaN decimal instances self and other.

        Returns -1 if self < other, 0 if self == other and 1
        if self > other.  This routine is for internal use only.'u'Compare the two non-NaN decimal instances self and other.

        Returns -1 if self < other, 0 if self == other and 1
        if self > other.  This routine is for internal use only.'b'Compare self to other.  Return a decimal value:

        a or b is a NaN ==> Decimal('NaN')
        a < b           ==> Decimal('-1')
        a == b          ==> Decimal('0')
        a > b           ==> Decimal('1')
        'u'Compare self to other.  Return a decimal value:

        a or b is a NaN ==> Decimal('NaN')
        a < b           ==> Decimal('-1')
        a == b          ==> Decimal('0')
        a > b           ==> Decimal('1')
        'b'x.__hash__() <==> hash(x)'u'x.__hash__() <==> hash(x)'b'Cannot hash a signaling NaN value.'u'Cannot hash a signaling NaN value.'b'Represents the number as a triple tuple.

        To show the internals exactly as they are.
        'u'Represents the number as a triple tuple.

        To show the internals exactly as they are.
        'b'Express a finite Decimal instance in the form n / d.

        Returns a pair (n, d) of integers.  When called on an infinity
        or NaN, raises OverflowError or ValueError respectively.

        >>> Decimal('3.14').as_integer_ratio()
        (157, 50)
        >>> Decimal('-123e5').as_integer_ratio()
        (-12300000, 1)
        >>> Decimal('0.00').as_integer_ratio()
        (0, 1)

        'u'Express a finite Decimal instance in the form n / d.

        Returns a pair (n, d) of integers.  When called on an infinity
        or NaN, raises OverflowError or ValueError respectively.

        >>> Decimal('3.14').as_integer_ratio()
        (157, 50)
        >>> Decimal('-123e5').as_integer_ratio()
        (-12300000, 1)
        >>> Decimal('0.00').as_integer_ratio()
        (0, 1)

        'b'cannot convert NaN to integer ratio'u'cannot convert NaN to integer ratio'b'cannot convert Infinity to integer ratio'u'cannot convert Infinity to integer ratio'b'Represents the number as an instance of Decimal.'u'Represents the number as an instance of Decimal.'b'Decimal('%s')'u'Decimal('%s')'b'Return string representation of the number in scientific notation.

        Captures all of the information in the underlying representation.
        'u'Return string representation of the number in scientific notation.

        Captures all of the information in the underlying representation.
        'b'Infinity'u'Infinity'b'NaN'u'NaN'b'e'u'e'b'E'u'E'b'%+d'u'%+d'b'Convert to a string, using engineering notation if an exponent is needed.

        Engineering notation has an exponent which is a multiple of 3.  This
        can leave up to 3 digits to the left of the decimal place and may
        require the addition of either one or two trailing zeros.
        'u'Convert to a string, using engineering notation if an exponent is needed.

        Engineering notation has an exponent which is a multiple of 3.  This
        can leave up to 3 digits to the left of the decimal place and may
        require the addition of either one or two trailing zeros.
        'b'Returns a copy with the sign switched.

        Rounds, if it has reason.
        'u'Returns a copy with the sign switched.

        Rounds, if it has reason.
        'b'Returns a copy, unless it is a sNaN.

        Rounds the number (if more than precision digits)
        'u'Returns a copy, unless it is a sNaN.

        Rounds the number (if more than precision digits)
        'b'Returns the absolute value of self.

        If the keyword argument 'round' is false, do not round.  The
        expression self.__abs__(round=False) is equivalent to
        self.copy_abs().
        'u'Returns the absolute value of self.

        If the keyword argument 'round' is false, do not round.  The
        expression self.__abs__(round=False) is equivalent to
        self.copy_abs().
        'b'Returns self + other.

        -INF + INF (or the reverse) cause InvalidOperation errors.
        'u'Returns self + other.

        -INF + INF (or the reverse) cause InvalidOperation errors.
        'b'-INF + INF'u'-INF + INF'b'Return self - other'u'Return self - other'b'Return other - self'u'Return other - self'b'Return self * other.

        (+-) INF * 0 (or its reverse) raise InvalidOperation.
        'u'Return self * other.

        (+-) INF * 0 (or its reverse) raise InvalidOperation.
        'b'(+-)INF * 0'u'(+-)INF * 0'b'0 * (+-)INF'u'0 * (+-)INF'b'Return self / other.'u'Return self / other.'b'(+-)INF/(+-)INF'u'(+-)INF/(+-)INF'b'Division by infinity'u'Division by infinity'b'0 / 0'u'0 / 0'b'x / 0'u'x / 0'b'Return (self // other, self % other), to context.prec precision.

        Assumes that neither self nor other is a NaN, that self is not
        infinite and that other is nonzero.
        'u'Return (self // other, self % other), to context.prec precision.

        Assumes that neither self nor other is a NaN, that self is not
        infinite and that other is nonzero.
        'b'quotient too large in //, % or divmod'u'quotient too large in //, % or divmod'b'Swaps self/other and returns __truediv__.'u'Swaps self/other and returns __truediv__.'b'
        Return (self // other, self % other)
        'u'
        Return (self // other, self % other)
        'b'divmod(INF, INF)'u'divmod(INF, INF)'b'INF % x'u'INF % x'b'divmod(0, 0)'u'divmod(0, 0)'b'x // 0'u'x // 0'b'x % 0'u'x % 0'b'Swaps self/other and returns __divmod__.'u'Swaps self/other and returns __divmod__.'b'
        self % other
        'u'
        self % other
        'b'0 % 0'u'0 % 0'b'Swaps self/other and returns __mod__.'u'Swaps self/other and returns __mod__.'b'
        Remainder nearest to 0-  abs(remainder-near) <= other/2
        'u'
        Remainder nearest to 0-  abs(remainder-near) <= other/2
        'b'remainder_near(infinity, x)'u'remainder_near(infinity, x)'b'remainder_near(x, 0)'u'remainder_near(x, 0)'b'remainder_near(0, 0)'u'remainder_near(0, 0)'b'self // other'u'self // other'b'INF // INF'u'INF // INF'b'0 // 0'u'0 // 0'b'Swaps self/other and returns __floordiv__.'u'Swaps self/other and returns __floordiv__.'b'Float representation.'u'Float representation.'b'Cannot convert signaling NaN to float'u'Cannot convert signaling NaN to float'b'-nan'u'-nan'b'nan'u'nan'b'Converts self to an int, truncating if necessary.'u'Converts self to an int, truncating if necessary.'b'Cannot convert NaN to integer'u'Cannot convert NaN to integer'b'Cannot convert infinity to integer'u'Cannot convert infinity to integer'b'Decapitate the payload of a NaN to fit the context'u'Decapitate the payload of a NaN to fit the context'b'Round if it is necessary to keep self within prec precision.

        Rounds and fixes the exponent.  Does not raise on a sNaN.

        Arguments:
        self - Decimal instance
        context - context used.
        'u'Round if it is necessary to keep self within prec precision.

        Rounds and fixes the exponent.  Does not raise on a sNaN.

        Arguments:
        self - Decimal instance
        context - context used.
        'b'above Emax'u'above Emax'b'Also known as round-towards-0, truncate.'u'Also known as round-towards-0, truncate.'b'Rounds away from 0.'u'Rounds away from 0.'b'Rounds 5 up (away from 0)'u'Rounds 5 up (away from 0)'b'56789'u'56789'b'Round 5 down'u'Round 5 down'b'Round 5 to even, rest to nearest.'u'Round 5 to even, rest to nearest.'b'02468'u'02468'b'Rounds up (not away from 0 if negative.)'u'Rounds up (not away from 0 if negative.)'b'Rounds down (not towards 0 if negative)'u'Rounds down (not towards 0 if negative)'b'Round down unless digit prec-1 is 0 or 5.'u'Round down unless digit prec-1 is 0 or 5.'b'05'u'05'b'Round self to the nearest integer, or to a given precision.

        If only one argument is supplied, round a finite Decimal
        instance self to the nearest integer.  If self is infinite or
        a NaN then a Python exception is raised.  If self is finite
        and lies exactly halfway between two integers then it is
        rounded to the integer with even last digit.

        >>> round(Decimal('123.456'))
        123
        >>> round(Decimal('-456.789'))
        -457
        >>> round(Decimal('-3.0'))
        -3
        >>> round(Decimal('2.5'))
        2
        >>> round(Decimal('3.5'))
        4
        >>> round(Decimal('Inf'))
        Traceback (most recent call last):
          ...
        OverflowError: cannot round an infinity
        >>> round(Decimal('NaN'))
        Traceback (most recent call last):
          ...
        ValueError: cannot round a NaN

        If a second argument n is supplied, self is rounded to n
        decimal places using the rounding mode for the current
        context.

        For an integer n, round(self, -n) is exactly equivalent to
        self.quantize(Decimal('1En')).

        >>> round(Decimal('123.456'), 0)
        Decimal('123')
        >>> round(Decimal('123.456'), 2)
        Decimal('123.46')
        >>> round(Decimal('123.456'), -2)
        Decimal('1E+2')
        >>> round(Decimal('-Infinity'), 37)
        Decimal('NaN')
        >>> round(Decimal('sNaN123'), 0)
        Decimal('NaN123')

        'u'Round self to the nearest integer, or to a given precision.

        If only one argument is supplied, round a finite Decimal
        instance self to the nearest integer.  If self is infinite or
        a NaN then a Python exception is raised.  If self is finite
        and lies exactly halfway between two integers then it is
        rounded to the integer with even last digit.

        >>> round(Decimal('123.456'))
        123
        >>> round(Decimal('-456.789'))
        -457
        >>> round(Decimal('-3.0'))
        -3
        >>> round(Decimal('2.5'))
        2
        >>> round(Decimal('3.5'))
        4
        >>> round(Decimal('Inf'))
        Traceback (most recent call last):
          ...
        OverflowError: cannot round an infinity
        >>> round(Decimal('NaN'))
        Traceback (most recent call last):
          ...
        ValueError: cannot round a NaN

        If a second argument n is supplied, self is rounded to n
        decimal places using the rounding mode for the current
        context.

        For an integer n, round(self, -n) is exactly equivalent to
        self.quantize(Decimal('1En')).

        >>> round(Decimal('123.456'), 0)
        Decimal('123')
        >>> round(Decimal('123.456'), 2)
        Decimal('123.46')
        >>> round(Decimal('123.456'), -2)
        Decimal('1E+2')
        >>> round(Decimal('-Infinity'), 37)
        Decimal('NaN')
        >>> round(Decimal('sNaN123'), 0)
        Decimal('NaN123')

        'b'Second argument to round should be integral'u'Second argument to round should be integral'b'cannot round a NaN'u'cannot round a NaN'b'cannot round an infinity'u'cannot round an infinity'b'Return the floor of self, as an integer.

        For a finite Decimal instance self, return the greatest
        integer n such that n <= self.  If self is infinite or a NaN
        then a Python exception is raised.

        'u'Return the floor of self, as an integer.

        For a finite Decimal instance self, return the greatest
        integer n such that n <= self.  If self is infinite or a NaN
        then a Python exception is raised.

        'b'Return the ceiling of self, as an integer.

        For a finite Decimal instance self, return the least integer n
        such that n >= self.  If self is infinite or a NaN then a
        Python exception is raised.

        'u'Return the ceiling of self, as an integer.

        For a finite Decimal instance self, return the least integer n
        such that n >= self.  If self is infinite or a NaN then a
        Python exception is raised.

        'b'Fused multiply-add.

        Returns self*other+third with no rounding of the intermediate
        product self*other.

        self and other are multiplied together, with no rounding of
        the result.  The third operand is then added to the result,
        and a single final rounding is performed.
        'u'Fused multiply-add.

        Returns self*other+third with no rounding of the intermediate
        product self*other.

        self and other are multiplied together, with no rounding of
        the result.  The third operand is then added to the result,
        and a single final rounding is performed.
        'b'INF * 0 in fma'u'INF * 0 in fma'b'0 * INF in fma'u'0 * INF in fma'b'Three argument version of __pow__'u'Three argument version of __pow__'b'pow() 3rd argument not allowed unless all arguments are integers'u'pow() 3rd argument not allowed unless all arguments are integers'b'pow() 2nd argument cannot be negative when 3rd argument specified'u'pow() 2nd argument cannot be negative when 3rd argument specified'b'pow() 3rd argument cannot be 0'u'pow() 3rd argument cannot be 0'b'insufficient precision: pow() 3rd argument must not have more than precision digits'u'insufficient precision: pow() 3rd argument must not have more than precision digits'b'at least one of pow() 1st argument and 2nd argument must be nonzero; 0**0 is not defined'u'at least one of pow() 1st argument and 2nd argument must be nonzero; 0**0 is not defined'b'Attempt to compute self**other exactly.

        Given Decimals self and other and an integer p, attempt to
        compute an exact result for the power self**other, with p
        digits of precision.  Return None if self**other is not
        exactly representable in p digits.

        Assumes that elimination of special cases has already been
        performed: self and other must both be nonspecial; self must
        be positive and not numerically equal to 1; other must be
        nonzero.  For efficiency, other._exp should not be too large,
        so that 10**abs(other._exp) is a feasible calculation.'u'Attempt to compute self**other exactly.

        Given Decimals self and other and an integer p, attempt to
        compute an exact result for the power self**other, with p
        digits of precision.  Return None if self**other is not
        exactly representable in p digits.

        Assumes that elimination of special cases has already been
        performed: self and other must both be nonspecial; self must
        be positive and not numerically equal to 1; other must be
        nonzero.  For efficiency, other._exp should not be too large,
        so that 10**abs(other._exp) is a feasible calculation.'b'Return self ** other [ % modulo].

        With two arguments, compute self**other.

        With three arguments, compute (self**other) % modulo.  For the
        three argument form, the following restrictions on the
        arguments hold:

         - all three arguments must be integral
         - other must be nonnegative
         - either self or other (or both) must be nonzero
         - modulo must be nonzero and must have at most p digits,
           where p is the context precision.

        If any of these restrictions is violated the InvalidOperation
        flag is raised.

        The result of pow(self, other, modulo) is identical to the
        result that would be obtained by computing (self**other) %
        modulo with unbounded precision, but is computed more
        efficiently.  It is always exact.
        'u'Return self ** other [ % modulo].

        With two arguments, compute self**other.

        With three arguments, compute (self**other) % modulo.  For the
        three argument form, the following restrictions on the
        arguments hold:

         - all three arguments must be integral
         - other must be nonnegative
         - either self or other (or both) must be nonzero
         - modulo must be nonzero and must have at most p digits,
           where p is the context precision.

        If any of these restrictions is violated the InvalidOperation
        flag is raised.

        The result of pow(self, other, modulo) is identical to the
        result that would be obtained by computing (self**other) %
        modulo with unbounded precision, but is computed more
        efficiently.  It is always exact.
        'b'0 ** 0'u'0 ** 0'b'x ** y with x negative and y not an integer'u'x ** y with x negative and y not an integer'b'Swaps self/other and returns __pow__.'u'Swaps self/other and returns __pow__.'b'Normalize- strip trailing 0s, change anything equal to 0 to 0e0'u'Normalize- strip trailing 0s, change anything equal to 0 to 0e0'b'Quantize self so its exponent is the same as that of exp.

        Similar to self._rescale(exp._exp) but with error checking.
        'u'Quantize self so its exponent is the same as that of exp.

        Similar to self._rescale(exp._exp) but with error checking.
        'b'quantize with one INF'u'quantize with one INF'b'target exponent out of bounds in quantize'u'target exponent out of bounds in quantize'b'exponent of quantize result too large for current context'u'exponent of quantize result too large for current context'b'quantize result has too many digits for current context'u'quantize result has too many digits for current context'b'Return True if self and other have the same exponent; otherwise
        return False.

        If either operand is a special value, the following rules are used:
           * return True if both operands are infinities
           * return True if both operands are NaNs
           * otherwise, return False.
        'u'Return True if self and other have the same exponent; otherwise
        return False.

        If either operand is a special value, the following rules are used:
           * return True if both operands are infinities
           * return True if both operands are NaNs
           * otherwise, return False.
        'b'Rescale self so that the exponent is exp, either by padding with zeros
        or by truncating digits, using the given rounding mode.

        Specials are returned without change.  This operation is
        quiet: it raises no flags, and uses no information from the
        context.

        exp = exp to scale to (an integer)
        rounding = rounding mode
        'u'Rescale self so that the exponent is exp, either by padding with zeros
        or by truncating digits, using the given rounding mode.

        Specials are returned without change.  This operation is
        quiet: it raises no flags, and uses no information from the
        context.

        exp = exp to scale to (an integer)
        rounding = rounding mode
        'b'Round a nonzero, nonspecial Decimal to a fixed number of
        significant figures, using the given rounding mode.

        Infinities, NaNs and zeros are returned unaltered.

        This operation is quiet: it raises no flags, and uses no
        information from the context.

        'u'Round a nonzero, nonspecial Decimal to a fixed number of
        significant figures, using the given rounding mode.

        Infinities, NaNs and zeros are returned unaltered.

        This operation is quiet: it raises no flags, and uses no
        information from the context.

        'b'argument should be at least 1 in _round'u'argument should be at least 1 in _round'b'Rounds to a nearby integer.

        If no rounding mode is specified, take the rounding mode from
        the context.  This method raises the Rounded and Inexact flags
        when appropriate.

        See also: to_integral_value, which does exactly the same as
        this method except that it doesn't raise Inexact or Rounded.
        'u'Rounds to a nearby integer.

        If no rounding mode is specified, take the rounding mode from
        the context.  This method raises the Rounded and Inexact flags
        when appropriate.

        See also: to_integral_value, which does exactly the same as
        this method except that it doesn't raise Inexact or Rounded.
        'b'Rounds to the nearest integer, without raising inexact, rounded.'u'Rounds to the nearest integer, without raising inexact, rounded.'b'Return the square root of self.'u'Return the square root of self.'b'sqrt(-x), x > 0'u'sqrt(-x), x > 0'b'Returns the larger value.

        Like max(self, other) except if one is not a number, returns
        NaN (and signals if one is sNaN).  Also rounds.
        'u'Returns the larger value.

        Like max(self, other) except if one is not a number, returns
        NaN (and signals if one is sNaN).  Also rounds.
        'b'Returns the smaller value.

        Like min(self, other) except if one is not a number, returns
        NaN (and signals if one is sNaN).  Also rounds.
        'u'Returns the smaller value.

        Like min(self, other) except if one is not a number, returns
        NaN (and signals if one is sNaN).  Also rounds.
        'b'Returns whether self is an integer'u'Returns whether self is an integer'b'Returns True if self is even.  Assumes self is an integer.'u'Returns True if self is even.  Assumes self is an integer.'b'Return the adjusted exponent of self'u'Return the adjusted exponent of self'b'Returns the same Decimal object.

        As we do not have different encodings for the same number, the
        received object already is in its canonical form.
        'u'Returns the same Decimal object.

        As we do not have different encodings for the same number, the
        received object already is in its canonical form.
        'b'Compares self to the other operand numerically.

        It's pretty much like compare(), but all NaNs signal, with signaling
        NaNs taking precedence over quiet NaNs.
        'u'Compares self to the other operand numerically.

        It's pretty much like compare(), but all NaNs signal, with signaling
        NaNs taking precedence over quiet NaNs.
        'b'Compares self to other using the abstract representations.

        This is not like the standard compare, which use their numerical
        value. Note that a total ordering is defined for all possible abstract
        representations.
        'u'Compares self to other using the abstract representations.

        This is not like the standard compare, which use their numerical
        value. Note that a total ordering is defined for all possible abstract
        representations.
        'b'Compares self to other using abstract repr., ignoring sign.

        Like compare_total, but with operand's sign ignored and assumed to be 0.
        'u'Compares self to other using abstract repr., ignoring sign.

        Like compare_total, but with operand's sign ignored and assumed to be 0.
        'b'Returns a copy with the sign set to 0. 'u'Returns a copy with the sign set to 0. 'b'Returns a copy with the sign inverted.'u'Returns a copy with the sign inverted.'b'Returns self with the sign of other.'u'Returns self with the sign of other.'b'Returns e ** self.'u'Returns e ** self.'b'Return True if self is canonical; otherwise return False.

        Currently, the encoding of a Decimal instance is always
        canonical, so this method returns True for any Decimal.
        'u'Return True if self is canonical; otherwise return False.

        Currently, the encoding of a Decimal instance is always
        canonical, so this method returns True for any Decimal.
        'b'Return True if self is finite; otherwise return False.

        A Decimal instance is considered finite if it is neither
        infinite nor a NaN.
        'u'Return True if self is finite; otherwise return False.

        A Decimal instance is considered finite if it is neither
        infinite nor a NaN.
        'b'Return True if self is infinite; otherwise return False.'u'Return True if self is infinite; otherwise return False.'b'Return True if self is a qNaN or sNaN; otherwise return False.'u'Return True if self is a qNaN or sNaN; otherwise return False.'b'Return True if self is a normal number; otherwise return False.'u'Return True if self is a normal number; otherwise return False.'b'Return True if self is a quiet NaN; otherwise return False.'u'Return True if self is a quiet NaN; otherwise return False.'b'Return True if self is negative; otherwise return False.'u'Return True if self is negative; otherwise return False.'b'Return True if self is a signaling NaN; otherwise return False.'u'Return True if self is a signaling NaN; otherwise return False.'b'Return True if self is subnormal; otherwise return False.'u'Return True if self is subnormal; otherwise return False.'b'Return True if self is a zero; otherwise return False.'u'Return True if self is a zero; otherwise return False.'b'Compute a lower bound for the adjusted exponent of self.ln().
        In other words, compute r such that self.ln() >= 10**r.  Assumes
        that self is finite and positive and that self != 1.
        'u'Compute a lower bound for the adjusted exponent of self.ln().
        In other words, compute r such that self.ln() >= 10**r.  Assumes
        that self is finite and positive and that self != 1.
        'b'Returns the natural (base e) logarithm of self.'u'Returns the natural (base e) logarithm of self.'b'ln of a negative value'u'ln of a negative value'b'Compute a lower bound for the adjusted exponent of self.log10().
        In other words, find r such that self.log10() >= 10**r.
        Assumes that self is finite and positive and that self != 1.
        'u'Compute a lower bound for the adjusted exponent of self.log10().
        In other words, find r such that self.log10() >= 10**r.
        Assumes that self is finite and positive and that self != 1.
        'b'231'u'231'b'Returns the base 10 logarithm of self.'u'Returns the base 10 logarithm of self.'b'log10 of a negative value'u'log10 of a negative value'b' Returns the exponent of the magnitude of self's MSD.

        The result is the integer which is the exponent of the magnitude
        of the most significant digit of self (as though it were truncated
        to a single digit while maintaining the value of that digit and
        without limiting the resulting exponent).
        'u' Returns the exponent of the magnitude of self's MSD.

        The result is the integer which is the exponent of the magnitude
        of the most significant digit of self (as though it were truncated
        to a single digit while maintaining the value of that digit and
        without limiting the resulting exponent).
        'b'logb(0)'u'logb(0)'b'Return True if self is a logical operand.

        For being logical, it must be a finite number with a sign of 0,
        an exponent of 0, and a coefficient whose digits must all be
        either 0 or 1.
        'u'Return True if self is a logical operand.

        For being logical, it must be a finite number with a sign of 0,
        an exponent of 0, and a coefficient whose digits must all be
        either 0 or 1.
        'b'01'u'01'b'Applies an 'and' operation between self and other's digits.'u'Applies an 'and' operation between self and other's digits.'b'Invert all its digits.'u'Invert all its digits.'b'Applies an 'or' operation between self and other's digits.'u'Applies an 'or' operation between self and other's digits.'b'Applies an 'xor' operation between self and other's digits.'u'Applies an 'xor' operation between self and other's digits.'b'Compares the values numerically with their sign ignored.'u'Compares the values numerically with their sign ignored.'b'Returns the largest representable number smaller than itself.'u'Returns the largest representable number smaller than itself.'b'Returns the smallest representable number larger than itself.'u'Returns the smallest representable number larger than itself.'b'Returns the number closest to self, in the direction towards other.

        The result is the closest representable number to self
        (excluding self) that is in the direction towards other,
        unless both have the same value.  If the two operands are
        numerically equal, then the result is a copy of self with the
        sign set to be the same as the sign of other.
        'u'Returns the number closest to self, in the direction towards other.

        The result is the closest representable number to self
        (excluding self) that is in the direction towards other,
        unless both have the same value.  If the two operands are
        numerically equal, then the result is a copy of self with the
        sign set to be the same as the sign of other.
        'b'Infinite result from next_toward'u'Infinite result from next_toward'b'Returns an indication of the class of self.

        The class is one of the following strings:
          sNaN
          NaN
          -Infinity
          -Normal
          -Subnormal
          -Zero
          +Zero
          +Subnormal
          +Normal
          +Infinity
        'u'Returns an indication of the class of self.

        The class is one of the following strings:
          sNaN
          NaN
          -Infinity
          -Normal
          -Subnormal
          -Zero
          +Zero
          +Subnormal
          +Normal
          +Infinity
        'b'+Infinity'u'+Infinity'b'-Infinity'u'-Infinity'b'-Zero'u'-Zero'b'+Zero'u'+Zero'b'-Subnormal'u'-Subnormal'b'+Subnormal'u'+Subnormal'b'-Normal'u'-Normal'b'+Normal'u'+Normal'b'Just returns 10, as this is Decimal, :)'u'Just returns 10, as this is Decimal, :)'b'Returns a rotated copy of self, value-of-other times.'u'Returns a rotated copy of self, value-of-other times.'b'Returns self operand after adding the second value to its exp.'u'Returns self operand after adding the second value to its exp.'b'Returns a shifted copy of self, value-of-other times.'u'Returns a shifted copy of self, value-of-other times.'b'Format a Decimal instance according to the given specifier.

        The specifier should be a standard format specifier, with the
        form described in PEP 3101.  Formatting types 'e', 'E', 'f',
        'F', 'g', 'G', 'n' and '%' are supported.  If the formatting
        type is omitted it defaults to 'g' or 'G', depending on the
        value of context.capitals.
        'u'Format a Decimal instance according to the given specifier.

        The specifier should be a standard format specifier, with the
        form described in PEP 3101.  Formatting types 'e', 'E', 'f',
        'F', 'g', 'G', 'n' and '%' are supported.  If the formatting
        type is omitted it defaults to 'g' or 'G', depending on the
        value of context.capitals.
        'b'G'u'G'b'precision'u'precision'b'eE'u'eE'b'fF%'u'fF%'b'gG'u'gG'b'Create a decimal instance directly, without any validation,
    normalization (e.g. removal of leading zeros) or argument
    conversion.

    This function is for *internal use only*.
    'u'Create a decimal instance directly, without any validation,
    normalization (e.g. removal of leading zeros) or argument
    conversion.

    This function is for *internal use only*.
    'b'Context manager class to support localcontext().

      Sets a copy of the supplied context in __enter__() and restores
      the previous decimal context in __exit__()
    'u'Context manager class to support localcontext().

      Sets a copy of the supplied context in __enter__() and restores
      the previous decimal context in __exit__()
    'b'Contains the context for a Decimal instance.

    Contains:
    prec - precision (for use in rounding, division, square roots..)
    rounding - rounding type (how you round)
    traps - If traps[exception] = 1, then the exception is
                    raised when it is caused.  Otherwise, a value is
                    substituted in.
    flags  - When an exception is caused, flags[exception] is set.
             (Whether or not the trap_enabler is set)
             Should be reset by user of Decimal instance.
    Emin -   Minimum exponent
    Emax -   Maximum exponent
    capitals -      If 1, 1*10^1 is printed as 1E+1.
                    If 0, printed as 1e1
    clamp -  If 1, change exponents if too high (Default 0)
    'u'Contains the context for a Decimal instance.

    Contains:
    prec - precision (for use in rounding, division, square roots..)
    rounding - rounding type (how you round)
    traps - If traps[exception] = 1, then the exception is
                    raised when it is caused.  Otherwise, a value is
                    substituted in.
    flags  - When an exception is caused, flags[exception] is set.
             (Whether or not the trap_enabler is set)
             Should be reset by user of Decimal instance.
    Emin -   Minimum exponent
    Emax -   Maximum exponent
    capitals -      If 1, 1*10^1 is printed as 1E+1.
                    If 0, printed as 1e1
    clamp -  If 1, change exponents if too high (Default 0)
    'b'%s must be an integer'u'%s must be an integer'b'-inf'u'-inf'b'%s must be in [%s, %d]. got: %s'u'%s must be in [%s, %d]. got: %s'b'inf'u'inf'b'%s must be in [%d, %s]. got: %s'u'%s must be in [%d, %s]. got: %s'b'%s must be in [%d, %d]. got %s'u'%s must be in [%d, %d]. got %s'b'%s must be a signal dict'u'%s must be a signal dict'b'%s is not a valid signal dict'u'%s is not a valid signal dict'b'prec'u'prec'b'Emin'u'Emin'b'Emax'u'Emax'b'capitals'u'capitals'b'clamp'u'clamp'b'rounding'u'rounding'b'%s: invalid rounding mode'u'%s: invalid rounding mode'b'flags'u'flags'b'traps'u'traps'b'_ignored_flags'u'_ignored_flags'b''decimal.Context' object has no attribute '%s''u''decimal.Context' object has no attribute '%s''b'%s cannot be deleted'u'%s cannot be deleted'b'Show the current context.'u'Show the current context.'b'Context(prec=%(prec)d, rounding=%(rounding)s, Emin=%(Emin)d, Emax=%(Emax)d, capitals=%(capitals)d, clamp=%(clamp)d'u'Context(prec=%(prec)d, rounding=%(rounding)s, Emin=%(Emin)d, Emax=%(Emax)d, capitals=%(capitals)d, clamp=%(clamp)d'b'flags=['u'flags=['b'traps=['u'traps=['b'Reset all flags to zero'u'Reset all flags to zero'b'Reset all traps to zero'u'Reset all traps to zero'b'Returns a shallow copy from self.'u'Returns a shallow copy from self.'b'Returns a deep copy from self.'u'Returns a deep copy from self.'b'Handles an error

        If the flag is in _ignored_flags, returns the default response.
        Otherwise, it sets the flag, then, if the corresponding
        trap_enabler is set, it reraises the exception.  Otherwise, it returns
        the default value after setting the flag.
        'u'Handles an error

        If the flag is in _ignored_flags, returns the default response.
        Otherwise, it sets the flag, then, if the corresponding
        trap_enabler is set, it reraises the exception.  Otherwise, it returns
        the default value after setting the flag.
        'b'Ignore all flags, if they are raised'u'Ignore all flags, if they are raised'b'Ignore the flags, if they are raised'u'Ignore the flags, if they are raised'b'Stop ignoring the flags, if they are raised'u'Stop ignoring the flags, if they are raised'b'Returns Etiny (= Emin - prec + 1)'u'Returns Etiny (= Emin - prec + 1)'b'Returns maximum exponent (= Emax - prec + 1)'u'Returns maximum exponent (= Emax - prec + 1)'b'Sets the rounding type.

        Sets the rounding type, and returns the current (previous)
        rounding type.  Often used like:

        context = context.copy()
        # so you don't change the calling context
        # if an error occurs in the middle.
        rounding = context._set_rounding(ROUND_UP)
        val = self.__sub__(other, context=context)
        context._set_rounding(rounding)

        This will make it round up for that operation.
        'u'Sets the rounding type.

        Sets the rounding type, and returns the current (previous)
        rounding type.  Often used like:

        context = context.copy()
        # so you don't change the calling context
        # if an error occurs in the middle.
        rounding = context._set_rounding(ROUND_UP)
        val = self.__sub__(other, context=context)
        context._set_rounding(rounding)

        This will make it round up for that operation.
        'b'Creates a new Decimal instance but using self as context.

        This method implements the to-number operation of the
        IBM Decimal specification.'u'Creates a new Decimal instance but using self as context.

        This method implements the to-number operation of the
        IBM Decimal specification.'b'trailing or leading whitespace and underscores are not permitted.'u'trailing or leading whitespace and underscores are not permitted.'b'diagnostic info too long in NaN'u'diagnostic info too long in NaN'b'Creates a new Decimal instance from a float but rounding using self
        as the context.

        >>> context = Context(prec=5, rounding=ROUND_DOWN)
        >>> context.create_decimal_from_float(3.1415926535897932)
        Decimal('3.1415')
        >>> context = Context(prec=5, traps=[Inexact])
        >>> context.create_decimal_from_float(3.1415926535897932)
        Traceback (most recent call last):
            ...
        decimal.Inexact: None

        'u'Creates a new Decimal instance from a float but rounding using self
        as the context.

        >>> context = Context(prec=5, rounding=ROUND_DOWN)
        >>> context.create_decimal_from_float(3.1415926535897932)
        Decimal('3.1415')
        >>> context = Context(prec=5, traps=[Inexact])
        >>> context.create_decimal_from_float(3.1415926535897932)
        Traceback (most recent call last):
            ...
        decimal.Inexact: None

        'b'Returns the absolute value of the operand.

        If the operand is negative, the result is the same as using the minus
        operation on the operand.  Otherwise, the result is the same as using
        the plus operation on the operand.

        >>> ExtendedContext.abs(Decimal('2.1'))
        Decimal('2.1')
        >>> ExtendedContext.abs(Decimal('-100'))
        Decimal('100')
        >>> ExtendedContext.abs(Decimal('101.5'))
        Decimal('101.5')
        >>> ExtendedContext.abs(Decimal('-101.5'))
        Decimal('101.5')
        >>> ExtendedContext.abs(-1)
        Decimal('1')
        'u'Returns the absolute value of the operand.

        If the operand is negative, the result is the same as using the minus
        operation on the operand.  Otherwise, the result is the same as using
        the plus operation on the operand.

        >>> ExtendedContext.abs(Decimal('2.1'))
        Decimal('2.1')
        >>> ExtendedContext.abs(Decimal('-100'))
        Decimal('100')
        >>> ExtendedContext.abs(Decimal('101.5'))
        Decimal('101.5')
        >>> ExtendedContext.abs(Decimal('-101.5'))
        Decimal('101.5')
        >>> ExtendedContext.abs(-1)
        Decimal('1')
        'b'Return the sum of the two operands.

        >>> ExtendedContext.add(Decimal('12'), Decimal('7.00'))
        Decimal('19.00')
        >>> ExtendedContext.add(Decimal('1E+2'), Decimal('1.01E+4'))
        Decimal('1.02E+4')
        >>> ExtendedContext.add(1, Decimal(2))
        Decimal('3')
        >>> ExtendedContext.add(Decimal(8), 5)
        Decimal('13')
        >>> ExtendedContext.add(5, 5)
        Decimal('10')
        'u'Return the sum of the two operands.

        >>> ExtendedContext.add(Decimal('12'), Decimal('7.00'))
        Decimal('19.00')
        >>> ExtendedContext.add(Decimal('1E+2'), Decimal('1.01E+4'))
        Decimal('1.02E+4')
        >>> ExtendedContext.add(1, Decimal(2))
        Decimal('3')
        >>> ExtendedContext.add(Decimal(8), 5)
        Decimal('13')
        >>> ExtendedContext.add(5, 5)
        Decimal('10')
        'b'Unable to convert %s to Decimal'u'Unable to convert %s to Decimal'b'Returns the same Decimal object.

        As we do not have different encodings for the same number, the
        received object already is in its canonical form.

        >>> ExtendedContext.canonical(Decimal('2.50'))
        Decimal('2.50')
        'u'Returns the same Decimal object.

        As we do not have different encodings for the same number, the
        received object already is in its canonical form.

        >>> ExtendedContext.canonical(Decimal('2.50'))
        Decimal('2.50')
        'b'canonical requires a Decimal as an argument.'u'canonical requires a Decimal as an argument.'b'Compares values numerically.

        If the signs of the operands differ, a value representing each operand
        ('-1' if the operand is less than zero, '0' if the operand is zero or
        negative zero, or '1' if the operand is greater than zero) is used in
        place of that operand for the comparison instead of the actual
        operand.

        The comparison is then effected by subtracting the second operand from
        the first and then returning a value according to the result of the
        subtraction: '-1' if the result is less than zero, '0' if the result is
        zero or negative zero, or '1' if the result is greater than zero.

        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('3'))
        Decimal('-1')
        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('2.1'))
        Decimal('0')
        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('2.10'))
        Decimal('0')
        >>> ExtendedContext.compare(Decimal('3'), Decimal('2.1'))
        Decimal('1')
        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('-3'))
        Decimal('1')
        >>> ExtendedContext.compare(Decimal('-3'), Decimal('2.1'))
        Decimal('-1')
        >>> ExtendedContext.compare(1, 2)
        Decimal('-1')
        >>> ExtendedContext.compare(Decimal(1), 2)
        Decimal('-1')
        >>> ExtendedContext.compare(1, Decimal(2))
        Decimal('-1')
        'u'Compares values numerically.

        If the signs of the operands differ, a value representing each operand
        ('-1' if the operand is less than zero, '0' if the operand is zero or
        negative zero, or '1' if the operand is greater than zero) is used in
        place of that operand for the comparison instead of the actual
        operand.

        The comparison is then effected by subtracting the second operand from
        the first and then returning a value according to the result of the
        subtraction: '-1' if the result is less than zero, '0' if the result is
        zero or negative zero, or '1' if the result is greater than zero.

        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('3'))
        Decimal('-1')
        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('2.1'))
        Decimal('0')
        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('2.10'))
        Decimal('0')
        >>> ExtendedContext.compare(Decimal('3'), Decimal('2.1'))
        Decimal('1')
        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('-3'))
        Decimal('1')
        >>> ExtendedContext.compare(Decimal('-3'), Decimal('2.1'))
        Decimal('-1')
        >>> ExtendedContext.compare(1, 2)
        Decimal('-1')
        >>> ExtendedContext.compare(Decimal(1), 2)
        Decimal('-1')
        >>> ExtendedContext.compare(1, Decimal(2))
        Decimal('-1')
        'b'Compares the values of the two operands numerically.

        It's pretty much like compare(), but all NaNs signal, with signaling
        NaNs taking precedence over quiet NaNs.

        >>> c = ExtendedContext
        >>> c.compare_signal(Decimal('2.1'), Decimal('3'))
        Decimal('-1')
        >>> c.compare_signal(Decimal('2.1'), Decimal('2.1'))
        Decimal('0')
        >>> c.flags[InvalidOperation] = 0
        >>> print(c.flags[InvalidOperation])
        0
        >>> c.compare_signal(Decimal('NaN'), Decimal('2.1'))
        Decimal('NaN')
        >>> print(c.flags[InvalidOperation])
        1
        >>> c.flags[InvalidOperation] = 0
        >>> print(c.flags[InvalidOperation])
        0
        >>> c.compare_signal(Decimal('sNaN'), Decimal('2.1'))
        Decimal('NaN')
        >>> print(c.flags[InvalidOperation])
        1
        >>> c.compare_signal(-1, 2)
        Decimal('-1')
        >>> c.compare_signal(Decimal(-1), 2)
        Decimal('-1')
        >>> c.compare_signal(-1, Decimal(2))
        Decimal('-1')
        'u'Compares the values of the two operands numerically.

        It's pretty much like compare(), but all NaNs signal, with signaling
        NaNs taking precedence over quiet NaNs.

        >>> c = ExtendedContext
        >>> c.compare_signal(Decimal('2.1'), Decimal('3'))
        Decimal('-1')
        >>> c.compare_signal(Decimal('2.1'), Decimal('2.1'))
        Decimal('0')
        >>> c.flags[InvalidOperation] = 0
        >>> print(c.flags[InvalidOperation])
        0
        >>> c.compare_signal(Decimal('NaN'), Decimal('2.1'))
        Decimal('NaN')
        >>> print(c.flags[InvalidOperation])
        1
        >>> c.flags[InvalidOperation] = 0
        >>> print(c.flags[InvalidOperation])
        0
        >>> c.compare_signal(Decimal('sNaN'), Decimal('2.1'))
        Decimal('NaN')
        >>> print(c.flags[InvalidOperation])
        1
        >>> c.compare_signal(-1, 2)
        Decimal('-1')
        >>> c.compare_signal(Decimal(-1), 2)
        Decimal('-1')
        >>> c.compare_signal(-1, Decimal(2))
        Decimal('-1')
        'b'Compares two operands using their abstract representation.

        This is not like the standard compare, which use their numerical
        value. Note that a total ordering is defined for all possible abstract
        representations.

        >>> ExtendedContext.compare_total(Decimal('12.73'), Decimal('127.9'))
        Decimal('-1')
        >>> ExtendedContext.compare_total(Decimal('-127'),  Decimal('12'))
        Decimal('-1')
        >>> ExtendedContext.compare_total(Decimal('12.30'), Decimal('12.3'))
        Decimal('-1')
        >>> ExtendedContext.compare_total(Decimal('12.30'), Decimal('12.30'))
        Decimal('0')
        >>> ExtendedContext.compare_total(Decimal('12.3'),  Decimal('12.300'))
        Decimal('1')
        >>> ExtendedContext.compare_total(Decimal('12.3'),  Decimal('NaN'))
        Decimal('-1')
        >>> ExtendedContext.compare_total(1, 2)
        Decimal('-1')
        >>> ExtendedContext.compare_total(Decimal(1), 2)
        Decimal('-1')
        >>> ExtendedContext.compare_total(1, Decimal(2))
        Decimal('-1')
        'u'Compares two operands using their abstract representation.

        This is not like the standard compare, which use their numerical
        value. Note that a total ordering is defined for all possible abstract
        representations.

        >>> ExtendedContext.compare_total(Decimal('12.73'), Decimal('127.9'))
        Decimal('-1')
        >>> ExtendedContext.compare_total(Decimal('-127'),  Decimal('12'))
        Decimal('-1')
        >>> ExtendedContext.compare_total(Decimal('12.30'), Decimal('12.3'))
        Decimal('-1')
        >>> ExtendedContext.compare_total(Decimal('12.30'), Decimal('12.30'))
        Decimal('0')
        >>> ExtendedContext.compare_total(Decimal('12.3'),  Decimal('12.300'))
        Decimal('1')
        >>> ExtendedContext.compare_total(Decimal('12.3'),  Decimal('NaN'))
        Decimal('-1')
        >>> ExtendedContext.compare_total(1, 2)
        Decimal('-1')
        >>> ExtendedContext.compare_total(Decimal(1), 2)
        Decimal('-1')
        >>> ExtendedContext.compare_total(1, Decimal(2))
        Decimal('-1')
        'b'Compares two operands using their abstract representation ignoring sign.

        Like compare_total, but with operand's sign ignored and assumed to be 0.
        'u'Compares two operands using their abstract representation ignoring sign.

        Like compare_total, but with operand's sign ignored and assumed to be 0.
        'b'Returns a copy of the operand with the sign set to 0.

        >>> ExtendedContext.copy_abs(Decimal('2.1'))
        Decimal('2.1')
        >>> ExtendedContext.copy_abs(Decimal('-100'))
        Decimal('100')
        >>> ExtendedContext.copy_abs(-1)
        Decimal('1')
        'u'Returns a copy of the operand with the sign set to 0.

        >>> ExtendedContext.copy_abs(Decimal('2.1'))
        Decimal('2.1')
        >>> ExtendedContext.copy_abs(Decimal('-100'))
        Decimal('100')
        >>> ExtendedContext.copy_abs(-1)
        Decimal('1')
        'b'Returns a copy of the decimal object.

        >>> ExtendedContext.copy_decimal(Decimal('2.1'))
        Decimal('2.1')
        >>> ExtendedContext.copy_decimal(Decimal('-1.00'))
        Decimal('-1.00')
        >>> ExtendedContext.copy_decimal(1)
        Decimal('1')
        'u'Returns a copy of the decimal object.

        >>> ExtendedContext.copy_decimal(Decimal('2.1'))
        Decimal('2.1')
        >>> ExtendedContext.copy_decimal(Decimal('-1.00'))
        Decimal('-1.00')
        >>> ExtendedContext.copy_decimal(1)
        Decimal('1')
        'b'Returns a copy of the operand with the sign inverted.

        >>> ExtendedContext.copy_negate(Decimal('101.5'))
        Decimal('-101.5')
        >>> ExtendedContext.copy_negate(Decimal('-101.5'))
        Decimal('101.5')
        >>> ExtendedContext.copy_negate(1)
        Decimal('-1')
        'u'Returns a copy of the operand with the sign inverted.

        >>> ExtendedContext.copy_negate(Decimal('101.5'))
        Decimal('-101.5')
        >>> ExtendedContext.copy_negate(Decimal('-101.5'))
        Decimal('101.5')
        >>> ExtendedContext.copy_negate(1)
        Decimal('-1')
        'b'Copies the second operand's sign to the first one.

        In detail, it returns a copy of the first operand with the sign
        equal to the sign of the second operand.

        >>> ExtendedContext.copy_sign(Decimal( '1.50'), Decimal('7.33'))
        Decimal('1.50')
        >>> ExtendedContext.copy_sign(Decimal('-1.50'), Decimal('7.33'))
        Decimal('1.50')
        >>> ExtendedContext.copy_sign(Decimal( '1.50'), Decimal('-7.33'))
        Decimal('-1.50')
        >>> ExtendedContext.copy_sign(Decimal('-1.50'), Decimal('-7.33'))
        Decimal('-1.50')
        >>> ExtendedContext.copy_sign(1, -2)
        Decimal('-1')
        >>> ExtendedContext.copy_sign(Decimal(1), -2)
        Decimal('-1')
        >>> ExtendedContext.copy_sign(1, Decimal(-2))
        Decimal('-1')
        'u'Copies the second operand's sign to the first one.

        In detail, it returns a copy of the first operand with the sign
        equal to the sign of the second operand.

        >>> ExtendedContext.copy_sign(Decimal( '1.50'), Decimal('7.33'))
        Decimal('1.50')
        >>> ExtendedContext.copy_sign(Decimal('-1.50'), Decimal('7.33'))
        Decimal('1.50')
        >>> ExtendedContext.copy_sign(Decimal( '1.50'), Decimal('-7.33'))
        Decimal('-1.50')
        >>> ExtendedContext.copy_sign(Decimal('-1.50'), Decimal('-7.33'))
        Decimal('-1.50')
        >>> ExtendedContext.copy_sign(1, -2)
        Decimal('-1')
        >>> ExtendedContext.copy_sign(Decimal(1), -2)
        Decimal('-1')
        >>> ExtendedContext.copy_sign(1, Decimal(-2))
        Decimal('-1')
        'b'Decimal division in a specified context.

        >>> ExtendedContext.divide(Decimal('1'), Decimal('3'))
        Decimal('0.333333333')
        >>> ExtendedContext.divide(Decimal('2'), Decimal('3'))
        Decimal('0.666666667')
        >>> ExtendedContext.divide(Decimal('5'), Decimal('2'))
        Decimal('2.5')
        >>> ExtendedContext.divide(Decimal('1'), Decimal('10'))
        Decimal('0.1')
        >>> ExtendedContext.divide(Decimal('12'), Decimal('12'))
        Decimal('1')
        >>> ExtendedContext.divide(Decimal('8.00'), Decimal('2'))
        Decimal('4.00')
        >>> ExtendedContext.divide(Decimal('2.400'), Decimal('2.0'))
        Decimal('1.20')
        >>> ExtendedContext.divide(Decimal('1000'), Decimal('100'))
        Decimal('10')
        >>> ExtendedContext.divide(Decimal('1000'), Decimal('1'))
        Decimal('1000')
        >>> ExtendedContext.divide(Decimal('2.40E+6'), Decimal('2'))
        Decimal('1.20E+6')
        >>> ExtendedContext.divide(5, 5)
        Decimal('1')
        >>> ExtendedContext.divide(Decimal(5), 5)
        Decimal('1')
        >>> ExtendedContext.divide(5, Decimal(5))
        Decimal('1')
        'u'Decimal division in a specified context.

        >>> ExtendedContext.divide(Decimal('1'), Decimal('3'))
        Decimal('0.333333333')
        >>> ExtendedContext.divide(Decimal('2'), Decimal('3'))
        Decimal('0.666666667')
        >>> ExtendedContext.divide(Decimal('5'), Decimal('2'))
        Decimal('2.5')
        >>> ExtendedContext.divide(Decimal('1'), Decimal('10'))
        Decimal('0.1')
        >>> ExtendedContext.divide(Decimal('12'), Decimal('12'))
        Decimal('1')
        >>> ExtendedContext.divide(Decimal('8.00'), Decimal('2'))
        Decimal('4.00')
        >>> ExtendedContext.divide(Decimal('2.400'), Decimal('2.0'))
        Decimal('1.20')
        >>> ExtendedContext.divide(Decimal('1000'), Decimal('100'))
        Decimal('10')
        >>> ExtendedContext.divide(Decimal('1000'), Decimal('1'))
        Decimal('1000')
        >>> ExtendedContext.divide(Decimal('2.40E+6'), Decimal('2'))
        Decimal('1.20E+6')
        >>> ExtendedContext.divide(5, 5)
        Decimal('1')
        >>> ExtendedContext.divide(Decimal(5), 5)
        Decimal('1')
        >>> ExtendedContext.divide(5, Decimal(5))
        Decimal('1')
        'b'Divides two numbers and returns the integer part of the result.

        >>> ExtendedContext.divide_int(Decimal('2'), Decimal('3'))
        Decimal('0')
        >>> ExtendedContext.divide_int(Decimal('10'), Decimal('3'))
        Decimal('3')
        >>> ExtendedContext.divide_int(Decimal('1'), Decimal('0.3'))
        Decimal('3')
        >>> ExtendedContext.divide_int(10, 3)
        Decimal('3')
        >>> ExtendedContext.divide_int(Decimal(10), 3)
        Decimal('3')
        >>> ExtendedContext.divide_int(10, Decimal(3))
        Decimal('3')
        'u'Divides two numbers and returns the integer part of the result.

        >>> ExtendedContext.divide_int(Decimal('2'), Decimal('3'))
        Decimal('0')
        >>> ExtendedContext.divide_int(Decimal('10'), Decimal('3'))
        Decimal('3')
        >>> ExtendedContext.divide_int(Decimal('1'), Decimal('0.3'))
        Decimal('3')
        >>> ExtendedContext.divide_int(10, 3)
        Decimal('3')
        >>> ExtendedContext.divide_int(Decimal(10), 3)
        Decimal('3')
        >>> ExtendedContext.divide_int(10, Decimal(3))
        Decimal('3')
        'b'Return (a // b, a % b).

        >>> ExtendedContext.divmod(Decimal(8), Decimal(3))
        (Decimal('2'), Decimal('2'))
        >>> ExtendedContext.divmod(Decimal(8), Decimal(4))
        (Decimal('2'), Decimal('0'))
        >>> ExtendedContext.divmod(8, 4)
        (Decimal('2'), Decimal('0'))
        >>> ExtendedContext.divmod(Decimal(8), 4)
        (Decimal('2'), Decimal('0'))
        >>> ExtendedContext.divmod(8, Decimal(4))
        (Decimal('2'), Decimal('0'))
        'u'Return (a // b, a % b).

        >>> ExtendedContext.divmod(Decimal(8), Decimal(3))
        (Decimal('2'), Decimal('2'))
        >>> ExtendedContext.divmod(Decimal(8), Decimal(4))
        (Decimal('2'), Decimal('0'))
        >>> ExtendedContext.divmod(8, 4)
        (Decimal('2'), Decimal('0'))
        >>> ExtendedContext.divmod(Decimal(8), 4)
        (Decimal('2'), Decimal('0'))
        >>> ExtendedContext.divmod(8, Decimal(4))
        (Decimal('2'), Decimal('0'))
        'b'Returns e ** a.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.exp(Decimal('-Infinity'))
        Decimal('0')
        >>> c.exp(Decimal('-1'))
        Decimal('0.367879441')
        >>> c.exp(Decimal('0'))
        Decimal('1')
        >>> c.exp(Decimal('1'))
        Decimal('2.71828183')
        >>> c.exp(Decimal('0.693147181'))
        Decimal('2.00000000')
        >>> c.exp(Decimal('+Infinity'))
        Decimal('Infinity')
        >>> c.exp(10)
        Decimal('22026.4658')
        'u'Returns e ** a.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.exp(Decimal('-Infinity'))
        Decimal('0')
        >>> c.exp(Decimal('-1'))
        Decimal('0.367879441')
        >>> c.exp(Decimal('0'))
        Decimal('1')
        >>> c.exp(Decimal('1'))
        Decimal('2.71828183')
        >>> c.exp(Decimal('0.693147181'))
        Decimal('2.00000000')
        >>> c.exp(Decimal('+Infinity'))
        Decimal('Infinity')
        >>> c.exp(10)
        Decimal('22026.4658')
        'b'Returns a multiplied by b, plus c.

        The first two operands are multiplied together, using multiply,
        the third operand is then added to the result of that
        multiplication, using add, all with only one final rounding.

        >>> ExtendedContext.fma(Decimal('3'), Decimal('5'), Decimal('7'))
        Decimal('22')
        >>> ExtendedContext.fma(Decimal('3'), Decimal('-5'), Decimal('7'))
        Decimal('-8')
        >>> ExtendedContext.fma(Decimal('888565290'), Decimal('1557.96930'), Decimal('-86087.7578'))
        Decimal('1.38435736E+12')
        >>> ExtendedContext.fma(1, 3, 4)
        Decimal('7')
        >>> ExtendedContext.fma(1, Decimal(3), 4)
        Decimal('7')
        >>> ExtendedContext.fma(1, 3, Decimal(4))
        Decimal('7')
        'u'Returns a multiplied by b, plus c.

        The first two operands are multiplied together, using multiply,
        the third operand is then added to the result of that
        multiplication, using add, all with only one final rounding.

        >>> ExtendedContext.fma(Decimal('3'), Decimal('5'), Decimal('7'))
        Decimal('22')
        >>> ExtendedContext.fma(Decimal('3'), Decimal('-5'), Decimal('7'))
        Decimal('-8')
        >>> ExtendedContext.fma(Decimal('888565290'), Decimal('1557.96930'), Decimal('-86087.7578'))
        Decimal('1.38435736E+12')
        >>> ExtendedContext.fma(1, 3, 4)
        Decimal('7')
        >>> ExtendedContext.fma(1, Decimal(3), 4)
        Decimal('7')
        >>> ExtendedContext.fma(1, 3, Decimal(4))
        Decimal('7')
        'b'Return True if the operand is canonical; otherwise return False.

        Currently, the encoding of a Decimal instance is always
        canonical, so this method returns True for any Decimal.

        >>> ExtendedContext.is_canonical(Decimal('2.50'))
        True
        'u'Return True if the operand is canonical; otherwise return False.

        Currently, the encoding of a Decimal instance is always
        canonical, so this method returns True for any Decimal.

        >>> ExtendedContext.is_canonical(Decimal('2.50'))
        True
        'b'is_canonical requires a Decimal as an argument.'u'is_canonical requires a Decimal as an argument.'b'Return True if the operand is finite; otherwise return False.

        A Decimal instance is considered finite if it is neither
        infinite nor a NaN.

        >>> ExtendedContext.is_finite(Decimal('2.50'))
        True
        >>> ExtendedContext.is_finite(Decimal('-0.3'))
        True
        >>> ExtendedContext.is_finite(Decimal('0'))
        True
        >>> ExtendedContext.is_finite(Decimal('Inf'))
        False
        >>> ExtendedContext.is_finite(Decimal('NaN'))
        False
        >>> ExtendedContext.is_finite(1)
        True
        'u'Return True if the operand is finite; otherwise return False.

        A Decimal instance is considered finite if it is neither
        infinite nor a NaN.

        >>> ExtendedContext.is_finite(Decimal('2.50'))
        True
        >>> ExtendedContext.is_finite(Decimal('-0.3'))
        True
        >>> ExtendedContext.is_finite(Decimal('0'))
        True
        >>> ExtendedContext.is_finite(Decimal('Inf'))
        False
        >>> ExtendedContext.is_finite(Decimal('NaN'))
        False
        >>> ExtendedContext.is_finite(1)
        True
        'b'Return True if the operand is infinite; otherwise return False.

        >>> ExtendedContext.is_infinite(Decimal('2.50'))
        False
        >>> ExtendedContext.is_infinite(Decimal('-Inf'))
        True
        >>> ExtendedContext.is_infinite(Decimal('NaN'))
        False
        >>> ExtendedContext.is_infinite(1)
        False
        'u'Return True if the operand is infinite; otherwise return False.

        >>> ExtendedContext.is_infinite(Decimal('2.50'))
        False
        >>> ExtendedContext.is_infinite(Decimal('-Inf'))
        True
        >>> ExtendedContext.is_infinite(Decimal('NaN'))
        False
        >>> ExtendedContext.is_infinite(1)
        False
        'b'Return True if the operand is a qNaN or sNaN;
        otherwise return False.

        >>> ExtendedContext.is_nan(Decimal('2.50'))
        False
        >>> ExtendedContext.is_nan(Decimal('NaN'))
        True
        >>> ExtendedContext.is_nan(Decimal('-sNaN'))
        True
        >>> ExtendedContext.is_nan(1)
        False
        'u'Return True if the operand is a qNaN or sNaN;
        otherwise return False.

        >>> ExtendedContext.is_nan(Decimal('2.50'))
        False
        >>> ExtendedContext.is_nan(Decimal('NaN'))
        True
        >>> ExtendedContext.is_nan(Decimal('-sNaN'))
        True
        >>> ExtendedContext.is_nan(1)
        False
        'b'Return True if the operand is a normal number;
        otherwise return False.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.is_normal(Decimal('2.50'))
        True
        >>> c.is_normal(Decimal('0.1E-999'))
        False
        >>> c.is_normal(Decimal('0.00'))
        False
        >>> c.is_normal(Decimal('-Inf'))
        False
        >>> c.is_normal(Decimal('NaN'))
        False
        >>> c.is_normal(1)
        True
        'u'Return True if the operand is a normal number;
        otherwise return False.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.is_normal(Decimal('2.50'))
        True
        >>> c.is_normal(Decimal('0.1E-999'))
        False
        >>> c.is_normal(Decimal('0.00'))
        False
        >>> c.is_normal(Decimal('-Inf'))
        False
        >>> c.is_normal(Decimal('NaN'))
        False
        >>> c.is_normal(1)
        True
        'b'Return True if the operand is a quiet NaN; otherwise return False.

        >>> ExtendedContext.is_qnan(Decimal('2.50'))
        False
        >>> ExtendedContext.is_qnan(Decimal('NaN'))
        True
        >>> ExtendedContext.is_qnan(Decimal('sNaN'))
        False
        >>> ExtendedContext.is_qnan(1)
        False
        'u'Return True if the operand is a quiet NaN; otherwise return False.

        >>> ExtendedContext.is_qnan(Decimal('2.50'))
        False
        >>> ExtendedContext.is_qnan(Decimal('NaN'))
        True
        >>> ExtendedContext.is_qnan(Decimal('sNaN'))
        False
        >>> ExtendedContext.is_qnan(1)
        False
        'b'Return True if the operand is negative; otherwise return False.

        >>> ExtendedContext.is_signed(Decimal('2.50'))
        False
        >>> ExtendedContext.is_signed(Decimal('-12'))
        True
        >>> ExtendedContext.is_signed(Decimal('-0'))
        True
        >>> ExtendedContext.is_signed(8)
        False
        >>> ExtendedContext.is_signed(-8)
        True
        'u'Return True if the operand is negative; otherwise return False.

        >>> ExtendedContext.is_signed(Decimal('2.50'))
        False
        >>> ExtendedContext.is_signed(Decimal('-12'))
        True
        >>> ExtendedContext.is_signed(Decimal('-0'))
        True
        >>> ExtendedContext.is_signed(8)
        False
        >>> ExtendedContext.is_signed(-8)
        True
        'b'Return True if the operand is a signaling NaN;
        otherwise return False.

        >>> ExtendedContext.is_snan(Decimal('2.50'))
        False
        >>> ExtendedContext.is_snan(Decimal('NaN'))
        False
        >>> ExtendedContext.is_snan(Decimal('sNaN'))
        True
        >>> ExtendedContext.is_snan(1)
        False
        'u'Return True if the operand is a signaling NaN;
        otherwise return False.

        >>> ExtendedContext.is_snan(Decimal('2.50'))
        False
        >>> ExtendedContext.is_snan(Decimal('NaN'))
        False
        >>> ExtendedContext.is_snan(Decimal('sNaN'))
        True
        >>> ExtendedContext.is_snan(1)
        False
        'b'Return True if the operand is subnormal; otherwise return False.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.is_subnormal(Decimal('2.50'))
        False
        >>> c.is_subnormal(Decimal('0.1E-999'))
        True
        >>> c.is_subnormal(Decimal('0.00'))
        False
        >>> c.is_subnormal(Decimal('-Inf'))
        False
        >>> c.is_subnormal(Decimal('NaN'))
        False
        >>> c.is_subnormal(1)
        False
        'u'Return True if the operand is subnormal; otherwise return False.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.is_subnormal(Decimal('2.50'))
        False
        >>> c.is_subnormal(Decimal('0.1E-999'))
        True
        >>> c.is_subnormal(Decimal('0.00'))
        False
        >>> c.is_subnormal(Decimal('-Inf'))
        False
        >>> c.is_subnormal(Decimal('NaN'))
        False
        >>> c.is_subnormal(1)
        False
        'b'Return True if the operand is a zero; otherwise return False.

        >>> ExtendedContext.is_zero(Decimal('0'))
        True
        >>> ExtendedContext.is_zero(Decimal('2.50'))
        False
        >>> ExtendedContext.is_zero(Decimal('-0E+2'))
        True
        >>> ExtendedContext.is_zero(1)
        False
        >>> ExtendedContext.is_zero(0)
        True
        'u'Return True if the operand is a zero; otherwise return False.

        >>> ExtendedContext.is_zero(Decimal('0'))
        True
        >>> ExtendedContext.is_zero(Decimal('2.50'))
        False
        >>> ExtendedContext.is_zero(Decimal('-0E+2'))
        True
        >>> ExtendedContext.is_zero(1)
        False
        >>> ExtendedContext.is_zero(0)
        True
        'b'Returns the natural (base e) logarithm of the operand.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.ln(Decimal('0'))
        Decimal('-Infinity')
        >>> c.ln(Decimal('1.000'))
        Decimal('0')
        >>> c.ln(Decimal('2.71828183'))
        Decimal('1.00000000')
        >>> c.ln(Decimal('10'))
        Decimal('2.30258509')
        >>> c.ln(Decimal('+Infinity'))
        Decimal('Infinity')
        >>> c.ln(1)
        Decimal('0')
        'u'Returns the natural (base e) logarithm of the operand.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.ln(Decimal('0'))
        Decimal('-Infinity')
        >>> c.ln(Decimal('1.000'))
        Decimal('0')
        >>> c.ln(Decimal('2.71828183'))
        Decimal('1.00000000')
        >>> c.ln(Decimal('10'))
        Decimal('2.30258509')
        >>> c.ln(Decimal('+Infinity'))
        Decimal('Infinity')
        >>> c.ln(1)
        Decimal('0')
        'b'Returns the base 10 logarithm of the operand.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.log10(Decimal('0'))
        Decimal('-Infinity')
        >>> c.log10(Decimal('0.001'))
        Decimal('-3')
        >>> c.log10(Decimal('1.000'))
        Decimal('0')
        >>> c.log10(Decimal('2'))
        Decimal('0.301029996')
        >>> c.log10(Decimal('10'))
        Decimal('1')
        >>> c.log10(Decimal('70'))
        Decimal('1.84509804')
        >>> c.log10(Decimal('+Infinity'))
        Decimal('Infinity')
        >>> c.log10(0)
        Decimal('-Infinity')
        >>> c.log10(1)
        Decimal('0')
        'u'Returns the base 10 logarithm of the operand.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.log10(Decimal('0'))
        Decimal('-Infinity')
        >>> c.log10(Decimal('0.001'))
        Decimal('-3')
        >>> c.log10(Decimal('1.000'))
        Decimal('0')
        >>> c.log10(Decimal('2'))
        Decimal('0.301029996')
        >>> c.log10(Decimal('10'))
        Decimal('1')
        >>> c.log10(Decimal('70'))
        Decimal('1.84509804')
        >>> c.log10(Decimal('+Infinity'))
        Decimal('Infinity')
        >>> c.log10(0)
        Decimal('-Infinity')
        >>> c.log10(1)
        Decimal('0')
        'b' Returns the exponent of the magnitude of the operand's MSD.

        The result is the integer which is the exponent of the magnitude
        of the most significant digit of the operand (as though the
        operand were truncated to a single digit while maintaining the
        value of that digit and without limiting the resulting exponent).

        >>> ExtendedContext.logb(Decimal('250'))
        Decimal('2')
        >>> ExtendedContext.logb(Decimal('2.50'))
        Decimal('0')
        >>> ExtendedContext.logb(Decimal('0.03'))
        Decimal('-2')
        >>> ExtendedContext.logb(Decimal('0'))
        Decimal('-Infinity')
        >>> ExtendedContext.logb(1)
        Decimal('0')
        >>> ExtendedContext.logb(10)
        Decimal('1')
        >>> ExtendedContext.logb(100)
        Decimal('2')
        'u' Returns the exponent of the magnitude of the operand's MSD.

        The result is the integer which is the exponent of the magnitude
        of the most significant digit of the operand (as though the
        operand were truncated to a single digit while maintaining the
        value of that digit and without limiting the resulting exponent).

        >>> ExtendedContext.logb(Decimal('250'))
        Decimal('2')
        >>> ExtendedContext.logb(Decimal('2.50'))
        Decimal('0')
        >>> ExtendedContext.logb(Decimal('0.03'))
        Decimal('-2')
        >>> ExtendedContext.logb(Decimal('0'))
        Decimal('-Infinity')
        >>> ExtendedContext.logb(1)
        Decimal('0')
        >>> ExtendedContext.logb(10)
        Decimal('1')
        >>> ExtendedContext.logb(100)
        Decimal('2')
        'b'Applies the logical operation 'and' between each operand's digits.

        The operands must be both logical numbers.

        >>> ExtendedContext.logical_and(Decimal('0'), Decimal('0'))
        Decimal('0')
        >>> ExtendedContext.logical_and(Decimal('0'), Decimal('1'))
        Decimal('0')
        >>> ExtendedContext.logical_and(Decimal('1'), Decimal('0'))
        Decimal('0')
        >>> ExtendedContext.logical_and(Decimal('1'), Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.logical_and(Decimal('1100'), Decimal('1010'))
        Decimal('1000')
        >>> ExtendedContext.logical_and(Decimal('1111'), Decimal('10'))
        Decimal('10')
        >>> ExtendedContext.logical_and(110, 1101)
        Decimal('100')
        >>> ExtendedContext.logical_and(Decimal(110), 1101)
        Decimal('100')
        >>> ExtendedContext.logical_and(110, Decimal(1101))
        Decimal('100')
        'u'Applies the logical operation 'and' between each operand's digits.

        The operands must be both logical numbers.

        >>> ExtendedContext.logical_and(Decimal('0'), Decimal('0'))
        Decimal('0')
        >>> ExtendedContext.logical_and(Decimal('0'), Decimal('1'))
        Decimal('0')
        >>> ExtendedContext.logical_and(Decimal('1'), Decimal('0'))
        Decimal('0')
        >>> ExtendedContext.logical_and(Decimal('1'), Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.logical_and(Decimal('1100'), Decimal('1010'))
        Decimal('1000')
        >>> ExtendedContext.logical_and(Decimal('1111'), Decimal('10'))
        Decimal('10')
        >>> ExtendedContext.logical_and(110, 1101)
        Decimal('100')
        >>> ExtendedContext.logical_and(Decimal(110), 1101)
        Decimal('100')
        >>> ExtendedContext.logical_and(110, Decimal(1101))
        Decimal('100')
        'b'Invert all the digits in the operand.

        The operand must be a logical number.

        >>> ExtendedContext.logical_invert(Decimal('0'))
        Decimal('111111111')
        >>> ExtendedContext.logical_invert(Decimal('1'))
        Decimal('111111110')
        >>> ExtendedContext.logical_invert(Decimal('111111111'))
        Decimal('0')
        >>> ExtendedContext.logical_invert(Decimal('101010101'))
        Decimal('10101010')
        >>> ExtendedContext.logical_invert(1101)
        Decimal('111110010')
        'u'Invert all the digits in the operand.

        The operand must be a logical number.

        >>> ExtendedContext.logical_invert(Decimal('0'))
        Decimal('111111111')
        >>> ExtendedContext.logical_invert(Decimal('1'))
        Decimal('111111110')
        >>> ExtendedContext.logical_invert(Decimal('111111111'))
        Decimal('0')
        >>> ExtendedContext.logical_invert(Decimal('101010101'))
        Decimal('10101010')
        >>> ExtendedContext.logical_invert(1101)
        Decimal('111110010')
        'b'Applies the logical operation 'or' between each operand's digits.

        The operands must be both logical numbers.

        >>> ExtendedContext.logical_or(Decimal('0'), Decimal('0'))
        Decimal('0')
        >>> ExtendedContext.logical_or(Decimal('0'), Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.logical_or(Decimal('1'), Decimal('0'))
        Decimal('1')
        >>> ExtendedContext.logical_or(Decimal('1'), Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.logical_or(Decimal('1100'), Decimal('1010'))
        Decimal('1110')
        >>> ExtendedContext.logical_or(Decimal('1110'), Decimal('10'))
        Decimal('1110')
        >>> ExtendedContext.logical_or(110, 1101)
        Decimal('1111')
        >>> ExtendedContext.logical_or(Decimal(110), 1101)
        Decimal('1111')
        >>> ExtendedContext.logical_or(110, Decimal(1101))
        Decimal('1111')
        'u'Applies the logical operation 'or' between each operand's digits.

        The operands must be both logical numbers.

        >>> ExtendedContext.logical_or(Decimal('0'), Decimal('0'))
        Decimal('0')
        >>> ExtendedContext.logical_or(Decimal('0'), Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.logical_or(Decimal('1'), Decimal('0'))
        Decimal('1')
        >>> ExtendedContext.logical_or(Decimal('1'), Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.logical_or(Decimal('1100'), Decimal('1010'))
        Decimal('1110')
        >>> ExtendedContext.logical_or(Decimal('1110'), Decimal('10'))
        Decimal('1110')
        >>> ExtendedContext.logical_or(110, 1101)
        Decimal('1111')
        >>> ExtendedContext.logical_or(Decimal(110), 1101)
        Decimal('1111')
        >>> ExtendedContext.logical_or(110, Decimal(1101))
        Decimal('1111')
        'b'Applies the logical operation 'xor' between each operand's digits.

        The operands must be both logical numbers.

        >>> ExtendedContext.logical_xor(Decimal('0'), Decimal('0'))
        Decimal('0')
        >>> ExtendedContext.logical_xor(Decimal('0'), Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.logical_xor(Decimal('1'), Decimal('0'))
        Decimal('1')
        >>> ExtendedContext.logical_xor(Decimal('1'), Decimal('1'))
        Decimal('0')
        >>> ExtendedContext.logical_xor(Decimal('1100'), Decimal('1010'))
        Decimal('110')
        >>> ExtendedContext.logical_xor(Decimal('1111'), Decimal('10'))
        Decimal('1101')
        >>> ExtendedContext.logical_xor(110, 1101)
        Decimal('1011')
        >>> ExtendedContext.logical_xor(Decimal(110), 1101)
        Decimal('1011')
        >>> ExtendedContext.logical_xor(110, Decimal(1101))
        Decimal('1011')
        'u'Applies the logical operation 'xor' between each operand's digits.

        The operands must be both logical numbers.

        >>> ExtendedContext.logical_xor(Decimal('0'), Decimal('0'))
        Decimal('0')
        >>> ExtendedContext.logical_xor(Decimal('0'), Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.logical_xor(Decimal('1'), Decimal('0'))
        Decimal('1')
        >>> ExtendedContext.logical_xor(Decimal('1'), Decimal('1'))
        Decimal('0')
        >>> ExtendedContext.logical_xor(Decimal('1100'), Decimal('1010'))
        Decimal('110')
        >>> ExtendedContext.logical_xor(Decimal('1111'), Decimal('10'))
        Decimal('1101')
        >>> ExtendedContext.logical_xor(110, 1101)
        Decimal('1011')
        >>> ExtendedContext.logical_xor(Decimal(110), 1101)
        Decimal('1011')
        >>> ExtendedContext.logical_xor(110, Decimal(1101))
        Decimal('1011')
        'b'max compares two values numerically and returns the maximum.

        If either operand is a NaN then the general rules apply.
        Otherwise, the operands are compared as though by the compare
        operation.  If they are numerically equal then the left-hand operand
        is chosen as the result.  Otherwise the maximum (closer to positive
        infinity) of the two operands is chosen as the result.

        >>> ExtendedContext.max(Decimal('3'), Decimal('2'))
        Decimal('3')
        >>> ExtendedContext.max(Decimal('-10'), Decimal('3'))
        Decimal('3')
        >>> ExtendedContext.max(Decimal('1.0'), Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.max(Decimal('7'), Decimal('NaN'))
        Decimal('7')
        >>> ExtendedContext.max(1, 2)
        Decimal('2')
        >>> ExtendedContext.max(Decimal(1), 2)
        Decimal('2')
        >>> ExtendedContext.max(1, Decimal(2))
        Decimal('2')
        'u'max compares two values numerically and returns the maximum.

        If either operand is a NaN then the general rules apply.
        Otherwise, the operands are compared as though by the compare
        operation.  If they are numerically equal then the left-hand operand
        is chosen as the result.  Otherwise the maximum (closer to positive
        infinity) of the two operands is chosen as the result.

        >>> ExtendedContext.max(Decimal('3'), Decimal('2'))
        Decimal('3')
        >>> ExtendedContext.max(Decimal('-10'), Decimal('3'))
        Decimal('3')
        >>> ExtendedContext.max(Decimal('1.0'), Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.max(Decimal('7'), Decimal('NaN'))
        Decimal('7')
        >>> ExtendedContext.max(1, 2)
        Decimal('2')
        >>> ExtendedContext.max(Decimal(1), 2)
        Decimal('2')
        >>> ExtendedContext.max(1, Decimal(2))
        Decimal('2')
        'b'Compares the values numerically with their sign ignored.

        >>> ExtendedContext.max_mag(Decimal('7'), Decimal('NaN'))
        Decimal('7')
        >>> ExtendedContext.max_mag(Decimal('7'), Decimal('-10'))
        Decimal('-10')
        >>> ExtendedContext.max_mag(1, -2)
        Decimal('-2')
        >>> ExtendedContext.max_mag(Decimal(1), -2)
        Decimal('-2')
        >>> ExtendedContext.max_mag(1, Decimal(-2))
        Decimal('-2')
        'u'Compares the values numerically with their sign ignored.

        >>> ExtendedContext.max_mag(Decimal('7'), Decimal('NaN'))
        Decimal('7')
        >>> ExtendedContext.max_mag(Decimal('7'), Decimal('-10'))
        Decimal('-10')
        >>> ExtendedContext.max_mag(1, -2)
        Decimal('-2')
        >>> ExtendedContext.max_mag(Decimal(1), -2)
        Decimal('-2')
        >>> ExtendedContext.max_mag(1, Decimal(-2))
        Decimal('-2')
        'b'min compares two values numerically and returns the minimum.

        If either operand is a NaN then the general rules apply.
        Otherwise, the operands are compared as though by the compare
        operation.  If they are numerically equal then the left-hand operand
        is chosen as the result.  Otherwise the minimum (closer to negative
        infinity) of the two operands is chosen as the result.

        >>> ExtendedContext.min(Decimal('3'), Decimal('2'))
        Decimal('2')
        >>> ExtendedContext.min(Decimal('-10'), Decimal('3'))
        Decimal('-10')
        >>> ExtendedContext.min(Decimal('1.0'), Decimal('1'))
        Decimal('1.0')
        >>> ExtendedContext.min(Decimal('7'), Decimal('NaN'))
        Decimal('7')
        >>> ExtendedContext.min(1, 2)
        Decimal('1')
        >>> ExtendedContext.min(Decimal(1), 2)
        Decimal('1')
        >>> ExtendedContext.min(1, Decimal(29))
        Decimal('1')
        'u'min compares two values numerically and returns the minimum.

        If either operand is a NaN then the general rules apply.
        Otherwise, the operands are compared as though by the compare
        operation.  If they are numerically equal then the left-hand operand
        is chosen as the result.  Otherwise the minimum (closer to negative
        infinity) of the two operands is chosen as the result.

        >>> ExtendedContext.min(Decimal('3'), Decimal('2'))
        Decimal('2')
        >>> ExtendedContext.min(Decimal('-10'), Decimal('3'))
        Decimal('-10')
        >>> ExtendedContext.min(Decimal('1.0'), Decimal('1'))
        Decimal('1.0')
        >>> ExtendedContext.min(Decimal('7'), Decimal('NaN'))
        Decimal('7')
        >>> ExtendedContext.min(1, 2)
        Decimal('1')
        >>> ExtendedContext.min(Decimal(1), 2)
        Decimal('1')
        >>> ExtendedContext.min(1, Decimal(29))
        Decimal('1')
        'b'Compares the values numerically with their sign ignored.

        >>> ExtendedContext.min_mag(Decimal('3'), Decimal('-2'))
        Decimal('-2')
        >>> ExtendedContext.min_mag(Decimal('-3'), Decimal('NaN'))
        Decimal('-3')
        >>> ExtendedContext.min_mag(1, -2)
        Decimal('1')
        >>> ExtendedContext.min_mag(Decimal(1), -2)
        Decimal('1')
        >>> ExtendedContext.min_mag(1, Decimal(-2))
        Decimal('1')
        'u'Compares the values numerically with their sign ignored.

        >>> ExtendedContext.min_mag(Decimal('3'), Decimal('-2'))
        Decimal('-2')
        >>> ExtendedContext.min_mag(Decimal('-3'), Decimal('NaN'))
        Decimal('-3')
        >>> ExtendedContext.min_mag(1, -2)
        Decimal('1')
        >>> ExtendedContext.min_mag(Decimal(1), -2)
        Decimal('1')
        >>> ExtendedContext.min_mag(1, Decimal(-2))
        Decimal('1')
        'b'Minus corresponds to unary prefix minus in Python.

        The operation is evaluated using the same rules as subtract; the
        operation minus(a) is calculated as subtract('0', a) where the '0'
        has the same exponent as the operand.

        >>> ExtendedContext.minus(Decimal('1.3'))
        Decimal('-1.3')
        >>> ExtendedContext.minus(Decimal('-1.3'))
        Decimal('1.3')
        >>> ExtendedContext.minus(1)
        Decimal('-1')
        'u'Minus corresponds to unary prefix minus in Python.

        The operation is evaluated using the same rules as subtract; the
        operation minus(a) is calculated as subtract('0', a) where the '0'
        has the same exponent as the operand.

        >>> ExtendedContext.minus(Decimal('1.3'))
        Decimal('-1.3')
        >>> ExtendedContext.minus(Decimal('-1.3'))
        Decimal('1.3')
        >>> ExtendedContext.minus(1)
        Decimal('-1')
        'b'multiply multiplies two operands.

        If either operand is a special value then the general rules apply.
        Otherwise, the operands are multiplied together
        ('long multiplication'), resulting in a number which may be as long as
        the sum of the lengths of the two operands.

        >>> ExtendedContext.multiply(Decimal('1.20'), Decimal('3'))
        Decimal('3.60')
        >>> ExtendedContext.multiply(Decimal('7'), Decimal('3'))
        Decimal('21')
        >>> ExtendedContext.multiply(Decimal('0.9'), Decimal('0.8'))
        Decimal('0.72')
        >>> ExtendedContext.multiply(Decimal('0.9'), Decimal('-0'))
        Decimal('-0.0')
        >>> ExtendedContext.multiply(Decimal('654321'), Decimal('654321'))
        Decimal('4.28135971E+11')
        >>> ExtendedContext.multiply(7, 7)
        Decimal('49')
        >>> ExtendedContext.multiply(Decimal(7), 7)
        Decimal('49')
        >>> ExtendedContext.multiply(7, Decimal(7))
        Decimal('49')
        'u'multiply multiplies two operands.

        If either operand is a special value then the general rules apply.
        Otherwise, the operands are multiplied together
        ('long multiplication'), resulting in a number which may be as long as
        the sum of the lengths of the two operands.

        >>> ExtendedContext.multiply(Decimal('1.20'), Decimal('3'))
        Decimal('3.60')
        >>> ExtendedContext.multiply(Decimal('7'), Decimal('3'))
        Decimal('21')
        >>> ExtendedContext.multiply(Decimal('0.9'), Decimal('0.8'))
        Decimal('0.72')
        >>> ExtendedContext.multiply(Decimal('0.9'), Decimal('-0'))
        Decimal('-0.0')
        >>> ExtendedContext.multiply(Decimal('654321'), Decimal('654321'))
        Decimal('4.28135971E+11')
        >>> ExtendedContext.multiply(7, 7)
        Decimal('49')
        >>> ExtendedContext.multiply(Decimal(7), 7)
        Decimal('49')
        >>> ExtendedContext.multiply(7, Decimal(7))
        Decimal('49')
        'b'Returns the largest representable number smaller than a.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> ExtendedContext.next_minus(Decimal('1'))
        Decimal('0.999999999')
        >>> c.next_minus(Decimal('1E-1007'))
        Decimal('0E-1007')
        >>> ExtendedContext.next_minus(Decimal('-1.00000003'))
        Decimal('-1.00000004')
        >>> c.next_minus(Decimal('Infinity'))
        Decimal('9.99999999E+999')
        >>> c.next_minus(1)
        Decimal('0.999999999')
        'u'Returns the largest representable number smaller than a.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> ExtendedContext.next_minus(Decimal('1'))
        Decimal('0.999999999')
        >>> c.next_minus(Decimal('1E-1007'))
        Decimal('0E-1007')
        >>> ExtendedContext.next_minus(Decimal('-1.00000003'))
        Decimal('-1.00000004')
        >>> c.next_minus(Decimal('Infinity'))
        Decimal('9.99999999E+999')
        >>> c.next_minus(1)
        Decimal('0.999999999')
        'b'Returns the smallest representable number larger than a.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> ExtendedContext.next_plus(Decimal('1'))
        Decimal('1.00000001')
        >>> c.next_plus(Decimal('-1E-1007'))
        Decimal('-0E-1007')
        >>> ExtendedContext.next_plus(Decimal('-1.00000003'))
        Decimal('-1.00000002')
        >>> c.next_plus(Decimal('-Infinity'))
        Decimal('-9.99999999E+999')
        >>> c.next_plus(1)
        Decimal('1.00000001')
        'u'Returns the smallest representable number larger than a.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> ExtendedContext.next_plus(Decimal('1'))
        Decimal('1.00000001')
        >>> c.next_plus(Decimal('-1E-1007'))
        Decimal('-0E-1007')
        >>> ExtendedContext.next_plus(Decimal('-1.00000003'))
        Decimal('-1.00000002')
        >>> c.next_plus(Decimal('-Infinity'))
        Decimal('-9.99999999E+999')
        >>> c.next_plus(1)
        Decimal('1.00000001')
        'b'Returns the number closest to a, in direction towards b.

        The result is the closest representable number from the first
        operand (but not the first operand) that is in the direction
        towards the second operand, unless the operands have the same
        value.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.next_toward(Decimal('1'), Decimal('2'))
        Decimal('1.00000001')
        >>> c.next_toward(Decimal('-1E-1007'), Decimal('1'))
        Decimal('-0E-1007')
        >>> c.next_toward(Decimal('-1.00000003'), Decimal('0'))
        Decimal('-1.00000002')
        >>> c.next_toward(Decimal('1'), Decimal('0'))
        Decimal('0.999999999')
        >>> c.next_toward(Decimal('1E-1007'), Decimal('-100'))
        Decimal('0E-1007')
        >>> c.next_toward(Decimal('-1.00000003'), Decimal('-10'))
        Decimal('-1.00000004')
        >>> c.next_toward(Decimal('0.00'), Decimal('-0.0000'))
        Decimal('-0.00')
        >>> c.next_toward(0, 1)
        Decimal('1E-1007')
        >>> c.next_toward(Decimal(0), 1)
        Decimal('1E-1007')
        >>> c.next_toward(0, Decimal(1))
        Decimal('1E-1007')
        'u'Returns the number closest to a, in direction towards b.

        The result is the closest representable number from the first
        operand (but not the first operand) that is in the direction
        towards the second operand, unless the operands have the same
        value.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.next_toward(Decimal('1'), Decimal('2'))
        Decimal('1.00000001')
        >>> c.next_toward(Decimal('-1E-1007'), Decimal('1'))
        Decimal('-0E-1007')
        >>> c.next_toward(Decimal('-1.00000003'), Decimal('0'))
        Decimal('-1.00000002')
        >>> c.next_toward(Decimal('1'), Decimal('0'))
        Decimal('0.999999999')
        >>> c.next_toward(Decimal('1E-1007'), Decimal('-100'))
        Decimal('0E-1007')
        >>> c.next_toward(Decimal('-1.00000003'), Decimal('-10'))
        Decimal('-1.00000004')
        >>> c.next_toward(Decimal('0.00'), Decimal('-0.0000'))
        Decimal('-0.00')
        >>> c.next_toward(0, 1)
        Decimal('1E-1007')
        >>> c.next_toward(Decimal(0), 1)
        Decimal('1E-1007')
        >>> c.next_toward(0, Decimal(1))
        Decimal('1E-1007')
        'b'normalize reduces an operand to its simplest form.

        Essentially a plus operation with all trailing zeros removed from the
        result.

        >>> ExtendedContext.normalize(Decimal('2.1'))
        Decimal('2.1')
        >>> ExtendedContext.normalize(Decimal('-2.0'))
        Decimal('-2')
        >>> ExtendedContext.normalize(Decimal('1.200'))
        Decimal('1.2')
        >>> ExtendedContext.normalize(Decimal('-120'))
        Decimal('-1.2E+2')
        >>> ExtendedContext.normalize(Decimal('120.00'))
        Decimal('1.2E+2')
        >>> ExtendedContext.normalize(Decimal('0.00'))
        Decimal('0')
        >>> ExtendedContext.normalize(6)
        Decimal('6')
        'u'normalize reduces an operand to its simplest form.

        Essentially a plus operation with all trailing zeros removed from the
        result.

        >>> ExtendedContext.normalize(Decimal('2.1'))
        Decimal('2.1')
        >>> ExtendedContext.normalize(Decimal('-2.0'))
        Decimal('-2')
        >>> ExtendedContext.normalize(Decimal('1.200'))
        Decimal('1.2')
        >>> ExtendedContext.normalize(Decimal('-120'))
        Decimal('-1.2E+2')
        >>> ExtendedContext.normalize(Decimal('120.00'))
        Decimal('1.2E+2')
        >>> ExtendedContext.normalize(Decimal('0.00'))
        Decimal('0')
        >>> ExtendedContext.normalize(6)
        Decimal('6')
        'b'Returns an indication of the class of the operand.

        The class is one of the following strings:
          -sNaN
          -NaN
          -Infinity
          -Normal
          -Subnormal
          -Zero
          +Zero
          +Subnormal
          +Normal
          +Infinity

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.number_class(Decimal('Infinity'))
        '+Infinity'
        >>> c.number_class(Decimal('1E-10'))
        '+Normal'
        >>> c.number_class(Decimal('2.50'))
        '+Normal'
        >>> c.number_class(Decimal('0.1E-999'))
        '+Subnormal'
        >>> c.number_class(Decimal('0'))
        '+Zero'
        >>> c.number_class(Decimal('-0'))
        '-Zero'
        >>> c.number_class(Decimal('-0.1E-999'))
        '-Subnormal'
        >>> c.number_class(Decimal('-1E-10'))
        '-Normal'
        >>> c.number_class(Decimal('-2.50'))
        '-Normal'
        >>> c.number_class(Decimal('-Infinity'))
        '-Infinity'
        >>> c.number_class(Decimal('NaN'))
        'NaN'
        >>> c.number_class(Decimal('-NaN'))
        'NaN'
        >>> c.number_class(Decimal('sNaN'))
        'sNaN'
        >>> c.number_class(123)
        '+Normal'
        'u'Returns an indication of the class of the operand.

        The class is one of the following strings:
          -sNaN
          -NaN
          -Infinity
          -Normal
          -Subnormal
          -Zero
          +Zero
          +Subnormal
          +Normal
          +Infinity

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.number_class(Decimal('Infinity'))
        '+Infinity'
        >>> c.number_class(Decimal('1E-10'))
        '+Normal'
        >>> c.number_class(Decimal('2.50'))
        '+Normal'
        >>> c.number_class(Decimal('0.1E-999'))
        '+Subnormal'
        >>> c.number_class(Decimal('0'))
        '+Zero'
        >>> c.number_class(Decimal('-0'))
        '-Zero'
        >>> c.number_class(Decimal('-0.1E-999'))
        '-Subnormal'
        >>> c.number_class(Decimal('-1E-10'))
        '-Normal'
        >>> c.number_class(Decimal('-2.50'))
        '-Normal'
        >>> c.number_class(Decimal('-Infinity'))
        '-Infinity'
        >>> c.number_class(Decimal('NaN'))
        'NaN'
        >>> c.number_class(Decimal('-NaN'))
        'NaN'
        >>> c.number_class(Decimal('sNaN'))
        'sNaN'
        >>> c.number_class(123)
        '+Normal'
        'b'Plus corresponds to unary prefix plus in Python.

        The operation is evaluated using the same rules as add; the
        operation plus(a) is calculated as add('0', a) where the '0'
        has the same exponent as the operand.

        >>> ExtendedContext.plus(Decimal('1.3'))
        Decimal('1.3')
        >>> ExtendedContext.plus(Decimal('-1.3'))
        Decimal('-1.3')
        >>> ExtendedContext.plus(-1)
        Decimal('-1')
        'u'Plus corresponds to unary prefix plus in Python.

        The operation is evaluated using the same rules as add; the
        operation plus(a) is calculated as add('0', a) where the '0'
        has the same exponent as the operand.

        >>> ExtendedContext.plus(Decimal('1.3'))
        Decimal('1.3')
        >>> ExtendedContext.plus(Decimal('-1.3'))
        Decimal('-1.3')
        >>> ExtendedContext.plus(-1)
        Decimal('-1')
        'b'Raises a to the power of b, to modulo if given.

        With two arguments, compute a**b.  If a is negative then b
        must be integral.  The result will be inexact unless b is
        integral and the result is finite and can be expressed exactly
        in 'precision' digits.

        With three arguments, compute (a**b) % modulo.  For the
        three argument form, the following restrictions on the
        arguments hold:

         - all three arguments must be integral
         - b must be nonnegative
         - at least one of a or b must be nonzero
         - modulo must be nonzero and have at most 'precision' digits

        The result of pow(a, b, modulo) is identical to the result
        that would be obtained by computing (a**b) % modulo with
        unbounded precision, but is computed more efficiently.  It is
        always exact.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.power(Decimal('2'), Decimal('3'))
        Decimal('8')
        >>> c.power(Decimal('-2'), Decimal('3'))
        Decimal('-8')
        >>> c.power(Decimal('2'), Decimal('-3'))
        Decimal('0.125')
        >>> c.power(Decimal('1.7'), Decimal('8'))
        Decimal('69.7575744')
        >>> c.power(Decimal('10'), Decimal('0.301029996'))
        Decimal('2.00000000')
        >>> c.power(Decimal('Infinity'), Decimal('-1'))
        Decimal('0')
        >>> c.power(Decimal('Infinity'), Decimal('0'))
        Decimal('1')
        >>> c.power(Decimal('Infinity'), Decimal('1'))
        Decimal('Infinity')
        >>> c.power(Decimal('-Infinity'), Decimal('-1'))
        Decimal('-0')
        >>> c.power(Decimal('-Infinity'), Decimal('0'))
        Decimal('1')
        >>> c.power(Decimal('-Infinity'), Decimal('1'))
        Decimal('-Infinity')
        >>> c.power(Decimal('-Infinity'), Decimal('2'))
        Decimal('Infinity')
        >>> c.power(Decimal('0'), Decimal('0'))
        Decimal('NaN')

        >>> c.power(Decimal('3'), Decimal('7'), Decimal('16'))
        Decimal('11')
        >>> c.power(Decimal('-3'), Decimal('7'), Decimal('16'))
        Decimal('-11')
        >>> c.power(Decimal('-3'), Decimal('8'), Decimal('16'))
        Decimal('1')
        >>> c.power(Decimal('3'), Decimal('7'), Decimal('-16'))
        Decimal('11')
        >>> c.power(Decimal('23E12345'), Decimal('67E189'), Decimal('123456789'))
        Decimal('11729830')
        >>> c.power(Decimal('-0'), Decimal('17'), Decimal('1729'))
        Decimal('-0')
        >>> c.power(Decimal('-23'), Decimal('0'), Decimal('65537'))
        Decimal('1')
        >>> ExtendedContext.power(7, 7)
        Decimal('823543')
        >>> ExtendedContext.power(Decimal(7), 7)
        Decimal('823543')
        >>> ExtendedContext.power(7, Decimal(7), 2)
        Decimal('1')
        'u'Raises a to the power of b, to modulo if given.

        With two arguments, compute a**b.  If a is negative then b
        must be integral.  The result will be inexact unless b is
        integral and the result is finite and can be expressed exactly
        in 'precision' digits.

        With three arguments, compute (a**b) % modulo.  For the
        three argument form, the following restrictions on the
        arguments hold:

         - all three arguments must be integral
         - b must be nonnegative
         - at least one of a or b must be nonzero
         - modulo must be nonzero and have at most 'precision' digits

        The result of pow(a, b, modulo) is identical to the result
        that would be obtained by computing (a**b) % modulo with
        unbounded precision, but is computed more efficiently.  It is
        always exact.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.power(Decimal('2'), Decimal('3'))
        Decimal('8')
        >>> c.power(Decimal('-2'), Decimal('3'))
        Decimal('-8')
        >>> c.power(Decimal('2'), Decimal('-3'))
        Decimal('0.125')
        >>> c.power(Decimal('1.7'), Decimal('8'))
        Decimal('69.7575744')
        >>> c.power(Decimal('10'), Decimal('0.301029996'))
        Decimal('2.00000000')
        >>> c.power(Decimal('Infinity'), Decimal('-1'))
        Decimal('0')
        >>> c.power(Decimal('Infinity'), Decimal('0'))
        Decimal('1')
        >>> c.power(Decimal('Infinity'), Decimal('1'))
        Decimal('Infinity')
        >>> c.power(Decimal('-Infinity'), Decimal('-1'))
        Decimal('-0')
        >>> c.power(Decimal('-Infinity'), Decimal('0'))
        Decimal('1')
        >>> c.power(Decimal('-Infinity'), Decimal('1'))
        Decimal('-Infinity')
        >>> c.power(Decimal('-Infinity'), Decimal('2'))
        Decimal('Infinity')
        >>> c.power(Decimal('0'), Decimal('0'))
        Decimal('NaN')

        >>> c.power(Decimal('3'), Decimal('7'), Decimal('16'))
        Decimal('11')
        >>> c.power(Decimal('-3'), Decimal('7'), Decimal('16'))
        Decimal('-11')
        >>> c.power(Decimal('-3'), Decimal('8'), Decimal('16'))
        Decimal('1')
        >>> c.power(Decimal('3'), Decimal('7'), Decimal('-16'))
        Decimal('11')
        >>> c.power(Decimal('23E12345'), Decimal('67E189'), Decimal('123456789'))
        Decimal('11729830')
        >>> c.power(Decimal('-0'), Decimal('17'), Decimal('1729'))
        Decimal('-0')
        >>> c.power(Decimal('-23'), Decimal('0'), Decimal('65537'))
        Decimal('1')
        >>> ExtendedContext.power(7, 7)
        Decimal('823543')
        >>> ExtendedContext.power(Decimal(7), 7)
        Decimal('823543')
        >>> ExtendedContext.power(7, Decimal(7), 2)
        Decimal('1')
        'b'Returns a value equal to 'a' (rounded), having the exponent of 'b'.

        The coefficient of the result is derived from that of the left-hand
        operand.  It may be rounded using the current rounding setting (if the
        exponent is being increased), multiplied by a positive power of ten (if
        the exponent is being decreased), or is unchanged (if the exponent is
        already equal to that of the right-hand operand).

        Unlike other operations, if the length of the coefficient after the
        quantize operation would be greater than precision then an Invalid
        operation condition is raised.  This guarantees that, unless there is
        an error condition, the exponent of the result of a quantize is always
        equal to that of the right-hand operand.

        Also unlike other operations, quantize will never raise Underflow, even
        if the result is subnormal and inexact.

        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.001'))
        Decimal('2.170')
        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.01'))
        Decimal('2.17')
        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.1'))
        Decimal('2.2')
        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('1e+0'))
        Decimal('2')
        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('1e+1'))
        Decimal('0E+1')
        >>> ExtendedContext.quantize(Decimal('-Inf'), Decimal('Infinity'))
        Decimal('-Infinity')
        >>> ExtendedContext.quantize(Decimal('2'), Decimal('Infinity'))
        Decimal('NaN')
        >>> ExtendedContext.quantize(Decimal('-0.1'), Decimal('1'))
        Decimal('-0')
        >>> ExtendedContext.quantize(Decimal('-0'), Decimal('1e+5'))
        Decimal('-0E+5')
        >>> ExtendedContext.quantize(Decimal('+35236450.6'), Decimal('1e-2'))
        Decimal('NaN')
        >>> ExtendedContext.quantize(Decimal('-35236450.6'), Decimal('1e-2'))
        Decimal('NaN')
        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e-1'))
        Decimal('217.0')
        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e-0'))
        Decimal('217')
        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e+1'))
        Decimal('2.2E+2')
        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e+2'))
        Decimal('2E+2')
        >>> ExtendedContext.quantize(1, 2)
        Decimal('1')
        >>> ExtendedContext.quantize(Decimal(1), 2)
        Decimal('1')
        >>> ExtendedContext.quantize(1, Decimal(2))
        Decimal('1')
        'u'Returns a value equal to 'a' (rounded), having the exponent of 'b'.

        The coefficient of the result is derived from that of the left-hand
        operand.  It may be rounded using the current rounding setting (if the
        exponent is being increased), multiplied by a positive power of ten (if
        the exponent is being decreased), or is unchanged (if the exponent is
        already equal to that of the right-hand operand).

        Unlike other operations, if the length of the coefficient after the
        quantize operation would be greater than precision then an Invalid
        operation condition is raised.  This guarantees that, unless there is
        an error condition, the exponent of the result of a quantize is always
        equal to that of the right-hand operand.

        Also unlike other operations, quantize will never raise Underflow, even
        if the result is subnormal and inexact.

        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.001'))
        Decimal('2.170')
        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.01'))
        Decimal('2.17')
        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.1'))
        Decimal('2.2')
        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('1e+0'))
        Decimal('2')
        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('1e+1'))
        Decimal('0E+1')
        >>> ExtendedContext.quantize(Decimal('-Inf'), Decimal('Infinity'))
        Decimal('-Infinity')
        >>> ExtendedContext.quantize(Decimal('2'), Decimal('Infinity'))
        Decimal('NaN')
        >>> ExtendedContext.quantize(Decimal('-0.1'), Decimal('1'))
        Decimal('-0')
        >>> ExtendedContext.quantize(Decimal('-0'), Decimal('1e+5'))
        Decimal('-0E+5')
        >>> ExtendedContext.quantize(Decimal('+35236450.6'), Decimal('1e-2'))
        Decimal('NaN')
        >>> ExtendedContext.quantize(Decimal('-35236450.6'), Decimal('1e-2'))
        Decimal('NaN')
        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e-1'))
        Decimal('217.0')
        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e-0'))
        Decimal('217')
        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e+1'))
        Decimal('2.2E+2')
        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e+2'))
        Decimal('2E+2')
        >>> ExtendedContext.quantize(1, 2)
        Decimal('1')
        >>> ExtendedContext.quantize(Decimal(1), 2)
        Decimal('1')
        >>> ExtendedContext.quantize(1, Decimal(2))
        Decimal('1')
        'b'Just returns 10, as this is Decimal, :)

        >>> ExtendedContext.radix()
        Decimal('10')
        'u'Just returns 10, as this is Decimal, :)

        >>> ExtendedContext.radix()
        Decimal('10')
        'b'Returns the remainder from integer division.

        The result is the residue of the dividend after the operation of
        calculating integer division as described for divide-integer, rounded
        to precision digits if necessary.  The sign of the result, if
        non-zero, is the same as that of the original dividend.

        This operation will fail under the same conditions as integer division
        (that is, if integer division on the same two operands would fail, the
        remainder cannot be calculated).

        >>> ExtendedContext.remainder(Decimal('2.1'), Decimal('3'))
        Decimal('2.1')
        >>> ExtendedContext.remainder(Decimal('10'), Decimal('3'))
        Decimal('1')
        >>> ExtendedContext.remainder(Decimal('-10'), Decimal('3'))
        Decimal('-1')
        >>> ExtendedContext.remainder(Decimal('10.2'), Decimal('1'))
        Decimal('0.2')
        >>> ExtendedContext.remainder(Decimal('10'), Decimal('0.3'))
        Decimal('0.1')
        >>> ExtendedContext.remainder(Decimal('3.6'), Decimal('1.3'))
        Decimal('1.0')
        >>> ExtendedContext.remainder(22, 6)
        Decimal('4')
        >>> ExtendedContext.remainder(Decimal(22), 6)
        Decimal('4')
        >>> ExtendedContext.remainder(22, Decimal(6))
        Decimal('4')
        'u'Returns the remainder from integer division.

        The result is the residue of the dividend after the operation of
        calculating integer division as described for divide-integer, rounded
        to precision digits if necessary.  The sign of the result, if
        non-zero, is the same as that of the original dividend.

        This operation will fail under the same conditions as integer division
        (that is, if integer division on the same two operands would fail, the
        remainder cannot be calculated).

        >>> ExtendedContext.remainder(Decimal('2.1'), Decimal('3'))
        Decimal('2.1')
        >>> ExtendedContext.remainder(Decimal('10'), Decimal('3'))
        Decimal('1')
        >>> ExtendedContext.remainder(Decimal('-10'), Decimal('3'))
        Decimal('-1')
        >>> ExtendedContext.remainder(Decimal('10.2'), Decimal('1'))
        Decimal('0.2')
        >>> ExtendedContext.remainder(Decimal('10'), Decimal('0.3'))
        Decimal('0.1')
        >>> ExtendedContext.remainder(Decimal('3.6'), Decimal('1.3'))
        Decimal('1.0')
        >>> ExtendedContext.remainder(22, 6)
        Decimal('4')
        >>> ExtendedContext.remainder(Decimal(22), 6)
        Decimal('4')
        >>> ExtendedContext.remainder(22, Decimal(6))
        Decimal('4')
        'b'Returns to be "a - b * n", where n is the integer nearest the exact
        value of "x / b" (if two integers are equally near then the even one
        is chosen).  If the result is equal to 0 then its sign will be the
        sign of a.

        This operation will fail under the same conditions as integer division
        (that is, if integer division on the same two operands would fail, the
        remainder cannot be calculated).

        >>> ExtendedContext.remainder_near(Decimal('2.1'), Decimal('3'))
        Decimal('-0.9')
        >>> ExtendedContext.remainder_near(Decimal('10'), Decimal('6'))
        Decimal('-2')
        >>> ExtendedContext.remainder_near(Decimal('10'), Decimal('3'))
        Decimal('1')
        >>> ExtendedContext.remainder_near(Decimal('-10'), Decimal('3'))
        Decimal('-1')
        >>> ExtendedContext.remainder_near(Decimal('10.2'), Decimal('1'))
        Decimal('0.2')
        >>> ExtendedContext.remainder_near(Decimal('10'), Decimal('0.3'))
        Decimal('0.1')
        >>> ExtendedContext.remainder_near(Decimal('3.6'), Decimal('1.3'))
        Decimal('-0.3')
        >>> ExtendedContext.remainder_near(3, 11)
        Decimal('3')
        >>> ExtendedContext.remainder_near(Decimal(3), 11)
        Decimal('3')
        >>> ExtendedContext.remainder_near(3, Decimal(11))
        Decimal('3')
        'u'Returns to be "a - b * n", where n is the integer nearest the exact
        value of "x / b" (if two integers are equally near then the even one
        is chosen).  If the result is equal to 0 then its sign will be the
        sign of a.

        This operation will fail under the same conditions as integer division
        (that is, if integer division on the same two operands would fail, the
        remainder cannot be calculated).

        >>> ExtendedContext.remainder_near(Decimal('2.1'), Decimal('3'))
        Decimal('-0.9')
        >>> ExtendedContext.remainder_near(Decimal('10'), Decimal('6'))
        Decimal('-2')
        >>> ExtendedContext.remainder_near(Decimal('10'), Decimal('3'))
        Decimal('1')
        >>> ExtendedContext.remainder_near(Decimal('-10'), Decimal('3'))
        Decimal('-1')
        >>> ExtendedContext.remainder_near(Decimal('10.2'), Decimal('1'))
        Decimal('0.2')
        >>> ExtendedContext.remainder_near(Decimal('10'), Decimal('0.3'))
        Decimal('0.1')
        >>> ExtendedContext.remainder_near(Decimal('3.6'), Decimal('1.3'))
        Decimal('-0.3')
        >>> ExtendedContext.remainder_near(3, 11)
        Decimal('3')
        >>> ExtendedContext.remainder_near(Decimal(3), 11)
        Decimal('3')
        >>> ExtendedContext.remainder_near(3, Decimal(11))
        Decimal('3')
        'b'Returns a rotated copy of a, b times.

        The coefficient of the result is a rotated copy of the digits in
        the coefficient of the first operand.  The number of places of
        rotation is taken from the absolute value of the second operand,
        with the rotation being to the left if the second operand is
        positive or to the right otherwise.

        >>> ExtendedContext.rotate(Decimal('34'), Decimal('8'))
        Decimal('400000003')
        >>> ExtendedContext.rotate(Decimal('12'), Decimal('9'))
        Decimal('12')
        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('-2'))
        Decimal('891234567')
        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('0'))
        Decimal('123456789')
        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('+2'))
        Decimal('345678912')
        >>> ExtendedContext.rotate(1333333, 1)
        Decimal('13333330')
        >>> ExtendedContext.rotate(Decimal(1333333), 1)
        Decimal('13333330')
        >>> ExtendedContext.rotate(1333333, Decimal(1))
        Decimal('13333330')
        'u'Returns a rotated copy of a, b times.

        The coefficient of the result is a rotated copy of the digits in
        the coefficient of the first operand.  The number of places of
        rotation is taken from the absolute value of the second operand,
        with the rotation being to the left if the second operand is
        positive or to the right otherwise.

        >>> ExtendedContext.rotate(Decimal('34'), Decimal('8'))
        Decimal('400000003')
        >>> ExtendedContext.rotate(Decimal('12'), Decimal('9'))
        Decimal('12')
        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('-2'))
        Decimal('891234567')
        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('0'))
        Decimal('123456789')
        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('+2'))
        Decimal('345678912')
        >>> ExtendedContext.rotate(1333333, 1)
        Decimal('13333330')
        >>> ExtendedContext.rotate(Decimal(1333333), 1)
        Decimal('13333330')
        >>> ExtendedContext.rotate(1333333, Decimal(1))
        Decimal('13333330')
        'b'Returns True if the two operands have the same exponent.

        The result is never affected by either the sign or the coefficient of
        either operand.

        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('0.001'))
        False
        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('0.01'))
        True
        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('1'))
        False
        >>> ExtendedContext.same_quantum(Decimal('Inf'), Decimal('-Inf'))
        True
        >>> ExtendedContext.same_quantum(10000, -1)
        True
        >>> ExtendedContext.same_quantum(Decimal(10000), -1)
        True
        >>> ExtendedContext.same_quantum(10000, Decimal(-1))
        True
        'u'Returns True if the two operands have the same exponent.

        The result is never affected by either the sign or the coefficient of
        either operand.

        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('0.001'))
        False
        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('0.01'))
        True
        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('1'))
        False
        >>> ExtendedContext.same_quantum(Decimal('Inf'), Decimal('-Inf'))
        True
        >>> ExtendedContext.same_quantum(10000, -1)
        True
        >>> ExtendedContext.same_quantum(Decimal(10000), -1)
        True
        >>> ExtendedContext.same_quantum(10000, Decimal(-1))
        True
        'b'Returns the first operand after adding the second value its exp.

        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('-2'))
        Decimal('0.0750')
        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('0'))
        Decimal('7.50')
        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('3'))
        Decimal('7.50E+3')
        >>> ExtendedContext.scaleb(1, 4)
        Decimal('1E+4')
        >>> ExtendedContext.scaleb(Decimal(1), 4)
        Decimal('1E+4')
        >>> ExtendedContext.scaleb(1, Decimal(4))
        Decimal('1E+4')
        'u'Returns the first operand after adding the second value its exp.

        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('-2'))
        Decimal('0.0750')
        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('0'))
        Decimal('7.50')
        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('3'))
        Decimal('7.50E+3')
        >>> ExtendedContext.scaleb(1, 4)
        Decimal('1E+4')
        >>> ExtendedContext.scaleb(Decimal(1), 4)
        Decimal('1E+4')
        >>> ExtendedContext.scaleb(1, Decimal(4))
        Decimal('1E+4')
        'b'Returns a shifted copy of a, b times.

        The coefficient of the result is a shifted copy of the digits
        in the coefficient of the first operand.  The number of places
        to shift is taken from the absolute value of the second operand,
        with the shift being to the left if the second operand is
        positive or to the right otherwise.  Digits shifted into the
        coefficient are zeros.

        >>> ExtendedContext.shift(Decimal('34'), Decimal('8'))
        Decimal('400000000')
        >>> ExtendedContext.shift(Decimal('12'), Decimal('9'))
        Decimal('0')
        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('-2'))
        Decimal('1234567')
        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('0'))
        Decimal('123456789')
        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('+2'))
        Decimal('345678900')
        >>> ExtendedContext.shift(88888888, 2)
        Decimal('888888800')
        >>> ExtendedContext.shift(Decimal(88888888), 2)
        Decimal('888888800')
        >>> ExtendedContext.shift(88888888, Decimal(2))
        Decimal('888888800')
        'u'Returns a shifted copy of a, b times.

        The coefficient of the result is a shifted copy of the digits
        in the coefficient of the first operand.  The number of places
        to shift is taken from the absolute value of the second operand,
        with the shift being to the left if the second operand is
        positive or to the right otherwise.  Digits shifted into the
        coefficient are zeros.

        >>> ExtendedContext.shift(Decimal('34'), Decimal('8'))
        Decimal('400000000')
        >>> ExtendedContext.shift(Decimal('12'), Decimal('9'))
        Decimal('0')
        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('-2'))
        Decimal('1234567')
        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('0'))
        Decimal('123456789')
        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('+2'))
        Decimal('345678900')
        >>> ExtendedContext.shift(88888888, 2)
        Decimal('888888800')
        >>> ExtendedContext.shift(Decimal(88888888), 2)
        Decimal('888888800')
        >>> ExtendedContext.shift(88888888, Decimal(2))
        Decimal('888888800')
        'b'Square root of a non-negative number to context precision.

        If the result must be inexact, it is rounded using the round-half-even
        algorithm.

        >>> ExtendedContext.sqrt(Decimal('0'))
        Decimal('0')
        >>> ExtendedContext.sqrt(Decimal('-0'))
        Decimal('-0')
        >>> ExtendedContext.sqrt(Decimal('0.39'))
        Decimal('0.624499800')
        >>> ExtendedContext.sqrt(Decimal('100'))
        Decimal('10')
        >>> ExtendedContext.sqrt(Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.sqrt(Decimal('1.0'))
        Decimal('1.0')
        >>> ExtendedContext.sqrt(Decimal('1.00'))
        Decimal('1.0')
        >>> ExtendedContext.sqrt(Decimal('7'))
        Decimal('2.64575131')
        >>> ExtendedContext.sqrt(Decimal('10'))
        Decimal('3.16227766')
        >>> ExtendedContext.sqrt(2)
        Decimal('1.41421356')
        >>> ExtendedContext.prec
        9
        'u'Square root of a non-negative number to context precision.

        If the result must be inexact, it is rounded using the round-half-even
        algorithm.

        >>> ExtendedContext.sqrt(Decimal('0'))
        Decimal('0')
        >>> ExtendedContext.sqrt(Decimal('-0'))
        Decimal('-0')
        >>> ExtendedContext.sqrt(Decimal('0.39'))
        Decimal('0.624499800')
        >>> ExtendedContext.sqrt(Decimal('100'))
        Decimal('10')
        >>> ExtendedContext.sqrt(Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.sqrt(Decimal('1.0'))
        Decimal('1.0')
        >>> ExtendedContext.sqrt(Decimal('1.00'))
        Decimal('1.0')
        >>> ExtendedContext.sqrt(Decimal('7'))
        Decimal('2.64575131')
        >>> ExtendedContext.sqrt(Decimal('10'))
        Decimal('3.16227766')
        >>> ExtendedContext.sqrt(2)
        Decimal('1.41421356')
        >>> ExtendedContext.prec
        9
        'b'Return the difference between the two operands.

        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('1.07'))
        Decimal('0.23')
        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('1.30'))
        Decimal('0.00')
        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('2.07'))
        Decimal('-0.77')
        >>> ExtendedContext.subtract(8, 5)
        Decimal('3')
        >>> ExtendedContext.subtract(Decimal(8), 5)
        Decimal('3')
        >>> ExtendedContext.subtract(8, Decimal(5))
        Decimal('3')
        'u'Return the difference between the two operands.

        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('1.07'))
        Decimal('0.23')
        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('1.30'))
        Decimal('0.00')
        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('2.07'))
        Decimal('-0.77')
        >>> ExtendedContext.subtract(8, 5)
        Decimal('3')
        >>> ExtendedContext.subtract(Decimal(8), 5)
        Decimal('3')
        >>> ExtendedContext.subtract(8, Decimal(5))
        Decimal('3')
        'b'Convert to a string, using engineering notation if an exponent is needed.

        Engineering notation has an exponent which is a multiple of 3.  This
        can leave up to 3 digits to the left of the decimal place and may
        require the addition of either one or two trailing zeros.

        The operation is not affected by the context.

        >>> ExtendedContext.to_eng_string(Decimal('123E+1'))
        '1.23E+3'
        >>> ExtendedContext.to_eng_string(Decimal('123E+3'))
        '123E+3'
        >>> ExtendedContext.to_eng_string(Decimal('123E-10'))
        '12.3E-9'
        >>> ExtendedContext.to_eng_string(Decimal('-123E-12'))
        '-123E-12'
        >>> ExtendedContext.to_eng_string(Decimal('7E-7'))
        '700E-9'
        >>> ExtendedContext.to_eng_string(Decimal('7E+1'))
        '70'
        >>> ExtendedContext.to_eng_string(Decimal('0E+1'))
        '0.00E+3'

        'u'Convert to a string, using engineering notation if an exponent is needed.

        Engineering notation has an exponent which is a multiple of 3.  This
        can leave up to 3 digits to the left of the decimal place and may
        require the addition of either one or two trailing zeros.

        The operation is not affected by the context.

        >>> ExtendedContext.to_eng_string(Decimal('123E+1'))
        '1.23E+3'
        >>> ExtendedContext.to_eng_string(Decimal('123E+3'))
        '123E+3'
        >>> ExtendedContext.to_eng_string(Decimal('123E-10'))
        '12.3E-9'
        >>> ExtendedContext.to_eng_string(Decimal('-123E-12'))
        '-123E-12'
        >>> ExtendedContext.to_eng_string(Decimal('7E-7'))
        '700E-9'
        >>> ExtendedContext.to_eng_string(Decimal('7E+1'))
        '70'
        >>> ExtendedContext.to_eng_string(Decimal('0E+1'))
        '0.00E+3'

        'b'Converts a number to a string, using scientific notation.

        The operation is not affected by the context.
        'u'Converts a number to a string, using scientific notation.

        The operation is not affected by the context.
        'b'Rounds to an integer.

        When the operand has a negative exponent, the result is the same
        as using the quantize() operation using the given operand as the
        left-hand-operand, 1E+0 as the right-hand-operand, and the precision
        of the operand as the precision setting; Inexact and Rounded flags
        are allowed in this operation.  The rounding mode is taken from the
        context.

        >>> ExtendedContext.to_integral_exact(Decimal('2.1'))
        Decimal('2')
        >>> ExtendedContext.to_integral_exact(Decimal('100'))
        Decimal('100')
        >>> ExtendedContext.to_integral_exact(Decimal('100.0'))
        Decimal('100')
        >>> ExtendedContext.to_integral_exact(Decimal('101.5'))
        Decimal('102')
        >>> ExtendedContext.to_integral_exact(Decimal('-101.5'))
        Decimal('-102')
        >>> ExtendedContext.to_integral_exact(Decimal('10E+5'))
        Decimal('1.0E+6')
        >>> ExtendedContext.to_integral_exact(Decimal('7.89E+77'))
        Decimal('7.89E+77')
        >>> ExtendedContext.to_integral_exact(Decimal('-Inf'))
        Decimal('-Infinity')
        'u'Rounds to an integer.

        When the operand has a negative exponent, the result is the same
        as using the quantize() operation using the given operand as the
        left-hand-operand, 1E+0 as the right-hand-operand, and the precision
        of the operand as the precision setting; Inexact and Rounded flags
        are allowed in this operation.  The rounding mode is taken from the
        context.

        >>> ExtendedContext.to_integral_exact(Decimal('2.1'))
        Decimal('2')
        >>> ExtendedContext.to_integral_exact(Decimal('100'))
        Decimal('100')
        >>> ExtendedContext.to_integral_exact(Decimal('100.0'))
        Decimal('100')
        >>> ExtendedContext.to_integral_exact(Decimal('101.5'))
        Decimal('102')
        >>> ExtendedContext.to_integral_exact(Decimal('-101.5'))
        Decimal('-102')
        >>> ExtendedContext.to_integral_exact(Decimal('10E+5'))
        Decimal('1.0E+6')
        >>> ExtendedContext.to_integral_exact(Decimal('7.89E+77'))
        Decimal('7.89E+77')
        >>> ExtendedContext.to_integral_exact(Decimal('-Inf'))
        Decimal('-Infinity')
        'b'Rounds to an integer.

        When the operand has a negative exponent, the result is the same
        as using the quantize() operation using the given operand as the
        left-hand-operand, 1E+0 as the right-hand-operand, and the precision
        of the operand as the precision setting, except that no flags will
        be set.  The rounding mode is taken from the context.

        >>> ExtendedContext.to_integral_value(Decimal('2.1'))
        Decimal('2')
        >>> ExtendedContext.to_integral_value(Decimal('100'))
        Decimal('100')
        >>> ExtendedContext.to_integral_value(Decimal('100.0'))
        Decimal('100')
        >>> ExtendedContext.to_integral_value(Decimal('101.5'))
        Decimal('102')
        >>> ExtendedContext.to_integral_value(Decimal('-101.5'))
        Decimal('-102')
        >>> ExtendedContext.to_integral_value(Decimal('10E+5'))
        Decimal('1.0E+6')
        >>> ExtendedContext.to_integral_value(Decimal('7.89E+77'))
        Decimal('7.89E+77')
        >>> ExtendedContext.to_integral_value(Decimal('-Inf'))
        Decimal('-Infinity')
        'u'Rounds to an integer.

        When the operand has a negative exponent, the result is the same
        as using the quantize() operation using the given operand as the
        left-hand-operand, 1E+0 as the right-hand-operand, and the precision
        of the operand as the precision setting, except that no flags will
        be set.  The rounding mode is taken from the context.

        >>> ExtendedContext.to_integral_value(Decimal('2.1'))
        Decimal('2')
        >>> ExtendedContext.to_integral_value(Decimal('100'))
        Decimal('100')
        >>> ExtendedContext.to_integral_value(Decimal('100.0'))
        Decimal('100')
        >>> ExtendedContext.to_integral_value(Decimal('101.5'))
        Decimal('102')
        >>> ExtendedContext.to_integral_value(Decimal('-101.5'))
        Decimal('-102')
        >>> ExtendedContext.to_integral_value(Decimal('10E+5'))
        Decimal('1.0E+6')
        >>> ExtendedContext.to_integral_value(Decimal('7.89E+77'))
        Decimal('7.89E+77')
        >>> ExtendedContext.to_integral_value(Decimal('-Inf'))
        Decimal('-Infinity')
        'b'(%r, %r, %r)'u'(%r, %r, %r)'b'Normalizes op1, op2 to have the same exp and length of coefficient.

    Done during addition.
    'u'Normalizes op1, op2 to have the same exp and length of coefficient.

    Done during addition.
    'b' Given integers n and e, return n * 10**e if it's an integer, else None.

    The computation is designed to avoid computing large powers of 10
    unnecessarily.

    >>> _decimal_lshift_exact(3, 4)
    30000
    >>> _decimal_lshift_exact(300, -999999999)  # returns None

    'u' Given integers n and e, return n * 10**e if it's an integer, else None.

    The computation is designed to avoid computing large powers of 10
    unnecessarily.

    >>> _decimal_lshift_exact(3, 4)
    30000
    >>> _decimal_lshift_exact(300, -999999999)  # returns None

    'b'Closest integer to the square root of the positive integer n.  a is
    an initial approximation to the square root.  Any positive integer
    will do for a, but the closer a is to the square root of n the
    faster convergence will be.

    'u'Closest integer to the square root of the positive integer n.  a is
    an initial approximation to the square root.  Any positive integer
    will do for a, but the closer a is to the square root of n the
    faster convergence will be.

    'b'Both arguments to _sqrt_nearest should be positive.'u'Both arguments to _sqrt_nearest should be positive.'b'Given an integer x and a nonnegative integer shift, return closest
    integer to x / 2**shift; use round-to-even in case of a tie.

    'u'Given an integer x and a nonnegative integer shift, return closest
    integer to x / 2**shift; use round-to-even in case of a tie.

    'b'Closest integer to a/b, a and b positive integers; rounds to even
    in the case of a tie.

    'u'Closest integer to a/b, a and b positive integers; rounds to even
    in the case of a tie.

    'b'Integer approximation to M*log(x/M), with absolute error boundable
    in terms only of x/M.

    Given positive integers x and M, return an integer approximation to
    M * log(x/M).  For L = 8 and 0.1 <= x/M <= 10 the difference
    between the approximation and the exact result is at most 22.  For
    L = 8 and 1.0 <= x/M <= 10.0 the difference is at most 15.  In
    both cases these are upper bounds on the error; it will usually be
    much smaller.'u'Integer approximation to M*log(x/M), with absolute error boundable
    in terms only of x/M.

    Given positive integers x and M, return an integer approximation to
    M * log(x/M).  For L = 8 and 0.1 <= x/M <= 10 the difference
    between the approximation and the exact result is at most 22.  For
    L = 8 and 1.0 <= x/M <= 10.0 the difference is at most 15.  In
    both cases these are upper bounds on the error; it will usually be
    much smaller.'b'Given integers c, e and p with c > 0, p >= 0, compute an integer
    approximation to 10**p * log10(c*10**e), with an absolute error of
    at most 1.  Assumes that c*10**e is not exactly 1.'u'Given integers c, e and p with c > 0, p >= 0, compute an integer
    approximation to 10**p * log10(c*10**e), with an absolute error of
    at most 1.  Assumes that c*10**e is not exactly 1.'b'Given integers c, e and p with c > 0, compute an integer
    approximation to 10**p * log(c*10**e), with an absolute error of
    at most 1.  Assumes that c*10**e is not exactly 1.'u'Given integers c, e and p with c > 0, compute an integer
    approximation to 10**p * log(c*10**e), with an absolute error of
    at most 1.  Assumes that c*10**e is not exactly 1.'b'Class to compute, store, and allow retrieval of, digits of the
    constant log(10) = 2.302585....  This constant is needed by
    Decimal.ln, Decimal.log10, Decimal.exp and Decimal.__pow__.'u'Class to compute, store, and allow retrieval of, digits of the
    constant log(10) = 2.302585....  This constant is needed by
    Decimal.ln, Decimal.log10, Decimal.exp and Decimal.__pow__.'b'23025850929940456840179914546843642076011014886'u'23025850929940456840179914546843642076011014886'b'Given an integer p >= 0, return floor(10**p)*log(10).

        For example, self.getdigits(3) returns 2302.
        'u'Given an integer p >= 0, return floor(10**p)*log(10).

        For example, self.getdigits(3) returns 2302.
        'b'p should be nonnegative'u'p should be nonnegative'b'Given integers x and M, M > 0, such that x/M is small in absolute
    value, compute an integer approximation to M*exp(x/M).  For 0 <=
    x/M <= 2.4, the absolute error in the result is bounded by 60 (and
    is usually much smaller).'u'Given integers x and M, M > 0, such that x/M is small in absolute
    value, compute an integer approximation to M*exp(x/M).  For 0 <=
    x/M <= 2.4, the absolute error in the result is bounded by 60 (and
    is usually much smaller).'b'Compute an approximation to exp(c*10**e), with p decimal places of
    precision.

    Returns integers d, f such that:

      10**(p-1) <= d <= 10**p, and
      (d-1)*10**f < exp(c*10**e) < (d+1)*10**f

    In other words, d*10**f is an approximation to exp(c*10**e) with p
    digits of precision, and with an error in d of at most 1.  This is
    almost, but not quite, the same as the error being < 1ulp: when d
    = 10**(p-1) the error could be up to 10 ulp.'u'Compute an approximation to exp(c*10**e), with p decimal places of
    precision.

    Returns integers d, f such that:

      10**(p-1) <= d <= 10**p, and
      (d-1)*10**f < exp(c*10**e) < (d+1)*10**f

    In other words, d*10**f is an approximation to exp(c*10**e) with p
    digits of precision, and with an error in d of at most 1.  This is
    almost, but not quite, the same as the error being < 1ulp: when d
    = 10**(p-1) the error could be up to 10 ulp.'b'Given integers xc, xe, yc and ye representing Decimals x = xc*10**xe and
    y = yc*10**ye, compute x**y.  Returns a pair of integers (c, e) such that:

      10**(p-1) <= c <= 10**p, and
      (c-1)*10**e < x**y < (c+1)*10**e

    in other words, c*10**e is an approximation to x**y with p digits
    of precision, and with an error in c of at most 1.  (This is
    almost, but not quite, the same as the error being < 1ulp: when c
    == 10**(p-1) we can only guarantee error < 10ulp.)

    We assume that: x is positive and not equal to 1, and y is nonzero.
    'u'Given integers xc, xe, yc and ye representing Decimals x = xc*10**xe and
    y = yc*10**ye, compute x**y.  Returns a pair of integers (c, e) such that:

      10**(p-1) <= c <= 10**p, and
      (c-1)*10**e < x**y < (c+1)*10**e

    in other words, c*10**e is an approximation to x**y with p digits
    of precision, and with an error in c of at most 1.  (This is
    almost, but not quite, the same as the error being < 1ulp: when c
    == 10**(p-1) we can only guarantee error < 10ulp.)

    We assume that: x is positive and not equal to 1, and y is nonzero.
    'b'Compute a lower bound for 100*log10(c) for a positive integer c.'u'Compute a lower bound for 100*log10(c) for a positive integer c.'b'The argument to _log10_lb should be nonnegative.'u'The argument to _log10_lb should be nonnegative.'b'Convert other to Decimal.

    Verifies that it's ok to use in an implicit construction.
    If allow_float is true, allow conversion from float;  this
    is used in the comparison methods (__eq__ and friends).

    'u'Convert other to Decimal.

    Verifies that it's ok to use in an implicit construction.
    If allow_float is true, allow conversion from float;  this
    is used in the comparison methods (__eq__ and friends).

    'b'Given a Decimal instance self and a Python object other, return
    a pair (s, o) of Decimal instances such that "s op o" is
    equivalent to "self op other" for any of the 6 comparison
    operators "op".

    'u'Given a Decimal instance self and a Python object other, return
    a pair (s, o) of Decimal instances such that "s op o" is
    equivalent to "self op other" for any of the 6 comparison
    operators "op".

    'b'        # A numeric string consists of:
#    \s*
    (?P<sign>[-+])?              # an optional sign, followed by either...
    (
        (?=\d|\.\d)              # ...a number (with at least one digit)
        (?P<int>\d*)             # having a (possibly empty) integer part
        (\.(?P<frac>\d*))?       # followed by an optional fractional part
        (E(?P<exp>[-+]?\d+))?    # followed by an optional exponent, or...
    |
        Inf(inity)?              # ...an infinity, or...
    |
        (?P<signal>s)?           # ...an (optionally signaling)
        NaN                      # NaN
        (?P<diag>\d*)            # with (possibly empty) diagnostic info.
    )
#    \s*
    \Z
'u'        # A numeric string consists of:
#    \s*
    (?P<sign>[-+])?              # an optional sign, followed by either...
    (
        (?=\d|\.\d)              # ...a number (with at least one digit)
        (?P<int>\d*)             # having a (possibly empty) integer part
        (\.(?P<frac>\d*))?       # followed by an optional fractional part
        (E(?P<exp>[-+]?\d+))?    # followed by an optional exponent, or...
    |
        Inf(inity)?              # ...an infinity, or...
    |
        (?P<signal>s)?           # ...an (optionally signaling)
        NaN                      # NaN
        (?P<diag>\d*)            # with (possibly empty) diagnostic info.
    )
#    \s*
    \Z
'b'0*$'u'0*$'b'50*$'u'50*$'b'\A
(?:
   (?P<fill>.)?
   (?P<align>[<>=^])
)?
(?P<sign>[-+ ])?
(?P<alt>\#)?
(?P<zeropad>0)?
(?P<minimumwidth>(?!0)\d+)?
(?P<thousands_sep>,)?
(?:\.(?P<precision>0|(?!0)\d+))?
(?P<type>[eEfFgGn%])?
\Z
'u'\A
(?:
   (?P<fill>.)?
   (?P<align>[<>=^])
)?
(?P<sign>[-+ ])?
(?P<alt>\#)?
(?P<zeropad>0)?
(?P<minimumwidth>(?!0)\d+)?
(?P<thousands_sep>,)?
(?:\.(?P<precision>0|(?!0)\d+))?
(?P<type>[eEfFgGn%])?
\Z
'b'Parse and validate a format specifier.

    Turns a standard numeric format specifier into a dict, with the
    following entries:

      fill: fill character to pad field to minimum width
      align: alignment type, either '<', '>', '=' or '^'
      sign: either '+', '-' or ' '
      minimumwidth: nonnegative integer giving minimum width
      zeropad: boolean, indicating whether to pad with zeros
      thousands_sep: string to use as thousands separator, or ''
      grouping: grouping for thousands separators, in format
        used by localeconv
      decimal_point: string to use for decimal point
      precision: nonnegative integer giving precision, or None
      type: one of the characters 'eEfFgG%', or None

    'u'Parse and validate a format specifier.

    Turns a standard numeric format specifier into a dict, with the
    following entries:

      fill: fill character to pad field to minimum width
      align: alignment type, either '<', '>', '=' or '^'
      sign: either '+', '-' or ' '
      minimumwidth: nonnegative integer giving minimum width
      zeropad: boolean, indicating whether to pad with zeros
      thousands_sep: string to use as thousands separator, or ''
      grouping: grouping for thousands separators, in format
        used by localeconv
      decimal_point: string to use for decimal point
      precision: nonnegative integer giving precision, or None
      type: one of the characters 'eEfFgG%', or None

    'b'Invalid format specifier: 'u'Invalid format specifier: 'b'fill'u'fill'b'align'u'align'b'zeropad'u'zeropad'b'Fill character conflicts with '0' in format specifier: 'u'Fill character conflicts with '0' in format specifier: 'b'Alignment conflicts with '0' in format specifier: 'u'Alignment conflicts with '0' in format specifier: 'b'minimumwidth'u'minimumwidth'b'gGn'u'gGn'b'thousands_sep'u'thousands_sep'b'Explicit thousands separator conflicts with 'n' type in format specifier: 'u'Explicit thousands separator conflicts with 'n' type in format specifier: 'b'grouping'u'grouping'b'decimal_point'u'decimal_point'b'Given an unpadded, non-aligned numeric string 'body' and sign
    string 'sign', add padding and alignment conforming to the given
    format specifier dictionary 'spec' (as produced by
    parse_format_specifier).

    'u'Given an unpadded, non-aligned numeric string 'body' and sign
    string 'sign', add padding and alignment conforming to the given
    format specifier dictionary 'spec' (as produced by
    parse_format_specifier).

    'b'^'u'^'b'Unrecognised alignment field'u'Unrecognised alignment field'b'Convert a localeconv-style grouping into a (possibly infinite)
    iterable of integers representing group lengths.

    'u'Convert a localeconv-style grouping into a (possibly infinite)
    iterable of integers representing group lengths.

    'b'unrecognised format for grouping'u'unrecognised format for grouping'b'Insert thousands separators into a digit string.

    spec is a dictionary whose keys should include 'thousands_sep' and
    'grouping'; typically it's the result of parsing the format
    specifier using _parse_format_specifier.

    The min_width keyword argument gives the minimum length of the
    result, which will be padded on the left with zeros if necessary.

    If necessary, the zero padding adds an extra '0' on the left to
    avoid a leading thousands separator.  For example, inserting
    commas every three digits in '123456', with min_width=8, gives
    '0,123,456', even though that has length 9.

    'u'Insert thousands separators into a digit string.

    spec is a dictionary whose keys should include 'thousands_sep' and
    'grouping'; typically it's the result of parsing the format
    specifier using _parse_format_specifier.

    The min_width keyword argument gives the minimum length of the
    result, which will be padded on the left with zeros if necessary.

    If necessary, the zero padding adds an extra '0' on the left to
    avoid a leading thousands separator.  For example, inserting
    commas every three digits in '123456', with min_width=8, gives
    '0,123,456', even though that has length 9.

    'b'group length should be positive'u'group length should be positive'b'Determine sign character.'u'Determine sign character.'b' +'u' +'b'Format a number, given the following data:

    is_negative: true if the number is negative, else false
    intpart: string of digits that must appear before the decimal point
    fracpart: string of digits that must come after the point
    exp: exponent, as an integer
    spec: dictionary resulting from parsing the format specifier

    This function uses the information in spec to:
      insert separators (decimal separator and thousands separators)
      format the sign
      format the exponent
      add trailing '%' for the '%' type
      zero-pad if necessary
      fill and align if necessary
    'u'Format a number, given the following data:

    is_negative: true if the number is negative, else false
    intpart: string of digits that must appear before the decimal point
    fracpart: string of digits that must come after the point
    exp: exponent, as an integer
    spec: dictionary resulting from parsing the format specifier

    This function uses the information in spec to:
      insert separators (decimal separator and thousands separators)
      format the sign
      format the exponent
      add trailing '%' for the '%' type
      zero-pad if necessary
      fill and align if necessary
    'b'alt'u'alt'b'{0}{1:+}'u'{0}{1:+}'b'Inf'u'Inf'b'-Inf'u'-Inf'u'Python.Python39.lib._pydecimal'u'Python39.lib._pydecimal'u'lib._pydecimal'u'_pydecimal'u'Random() -> create a random number generator with its own internal state.'getrandbitsseed_random.RandomRandomu'Module implements the Mersenne Twister random number generator.'_randomPurePath_ignore_alwaysreal_prefix_stat_ignore_scan.git.hg.tox.nox.pytest_cache.mypy_cache_ignore_common_dirs_iter_module_pathsFind the filesystem paths associated with imported modules._remove_by_patternexclude_patterns_find_stat_pathsextra_filesFind paths for the stat reloader to watch. Returns imported
    module files, Python files under non-system paths. Extra files and
    Python files under extra directories can also be scanned.

    System paths have to be excluded for efficiency. Non-system paths,
    such as a project root or ``sys.path.insert``, should be the paths
    of interest to the user anyway.
    parent_has_pydirswalkhas_py_find_watchdog_pathsFind paths for the stat reloader to watch. Looks at the same
    sources as the stat reloader, but watches everything under
    directories instead of individual files.
    _find_common_rootschunksnode_walk_get_args_for_reloadingDetermine how the script was executed, and return the args needed
    to execute it again in a new process.
    orig_argvpy_scriptpy_module-mReloaderLoopDo any setup, then run one step of the watch to populate the
        initial filesystem state.
        run_stepClean up any resources associated with the reloader.Continually run the watch step, sleeping for the configured
        interval after each step.
        Run one step for watching the filesystem. Called once to set
        up initial state, then repeatedly to update it.
        restart_with_reloaderSpawn a new Python interpreter with the same arguments as the
        current one, but running the reloader thread.
         * Restarting with new_environclose_fdsexit_codetrigger_reloadlog_reload * Detected change in , reloadingStatReloaderLoopmtimesold_timeWatchdogReloaderLoopwatchdog.observersObserverwatchdog.eventsPatternMatchingEventHandlerEVENT_TYPE_OPENEDFileModifiedEventEventHandleron_any_eventevent_typesrc_pathreloader_nameobserverwatchdog (extra_patterns*.py*.pyc*.zip*//*event_handlershould_reloadwatchesto_deleteschedulewatchunschedulereloader_loopsautoensure_echo_onEnsure that echo mode is enabled. Some tools such as PDB disable
    it which causes usability issues after a reload.termiostcgetattrECHOtcsetattrTCSANOWrun_with_reloadermain_funcreloader_typeRun the given function in an independent Python interpreter.SIGTERMreloaderThreaddaemon# The various system prefixes where imports are found. Base values are# different when running in a virtualenv. All reloaders will ignore the# base paths (usually the system installation). The stat reloader won't# scan the virtualenv paths, it will only include modules that are# already imported.# virtualenv < 20# List is in case the value is modified by the app while updating.# Zip file, find the base file without the module path.# skip if it was all directories somehow# zip file on sys.path, or extra file# Optimizations: ignore system prefixes, __pycache__ will# have a py or pyc module at the import path, ignore some# common known dirs such as version control and tool caches.# Optimization: stop scanning a directory if neither it nor# its parent contained Python files.# sys.orig_argv, added in Python 3.10, contains the exact args used to invoke# Python. Still replace argv[0] with sys.executable for accuracy.# Need to look at main module to determine how it was executed.# The value of __package__ indicates how Python was called. It may# not exist if a setuptools script is installed as an egg. It may be# set incorrectly for entry points created with pip on Windows.# Executed a file, like "python app.py".# Windows entry points have ".exe" extension and should be# called directly.# Executed a module, like "python -m werkzeug.serving".# Rewritten by Python from "-m script" to "/path/to/script.py".# Incorrectly rewritten by pydevd debugger from "-m script" to "script".# type: ignore[attr-defined]# Extra patterns can be non-Python files, match them in addition# to all Python files in default and extra directories. Ignore# __pycache__ since a change there will always have a change to# the source file (or initial pyc file) as well. Ignore Git and# Mercurial internal changes.# This is called inside an event handler, which means throwing# SystemExit has no effect.# https://github.com/gorakhargosh/watchdog/issues/294# Clear this path from list of watches We don't want# the same error message showing again in the next# iteration.# tcgetattr will fail if stdin isn't a tty# Enter the reloader to set up initial state, then start# the app thread and reloader update loop.b'real_prefix'u'real_prefix'b'.git'u'.git'b'.hg'u'.hg'b'.tox'u'.tox'b'.nox'u'.nox'b'.pytest_cache'u'.pytest_cache'b'.mypy_cache'u'.mypy_cache'b'Find the filesystem paths associated with imported modules.'u'Find the filesystem paths associated with imported modules.'b'Find paths for the stat reloader to watch. Returns imported
    module files, Python files under non-system paths. Extra files and
    Python files under extra directories can also be scanned.

    System paths have to be excluded for efficiency. Non-system paths,
    such as a project root or ``sys.path.insert``, should be the paths
    of interest to the user anyway.
    'u'Find paths for the stat reloader to watch. Returns imported
    module files, Python files under non-system paths. Extra files and
    Python files under extra directories can also be scanned.

    System paths have to be excluded for efficiency. Non-system paths,
    such as a project root or ``sys.path.insert``, should be the paths
    of interest to the user anyway.
    'b'Find paths for the stat reloader to watch. Looks at the same
    sources as the stat reloader, but watches everything under
    directories instead of individual files.
    'u'Find paths for the stat reloader to watch. Looks at the same
    sources as the stat reloader, but watches everything under
    directories instead of individual files.
    'b'Determine how the script was executed, and return the args needed
    to execute it again in a new process.
    'u'Determine how the script was executed, and return the args needed
    to execute it again in a new process.
    'b'-m'u'-m'b'Do any setup, then run one step of the watch to populate the
        initial filesystem state.
        'u'Do any setup, then run one step of the watch to populate the
        initial filesystem state.
        'b'Clean up any resources associated with the reloader.'u'Clean up any resources associated with the reloader.'b'Continually run the watch step, sleeping for the configured
        interval after each step.
        'u'Continually run the watch step, sleeping for the configured
        interval after each step.
        'b'Run one step for watching the filesystem. Called once to set
        up initial state, then repeatedly to update it.
        'u'Run one step for watching the filesystem. Called once to set
        up initial state, then repeatedly to update it.
        'b'Spawn a new Python interpreter with the same arguments as the
        current one, but running the reloader thread.
        'u'Spawn a new Python interpreter with the same arguments as the
        current one, but running the reloader thread.
        'b' * Restarting with 'u' * Restarting with 'b' * Detected change in 'u' * Detected change in 'b', reloading'u', reloading'b'stat'u'stat'b'observer'u'observer'b'watchdog ('u'watchdog ('b'*.py'u'*.py'b'*.pyc'u'*.pyc'b'*.zip'u'*.zip'b'*/'u'*/'b'/*'u'/*'b'watchdog'u'watchdog'b'watchdog.observers'u'watchdog.observers'b'auto'u'auto'b'Ensure that echo mode is enabled. Some tools such as PDB disable
    it which causes usability issues after a reload.'u'Ensure that echo mode is enabled. Some tools such as PDB disable
    it which causes usability issues after a reload.'b'Run the given function in an independent Python interpreter.'u'Run the given function in an independent Python interpreter.'u'werkzeug._reloader'u'_reloader'Refactored 'safe reference from dispatcher.pyget_selfget_funcsafe_refon_deleteReturn a *safe* weak reference to a callable target.

    - ``target``: The object to be weakly referenced, if it's a bound
      method reference, will create a BoundMethodWeakref, otherwise
      creates a simple weakref.

    - ``on_delete``: If provided, will have a hard reference stored to
      the callable to be called after the safe reference goes out of
      scope with the reference object, (either a weakref or a
      BoundMethodWeakref) as argument.
    im_selfim_funcsafe_ref target  has im_self, but no im_func, don't know how to create reference" has im_self, but no im_func, ""don't know how to create reference"BoundMethodWeakref'Safe' and reusable weak references to instance methods.

    BoundMethodWeakref objects provide a mechanism for referencing a
    bound method without requiring that the method object itself
    (which is normally a transient object) is kept alive.  Instead,
    the BoundMethodWeakref object keeps weak references to both the
    object and the function which together define the instance method.

    Attributes:

    - ``key``: The identity key for the reference, calculated by the
      class's calculate_key method applied to the target instance method.

    - ``deletion_methods``: Sequence of callable objects taking single
      argument, a reference to this object which will be called when
      *either* the target object or target function is garbage
      collected (i.e. when this object becomes invalid).  These are
      specified as the on_delete parameters of safe_ref calls.

    - ``weak_self``: Weak reference to the target object.

    - ``weak_func``: Weak reference to the target function.

    Class Attributes:

    - ``_all_instances``: Class attribute pointing to all live
      BoundMethodWeakref objects indexed by the class's
      calculate_key(target) method applied to the target objects.
      This weak value dictionary is used to short-circuit creation so
      that multiple references to the same (object, function) pair
      produce the same BoundMethodWeakref instance.
    _all_instancesCreate new instance or return current instance.

        Basically this method of construction allows us to
        short-circuit creation of references to already-referenced
        instance methods.  The key corresponding to the target is
        calculated, and if there is already an existing reference,
        that is returned, with its deletion_methods attribute updated.
        Otherwise the new instance is created and registered in the
        table of already-referenced methods.
        calculate_keydeletion_methodsReturn a weak-reference-like instance for a bound method.

        - ``target``: The instance-method target for the weak reference,
          must have im_self and im_func attributes and be
          reconstructable via the following, which is true of built-in
          instance methods::

            target.im_func.__get__( target.im_self )

        - ``on_delete``: Optional callback which will be called when
          this weak reference ceases to be valid (i.e. either the
          object or the function is garbage collected).  Should take a
          single argument, which will be passed a pointer to this
          object.
        weakSet self.isDead to True when method or instance is destroyed.print_excException during saferef  cleanup function "cleanup function "weak_selfweak_funcself_nameCalculate the reference key for this reference.

        Currently this is a two-tuple of the id()'s of the target
        object and the target function respectively.
        Give a friendly representation of the object.{}({}.{})__nonzero__Whether we are still a valid reference.Compare with another reference.Return a strong reference to the bound method.

        If the target cannot be retrieved, then will return None,
        otherwise returns a bound instance method for our object and
        function.

        Note: You may call this method any number of times, as it does
        not invalidate the reference.
        # extracted from Louie, http://pylouie.org/# updated for Python 3# Copyright (c) 2006 Patrick K. O'Brien, Mike C. Fletcher,#                    Matthew R. Scott# Redistribution and use in source and binary forms, with or without# modification, are permitted provided that the following conditions are# met:#     * Redistributions of source code must retain the above copyright#       notice, this list of conditions and the following disclaimer.#     * Redistributions in binary form must reproduce the above#       copyright notice, this list of conditions and the following#       disclaimer in the documentation and/or other materials provided#       with the distribution.#     * Neither the name of the <ORGANIZATION> nor the names of its#       contributors may be used to endorse or promote products derived#       from this software without specific prior written permission.# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.# Turn a bound method into a BoundMethodWeakref instance.# Keep track of these instances for lookup by disconnect().# type: ignore[var-annotated]b'Refactored 'safe reference from dispatcher.py'u'Refactored 'safe reference from dispatcher.py'b'__self__'u'__self__'b'__func__'u'__func__'b'Return a *safe* weak reference to a callable target.

    - ``target``: The object to be weakly referenced, if it's a bound
      method reference, will create a BoundMethodWeakref, otherwise
      creates a simple weakref.

    - ``on_delete``: If provided, will have a hard reference stored to
      the callable to be called after the safe reference goes out of
      scope with the reference object, (either a weakref or a
      BoundMethodWeakref) as argument.
    'u'Return a *safe* weak reference to a callable target.

    - ``target``: The object to be weakly referenced, if it's a bound
      method reference, will create a BoundMethodWeakref, otherwise
      creates a simple weakref.

    - ``on_delete``: If provided, will have a hard reference stored to
      the callable to be called after the safe reference goes out of
      scope with the reference object, (either a weakref or a
      BoundMethodWeakref) as argument.
    'b'im_func'u'im_func'b'safe_ref target 'u'safe_ref target 'b' has im_self, but no im_func, don't know how to create reference'u' has im_self, but no im_func, don't know how to create reference'b''Safe' and reusable weak references to instance methods.

    BoundMethodWeakref objects provide a mechanism for referencing a
    bound method without requiring that the method object itself
    (which is normally a transient object) is kept alive.  Instead,
    the BoundMethodWeakref object keeps weak references to both the
    object and the function which together define the instance method.

    Attributes:

    - ``key``: The identity key for the reference, calculated by the
      class's calculate_key method applied to the target instance method.

    - ``deletion_methods``: Sequence of callable objects taking single
      argument, a reference to this object which will be called when
      *either* the target object or target function is garbage
      collected (i.e. when this object becomes invalid).  These are
      specified as the on_delete parameters of safe_ref calls.

    - ``weak_self``: Weak reference to the target object.

    - ``weak_func``: Weak reference to the target function.

    Class Attributes:

    - ``_all_instances``: Class attribute pointing to all live
      BoundMethodWeakref objects indexed by the class's
      calculate_key(target) method applied to the target objects.
      This weak value dictionary is used to short-circuit creation so
      that multiple references to the same (object, function) pair
      produce the same BoundMethodWeakref instance.
    'u''Safe' and reusable weak references to instance methods.

    BoundMethodWeakref objects provide a mechanism for referencing a
    bound method without requiring that the method object itself
    (which is normally a transient object) is kept alive.  Instead,
    the BoundMethodWeakref object keeps weak references to both the
    object and the function which together define the instance method.

    Attributes:

    - ``key``: The identity key for the reference, calculated by the
      class's calculate_key method applied to the target instance method.

    - ``deletion_methods``: Sequence of callable objects taking single
      argument, a reference to this object which will be called when
      *either* the target object or target function is garbage
      collected (i.e. when this object becomes invalid).  These are
      specified as the on_delete parameters of safe_ref calls.

    - ``weak_self``: Weak reference to the target object.

    - ``weak_func``: Weak reference to the target function.

    Class Attributes:

    - ``_all_instances``: Class attribute pointing to all live
      BoundMethodWeakref objects indexed by the class's
      calculate_key(target) method applied to the target objects.
      This weak value dictionary is used to short-circuit creation so
      that multiple references to the same (object, function) pair
      produce the same BoundMethodWeakref instance.
    'b'Create new instance or return current instance.

        Basically this method of construction allows us to
        short-circuit creation of references to already-referenced
        instance methods.  The key corresponding to the target is
        calculated, and if there is already an existing reference,
        that is returned, with its deletion_methods attribute updated.
        Otherwise the new instance is created and registered in the
        table of already-referenced methods.
        'u'Create new instance or return current instance.

        Basically this method of construction allows us to
        short-circuit creation of references to already-referenced
        instance methods.  The key corresponding to the target is
        calculated, and if there is already an existing reference,
        that is returned, with its deletion_methods attribute updated.
        Otherwise the new instance is created and registered in the
        table of already-referenced methods.
        'b'Return a weak-reference-like instance for a bound method.

        - ``target``: The instance-method target for the weak reference,
          must have im_self and im_func attributes and be
          reconstructable via the following, which is true of built-in
          instance methods::

            target.im_func.__get__( target.im_self )

        - ``on_delete``: Optional callback which will be called when
          this weak reference ceases to be valid (i.e. either the
          object or the function is garbage collected).  Should take a
          single argument, which will be passed a pointer to this
          object.
        'u'Return a weak-reference-like instance for a bound method.

        - ``target``: The instance-method target for the weak reference,
          must have im_self and im_func attributes and be
          reconstructable via the following, which is true of built-in
          instance methods::

            target.im_func.__get__( target.im_self )

        - ``on_delete``: Optional callback which will be called when
          this weak reference ceases to be valid (i.e. either the
          object or the function is garbage collected).  Should take a
          single argument, which will be passed a pointer to this
          object.
        'b'Set self.isDead to True when method or instance is destroyed.'u'Set self.isDead to True when method or instance is destroyed.'b'Exception during saferef 'u'Exception during saferef 'b' cleanup function 'u' cleanup function 'b'Calculate the reference key for this reference.

        Currently this is a two-tuple of the id()'s of the target
        object and the target function respectively.
        'u'Calculate the reference key for this reference.

        Currently this is a two-tuple of the id()'s of the target
        object and the target function respectively.
        'b'Give a friendly representation of the object.'u'Give a friendly representation of the object.'b'{}({}.{})'u'{}({}.{})'b'Whether we are still a valid reference.'u'Whether we are still a valid reference.'b'Compare with another reference.'u'Compare with another reference.'b'Return a strong reference to the bound method.

        If the target cannot be retrieved, then will return None,
        otherwise returns a bound instance method for our object and
        function.

        Note: You may call this method any number of times, as it does
        not invalidate the reference.
        'u'Return a strong reference to the bound method.

        If the target cannot be retrieved, then will return None,
        otherwise returns a bound instance method for our object and
        function.

        Note: You may call this method any number of times, as it does
        not invalidate the reference.
        'u'blinker._saferef'u'_saferef'u'sha1.block_size'u'sha1.digest_size'u'sha1.name'_sha1.sha1SHA1Type_sha1u'sha224.block_size'u'sha224.name'_sha256.sha224SHA224Typeu'sha256.block_size'u'sha256.name'_sha256.sha256SHA256Typesha224sha256_sha256u'generic 64-bit optimized implementation (lane complementing, all rounds unrolled)'keccakoptu'sha3_224([data], *, usedforsecurity=True) -> SHA3 object

Return a new SHA3 hash object with a hashbit length of 28 bytes.'u'sha3_224._capacity_bits'_capacity_bitsu'sha3_224._rate_bits'_rate_bitsu'sha3_224._suffix'_suffixu'sha3_224.block_size'u'sha3_224.digest_size'u'sha3_224.name'_sha3.sha3_224sha3_224u'sha3_256([data], *, usedforsecurity=True) -> SHA3 object

Return a new SHA3 hash object with a hashbit length of 32 bytes.'u'sha3_256._capacity_bits'u'sha3_256._rate_bits'u'sha3_256._suffix'u'sha3_256.block_size'u'sha3_256.digest_size'u'sha3_256.name'_sha3.sha3_256sha3_256u'sha3_384([data], *, usedforsecurity=True) -> SHA3 object

Return a new SHA3 hash object with a hashbit length of 48 bytes.'u'sha3_384._capacity_bits'u'sha3_384._rate_bits'u'sha3_384._suffix'u'sha3_384.block_size'u'sha3_384.digest_size'u'sha3_384.name'_sha3.sha3_384sha3_384u'sha3_512([data], *, usedforsecurity=True) -> SHA3 object

Return a new SHA3 hash object with a hashbit length of 64 bytes.'u'sha3_512._capacity_bits'u'sha3_512._rate_bits'u'sha3_512._suffix'u'sha3_512.block_size'u'sha3_512.digest_size'u'sha3_512.name'_sha3.sha3_512sha3_512u'shake_128([data], *, usedforsecurity=True) -> SHAKE object

Return a new SHAKE hash object.'u'shake_128._capacity_bits'u'shake_128._rate_bits'u'shake_128._suffix'u'shake_128.block_size'u'shake_128.digest_size'u'shake_128.name'_sha3.shake_128shake_128u'shake_256([data], *, usedforsecurity=True) -> SHAKE object

Return a new SHAKE hash object.'u'shake_256._capacity_bits'u'shake_256._rate_bits'u'shake_256._suffix'u'shake_256.block_size'u'shake_256.digest_size'u'shake_256.name'_sha3.shake_256shake_256_sha3u'sha384.block_size'u'sha384.name'_sha512.sha384SHA384Typeu'sha512.block_size'u'sha512.name'_sha512.sha512SHA512Typesha384sha512_sha512CTRL_BREAK_EVENTCTRL_C_EVENTNSIGSIGABRTSIGBREAKSIGFPESIGILLSIGINTSIGSEGVSIG_DFLSIG_IGNu'This module provides mechanisms to use signal handlers in Python.

Functions:

alarm() -- cause SIGALRM after a specified time [Unix only]
setitimer() -- cause a signal (described below) after a specified
               float time and the timer may restart then [Unix only]
getitimer() -- get current value of timer [Unix only]
signal() -- set the action for a given signal
getsignal() -- get the signal action for a given signal
pause() -- wait until a signal arrives [Unix only]
default_int_handler() -- default SIGINT handler

signal constants:
SIG_DFL -- used to refer to the system default handler
SIG_IGN -- used to ignore the signal
NSIG -- number of defined signals
SIGINT, SIGTERM, etc. -- signal numbers

itimer constants:
ITIMER_REAL -- decrements in real time, and delivers SIGALRM upon
               expiration
ITIMER_VIRTUAL -- decrements only when the process is executing,
               and delivers SIGVTALRM upon expiration
ITIMER_PROF -- decrements both when the process is executing and
               when the system is executing on behalf of the process.
               Coupled with ITIMER_VIRTUAL, this timer is usually
               used to profile the time spent by the application
               in user and kernel space. SIGPROF is delivered upon
               expiration.


*** IMPORTANT NOTICE ***
A signal handler function is called with two arguments:
the first is the signal number, the second is the interrupted stack frame.'default_int_handlerraise_signalset_wakeup_fdstrsignal_signalCODESIZE20171005MAGIC2147483647MAXGROUPSMAXREPEATascii_iscasedascii_toloweru' SRE 2.2.2 Copyright (c) 1997-2002 by Secret Labs AB 'getcodesizeunicode_iscasedunicode_tolower_sreFILE_ATTRIBUTE_ARCHIVE2048FILE_ATTRIBUTE_COMPRESSEDFILE_ATTRIBUTE_DEVICEFILE_ATTRIBUTE_DIRECTORYFILE_ATTRIBUTE_ENCRYPTEDFILE_ATTRIBUTE_HIDDENFILE_ATTRIBUTE_INTEGRITY_STREAMFILE_ATTRIBUTE_NORMALFILE_ATTRIBUTE_NOT_CONTENT_INDEXEDFILE_ATTRIBUTE_NO_SCRUB_DATAFILE_ATTRIBUTE_OFFLINEFILE_ATTRIBUTE_READONLYFILE_ATTRIBUTE_REPARSE_POINT512FILE_ATTRIBUTE_SPARSE_FILEFILE_ATTRIBUTE_SYSTEMFILE_ATTRIBUTE_TEMPORARYFILE_ATTRIBUTE_VIRTUAL2147483675IO_REPARSE_TAG_APPEXECLINK2684354563IO_REPARSE_TAG_MOUNT_POINT2684354572IO_REPARSE_TAG_SYMLINKSF_APPENDSF_ARCHIVEDSF_IMMUTABLESF_NOUNLINKSF_SNAPSHOTST_ATIMEST_CTIMEST_DEVST_GIDST_INOST_MODEST_MTIMEST_NLINKST_SIZEST_UIDS_ENFMTS_IEXEC24576S_IFBLKS_IFCHRS_IFDIRS_IFDOORS_IFIFO40960S_IFLNKS_IFMTS_IFPORTS_IFREG49152S_IFSOCKS_IFWHTS_IMODES_IREADS_IRGRPS_IROTHS_IRUSR56S_IRWXGS_IRWXO448S_ISBLKS_ISCHRS_ISDOORS_ISFIFOS_ISGIDS_ISLNKS_ISPORTS_ISREGS_ISSOCKS_ISUIDS_ISVTXS_ISWHTS_IWGRPS_IWOTHS_IWRITES_IWUSRS_IXGRPS_IXOTHS_IXUSRUF_APPENDUF_COMPRESSEDUF_HIDDENUF_IMMUTABLEUF_NODUMPUF_NOUNLINKUF_OPAQUEu'S_IFMT_: file type bits
S_IFDIR: directory
S_IFCHR: character device
S_IFBLK: block device
S_IFREG: regular file
S_IFIFO: fifo (named pipe)
S_IFLNK: symbolic link
S_IFSOCK: socket file
S_IFDOOR: door
S_IFPORT: event port
S_IFWHT: whiteout

S_ISUID: set UID bit
S_ISGID: set GID bit
S_ENFMT: file locking enforcement
S_ISVTX: sticky bit
S_IREAD: Unix V7 synonym for S_IRUSR
S_IWRITE: Unix V7 synonym for S_IWUSR
S_IEXEC: Unix V7 synonym for S_IXUSR
S_IRWXU: mask for owner permissions
S_IRUSR: read by owner
S_IWUSR: write by owner
S_IXUSR: execute by owner
S_IRWXG: mask for group permissions
S_IRGRP: read by group
S_IWGRP: write by group
S_IXGRP: execute by group
S_IRWXO: mask for others (not in group) permissions
S_IROTH: read by others
S_IWOTH: write by others
S_IXOTH: execute by others

UF_NODUMP: do not dump file
UF_IMMUTABLE: file may not be changed
UF_APPEND: file may only be appended to
UF_OPAQUE: directory is opaque when viewed through a union stack
UF_NOUNLINK: file may not be renamed or deleted
UF_COMPRESSED: OS X: file is hfs-compressed
UF_HIDDEN: OS X: file should not be displayed
SF_ARCHIVED: file may be archived
SF_IMMUTABLE: file may not be changed
SF_APPEND: file may only be appended to
SF_NOUNLINK: file may not be renamed or deleted
SF_SNAPSHOT: file is a snapshot file

ST_MODE
ST_INO
ST_DEV
ST_NLINK
ST_UID
ST_GID
ST_SIZE
ST_ATIME
ST_MTIME
ST_CTIME

FILE_ATTRIBUTE_*: Windows file attribute constants
                   (only present on Windows)
'_statu'Accelerators for the statistics module.
'_normal_dist_inv_cdf_statisticsu'string helper module'formatter_field_name_splitformatter_parser_stringu'Struct(fmt) --> compiled struct object

'u'struct format string'u'Struct.format'iter_unpackpack_intou'struct size in bytes'u'Struct.size'unpackunpack_from_struct.StructStructu'Functions to convert between Python values and C structs.
Python bytes objects are used to hold the data representing the C struct
and also as format strings (explained below) to describe the layout of data
in the C struct.

The optional first format char indicates byte order, size and alignment:
  @: native order, size & alignment (default)
  =: native order, std. size & alignment
  <: little-endian, std. size & alignment
  >: big-endian, std. size & alignment
  !: same as >

The remaining chars indicate types of args and must match exactly;
these can be preceded by a decimal repeat count:
  x: pad byte (no data); c:char; b:signed byte; B:unsigned byte;
  ?: _Bool (requires C99; if not available, char is used instead)
  h:short; H:unsigned short; i:int; I:unsigned int;
  l:long; L:unsigned long; f:float; d:double; e:half-float.
Special cases (preceding decimal count indicates length):
  s:string (array of char); p: pascal string (with count byte).
Special cases (only available in native format):
  n:ssize_t; N:size_t;
  P:an integer type that is wide enough to hold a pointer.
Special case (not in native mode unless 'long long' in platform C):
  q:long long; Q:unsigned long long
Whitespace between formats is ignored.

The variable struct.error is an exception raised on errors.
'_clearcacheu'struct'u'error.__weakref__'struct.error_struct
This module contains implementations for the termui module. To keep the
import time of Click down, some infrequently used functionality is
placed in this module and only imported as needed.
gettextTracebackTypeVBEFORE_BARAFTER_BAR[?25l[?25h
ProgressBar%(bar)sfill_charempty_charbar_templateinfo_sepshow_etashow_percentshow_positem_show_funcupdate_min_steps_completed_intervalsautowidthiterable or length is requiredavglast_etaeta_knownmax_widthenteredcurrent_itemis_hidden_last_lineProgressBar[V]render_progressrender_finishYou need to use progress bars in a with block.pcttime_per_iterationetaformat_etaminuteshoursd format_posformat_pctformat_barbar_lengthbarcos2.0format_progress_lineinfo_bitsitem_infoold_widthclutter_lengthcolumnsnew_widthclear_widthline_lennlmake_stepn_stepsUpdate the progress bar by advancing a specified number of
        steps, and optionally set the ``current_item`` for this new
        position.

        :param n_steps: Number of steps to advance.
        :param current_item: Optional item to set as ``current_item``
            for the updated position.

        .. versionchanged:: 8.0
            Added the ``current_item`` optional parameter.

        .. versionchanged:: 8.0
            Only render when the number of steps meets the
            ``update_min_steps`` threshold.
        finishReturn a generator which yields the items added to the bar
        during construction, and updates the progress bar *after* the
        yielded block returns.
        pagerDecide what method to use for paging through text._nullpagerPAGERpager_cmd_tempfilepager_pipepagerTERMdumbemacsos2more <(less) 2>/dev/nulllessmore "morePage through text by feeding it to another program.  Invoking a
    pager through this might support colors.
    cmd_detailLESSless_flags-RshellPage through text by invoking a program on a temporary file. "Simply print unformatted text.  This is the ultimate fallback.Editor.txteditorrequire_saveget_editorVISUALEDITORnotepadsensible-editorvimnanowhich  >/dev/null 2>&1viedit_file{editor}: Editing failed{editor}: Editing failed: {e}editor-fdopenutimegetatimegetmtimeopen_url_unquote_filefile://-W/dev/nullnullexplorer /select,"/WAITwait_strstart  "" "cygstart "-wcygstart xdg-openhttp://https://webbrowser_translate_ch_to_excraw_terminalgetwchegetwch √†tty/dev/ttyold_settingssetrawTCSADRAIN# There are no standard streams attached to write to. For example,# pythonw on Windows.# Iteration is defined in terms of a generator function,# returned by iter(self); use that to define next(). This works# because `self.iter` is an iterable consumed by that generator,# so it is re-entry safe. Calling `next(self.generator())`# twice works and does "what you want".# Only output the label as it changes if the output is not a# TTY. Use file=stderr if you expect to be piping stdout.# Update width in case the terminal has been resized# Render the line only if it changed.# self.avg is a rolling list of length <= 7 of steps where steps are# defined as time elapsed divided by the total progress through# self.length.# WARNING: the iterator interface for `ProgressBar` relies on# this and only works because this is a simple generator which# doesn't create or manage additional state. If this function# changes, the impact should be evaluated both against# `iter(bar)` and `next(bar)`. `next()` in particular may call# `self.generator()` repeatedly, and this must remain safe in# order for that interface to work.# This allows show_item_func to be updated before the# item is processed. Only trigger at the beginning of# the update interval.# If we're piping to less we might support colors under the# condition that# Less doesn't respect ^C, but catches it for its own UI purposes (aborting# search or other commands inside less).# That means when the user hits ^C, the parent process (click) terminates,# but less is still alive, paging the output and messing up the terminal.# If the user wants to make the pager exit on ^C, they should set# `LESS='-K'`. It's not our decision to make.# TODO: This never terminates if the passed generator never terminates.# If the filesystem resolution is 1 second, like Mac OS# 10.12 Extended, or 2 seconds, like FAT32, and the editor# closes very fast, require_save can fail. Set the modified# time to be 2 seconds in the past to work around this.# Depending on the resolution, the exact value might not be# recorded, so get the new recorded value.# Unix-like, Ctrl+D# Windows, Ctrl+Z# The function `getch` will return a bytes object corresponding to# the pressed character. Since Windows 10 build 1803, it will also# return \x00 when called a second time after pressing a regular key.# `getwch` does not share this probably-bugged behavior. Moreover, it# returns a Unicode object by default, which is what we want.# Either of these functions will return \x00 or \xe0 to indicate# a special key, and you need to call the same function again to get# the "rest" of the code. The fun part is that \u00e0 is# "latin small letter a with grave", so if you type that on a French# keyboard, you _also_ get a \xe0.# E.g., consider the Up arrow. This returns \xe0 and then \x48. The# resulting Unicode string reads as "a with grave" + "capital H".# This is indistinguishable from when the user actually types# "a with grave" and then "capital H".# When \xe0 is returned, we assume it's part of a special-key sequence# and call `getwch` again, but that means that when the user types# the \u00e0 character, `getchar` doesn't return until a second# character is typed.# The alternative is returning immediately, but that would mess up# cross-platform handling of arrow keys and others that start with# \xe0. Another option is using `getch`, but then we can't reliably# read non-ASCII characters, because return values of `getch` are# limited to the current 8-bit codepage.# Anyway, Click doesn't claim to do this Right(tm), and using `getwch`# is doing the right thing in more situations than with `getch`.# \x00 and \xe0 are control characters that indicate special key,# see above.b'
This module contains implementations for the termui module. To keep the
import time of Click down, some infrequently used functionality is
placed in this module and only imported as needed.
'u'
This module contains implementations for the termui module. To keep the
import time of Click down, some infrequently used functionality is
placed in this module and only imported as needed.
'b'V'u'V'b'[?25l'u'[?25l'b'[?25h
'u'[?25h
'b'%(bar)s'u'%(bar)s'b'iterable or length is required'u'iterable or length is required'b'ProgressBar[V]'u'ProgressBar[V]'b'You need to use progress bars in a with block.'u'You need to use progress bars in a with block.'b'd 'u'd 'b'bar'u'bar'b'Update the progress bar by advancing a specified number of
        steps, and optionally set the ``current_item`` for this new
        position.

        :param n_steps: Number of steps to advance.
        :param current_item: Optional item to set as ``current_item``
            for the updated position.

        .. versionchanged:: 8.0
            Added the ``current_item`` optional parameter.

        .. versionchanged:: 8.0
            Only render when the number of steps meets the
            ``update_min_steps`` threshold.
        'u'Update the progress bar by advancing a specified number of
        steps, and optionally set the ``current_item`` for this new
        position.

        :param n_steps: Number of steps to advance.
        :param current_item: Optional item to set as ``current_item``
            for the updated position.

        .. versionchanged:: 8.0
            Added the ``current_item`` optional parameter.

        .. versionchanged:: 8.0
            Only render when the number of steps meets the
            ``update_min_steps`` threshold.
        'b'Return a generator which yields the items added to the bar
        during construction, and updates the progress bar *after* the
        yielded block returns.
        'u'Return a generator which yields the items added to the bar
        during construction, and updates the progress bar *after* the
        yielded block returns.
        'b'Decide what method to use for paging through text.'u'Decide what method to use for paging through text.'b'PAGER'u'PAGER'b'TERM'u'TERM'b'dumb'u'dumb'b'emacs'u'emacs'b'os2'u'os2'b'more <'u'more <'b'system'u'system'b'(less) 2>/dev/null'u'(less) 2>/dev/null'b'less'u'less'b'more "'u'more "'b'more'u'more'b'Page through text by feeding it to another program.  Invoking a
    pager through this might support colors.
    'u'Page through text by feeding it to another program.  Invoking a
    pager through this might support colors.
    'b'LESS'u'LESS'b'-R'b'R'u'R'b'Page through text by invoking a program on a temporary file.'u'Page through text by invoking a program on a temporary file.'b' "'u' "'b'Simply print unformatted text.  This is the ultimate fallback.'u'Simply print unformatted text.  This is the ultimate fallback.'b'.txt'u'.txt'b'VISUAL'u'VISUAL'b'EDITOR'u'EDITOR'b'notepad'u'notepad'b'sensible-editor'u'sensible-editor'b'vim'u'vim'b'nano'u'nano'b'which 'u'which 'b' >/dev/null 2>&1'u' >/dev/null 2>&1'b'vi'u'vi'b'{editor}: Editing failed'u'{editor}: Editing failed'b'{editor}: Editing failed: {e}'u'{editor}: Editing failed: {e}'b'editor-'u'editor-'b'file://'u'file://'b'open'u'open'b'-W'u'-W'b'/dev/null'u'/dev/null'b'explorer /select,"'u'explorer /select,"'b'/WAIT'u'/WAIT'b'start 'u'start 'b' "" "'u' "" "'b'cygstart "'u'cygstart "'b'-w'u'-w'b'cygstart 'u'cygstart 'b'xdg-open'u'xdg-open'b'http://'u'http://'b'https://'u'https://'b''u''b''u''b''u''b' 'u' 'b'√†'u'√†'b'/dev/tty'u'/dev/tty'u'click._termui_impl'u'_termui_impl'
    A case insensitive string class; behaves just like str
    except compares equal when the only variation is case.

    >>> s = FoldedCase('hello world')

    >>> s == 'Hello World'
    True

    >>> 'Hello World' == s
    True

    >>> s != 'Hello World'
    False

    >>> s.index('O')
    4

    >>> s.split('O')
    ['hell', ' w', 'rld']

    >>> sorted(map(FoldedCase, ['GAMMA', 'alpha', 'Beta']))
    ['alpha', 'Beta', 'GAMMA']

    Sequence membership is straightforward.

    >>> "Hello World" in [s]
    True
    >>> s in ["Hello World"]
    True

    You may test for set inclusion, but candidate and elements
    must both be folded.

    >>> FoldedCase("Hello World") in {s}
    True
    >>> s in {FoldedCase("Hello World")}
    True

    String inclusion works as long as the FoldedCase object
    is on the right.

    >>> "hello" in FoldedCase("Hello World")
    True

    But not if the FoldedCase object is on the left:

    >>> FoldedCase('hello') in 'Hello World'
    False

    In that case, use in_:

    >>> FoldedCase('hello').in_('Hello World')
    True

    >>> FoldedCase('hello') > FoldedCase('Hello')
    False
    in_Does self appear in other?splitter# from jaraco.text 3.5# cache lower since it's likely to be called frequently.b'
    A case insensitive string class; behaves just like str
    except compares equal when the only variation is case.

    >>> s = FoldedCase('hello world')

    >>> s == 'Hello World'
    True

    >>> 'Hello World' == s
    True

    >>> s != 'Hello World'
    False

    >>> s.index('O')
    4

    >>> s.split('O')
    ['hell', ' w', 'rld']

    >>> sorted(map(FoldedCase, ['GAMMA', 'alpha', 'Beta']))
    ['alpha', 'Beta', 'GAMMA']

    Sequence membership is straightforward.

    >>> "Hello World" in [s]
    True
    >>> s in ["Hello World"]
    True

    You may test for set inclusion, but candidate and elements
    must both be folded.

    >>> FoldedCase("Hello World") in {s}
    True
    >>> s in {FoldedCase("Hello World")}
    True

    String inclusion works as long as the FoldedCase object
    is on the right.

    >>> "hello" in FoldedCase("Hello World")
    True

    But not if the FoldedCase object is on the left:

    >>> FoldedCase('hello') in 'Hello World'
    False

    In that case, use in_:

    >>> FoldedCase('hello').in_('Hello World')
    True

    >>> FoldedCase('hello') > FoldedCase('Hello')
    False
    'u'
    A case insensitive string class; behaves just like str
    except compares equal when the only variation is case.

    >>> s = FoldedCase('hello world')

    >>> s == 'Hello World'
    True

    >>> 'Hello World' == s
    True

    >>> s != 'Hello World'
    False

    >>> s.index('O')
    4

    >>> s.split('O')
    ['hell', ' w', 'rld']

    >>> sorted(map(FoldedCase, ['GAMMA', 'alpha', 'Beta']))
    ['alpha', 'Beta', 'GAMMA']

    Sequence membership is straightforward.

    >>> "Hello World" in [s]
    True
    >>> s in ["Hello World"]
    True

    You may test for set inclusion, but candidate and elements
    must both be folded.

    >>> FoldedCase("Hello World") in {s}
    True
    >>> s in {FoldedCase("Hello World")}
    True

    String inclusion works as long as the FoldedCase object
    is on the right.

    >>> "hello" in FoldedCase("Hello World")
    True

    But not if the FoldedCase object is on the left:

    >>> FoldedCase('hello') in 'Hello World'
    False

    In that case, use in_:

    >>> FoldedCase('hello').in_('Hello World')
    True

    >>> FoldedCase('hello') > FoldedCase('Hello')
    False
    'b'Does self appear in other?'u'Does self appear in other?'u'importlib_metadata._text'u'_text'TextWrapper_handle_long_wordreversed_chunkscur_linecur_lenspace_leftbreak_long_wordscutextra_indentinitial_indentold_initial_indentsubsequent_indentold_subsequent_indentindent_onlyu'click._textwrap'u'_textwrap'lockedlocked_lock_thread.lockLockType_acquire_restore_is_owned_release_save_thread.RLock4294967.0TIMEOUT_MAXu'ExceptHookArgs

Type used to pass arguments to threading.excepthook.'_thread.ExceptHookArgs_ExceptHookArgsu'This module provides primitive operations to write multi-threaded programs.
The 'threading' module provides a more convenient interface.'_excepthooku'Thread-local data'_thread._local_local_set_sentinelallocateexit_threadget_native_idinterrupt_mainstack_sizestart_newstart_new_threadThread-local objects.

(Note that this module provides a Python version of the threading.local
 class.  Depending on the version of Python you're using, there may be a
 faster one available.  You should always import the `local` class from
 `threading`.)

Thread-local objects support the management of thread-local data.
If you have data that you want to be local to a thread, simply create
a thread-local object and use its attributes:

  >>> mydata = local()
  >>> mydata.number = 42
  >>> mydata.number
  42

You can also access the local-object's dictionary:

  >>> mydata.__dict__
  {'number': 42}
  >>> mydata.__dict__.setdefault('widgets', [])
  []
  >>> mydata.widgets
  []

What's important about thread-local objects is that their data are
local to a thread. If we access the data in a different thread:

  >>> log = []
  >>> def f():
  ...     items = sorted(mydata.__dict__.items())
  ...     log.append(items)
  ...     mydata.number = 11
  ...     log.append(mydata.number)

  >>> import threading
  >>> thread = threading.Thread(target=f)
  >>> thread.start()
  >>> thread.join()
  >>> log
  [[], 11]

we get different data.  Furthermore, changes made in the other thread
don't affect data seen in this thread:

  >>> mydata.number
  42

Of course, values you get from a local object, including a __dict__
attribute, are for whatever thread was current at the time the
attribute was read.  For that reason, you generally don't want to save
these values across threads, as they apply only to the thread they
came from.

You can create custom local objects by subclassing the local class:

  >>> class MyLocal(local):
  ...     number = 2
  ...     def __init__(self, /, **kw):
  ...         self.__dict__.update(kw)
  ...     def squared(self):
  ...         return self.number ** 2

This can be useful to support default values, methods and
initialization.  Note that if you define an __init__ method, it will be
called each time the local object is used in a separate thread.  This
is necessary to initialize each thread's dictionary.

Now if we create a local object:

  >>> mydata = MyLocal(color='red')

Now we have a default number:

  >>> mydata.number
  2

an initial color:

  >>> mydata.color
  'red'
  >>> del mydata.color

And a method that operates on the data:

  >>> mydata.squared()
  4

As before, we can access the data in a separate thread:

  >>> log = []
  >>> thread = threading.Thread(target=f)
  >>> thread.start()
  >>> thread.join()
  >>> log
  [[('color', 'red')], 11]

without affecting this thread's data:

  >>> mydata.number
  2
  >>> mydata.color
  Traceback (most recent call last):
  ...
  AttributeError: 'MyLocal' object has no attribute 'color'

Note that subclasses can define slots, but they are not thread
local. They are shared across threads:

  >>> class MyLocal(local):
  ...     __slots__ = 'number'

  >>> mydata = MyLocal()
  >>> mydata.number = 42
  >>> mydata.color = 'red'

So, the separate thread:

  >>> thread = threading.Thread(target=f)
  >>> thread.start()
  >>> thread.join()

affects what we see:

  >>> mydata.number
  11

>>> del mydata
local_localimplA class managing thread-local dictsdictslocalargslocallock_threading_local._localimpl.get_dictReturn the dict for the current thread. Raises KeyError if none
        defined.create_dictCreate a new dict for the current thread, and return it.localdictidtlocal_deletedwrthreadthread_deletedwrlocaldct_patch_local__implimplInitialization arguments are not supported%r object attribute '__dict__' is read-only# We need to use objects from the threading module, but the threading# module may also want to use our `local` class, if support for locals# isn't compiled in to the `thread` module.  This creates potential problems# with circular imports.  For that reason, we don't import `threading`# until the bottom of this file (a hack sufficient to worm around the# potential problems).  Note that all platforms on CPython do have support# for locals in the `thread` module, and there is no circular import problem# then, so problems introduced by fiddling the order of imports here won't# manifest.# The key used in the Thread objects' attribute dicts.# We keep it a string for speed but make it unlikely to clash with# a "real" attribute.# { id(Thread) -> (ref(Thread), thread-local dict) }# When the localimpl is deleted, remove the thread attribute.# When the thread is deleted, remove the local dict.# Note that this is suboptimal if the thread object gets# caught in a reference loop. We would like to be called# as soon as the OS-level thread ends instead.# We need to create the thread dict in anticipation of# __init__ being called, to make sure we don't call it# again ourselves.b'Thread-local objects.

(Note that this module provides a Python version of the threading.local
 class.  Depending on the version of Python you're using, there may be a
 faster one available.  You should always import the `local` class from
 `threading`.)

Thread-local objects support the management of thread-local data.
If you have data that you want to be local to a thread, simply create
a thread-local object and use its attributes:

  >>> mydata = local()
  >>> mydata.number = 42
  >>> mydata.number
  42

You can also access the local-object's dictionary:

  >>> mydata.__dict__
  {'number': 42}
  >>> mydata.__dict__.setdefault('widgets', [])
  []
  >>> mydata.widgets
  []

What's important about thread-local objects is that their data are
local to a thread. If we access the data in a different thread:

  >>> log = []
  >>> def f():
  ...     items = sorted(mydata.__dict__.items())
  ...     log.append(items)
  ...     mydata.number = 11
  ...     log.append(mydata.number)

  >>> import threading
  >>> thread = threading.Thread(target=f)
  >>> thread.start()
  >>> thread.join()
  >>> log
  [[], 11]

we get different data.  Furthermore, changes made in the other thread
don't affect data seen in this thread:

  >>> mydata.number
  42

Of course, values you get from a local object, including a __dict__
attribute, are for whatever thread was current at the time the
attribute was read.  For that reason, you generally don't want to save
these values across threads, as they apply only to the thread they
came from.

You can create custom local objects by subclassing the local class:

  >>> class MyLocal(local):
  ...     number = 2
  ...     def __init__(self, /, **kw):
  ...         self.__dict__.update(kw)
  ...     def squared(self):
  ...         return self.number ** 2

This can be useful to support default values, methods and
initialization.  Note that if you define an __init__ method, it will be
called each time the local object is used in a separate thread.  This
is necessary to initialize each thread's dictionary.

Now if we create a local object:

  >>> mydata = MyLocal(color='red')

Now we have a default number:

  >>> mydata.number
  2

an initial color:

  >>> mydata.color
  'red'
  >>> del mydata.color

And a method that operates on the data:

  >>> mydata.squared()
  4

As before, we can access the data in a separate thread:

  >>> log = []
  >>> thread = threading.Thread(target=f)
  >>> thread.start()
  >>> thread.join()
  >>> log
  [[('color', 'red')], 11]

without affecting this thread's data:

  >>> mydata.number
  2
  >>> mydata.color
  Traceback (most recent call last):
  ...
  AttributeError: 'MyLocal' object has no attribute 'color'

Note that subclasses can define slots, but they are not thread
local. They are shared across threads:

  >>> class MyLocal(local):
  ...     __slots__ = 'number'

  >>> mydata = MyLocal()
  >>> mydata.number = 42
  >>> mydata.color = 'red'

So, the separate thread:

  >>> thread = threading.Thread(target=f)
  >>> thread.start()
  >>> thread.join()

affects what we see:

  >>> mydata.number
  11

>>> del mydata
'u'Thread-local objects.

(Note that this module provides a Python version of the threading.local
 class.  Depending on the version of Python you're using, there may be a
 faster one available.  You should always import the `local` class from
 `threading`.)

Thread-local objects support the management of thread-local data.
If you have data that you want to be local to a thread, simply create
a thread-local object and use its attributes:

  >>> mydata = local()
  >>> mydata.number = 42
  >>> mydata.number
  42

You can also access the local-object's dictionary:

  >>> mydata.__dict__
  {'number': 42}
  >>> mydata.__dict__.setdefault('widgets', [])
  []
  >>> mydata.widgets
  []

What's important about thread-local objects is that their data are
local to a thread. If we access the data in a different thread:

  >>> log = []
  >>> def f():
  ...     items = sorted(mydata.__dict__.items())
  ...     log.append(items)
  ...     mydata.number = 11
  ...     log.append(mydata.number)

  >>> import threading
  >>> thread = threading.Thread(target=f)
  >>> thread.start()
  >>> thread.join()
  >>> log
  [[], 11]

we get different data.  Furthermore, changes made in the other thread
don't affect data seen in this thread:

  >>> mydata.number
  42

Of course, values you get from a local object, including a __dict__
attribute, are for whatever thread was current at the time the
attribute was read.  For that reason, you generally don't want to save
these values across threads, as they apply only to the thread they
came from.

You can create custom local objects by subclassing the local class:

  >>> class MyLocal(local):
  ...     number = 2
  ...     def __init__(self, /, **kw):
  ...         self.__dict__.update(kw)
  ...     def squared(self):
  ...         return self.number ** 2

This can be useful to support default values, methods and
initialization.  Note that if you define an __init__ method, it will be
called each time the local object is used in a separate thread.  This
is necessary to initialize each thread's dictionary.

Now if we create a local object:

  >>> mydata = MyLocal(color='red')

Now we have a default number:

  >>> mydata.number
  2

an initial color:

  >>> mydata.color
  'red'
  >>> del mydata.color

And a method that operates on the data:

  >>> mydata.squared()
  4

As before, we can access the data in a separate thread:

  >>> log = []
  >>> thread = threading.Thread(target=f)
  >>> thread.start()
  >>> thread.join()
  >>> log
  [[('color', 'red')], 11]

without affecting this thread's data:

  >>> mydata.number
  2
  >>> mydata.color
  Traceback (most recent call last):
  ...
  AttributeError: 'MyLocal' object has no attribute 'color'

Note that subclasses can define slots, but they are not thread
local. They are shared across threads:

  >>> class MyLocal(local):
  ...     __slots__ = 'number'

  >>> mydata = MyLocal()
  >>> mydata.number = 42
  >>> mydata.color = 'red'

So, the separate thread:

  >>> thread = threading.Thread(target=f)
  >>> thread.start()
  >>> thread.join()

affects what we see:

  >>> mydata.number
  11

>>> del mydata
'b'local'u'local'b'A class managing thread-local dicts'u'A class managing thread-local dicts'b'dicts'u'dicts'b'localargs'u'localargs'b'locallock'u'locallock'b'_threading_local._localimpl.'u'_threading_local._localimpl.'b'Return the dict for the current thread. Raises KeyError if none
        defined.'u'Return the dict for the current thread. Raises KeyError if none
        defined.'b'Create a new dict for the current thread, and return it.'u'Create a new dict for the current thread, and return it.'b'_local__impl'u'_local__impl'b'__dict__'u'__dict__'b'Initialization arguments are not supported'u'Initialization arguments are not supported'b'%r object attribute '__dict__' is read-only'u'%r object attribute '__dict__' is read-only'u'Python.Python39.lib._threading_local'u'Python39.lib._threading_local'u'lib._threading_local'u'_threading_local'u'Debug module to trace memory blocks allocated by Python.'_get_object_traceback_get_tracesclear_tracesget_traceback_limitget_traced_memoryget_tracemalloc_memoryreset_peak_tracemallocblinker._saferefIdentityType_symbolConstruct a new named symbol.symbolA constant symbol.

    >>> symbol('foo') is symbol('foo')
    True
    >>> symbol('foo')
    foo

    A slight refinement of the MAGICCOOKIE=object() pattern.  The primary
    advantage of symbol() is its repr().  They are also singletons.

    Repeated calls of symbol('name') will all return the same instance.

    symbolshashable_identityWeakTypesannotatable_weakrefA weakref.ref that supports custom instance attributes.receiver_idsender_idReturn an annotated weak ref.callable_referenceReturn an annotated weak ref, supporting bound instance methods.lazy_propertyA @property that is only evaluated once.deferred_deferredis_coroutine_functioniscoroutinefunctionunittest.mockAsyncMockismethodisfunctionco_flagsCO_COROUTINE_is_coroutineacic# type: ignore[no-untyped-def]# type: ignore[no-any-return]# Python < 3.8 does not correctly determine partially wrapped# coroutine functions are coroutine functions, hence the need for# this to exist. Code taken from CPython.# Note that there is something special about the AsyncMock# such that it isn't determined as a coroutine function# without an explicit check.# Not testing, no asynctest to importb'Construct a new named symbol.'u'Construct a new named symbol.'b'symbol'u'symbol'b'A constant symbol.

    >>> symbol('foo') is symbol('foo')
    True
    >>> symbol('foo')
    foo

    A slight refinement of the MAGICCOOKIE=object() pattern.  The primary
    advantage of symbol() is its repr().  They are also singletons.

    Repeated calls of symbol('name') will all return the same instance.

    'u'A constant symbol.

    >>> symbol('foo') is symbol('foo')
    True
    >>> symbol('foo')
    foo

    A slight refinement of the MAGICCOOKIE=object() pattern.  The primary
    advantage of symbol() is its repr().  They are also singletons.

    Repeated calls of symbol('name') will all return the same instance.

    'b'A weakref.ref that supports custom instance attributes.'u'A weakref.ref that supports custom instance attributes.'b'Return an annotated weak ref.'u'Return an annotated weak ref.'b'Return an annotated weak ref, supporting bound instance methods.'u'Return an annotated weak ref, supporting bound instance methods.'b'im_self'u'im_self'b'A @property that is only evaluated once.'u'A @property that is only evaluated once.'b'_is_coroutine'u'_is_coroutine'u'blinker._utilities'u'_utilities'u'_warnings provides basic warning filtering support.
It is a helper module to speed up interpreter start-up.'_defaultaction_onceregistrywarn_explicit__ifloordiv____ilshift____imatmul____imod____ipow____irshift____itruediv____matmul____rmatmul__weakcallableproxyCallableProxyType__bytes__weakproxyProxyType__callback__ReferenceTypeu'Weak-reference support module.'_remove_dead_weakrefgetweakrefcountgetweakrefs_IterationGuardweakcontainer_iterating_commit_removals_removeselfref_pending_removalsitemrefpop from empty WeakSetnewset# Access WeakSet through the weakref module.# This code is separated-out because it is needed# by abc.py to load everything else at startup.# This context manager registers itself in the current iterators of the# weak container, such as to delay all removals until the context manager# exits.# This technique should be relatively thread-safe (since sets are).# Don't create cycles# A list of keys to be removed# Caveat: the iterator will keep a strong reference to# `item` until it is resumed or closed.b'WeakSet'u'WeakSet'b'pop from empty WeakSet'u'pop from empty WeakSet'u'Python.Python39.lib._weakrefset'u'Python39.lib._weakrefset'u'lib._weakrefset'u'_weakrefset'ABOVE_NORMAL_PRIORITY_CLASSBELOW_NORMAL_PRIORITY_CLASSCREATE_BREAKAWAY_FROM_JOB67108864CREATE_DEFAULT_ERROR_MODECREATE_NEW_CONSOLECREATE_NEW_PROCESS_GROUP134217728CREATE_NO_WINDOWCloseHandleConnectNamedPipeCreateFileCreateFileMappingCreateJunctionCreateNamedPipeCreatePipeCreateProcessDETACHED_PROCESSDUPLICATE_CLOSE_SOURCEDUPLICATE_SAME_ACCESSDuplicateHandle183ERROR_ALREADY_EXISTS109ERROR_BROKEN_PIPE997ERROR_IO_PENDING234ERROR_MORE_DATAERROR_NETNAME_DELETED232ERROR_NO_DATA1450ERROR_NO_SYSTEM_RESOURCES995ERROR_OPERATION_ABORTEDERROR_PIPE_BUSY535ERROR_PIPE_CONNECTED121ERROR_SEM_TIMEOUTExitProcessFILE_FLAG_FIRST_PIPE_INSTANCE1073741824FILE_FLAG_OVERLAPPED1179785FILE_GENERIC_READ1179926FILE_GENERIC_WRITE983071FILE_MAP_ALL_ACCESSFILE_MAP_COPYFILE_MAP_EXECUTEFILE_MAP_READFILE_MAP_WRITEFILE_TYPE_CHARFILE_TYPE_DISKFILE_TYPE_PIPEFILE_TYPE_REMOTEFILE_TYPE_UNKNOWN2147483648GENERIC_READGENERIC_WRITEGetExitCodeProcessGetFileTypeGetStdHandleGetVersionHIGH_PRIORITY_CLASSIDLE_PRIORITY_CLASSINFINITE18446744073709551615INVALID_HANDLE_VALUEMEM_COMMITMEM_FREEMEM_IMAGEMEM_MAPPEDMEM_PRIVATEMEM_RESERVEMapViewOfFileNMPWAIT_WAIT_FOREVERNORMAL_PRIORITY_CLASSNULLOPEN_EXISTINGOpenFileMappingOpenProcessGetOverlappedResultu'OVERLAPPED structure wrapper'_winapi.OverlappedOverlappedPAGE_EXECUTEPAGE_EXECUTE_READPAGE_EXECUTE_READWRITEPAGE_EXECUTE_WRITECOPYPAGE_GUARDPAGE_NOACCESSPAGE_NOCACHEPAGE_READONLYPAGE_READWRITEPAGE_WRITECOMBINEPAGE_WRITECOPYPIPE_ACCESS_DUPLEXPIPE_ACCESS_INBOUNDPIPE_READMODE_MESSAGEPIPE_TYPE_MESSAGE255PIPE_UNLIMITED_INSTANCESPIPE_WAIT2097151PROCESS_ALL_ACCESSPROCESS_DUP_HANDLEPeekNamedPipeREALTIME_PRIORITY_CLASSReadFileSEC_COMMITSEC_IMAGESEC_LARGE_PAGES268435456SEC_NOCACHESEC_RESERVESEC_WRITECOMBINESTARTF_USESHOWWINDOWSTARTF_USESTDHANDLES4294967284STD_ERROR_HANDLE4294967286STD_INPUT_HANDLE4294967285STD_OUTPUT_HANDLE259STILL_ACTIVESW_HIDESYNCHRONIZESetNamedPipeHandleStateTerminateProcessVirtualQuerySizeWAIT_ABANDONED_0WAIT_OBJECT_0258WAIT_TIMEOUTWaitForMultipleObjectsWaitForSingleObjectWaitNamedPipeWriteFileHANDLELPCWSTRLPWSTRc_ssize_pReadConsoleWWriteConsoleWGetConsoleModeGetCommandLineWCommandLineToArgvWshell32LocalFreeSTDIN_HANDLESTDOUT_HANDLESTDERR_HANDLEPyBUF_SIMPLEPyBUF_WRITABLEERROR_SUCCESSERROR_NOT_ENOUGH_MEMORYSTDIN_FILENOSTDOUT_FILENOSTDERR_FILENOEOF32767MAX_BYTES_WRITTENPy_bufferinternalPyObject_GetBufferPyBuffer_Releaseget_bufferbuffer_typefrom_address_WindowsConsoleRawIOBase_WindowsConsoleReaderbytes_to_be_readcannot read odd number of bytes from UTF-16-LE encoded consolecode_units_to_be_readcode_units_readWindows error: _WindowsConsoleWriter_get_error_messageWindows error bytes_to_be_writtencode_units_to_be_writtencode_units_writtenbytes_writtenConsoleStreambyte_stream_text_stream<ConsoleStream name= encoding=_get_text_stdinbuffer_stream_get_text_stdout_get_text_stderr_stream_factories_is_consoleget_osfhandle# This module is based on the excellent work by Adam Barto≈° who# provided a lot of what went into the implementation here in# the discussion to issue1602 in the Python bug tracker.# There are some general differences in regards to how this works# compared to the original patches as we do not need to patch# the entire interpreter but just work in our little world of# echo and prompt.# noqa: E402# On PyPy we cannot get buffers so our ability to operate here is# severely limited.# wait for KeyboardInterruptb'GetCommandLineW'u'GetCommandLineW'b'CommandLineToArgvW'u'CommandLineToArgvW'b'LocalFree'u'LocalFree'b'buf'u'buf'b'len'u'len'b'itemsize'u'itemsize'b'readonly'u'readonly'b'ndim'u'ndim'b'shape'u'shape'b'strides'u'strides'b'suboffsets'u'suboffsets'b'internal'u'internal'b'cannot read odd number of bytes from UTF-16-LE encoded console'u'cannot read odd number of bytes from UTF-16-LE encoded console'b'Windows error: 'u'Windows error: 'b'ERROR_SUCCESS'u'ERROR_SUCCESS'b'ERROR_NOT_ENOUGH_MEMORY'u'ERROR_NOT_ENOUGH_MEMORY'b'Windows error 'u'Windows error 'b'<ConsoleStream name='u'<ConsoleStream name='b' encoding='u' encoding='b'fileno'u'fileno'u'click._winconsole'u'_winconsole'Abstract base classes related to import.machineryruntime_checkableabstract_clsfrozen_clsFinderLegacy abstract base class for import finders.

    It may be subclassed for compatibility with legacy third party
    reimplementations of the import system.  Otherwise, finder
    implementations should derive from the more specific MetaPathFinder
    or PathEntryFinder ABCs.

    Deprecated since Python 3.3
    An abstract method that should find a module.
        The fullname is a str and the optional path is a str or None.
        Returns a Loader object or None.
        Abstract base class for import finders on sys.meta_path.Return a loader for the module.

        If no module is found, return None.  The fullname is a str and
        the path is a list of strings or None.

        This method is deprecated since Python 3.4 in favor of
        finder.find_spec(). If find_spec() exists then backwards-compatible
        functionality is provided for this method.

        MetaPathFinder.find_module() is deprecated since Python 3.4 in favor of MetaPathFinder.find_spec() (available since 3.4)"MetaPathFinder.find_module() is deprecated since Python ""3.4 in favor of MetaPathFinder.find_spec() ""(available since 3.4)"An optional method for clearing the finder's cache, if any.
        This method is used by importlib.invalidate_caches().
        PathEntryFinderAbstract base class for path entry finders used by PathFinder.Return (loader, namespace portion) for the path entry.

        The fullname is a str.  The namespace portion is a sequence of
        path entries contributing to part of a namespace package. The
        sequence may be empty.  If loader is not None, the portion will
        be ignored.

        The portion will be discarded if another path entry finder
        locates the module as a normal module or package.

        This method is deprecated since Python 3.4 in favor of
        finder.find_spec(). If find_spec() is provided than backwards-compatible
        functionality is provided.
        PathEntryFinder.find_loader() is deprecated since Python 3.4 in favor of PathEntryFinder.find_spec() (available since 3.4)"PathEntryFinder.find_loader() is deprecated since Python ""3.4 in favor of PathEntryFinder.find_spec() "An optional method for clearing the finder's cache, if any.
        This method is used by PathFinder.invalidate_caches().
        LoaderAbstract base class for import loaders.Return a module to initialize and into which to load.

        This method should raise ImportError if anything prevents it
        from creating a new module.  It may return None to indicate
        that the spec should create the new module.
        Return the loaded module.

        The module must be added to sys.modules and have import-related
        attributes set properly.  The fullname is a str.

        ImportError is raised on failure.

        This method is deprecated in favor of loader.exec_module(). If
        exec_module() exists then it is used to provide a backwards-compatible
        functionality for this method.

        Return a module's repr.

        Used by the module type when the method does not raise
        NotImplementedError.

        This method is deprecated.

        ResourceLoaderAbstract base class for loaders which can return data from their
    back-end storage.

    This ABC represents one of the optional protocols specified by PEP 302.

    Abstract method which when implemented should return the bytes for
        the specified path.  The path must be a str.InspectLoaderAbstract base class for loaders which support inspection about the
    modules they can load.

    This ABC represents one of the optional protocols specified by PEP 302.

    Optional method which when implemented should return whether the
        module is a package.  The fullname is a str.  Returns a bool.

        Raises ImportError if the module cannot be found.
        Method which returns the code object for the module.

        The fullname is a str.  Returns a types.CodeType if possible, else
        returns None if a code object does not make sense
        (e.g. built-in module). Raises ImportError if the module cannot be
        found.
        Abstract method which should return the source code for the
        module.  The fullname is a str.  Returns a str.

        Raises ImportError if the module cannot be found.
        Compile 'data' into a code object.

        The 'data' argument can be anything that compile() can handle. The'path'
        argument should be where the data was retrieved (when applicable).ExecutionLoaderAbstract base class for loaders that wish to support the execution of
    modules as scripts.

    This ABC represents one of the optional protocols specified in PEP 302.

    Abstract method which should return the value that __file__ is to be
        set to.

        Raises ImportError if the module cannot be found.
        Method to return the code object for fullname.

        Should return None if not applicable (e.g. built-in module).
        Raise ImportError if the module cannot be found.
        Abstract base class partially implementing the ResourceLoader and
    ExecutionLoader ABCs.Abstract base class for loading source code (and optionally any
    corresponding bytecode).

    To support loading from source code, the abstractmethods inherited from
    ResourceLoader and ExecutionLoader need to be implemented. To also support
    loading from bytecode, the optional methods specified directly by this ABC
    is required.

    Inherited abstractmethods not implemented in this ABC:

        * ResourceLoader.get_data
        * ExecutionLoader.get_filename

    Return the (int) modification time for the path (str).Return a metadata dict for the source pointed to by the path (str).
        Possible keys:
        - 'mtime' (mandatory) is the numeric timestamp of last source
          code modification;
        - 'size' (optional) is the size in bytes of the source code.
        Write the bytes to the path (if possible).

        Accepts a str path and data as bytes.

        Any needed intermediary directories are to be created. If for some
        reason the file cannot be written because of permissions, fail
        silently.
        ResourceReaderAbstract base class to provide resource-reading support.

    Loaders that support resource reading are expected to implement
    the ``get_resource_reader(fullname)`` method and have it either return None
    or an object compatible with this ABC.
    Return an opened, file-like object for binary reading.

        The 'resource' argument is expected to represent only a file name
        and thus not contain any subdirectory components.

        If the resource cannot be found, FileNotFoundError is raised.
        Return the file system path to the specified resource.

        The 'resource' argument is expected to represent only a file name
        and thus not contain any subdirectory components.

        If the resource does not exist on the file system, raise
        FileNotFoundError.
        Return True if the named 'name' is consider a resource.Return an iterable of strings over the contents of the package.Traversable
    An object with a subset of pathlib.Path methods suitable for
    traversing directories and opening files.
    
        Yield Traversable objects in self
        
        Read contents of self as bytes
        
        Return True if self is a dir
        
        Return True if self is a file
        
        Return Traversable child in self
        
        mode may be 'r' or 'rb' to open as text or binary. Return a handle
        suitable for reading (same as pathlib.Path.open).

        When opening as text, accepts encoding parameters such as those
        accepted by io.TextIOWrapper.
        abstractproperty
        The base name of this object without any parent references.
        TraversableResourcesReturn a Traversable object for the loaded package.# We don't define find_spec() here since that would break# hasattr checks we do to support backward compatibility.# By default, defer to default semantics for the new module.# We don't define exec_module() here since that would break# The exception will cause ModuleType.__repr__ to ignore this method.b'Abstract base classes related to import.'u'Abstract base classes related to import.'b'_frozen_importlib'b'Legacy abstract base class for import finders.

    It may be subclassed for compatibility with legacy third party
    reimplementations of the import system.  Otherwise, finder
    implementations should derive from the more specific MetaPathFinder
    or PathEntryFinder ABCs.

    Deprecated since Python 3.3
    'u'Legacy abstract base class for import finders.

    It may be subclassed for compatibility with legacy third party
    reimplementations of the import system.  Otherwise, finder
    implementations should derive from the more specific MetaPathFinder
    or PathEntryFinder ABCs.

    Deprecated since Python 3.3
    'b'An abstract method that should find a module.
        The fullname is a str and the optional path is a str or None.
        Returns a Loader object or None.
        'u'An abstract method that should find a module.
        The fullname is a str and the optional path is a str or None.
        Returns a Loader object or None.
        'b'Abstract base class for import finders on sys.meta_path.'u'Abstract base class for import finders on sys.meta_path.'b'Return a loader for the module.

        If no module is found, return None.  The fullname is a str and
        the path is a list of strings or None.

        This method is deprecated since Python 3.4 in favor of
        finder.find_spec(). If find_spec() exists then backwards-compatible
        functionality is provided for this method.

        'u'Return a loader for the module.

        If no module is found, return None.  The fullname is a str and
        the path is a list of strings or None.

        This method is deprecated since Python 3.4 in favor of
        finder.find_spec(). If find_spec() exists then backwards-compatible
        functionality is provided for this method.

        'b'MetaPathFinder.find_module() is deprecated since Python 3.4 in favor of MetaPathFinder.find_spec() (available since 3.4)'u'MetaPathFinder.find_module() is deprecated since Python 3.4 in favor of MetaPathFinder.find_spec() (available since 3.4)'b'An optional method for clearing the finder's cache, if any.
        This method is used by importlib.invalidate_caches().
        'u'An optional method for clearing the finder's cache, if any.
        This method is used by importlib.invalidate_caches().
        'b'Abstract base class for path entry finders used by PathFinder.'u'Abstract base class for path entry finders used by PathFinder.'b'Return (loader, namespace portion) for the path entry.

        The fullname is a str.  The namespace portion is a sequence of
        path entries contributing to part of a namespace package. The
        sequence may be empty.  If loader is not None, the portion will
        be ignored.

        The portion will be discarded if another path entry finder
        locates the module as a normal module or package.

        This method is deprecated since Python 3.4 in favor of
        finder.find_spec(). If find_spec() is provided than backwards-compatible
        functionality is provided.
        'u'Return (loader, namespace portion) for the path entry.

        The fullname is a str.  The namespace portion is a sequence of
        path entries contributing to part of a namespace package. The
        sequence may be empty.  If loader is not None, the portion will
        be ignored.

        The portion will be discarded if another path entry finder
        locates the module as a normal module or package.

        This method is deprecated since Python 3.4 in favor of
        finder.find_spec(). If find_spec() is provided than backwards-compatible
        functionality is provided.
        'b'PathEntryFinder.find_loader() is deprecated since Python 3.4 in favor of PathEntryFinder.find_spec() (available since 3.4)'u'PathEntryFinder.find_loader() is deprecated since Python 3.4 in favor of PathEntryFinder.find_spec() (available since 3.4)'b'An optional method for clearing the finder's cache, if any.
        This method is used by PathFinder.invalidate_caches().
        'u'An optional method for clearing the finder's cache, if any.
        This method is used by PathFinder.invalidate_caches().
        'b'Abstract base class for import loaders.'u'Abstract base class for import loaders.'b'Return a module to initialize and into which to load.

        This method should raise ImportError if anything prevents it
        from creating a new module.  It may return None to indicate
        that the spec should create the new module.
        'u'Return a module to initialize and into which to load.

        This method should raise ImportError if anything prevents it
        from creating a new module.  It may return None to indicate
        that the spec should create the new module.
        'b'Return the loaded module.

        The module must be added to sys.modules and have import-related
        attributes set properly.  The fullname is a str.

        ImportError is raised on failure.

        This method is deprecated in favor of loader.exec_module(). If
        exec_module() exists then it is used to provide a backwards-compatible
        functionality for this method.

        'u'Return the loaded module.

        The module must be added to sys.modules and have import-related
        attributes set properly.  The fullname is a str.

        ImportError is raised on failure.

        This method is deprecated in favor of loader.exec_module(). If
        exec_module() exists then it is used to provide a backwards-compatible
        functionality for this method.

        'b'Return a module's repr.

        Used by the module type when the method does not raise
        NotImplementedError.

        This method is deprecated.

        'u'Return a module's repr.

        Used by the module type when the method does not raise
        NotImplementedError.

        This method is deprecated.

        'b'Abstract base class for loaders which can return data from their
    back-end storage.

    This ABC represents one of the optional protocols specified by PEP 302.

    'u'Abstract base class for loaders which can return data from their
    back-end storage.

    This ABC represents one of the optional protocols specified by PEP 302.

    'b'Abstract method which when implemented should return the bytes for
        the specified path.  The path must be a str.'u'Abstract method which when implemented should return the bytes for
        the specified path.  The path must be a str.'b'Abstract base class for loaders which support inspection about the
    modules they can load.

    This ABC represents one of the optional protocols specified by PEP 302.

    'u'Abstract base class for loaders which support inspection about the
    modules they can load.

    This ABC represents one of the optional protocols specified by PEP 302.

    'b'Optional method which when implemented should return whether the
        module is a package.  The fullname is a str.  Returns a bool.

        Raises ImportError if the module cannot be found.
        'u'Optional method which when implemented should return whether the
        module is a package.  The fullname is a str.  Returns a bool.

        Raises ImportError if the module cannot be found.
        'b'Method which returns the code object for the module.

        The fullname is a str.  Returns a types.CodeType if possible, else
        returns None if a code object does not make sense
        (e.g. built-in module). Raises ImportError if the module cannot be
        found.
        'u'Method which returns the code object for the module.

        The fullname is a str.  Returns a types.CodeType if possible, else
        returns None if a code object does not make sense
        (e.g. built-in module). Raises ImportError if the module cannot be
        found.
        'b'Abstract method which should return the source code for the
        module.  The fullname is a str.  Returns a str.

        Raises ImportError if the module cannot be found.
        'u'Abstract method which should return the source code for the
        module.  The fullname is a str.  Returns a str.

        Raises ImportError if the module cannot be found.
        'b'Compile 'data' into a code object.

        The 'data' argument can be anything that compile() can handle. The'path'
        argument should be where the data was retrieved (when applicable).'u'Compile 'data' into a code object.

        The 'data' argument can be anything that compile() can handle. The'path'
        argument should be where the data was retrieved (when applicable).'b'Abstract base class for loaders that wish to support the execution of
    modules as scripts.

    This ABC represents one of the optional protocols specified in PEP 302.

    'u'Abstract base class for loaders that wish to support the execution of
    modules as scripts.

    This ABC represents one of the optional protocols specified in PEP 302.

    'b'Abstract method which should return the value that __file__ is to be
        set to.

        Raises ImportError if the module cannot be found.
        'u'Abstract method which should return the value that __file__ is to be
        set to.

        Raises ImportError if the module cannot be found.
        'b'Method to return the code object for fullname.

        Should return None if not applicable (e.g. built-in module).
        Raise ImportError if the module cannot be found.
        'u'Method to return the code object for fullname.

        Should return None if not applicable (e.g. built-in module).
        Raise ImportError if the module cannot be found.
        'b'Abstract base class partially implementing the ResourceLoader and
    ExecutionLoader ABCs.'u'Abstract base class partially implementing the ResourceLoader and
    ExecutionLoader ABCs.'b'Abstract base class for loading source code (and optionally any
    corresponding bytecode).

    To support loading from source code, the abstractmethods inherited from
    ResourceLoader and ExecutionLoader need to be implemented. To also support
    loading from bytecode, the optional methods specified directly by this ABC
    is required.

    Inherited abstractmethods not implemented in this ABC:

        * ResourceLoader.get_data
        * ExecutionLoader.get_filename

    'u'Abstract base class for loading source code (and optionally any
    corresponding bytecode).

    To support loading from source code, the abstractmethods inherited from
    ResourceLoader and ExecutionLoader need to be implemented. To also support
    loading from bytecode, the optional methods specified directly by this ABC
    is required.

    Inherited abstractmethods not implemented in this ABC:

        * ResourceLoader.get_data
        * ExecutionLoader.get_filename

    'b'Return the (int) modification time for the path (str).'u'Return the (int) modification time for the path (str).'b'Return a metadata dict for the source pointed to by the path (str).
        Possible keys:
        - 'mtime' (mandatory) is the numeric timestamp of last source
          code modification;
        - 'size' (optional) is the size in bytes of the source code.
        'u'Return a metadata dict for the source pointed to by the path (str).
        Possible keys:
        - 'mtime' (mandatory) is the numeric timestamp of last source
          code modification;
        - 'size' (optional) is the size in bytes of the source code.
        'b'Write the bytes to the path (if possible).

        Accepts a str path and data as bytes.

        Any needed intermediary directories are to be created. If for some
        reason the file cannot be written because of permissions, fail
        silently.
        'u'Write the bytes to the path (if possible).

        Accepts a str path and data as bytes.

        Any needed intermediary directories are to be created. If for some
        reason the file cannot be written because of permissions, fail
        silently.
        'b'Abstract base class to provide resource-reading support.

    Loaders that support resource reading are expected to implement
    the ``get_resource_reader(fullname)`` method and have it either return None
    or an object compatible with this ABC.
    'u'Abstract base class to provide resource-reading support.

    Loaders that support resource reading are expected to implement
    the ``get_resource_reader(fullname)`` method and have it either return None
    or an object compatible with this ABC.
    'b'Return an opened, file-like object for binary reading.

        The 'resource' argument is expected to represent only a file name
        and thus not contain any subdirectory components.

        If the resource cannot be found, FileNotFoundError is raised.
        'u'Return an opened, file-like object for binary reading.

        The 'resource' argument is expected to represent only a file name
        and thus not contain any subdirectory components.

        If the resource cannot be found, FileNotFoundError is raised.
        'b'Return the file system path to the specified resource.

        The 'resource' argument is expected to represent only a file name
        and thus not contain any subdirectory components.

        If the resource does not exist on the file system, raise
        FileNotFoundError.
        'u'Return the file system path to the specified resource.

        The 'resource' argument is expected to represent only a file name
        and thus not contain any subdirectory components.

        If the resource does not exist on the file system, raise
        FileNotFoundError.
        'b'Return True if the named 'name' is consider a resource.'u'Return True if the named 'name' is consider a resource.'b'Return an iterable of strings over the contents of the package.'u'Return an iterable of strings over the contents of the package.'b'
    An object with a subset of pathlib.Path methods suitable for
    traversing directories and opening files.
    'u'
    An object with a subset of pathlib.Path methods suitable for
    traversing directories and opening files.
    'b'
        Yield Traversable objects in self
        'u'
        Yield Traversable objects in self
        'b'
        Read contents of self as bytes
        'u'
        Read contents of self as bytes
        'b'
        Return True if self is a dir
        'u'
        Return True if self is a dir
        'b'
        Return True if self is a file
        'u'
        Return True if self is a file
        'b'
        Return Traversable child in self
        'u'
        Return Traversable child in self
        'b'
        mode may be 'r' or 'rb' to open as text or binary. Return a handle
        suitable for reading (same as pathlib.Path.open).

        When opening as text, accepts encoding parameters such as those
        accepted by io.TextIOWrapper.
        'u'
        mode may be 'r' or 'rb' to open as text or binary. Return a handle
        suitable for reading (same as pathlib.Path.open).

        When opening as text, accepts encoding parameters such as those
        accepted by io.TextIOWrapper.
        'b'
        The base name of this object without any parent references.
        'u'
        The base name of this object without any parent references.
        'b'Return a Traversable object for the loaded package.'u'Return a Traversable object for the loaded package.'u'Python39.lib.importlib.abc'u'lib.importlib.abc'u'importlib.abc'u'abc'u'Python39.lib.collections.abc'u'lib.collections.abc'Abstract Base Classes (ABCs) according to PEP 3119.funcobjA decorator indicating abstract methods.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract methods are overridden.
    The abstract methods can be called using any of the normal
    'super' call mechanisms.  abstractmethod() may be used to declare
    abstract methods for properties and descriptors.

    Usage:

        class C(metaclass=ABCMeta):
            @abstractmethod
            def my_abstract_method(self, ...):
                ...
    abstractclassmethodA decorator indicating abstract classmethods.

    Deprecated, use 'classmethod' with 'abstractmethod' instead:

        class C(ABC):
            @classmethod
            @abstractmethod
            def my_abstract_classmethod(cls, ...):
                ...

    abstractstaticmethodA decorator indicating abstract staticmethods.

    Deprecated, use 'staticmethod' with 'abstractmethod' instead:

        class C(ABC):
            @staticmethod
            @abstractmethod
            def my_abstract_staticmethod(...):
                ...

    A decorator indicating abstract properties.

    Deprecated, use 'property' with 'abstractmethod' instead:

        class C(ABC):
            @property
            @abstractmethod
            def my_abstract_property(self):
                ...

    Metaclass for defining Abstract Base Classes (ABCs).

        Use this metaclass to create an ABC.  An ABC can be subclassed
        directly, and then acts as a mix-in class.  You can also register
        unrelated concrete classes (even built-in classes) and unrelated
        ABCs as 'virtual subclasses' -- these and their descendants will
        be considered subclasses of the registering ABC by the built-in
        issubclass() function, but the registering ABC won't show up in
        their MRO (Method Resolution Order) nor will method
        implementations defined by the registering ABC be callable (not
        even via super()).
        Register a virtual subclass of an ABC.

            Returns the subclass, to allow usage as a class decorator.
            _abc_registry: _abc_cache: _abc_negative_cache: _abc_negative_cache_version: _py_abcABCHelper class that provides a standard way to create an ABC using
    inheritance.
    b'Abstract Base Classes (ABCs) according to PEP 3119.'u'Abstract Base Classes (ABCs) according to PEP 3119.'b'A decorator indicating abstract methods.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract methods are overridden.
    The abstract methods can be called using any of the normal
    'super' call mechanisms.  abstractmethod() may be used to declare
    abstract methods for properties and descriptors.

    Usage:

        class C(metaclass=ABCMeta):
            @abstractmethod
            def my_abstract_method(self, ...):
                ...
    'u'A decorator indicating abstract methods.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract methods are overridden.
    The abstract methods can be called using any of the normal
    'super' call mechanisms.  abstractmethod() may be used to declare
    abstract methods for properties and descriptors.

    Usage:

        class C(metaclass=ABCMeta):
            @abstractmethod
            def my_abstract_method(self, ...):
                ...
    'b'A decorator indicating abstract classmethods.

    Deprecated, use 'classmethod' with 'abstractmethod' instead:

        class C(ABC):
            @classmethod
            @abstractmethod
            def my_abstract_classmethod(cls, ...):
                ...

    'u'A decorator indicating abstract classmethods.

    Deprecated, use 'classmethod' with 'abstractmethod' instead:

        class C(ABC):
            @classmethod
            @abstractmethod
            def my_abstract_classmethod(cls, ...):
                ...

    'b'A decorator indicating abstract staticmethods.

    Deprecated, use 'staticmethod' with 'abstractmethod' instead:

        class C(ABC):
            @staticmethod
            @abstractmethod
            def my_abstract_staticmethod(...):
                ...

    'u'A decorator indicating abstract staticmethods.

    Deprecated, use 'staticmethod' with 'abstractmethod' instead:

        class C(ABC):
            @staticmethod
            @abstractmethod
            def my_abstract_staticmethod(...):
                ...

    'b'A decorator indicating abstract properties.

    Deprecated, use 'property' with 'abstractmethod' instead:

        class C(ABC):
            @property
            @abstractmethod
            def my_abstract_property(self):
                ...

    'u'A decorator indicating abstract properties.

    Deprecated, use 'property' with 'abstractmethod' instead:

        class C(ABC):
            @property
            @abstractmethod
            def my_abstract_property(self):
                ...

    'b'Metaclass for defining Abstract Base Classes (ABCs).

        Use this metaclass to create an ABC.  An ABC can be subclassed
        directly, and then acts as a mix-in class.  You can also register
        unrelated concrete classes (even built-in classes) and unrelated
        ABCs as 'virtual subclasses' -- these and their descendants will
        be considered subclasses of the registering ABC by the built-in
        issubclass() function, but the registering ABC won't show up in
        their MRO (Method Resolution Order) nor will method
        implementations defined by the registering ABC be callable (not
        even via super()).
        'u'Metaclass for defining Abstract Base Classes (ABCs).

        Use this metaclass to create an ABC.  An ABC can be subclassed
        directly, and then acts as a mix-in class.  You can also register
        unrelated concrete classes (even built-in classes) and unrelated
        ABCs as 'virtual subclasses' -- these and their descendants will
        be considered subclasses of the registering ABC by the built-in
        issubclass() function, but the registering ABC won't show up in
        their MRO (Method Resolution Order) nor will method
        implementations defined by the registering ABC be callable (not
        even via super()).
        'b'Register a virtual subclass of an ABC.

            Returns the subclass, to allow usage as a class decorator.
            'u'Register a virtual subclass of an ABC.

            Returns the subclass, to allow usage as a class decorator.
            'b'_abc_registry: 'u'_abc_registry: 'b'_abc_cache: 'u'_abc_cache: 'b'_abc_negative_cache: 'u'_abc_negative_cache: 'b'_abc_negative_cache_version: 'u'_abc_negative_cache_version: 'b'abc'b'Helper class that provides a standard way to create an ABC using
    inheritance.
    'u'Helper class that provides a standard way to create an ABC using
    inheritance.
    'u'Python.Python39.lib.abc'u'Python39.lib.abc'u'lib.abc'An :class:`Accept` object is just a list subclass for lists of
    ``(value, quality)`` tuples.  It is automatically sorted by specificity
    and quality.

    All :class:`Accept` objects work similar to a list but provide extra
    functionality for working with the data.  Containment checks are
    normalized to the rules of that header:

    >>> a = CharsetAccept([('ISO-8859-1', 1), ('utf-8', 0.7)])
    >>> a.best
    'ISO-8859-1'
    >>> 'iso-8859-1' in a
    True
    >>> 'UTF8' in a
    True
    >>> 'utf7' in a
    False

    To get the quality for an item you can use normal item lookup:

    >>> print a['utf-8']
    0.7
    >>> a['utf7']
    0

    .. versionchanged:: 0.5
       :class:`Accept` objects are forced immutable now.

    .. versionchanged:: 1.0.0
       :class:`Accept` internal values are no longer ordered
       alphabetically for equal quality tags. Instead the initial
       order is preserved.

    provided_specificityReturns a tuple describing the value's specificity._value_matchesCheck if a value matches a given accept item.Besides index lookup (getting item n) you can also pass it a string
        to get the quality for the item.  If the item is not in the list, the
        returned quality is ``0``.
        qualityReturns the quality of the key.

        .. versionadded:: 0.6
           In previous versions you had to use the item-lookup syntax
           (eg: ``obj[key]`` instead of ``obj.quality(key)``)
        _qualitypairs_str([])Get the position of an entry or raise :exc:`ValueError`.

        :param key: The key to be looked up.

        .. versionchanged:: 0.5
           This used to raise :exc:`IndexError`, which was inconsistent
           with the list API.
        Get the position of an entry or return -1.

        :param key: The key to be looked up.
        Iterate over all values.to_headerConvert the header set into an HTTP header string.;q=_best_single_matchclient_itembest_matchReturns the best match from a list of possible matches based
        on the specificity and quality of the client. If two items have the
        same quality and specificity, the one is returned that comes first.

        :param matches: a list of matches to check for
        :param default: the value that is returned if none match
        best_qualitybest_specificityserver_itemspecificitybestThe best match as value./|(?:\s*;\s*)_mime_split_re_normalize_mimeLike :class:`Accept` but with special methods and behavior for
    mimetypes.
    invalid mimetype normalized_valuevalue_typevalue_subtypevalue_paramsnormalized_itemitem_subtypeitem_paramsaccept_htmlTrue if this object accepts HTML.application/xhtml+xmlaccept_xhtmlTrue if this object accepts XHTML.application/xmlaccept_jsonTrue if this object accepts JSON.[_-]_locale_delim_re_normalize_langProcess a language tag for matching.Like :class:`Accept` but with normalization for language tags.Given a list of supported values, finds the best match from
        the list of accepted values.

        Language tags are normalized for the purpose of matching, but
        are returned unchanged.

        If no exact match is found, this will fall back to matching
        the first subtag (primary language only), first with the
        accepted values then with the match values. This partial is not
        applied to any other language subtags.

        The default is returned if no exact or fallback match is found.

        :param matches: A list of supported languages to find a match.
        :param default: The value that is returned if none match.
        fallbackfallback_matchesLike :class:`Accept` but with normalization for charsets.# self is sorted by specificity descending, we can exit# better quality or same quality but more specific => better match# item comes from the client, can't match if it's invalid.# value comes from the application, tell the developer when it# doesn't look valid.# Split the match value into type, subtype, and a sorted list of parameters.# "*/*" is the only valid value that can start with "*".# Split the accept item into type, subtype, and parameters.# "*/not-*" from the client is invalid, can't match.# Look for an exact match first. If a client accepts "en-US",# "en-US" is a valid match at this point.# Fall back to accepting primary tags. If a client accepts# "en-US", "en" is a valid match at this point. Need to use# re.split to account for 2 or 3 letter codes.# Fall back to matching primary tags. If the client accepts# "en", "en-US" is a valid match at this point.# Return a value from the original match list. Find the first# original value that starts with the matched primary tag.b'An :class:`Accept` object is just a list subclass for lists of
    ``(value, quality)`` tuples.  It is automatically sorted by specificity
    and quality.

    All :class:`Accept` objects work similar to a list but provide extra
    functionality for working with the data.  Containment checks are
    normalized to the rules of that header:

    >>> a = CharsetAccept([('ISO-8859-1', 1), ('utf-8', 0.7)])
    >>> a.best
    'ISO-8859-1'
    >>> 'iso-8859-1' in a
    True
    >>> 'UTF8' in a
    True
    >>> 'utf7' in a
    False

    To get the quality for an item you can use normal item lookup:

    >>> print a['utf-8']
    0.7
    >>> a['utf7']
    0

    .. versionchanged:: 0.5
       :class:`Accept` objects are forced immutable now.

    .. versionchanged:: 1.0.0
       :class:`Accept` internal values are no longer ordered
       alphabetically for equal quality tags. Instead the initial
       order is preserved.

    'u'An :class:`Accept` object is just a list subclass for lists of
    ``(value, quality)`` tuples.  It is automatically sorted by specificity
    and quality.

    All :class:`Accept` objects work similar to a list but provide extra
    functionality for working with the data.  Containment checks are
    normalized to the rules of that header:

    >>> a = CharsetAccept([('ISO-8859-1', 1), ('utf-8', 0.7)])
    >>> a.best
    'ISO-8859-1'
    >>> 'iso-8859-1' in a
    True
    >>> 'UTF8' in a
    True
    >>> 'utf7' in a
    False

    To get the quality for an item you can use normal item lookup:

    >>> print a['utf-8']
    0.7
    >>> a['utf7']
    0

    .. versionchanged:: 0.5
       :class:`Accept` objects are forced immutable now.

    .. versionchanged:: 1.0.0
       :class:`Accept` internal values are no longer ordered
       alphabetically for equal quality tags. Instead the initial
       order is preserved.

    'b'Returns a tuple describing the value's specificity.'u'Returns a tuple describing the value's specificity.'b'Check if a value matches a given accept item.'u'Check if a value matches a given accept item.'b'Besides index lookup (getting item n) you can also pass it a string
        to get the quality for the item.  If the item is not in the list, the
        returned quality is ``0``.
        'u'Besides index lookup (getting item n) you can also pass it a string
        to get the quality for the item.  If the item is not in the list, the
        returned quality is ``0``.
        'b'Returns the quality of the key.

        .. versionadded:: 0.6
           In previous versions you had to use the item-lookup syntax
           (eg: ``obj[key]`` instead of ``obj.quality(key)``)
        'u'Returns the quality of the key.

        .. versionadded:: 0.6
           In previous versions you had to use the item-lookup syntax
           (eg: ``obj[key]`` instead of ``obj.quality(key)``)
        'b'(['u'(['b'])'u'])'b'Get the position of an entry or raise :exc:`ValueError`.

        :param key: The key to be looked up.

        .. versionchanged:: 0.5
           This used to raise :exc:`IndexError`, which was inconsistent
           with the list API.
        'u'Get the position of an entry or raise :exc:`ValueError`.

        :param key: The key to be looked up.

        .. versionchanged:: 0.5
           This used to raise :exc:`IndexError`, which was inconsistent
           with the list API.
        'b'Get the position of an entry or return -1.

        :param key: The key to be looked up.
        'u'Get the position of an entry or return -1.

        :param key: The key to be looked up.
        'b'Iterate over all values.'u'Iterate over all values.'b'Convert the header set into an HTTP header string.'u'Convert the header set into an HTTP header string.'b';q='u';q='b'Returns the best match from a list of possible matches based
        on the specificity and quality of the client. If two items have the
        same quality and specificity, the one is returned that comes first.

        :param matches: a list of matches to check for
        :param default: the value that is returned if none match
        'u'Returns the best match from a list of possible matches based
        on the specificity and quality of the client. If two items have the
        same quality and specificity, the one is returned that comes first.

        :param matches: a list of matches to check for
        :param default: the value that is returned if none match
        'b'The best match as value.'u'The best match as value.'b'/|(?:\s*;\s*)'u'/|(?:\s*;\s*)'b'Like :class:`Accept` but with special methods and behavior for
    mimetypes.
    'u'Like :class:`Accept` but with special methods and behavior for
    mimetypes.
    'b'invalid mimetype 'u'invalid mimetype 'b'True if this object accepts HTML.'u'True if this object accepts HTML.'b'application/xhtml+xml'u'application/xhtml+xml'b'True if this object accepts XHTML.'u'True if this object accepts XHTML.'b'application/xml'u'application/xml'b'True if this object accepts JSON.'u'True if this object accepts JSON.'b'[_-]'u'[_-]'b'Process a language tag for matching.'u'Process a language tag for matching.'b'Like :class:`Accept` but with normalization for language tags.'u'Like :class:`Accept` but with normalization for language tags.'b'Given a list of supported values, finds the best match from
        the list of accepted values.

        Language tags are normalized for the purpose of matching, but
        are returned unchanged.

        If no exact match is found, this will fall back to matching
        the first subtag (primary language only), first with the
        accepted values then with the match values. This partial is not
        applied to any other language subtags.

        The default is returned if no exact or fallback match is found.

        :param matches: A list of supported languages to find a match.
        :param default: The value that is returned if none match.
        'u'Given a list of supported values, finds the best match from
        the list of accepted values.

        Language tags are normalized for the purpose of matching, but
        are returned unchanged.

        If no exact match is found, this will fall back to matching
        the first subtag (primary language only), first with the
        accepted values then with the match values. This partial is not
        applied to any other language subtags.

        The default is returned if no exact or fallback match is found.

        :param matches: A list of supported languages to find a match.
        :param default: The value that is returned if none match.
        'b'Like :class:`Accept` but with normalization for charsets.'u'Like :class:`Accept` but with normalization for charsets.'u'werkzeug.datastructures.accept'u'datastructures.accept'u'accept' Encoding Aliases Support

    This module is used by the encodings package search function to
    map encodings names to module names.

    Note that the search function normalizes the encoding names before
    doing the lookup, so the mapping will have to map normalized
    encoding names to module names.

    Contents:

        The following aliases dictionary contains mappings of all IANA
        character set names for which the Python core library provides
        codecs. In addition to these, a few Python specific codec
        aliases have also been added.

646ansi_x3.4_1968ansi_x3_4_1968ansi_x3.4_1986cp367csasciiibm367iso646_usiso_646.irv_1991iso_ir_6usus_asciibase64_codecbase_64big5big5_twcsbig5big5hkscsbig5_hkscshkscsbz2_codeccp037037csibm037ebcdic_cp_caebcdic_cp_nlebcdic_cp_usebcdic_cp_wtibm037ibm039cp10261026csibm1026ibm1026cp11251125ibm1125cp866urusciicp11401140ibm1140cp12501250windows_1250cp12511251windows_1251cp12521252windows_1252cp12531253windows_1253cp12541254windows_1254cp12551255windows_1255cp12561256windows_1256cp12571257windows_1257cp12581258windows_1258cp273273ibm273csibm273cp424csibm424ebcdic_cp_heibm424cp437437cspc8codepage437ibm437cp500csibm500ebcdic_cp_beebcdic_cp_chibm500cp775775cspc775balticibm775cp850850cspc850multilingualibm850cp852852cspcp852ibm852cp855855csibm855ibm855cp857857csibm857ibm857cp858858csibm858ibm858cp860860csibm860ibm860cp861861cp_iscsibm861ibm861cp862862cspc862latinhebrewibm862cp863863csibm863ibm863cp864864csibm864ibm864cp865865csibm865ibm865cp866866csibm866ibm866cp869869cp_grcsibm869ibm869cp932932ms932mskanjims_kanjicp949949ms949uhccp950950ms950euc_jis_2004jisx0213eucjis2004euc_jis2004euc_jisx0213eucjisx0213euc_jpeucjpujisu_jiseuc_kreuckrkoreanksc5601ks_c_5601ks_c_5601_1987ksx1001ks_x_1001gb18030gb18030_2000gb2312chinesecsiso58gb231280euc_cneuccneucgb2312_cngb2312_1980gb2312_80iso_ir_58gbk936cp936ms936hex_codechp_roman8roman8r8csHPRoman8cp1051ibm1051hzhzgbhz_gbhz_gb_2312iso2022_jpcsiso2022jpiso2022jpiso_2022_jpiso2022_jp_1iso2022jp_1iso_2022_jp_1iso2022_jp_2iso2022jp_2iso_2022_jp_2iso2022_jp_2004iso_2022_jp_2004iso2022jp_2004iso2022_jp_3iso2022jp_3iso_2022_jp_3iso2022_jp_extiso2022jp_extiso_2022_jp_extiso2022_krcsiso2022kriso2022kriso_2022_kriso8859_10csisolatin6iso_8859_10iso_8859_10_1992iso_ir_157l6latin6iso8859_11thaiiso_8859_11iso_8859_11_2001iso8859_13iso_8859_13l7latin7iso8859_14iso_8859_14iso_8859_14_1998iso_celticiso_ir_199l8latin8iso8859_15iso_8859_15l9latin9iso8859_16iso_8859_16iso_8859_16_2001iso_ir_226l10latin10iso8859_2csisolatin2iso_8859_2iso_8859_2_1987iso_ir_101l2latin2iso8859_3csisolatin3iso_8859_3iso_8859_3_1988iso_ir_109l3latin3iso8859_4csisolatin4iso_8859_4iso_8859_4_1988iso_ir_110l4latin4iso8859_5csisolatincyrilliccyrilliciso_8859_5iso_8859_5_1988iso_ir_144iso8859_6arabicasmo_708csisolatinarabicecma_114iso_8859_6iso_8859_6_1987iso_ir_127iso8859_7csisolatingreekecma_118elot_928greekgreek8iso_8859_7iso_8859_7_1987iso_ir_126iso8859_8csisolatinhebrewhebrewiso_8859_8iso_8859_8_1988iso_ir_138iso8859_9csisolatin5iso_8859_9iso_8859_9_1989iso_ir_148l5latin5johabcp1361ms1361koi8_rcskoi8rkz1048kz_1048rk1048strk1048_2002latin_18859cp819csisolatin1ibm819iso8859iso8859_1iso_8859_1iso_8859_1_1987iso_ir_100l1latinmac_cyrillicmaccyrillicmac_greekmacgreekmac_icelandmacicelandmac_latin2maccentraleuropemac_centeuromaclatin2mac_romanmacintoshmacromanmac_turkishmacturkishdbcsptcp154csptcp154pt154cp154cyrillic_asianquopri_codecquopriquoted_printablequotedprintablerot_13rot13shift_jiscsshiftjisshiftjissjiss_jisshift_jis_2004shiftjis2004sjis_2004s_jis_2004shift_jisx0213shiftjisx0213sjisx0213s_jisx0213tis_620tis620tis_620_0tis_620_2529_0tis_620_2529_1iso_ir_166utf_16u16utf16utf_16_beunicodebigunmarkedutf_16beutf_16_leunicodelittleunmarkedutf_16leutf_32u32utf32utf_32_beutf_32beutf_32_leutf_32leutf_7u7utf7unicode_1_1_utf_7utf_8u8utfutf8utf8_ucs2utf8_ucs4uu_codecuuzlib_codecx_mac_japanesex_mac_koreanx_mac_simp_chinesex_mac_trad_chinese# Please keep this list sorted alphabetically by value !# ascii codec# some email headers use this non-standard name# base64_codec codec# big5 codec# big5hkscs codec# bz2_codec codec# cp037 codec# cp1026 codec# cp1125 codec# cp1140 codec# cp1250 codec# cp1251 codec# cp1252 codec# cp1253 codec# cp1254 codec# cp1255 codec# cp1256 codec# cp1257 codec# cp1258 codec# cp273 codec# cp424 codec# cp437 codec# cp500 codec# cp775 codec# cp850 codec# cp852 codec# cp855 codec# cp857 codec# cp858 codec# cp860 codec# cp861 codec# cp862 codec# cp863 codec# cp864 codec# cp865 codec# cp866 codec# cp869 codec# cp932 codec# cp949 codec# cp950 codec# euc_jis_2004 codec# euc_jisx0213 codec# euc_jp codec# euc_kr codec# gb18030 codec# gb2312 codec# gbk codec# hex_codec codec# hp_roman8 codec# hz codec# iso2022_jp codec# iso2022_jp_1 codec# iso2022_jp_2 codec# iso2022_jp_2004 codec# iso2022_jp_3 codec# iso2022_jp_ext codec# iso2022_kr codec# iso8859_10 codec# iso8859_11 codec# iso8859_13 codec# iso8859_14 codec# iso8859_15 codec# iso8859_16 codec# iso8859_2 codec# iso8859_3 codec# iso8859_4 codec# iso8859_5 codec# iso8859_6 codec# iso8859_7 codec# iso8859_8 codec# iso8859_9 codec# johab codec# koi8_r codec# kz1048 codec# latin_1 codec# Note that the latin_1 codec is implemented internally in C and a# lot faster than the charmap codec iso8859_1 which uses the same# encoding. This is why we discourage the use of the iso8859_1# codec and alias it to latin_1 instead.# mac_cyrillic codec# mac_greek codec# mac_iceland codec# mac_latin2 codec# mac_roman codec# mac_turkish codec# mbcs codec# ptcp154 codec# quopri_codec codec# rot_13 codec# shift_jis codec# shift_jis_2004 codec# shift_jisx0213 codec# tis_620 codec# utf_16 codec# utf_16_be codec# utf_16_le codec# utf_32 codec# utf_32_be codec# utf_32_le codec# utf_7 codec# utf_8 codec# uu_codec codec# zlib_codec codec# temporary mac CJK aliases, will be replaced by proper codecs in 3.1b' Encoding Aliases Support

    This module is used by the encodings package search function to
    map encodings names to module names.

    Note that the search function normalizes the encoding names before
    doing the lookup, so the mapping will have to map normalized
    encoding names to module names.

    Contents:

        The following aliases dictionary contains mappings of all IANA
        character set names for which the Python core library provides
        codecs. In addition to these, a few Python specific codec
        aliases have also been added.

'u' Encoding Aliases Support

    This module is used by the encodings package search function to
    map encodings names to module names.

    Note that the search function normalizes the encoding names before
    doing the lookup, so the mapping will have to map normalized
    encoding names to module names.

    Contents:

        The following aliases dictionary contains mappings of all IANA
        character set names for which the Python core library provides
        codecs. In addition to these, a few Python specific codec
        aliases have also been added.

'b'646'u'646'b'ansi_x3.4_1968'u'ansi_x3.4_1968'b'ansi_x3_4_1968'u'ansi_x3_4_1968'b'ansi_x3.4_1986'u'ansi_x3.4_1986'b'cp367'u'cp367'b'csascii'u'csascii'b'ibm367'u'ibm367'b'iso646_us'u'iso646_us'b'iso_646.irv_1991'u'iso_646.irv_1991'b'iso_ir_6'u'iso_ir_6'b'us'u'us'b'us_ascii'u'us_ascii'b'base64_codec'u'base64_codec'b'base64'u'base64'b'base_64'u'base_64'b'big5'u'big5'b'big5_tw'u'big5_tw'b'csbig5'u'csbig5'b'big5hkscs'u'big5hkscs'b'big5_hkscs'u'big5_hkscs'b'hkscs'u'hkscs'b'bz2_codec'u'bz2_codec'b'cp037'u'cp037'b'037'u'037'b'csibm037'u'csibm037'b'ebcdic_cp_ca'u'ebcdic_cp_ca'b'ebcdic_cp_nl'u'ebcdic_cp_nl'b'ebcdic_cp_us'u'ebcdic_cp_us'b'ebcdic_cp_wt'u'ebcdic_cp_wt'b'ibm037'u'ibm037'b'ibm039'u'ibm039'b'cp1026'u'cp1026'b'1026'u'1026'b'csibm1026'u'csibm1026'b'ibm1026'u'ibm1026'b'cp1125'u'cp1125'b'1125'u'1125'b'ibm1125'u'ibm1125'b'cp866u'u'cp866u'b'ruscii'u'ruscii'b'cp1140'u'cp1140'b'1140'u'1140'b'ibm1140'u'ibm1140'b'cp1250'u'cp1250'b'1250'u'1250'b'windows_1250'u'windows_1250'b'cp1251'u'cp1251'b'1251'u'1251'b'windows_1251'u'windows_1251'b'cp1252'u'cp1252'b'1252'u'1252'b'windows_1252'u'windows_1252'b'cp1253'u'cp1253'b'1253'u'1253'b'windows_1253'u'windows_1253'b'cp1254'u'cp1254'b'1254'u'1254'b'windows_1254'u'windows_1254'b'cp1255'u'cp1255'b'1255'u'1255'b'windows_1255'u'windows_1255'b'cp1256'u'cp1256'b'1256'u'1256'b'windows_1256'u'windows_1256'b'cp1257'u'cp1257'b'1257'u'1257'b'windows_1257'u'windows_1257'b'cp1258'u'cp1258'b'1258'u'1258'b'windows_1258'u'windows_1258'b'cp273'u'cp273'b'273'u'273'b'ibm273'u'ibm273'b'csibm273'u'csibm273'b'cp424'u'cp424'b'424'u'424'b'csibm424'u'csibm424'b'ebcdic_cp_he'u'ebcdic_cp_he'b'ibm424'u'ibm424'b'cp437'u'cp437'b'437'u'437'b'cspc8codepage437'u'cspc8codepage437'b'ibm437'u'ibm437'b'cp500'u'cp500'b'500'u'500'b'csibm500'u'csibm500'b'ebcdic_cp_be'u'ebcdic_cp_be'b'ebcdic_cp_ch'u'ebcdic_cp_ch'b'ibm500'u'ibm500'b'cp775'u'cp775'b'775'u'775'b'cspc775baltic'u'cspc775baltic'b'ibm775'u'ibm775'b'cp850'u'cp850'b'850'u'850'b'cspc850multilingual'u'cspc850multilingual'b'ibm850'u'ibm850'b'cp852'u'cp852'b'852'u'852'b'cspcp852'u'cspcp852'b'ibm852'u'ibm852'b'cp855'u'cp855'b'855'u'855'b'csibm855'u'csibm855'b'ibm855'u'ibm855'b'cp857'u'cp857'b'857'u'857'b'csibm857'u'csibm857'b'ibm857'u'ibm857'b'cp858'u'cp858'b'858'u'858'b'csibm858'u'csibm858'b'ibm858'u'ibm858'b'cp860'u'cp860'b'860'u'860'b'csibm860'u'csibm860'b'ibm860'u'ibm860'b'cp861'u'cp861'b'861'u'861'b'cp_is'u'cp_is'b'csibm861'u'csibm861'b'ibm861'u'ibm861'b'cp862'u'cp862'b'862'u'862'b'cspc862latinhebrew'u'cspc862latinhebrew'b'ibm862'u'ibm862'b'cp863'u'cp863'b'863'u'863'b'csibm863'u'csibm863'b'ibm863'u'ibm863'b'cp864'u'cp864'b'864'u'864'b'csibm864'u'csibm864'b'ibm864'u'ibm864'b'cp865'u'cp865'b'865'u'865'b'csibm865'u'csibm865'b'ibm865'u'ibm865'b'cp866'u'cp866'b'866'u'866'b'csibm866'u'csibm866'b'ibm866'u'ibm866'b'cp869'u'cp869'b'869'u'869'b'cp_gr'u'cp_gr'b'csibm869'u'csibm869'b'ibm869'u'ibm869'b'cp932'u'cp932'b'932'u'932'b'ms932'u'ms932'b'mskanji'u'mskanji'b'ms_kanji'u'ms_kanji'b'cp949'u'cp949'b'949'u'949'b'ms949'u'ms949'b'uhc'u'uhc'b'cp950'u'cp950'b'950'u'950'b'ms950'u'ms950'b'euc_jis_2004'u'euc_jis_2004'b'jisx0213'u'jisx0213'b'eucjis2004'u'eucjis2004'b'euc_jis2004'u'euc_jis2004'b'euc_jisx0213'u'euc_jisx0213'b'eucjisx0213'u'eucjisx0213'b'euc_jp'u'euc_jp'b'eucjp'u'eucjp'b'ujis'u'ujis'b'u_jis'u'u_jis'b'euc_kr'u'euc_kr'b'euckr'u'euckr'b'korean'u'korean'b'ksc5601'u'ksc5601'b'ks_c_5601'u'ks_c_5601'b'ks_c_5601_1987'u'ks_c_5601_1987'b'ksx1001'u'ksx1001'b'ks_x_1001'u'ks_x_1001'b'gb18030'u'gb18030'b'gb18030_2000'u'gb18030_2000'b'gb2312'u'gb2312'b'chinese'u'chinese'b'csiso58gb231280'u'csiso58gb231280'b'euc_cn'u'euc_cn'b'euccn'u'euccn'b'eucgb2312_cn'u'eucgb2312_cn'b'gb2312_1980'u'gb2312_1980'b'gb2312_80'u'gb2312_80'b'iso_ir_58'u'iso_ir_58'b'gbk'u'gbk'b'936'u'936'b'cp936'u'cp936'b'ms936'u'ms936'b'hex_codec'u'hex_codec'b'hex'u'hex'b'hp_roman8'u'hp_roman8'b'roman8'u'roman8'b'r8'u'r8'b'csHPRoman8'u'csHPRoman8'b'cp1051'u'cp1051'b'ibm1051'u'ibm1051'b'hz'u'hz'b'hzgb'u'hzgb'b'hz_gb'u'hz_gb'b'hz_gb_2312'u'hz_gb_2312'b'iso2022_jp'u'iso2022_jp'b'csiso2022jp'u'csiso2022jp'b'iso2022jp'u'iso2022jp'b'iso_2022_jp'u'iso_2022_jp'b'iso2022_jp_1'u'iso2022_jp_1'b'iso2022jp_1'u'iso2022jp_1'b'iso_2022_jp_1'u'iso_2022_jp_1'b'iso2022_jp_2'u'iso2022_jp_2'b'iso2022jp_2'u'iso2022jp_2'b'iso_2022_jp_2'u'iso_2022_jp_2'b'iso2022_jp_2004'u'iso2022_jp_2004'b'iso_2022_jp_2004'u'iso_2022_jp_2004'b'iso2022jp_2004'u'iso2022jp_2004'b'iso2022_jp_3'u'iso2022_jp_3'b'iso2022jp_3'u'iso2022jp_3'b'iso_2022_jp_3'u'iso_2022_jp_3'b'iso2022_jp_ext'u'iso2022_jp_ext'b'iso2022jp_ext'u'iso2022jp_ext'b'iso_2022_jp_ext'u'iso_2022_jp_ext'b'iso2022_kr'u'iso2022_kr'b'csiso2022kr'u'csiso2022kr'b'iso2022kr'u'iso2022kr'b'iso_2022_kr'u'iso_2022_kr'b'iso8859_10'u'iso8859_10'b'csisolatin6'u'csisolatin6'b'iso_8859_10'u'iso_8859_10'b'iso_8859_10_1992'u'iso_8859_10_1992'b'iso_ir_157'u'iso_ir_157'b'l6'u'l6'b'latin6'u'latin6'b'iso8859_11'u'iso8859_11'b'thai'u'thai'b'iso_8859_11'u'iso_8859_11'b'iso_8859_11_2001'u'iso_8859_11_2001'b'iso8859_13'u'iso8859_13'b'iso_8859_13'u'iso_8859_13'b'l7'u'l7'b'latin7'u'latin7'b'iso8859_14'u'iso8859_14'b'iso_8859_14'u'iso_8859_14'b'iso_8859_14_1998'u'iso_8859_14_1998'b'iso_celtic'u'iso_celtic'b'iso_ir_199'u'iso_ir_199'b'l8'u'l8'b'latin8'u'latin8'b'iso8859_15'u'iso8859_15'b'iso_8859_15'u'iso_8859_15'b'l9'u'l9'b'latin9'u'latin9'b'iso8859_16'u'iso8859_16'b'iso_8859_16'u'iso_8859_16'b'iso_8859_16_2001'u'iso_8859_16_2001'b'iso_ir_226'u'iso_ir_226'b'l10'u'l10'b'latin10'u'latin10'b'iso8859_2'u'iso8859_2'b'csisolatin2'u'csisolatin2'b'iso_8859_2'u'iso_8859_2'b'iso_8859_2_1987'u'iso_8859_2_1987'b'iso_ir_101'u'iso_ir_101'b'l2'u'l2'b'latin2'u'latin2'b'iso8859_3'u'iso8859_3'b'csisolatin3'u'csisolatin3'b'iso_8859_3'u'iso_8859_3'b'iso_8859_3_1988'u'iso_8859_3_1988'b'iso_ir_109'u'iso_ir_109'b'l3'u'l3'b'latin3'u'latin3'b'iso8859_4'u'iso8859_4'b'csisolatin4'u'csisolatin4'b'iso_8859_4'u'iso_8859_4'b'iso_8859_4_1988'u'iso_8859_4_1988'b'iso_ir_110'u'iso_ir_110'b'l4'u'l4'b'latin4'u'latin4'b'iso8859_5'u'iso8859_5'b'csisolatincyrillic'u'csisolatincyrillic'b'cyrillic'u'cyrillic'b'iso_8859_5'u'iso_8859_5'b'iso_8859_5_1988'u'iso_8859_5_1988'b'iso_ir_144'u'iso_ir_144'b'iso8859_6'u'iso8859_6'b'arabic'u'arabic'b'asmo_708'u'asmo_708'b'csisolatinarabic'u'csisolatinarabic'b'ecma_114'u'ecma_114'b'iso_8859_6'u'iso_8859_6'b'iso_8859_6_1987'u'iso_8859_6_1987'b'iso_ir_127'u'iso_ir_127'b'iso8859_7'u'iso8859_7'b'csisolatingreek'u'csisolatingreek'b'ecma_118'u'ecma_118'b'elot_928'u'elot_928'b'greek'u'greek'b'greek8'u'greek8'b'iso_8859_7'u'iso_8859_7'b'iso_8859_7_1987'u'iso_8859_7_1987'b'iso_ir_126'u'iso_ir_126'b'iso8859_8'u'iso8859_8'b'csisolatinhebrew'u'csisolatinhebrew'b'hebrew'u'hebrew'b'iso_8859_8'u'iso_8859_8'b'iso_8859_8_1988'u'iso_8859_8_1988'b'iso_ir_138'u'iso_ir_138'b'iso8859_9'u'iso8859_9'b'csisolatin5'u'csisolatin5'b'iso_8859_9'u'iso_8859_9'b'iso_8859_9_1989'u'iso_8859_9_1989'b'iso_ir_148'u'iso_ir_148'b'l5'u'l5'b'latin5'u'latin5'b'johab'u'johab'b'cp1361'u'cp1361'b'ms1361'u'ms1361'b'koi8_r'u'koi8_r'b'cskoi8r'u'cskoi8r'b'kz1048'u'kz1048'b'kz_1048'u'kz_1048'b'rk1048'u'rk1048'b'strk1048_2002'u'strk1048_2002'b'latin_1'u'latin_1'b'8859'u'8859'b'cp819'u'cp819'b'csisolatin1'u'csisolatin1'b'ibm819'u'ibm819'b'iso8859'u'iso8859'b'iso8859_1'u'iso8859_1'b'iso_8859_1'u'iso_8859_1'b'iso_8859_1_1987'u'iso_8859_1_1987'b'iso_ir_100'u'iso_ir_100'b'l1'u'l1'b'latin'u'latin'b'mac_cyrillic'u'mac_cyrillic'b'maccyrillic'u'maccyrillic'b'mac_greek'u'mac_greek'b'macgreek'u'macgreek'b'mac_iceland'u'mac_iceland'b'maciceland'u'maciceland'b'mac_latin2'u'mac_latin2'b'maccentraleurope'u'maccentraleurope'b'mac_centeuro'u'mac_centeuro'b'maclatin2'u'maclatin2'b'mac_roman'u'mac_roman'b'macintosh'u'macintosh'b'macroman'u'macroman'b'mac_turkish'u'mac_turkish'b'macturkish'u'macturkish'b'mbcs'u'mbcs'b'ansi'u'ansi'b'dbcs'u'dbcs'b'ptcp154'u'ptcp154'b'csptcp154'u'csptcp154'b'pt154'u'pt154'b'cp154'u'cp154'b'cyrillic_asian'u'cyrillic_asian'b'quopri_codec'u'quopri_codec'b'quopri'u'quopri'b'quoted_printable'u'quoted_printable'b'quotedprintable'u'quotedprintable'b'rot_13'u'rot_13'b'rot13'u'rot13'b'shift_jis'u'shift_jis'b'csshiftjis'u'csshiftjis'b'shiftjis'u'shiftjis'b'sjis'u'sjis'b's_jis'u's_jis'b'shift_jis_2004'u'shift_jis_2004'b'shiftjis2004'u'shiftjis2004'b'sjis_2004'u'sjis_2004'b's_jis_2004'u's_jis_2004'b'shift_jisx0213'u'shift_jisx0213'b'shiftjisx0213'u'shiftjisx0213'b'sjisx0213'u'sjisx0213'b's_jisx0213'u's_jisx0213'b'tis_620'u'tis_620'b'tis620'u'tis620'b'tis_620_0'u'tis_620_0'b'tis_620_2529_0'u'tis_620_2529_0'b'tis_620_2529_1'u'tis_620_2529_1'b'iso_ir_166'u'iso_ir_166'b'utf_16'u'utf_16'b'u16'u'u16'b'utf16'u'utf16'b'utf_16_be'u'utf_16_be'b'unicodebigunmarked'u'unicodebigunmarked'b'utf_16be'u'utf_16be'b'utf_16_le'u'utf_16_le'b'unicodelittleunmarked'u'unicodelittleunmarked'b'utf_16le'u'utf_16le'b'utf_32'u'utf_32'b'u32'u'u32'b'utf32'u'utf32'b'utf_32_be'u'utf_32_be'b'utf_32be'u'utf_32be'b'utf_32_le'u'utf_32_le'b'utf_32le'u'utf_32le'b'utf_7'u'utf_7'b'u7'u'u7'b'utf7'u'utf7'b'unicode_1_1_utf_7'u'unicode_1_1_utf_7'b'utf_8'u'utf_8'b'u8'u'u8'b'utf'u'utf'b'utf8'u'utf8'b'utf8_ucs2'u'utf8_ucs2'b'utf8_ucs4'u'utf8_ucs4'b'uu_codec'u'uu_codec'b'uu'u'uu'b'zlib_codec'u'zlib_codec'b'zlib'b'x_mac_japanese'u'x_mac_japanese'b'x_mac_korean'u'x_mac_korean'b'x_mac_simp_chinese'u'x_mac_simp_chinese'b'x_mac_trad_chinese'u'x_mac_trad_chinese'u'Python39.lib.encodings.aliases'u'lib.encodings.aliases'u'encodings.aliases'u'aliases'
This module generates ANSI character codes to printing colors to terminals.
See: http://en.wikipedia.org/wiki/ANSI_escape_code
[CSI]OSCBELcode_to_charsset_title2;clear_screenJclear_lineAnsiCodesAnsiCursorUPDOWNFORWARDBACKPOSAnsiForeBLACKREDGREENYELLOWBLUEMAGENTACYANWHITERESET90LIGHTBLACK_EX91LIGHTRED_EX92LIGHTGREEN_EXLIGHTYELLOW_EX94LIGHTBLUE_EX95LIGHTMAGENTA_EX96LIGHTCYAN_EX97LIGHTWHITE_EXAnsiBack41434445464749104105106107AnsiStyleBRIGHTDIMNORMALRESET_ALL# the subclasses declare class attributes which are numbers.# Upon instantiation we define instance attributes, which are the same# as the class attributes but wrapped with the ANSI escape sequence# These are fairly well supported, but not part of the standard.b'
This module generates ANSI character codes to printing colors to terminals.
See: http://en.wikipedia.org/wiki/ANSI_escape_code
'u'
This module generates ANSI character codes to printing colors to terminals.
See: http://en.wikipedia.org/wiki/ANSI_escape_code
'b'['u'['b']'u']'b''u''b'2;'u'2;'b'J'u'J'b'K'u'K'b'C'u'C'b'D'u'D'u'colorama.ansi'wintermenable_vt_processingWinTermWinColorWinStylewinapi_testStreamWrapper
    Wraps a stream (such as stdout), acting as a transparent proxy for all
    attribute access apart from method 'write()', which is delegated to our
    Converter instance.
    __wrapped__convertorPYCHARM_HOSTEDstream_isatty
    Implements a 'write()' method which, on Windows, will strip ANSI character
    sequences from the text, and if outputting to a tty, will convert them into
    win32 function calls.
    ?\[((?:\d|;)*)([a-zA-Z])?ANSI_CSI_RE?\]([^]*)()?ANSI_OSC_REconvertautoreseton_windowsconversion_supportedsystem_has_native_ansihave_ttyneed_conversionget_win32_callswin32_callson_stderrshould_wrap
        True if this class is actually needed. If false, then the output
        stream will not be affected, nor will win32 calls be issued, so
        wrapping stdout is not actually required. This will generally be
        False on non-Windows platforms, unless optional functionality like
        autoreset has been requested using kwargs to init()
        foreGREYbackwrite_and_convertcall_win32
        Write the given text to our wrapped stream, stripping any ANSI
        sequences from the text, and optionally converting them into win32
        calls.
        cursorconvert_oscspanwrite_plain_textconvert_ansiparamstringextract_paramsHfJKmABCDfunc_argserase_screenerase_lineset_cursor_positioncursor_adjust02# double-underscore everything to prevent clashes with names of# attributes on the wrapped stream object.# special method lookup bypasses __getattr__/__getattribute__, see# https://stackoverflow.com/questions/12632894/why-doesnt-getattr-work-with-exit# thus, contextlib magic methods are not proxied via __getattr__# AttributeError in the case that the stream doesn't support being closed# ValueError for the case that the stream has already been detached when atexit runs# Control Sequence Introducer# Operating System Command# The wrapped stream (normally sys.stdout or sys.stderr)# should we reset colors to defaults after every .write()# create the proxy wrapping our output stream# We test if the WinAPI works, because even if we are on Windows# we may be using a terminal that doesn't support the WinAPI# (e.g. Cygwin Terminal). In this case it's up to the terminal# to support the ANSI codes.# should we strip ANSI sequences from our output?# should we should convert ANSI sequences into win32 calls?# dict of ansi codes to win32 functions and parameters# are we wrapping stderr?# defaults:# cursor position - absolute# cursor position - relative# A - up, B - down, C - forward, D - back# 0 - change title and icon (we will only change title)# 1 - change icon (we don't support this)# 2 - change titleb'
    Wraps a stream (such as stdout), acting as a transparent proxy for all
    attribute access apart from method 'write()', which is delegated to our
    Converter instance.
    'u'
    Wraps a stream (such as stdout), acting as a transparent proxy for all
    attribute access apart from method 'write()', which is delegated to our
    Converter instance.
    'b'PYCHARM_HOSTED'u'PYCHARM_HOSTED'b'
    Implements a 'write()' method which, on Windows, will strip ANSI character
    sequences from the text, and if outputting to a tty, will convert them into
    win32 function calls.
    'u'
    Implements a 'write()' method which, on Windows, will strip ANSI character
    sequences from the text, and if outputting to a tty, will convert them into
    win32 function calls.
    'b'?\[((?:\d|;)*)([a-zA-Z])?'u'?\[((?:\d|;)*)([a-zA-Z])?'b'?\]([^]*)()?'u'?\]([^]*)()?'b'
        True if this class is actually needed. If false, then the output
        stream will not be affected, nor will win32 calls be issued, so
        wrapping stdout is not actually required. This will generally be
        False on non-Windows platforms, unless optional functionality like
        autoreset has been requested using kwargs to init()
        'u'
        True if this class is actually needed. If false, then the output
        stream will not be affected, nor will win32 calls be issued, so
        wrapping stdout is not actually required. This will generally be
        False on non-Windows platforms, unless optional functionality like
        autoreset has been requested using kwargs to init()
        'b'
        Write the given text to our wrapped stream, stripping any ANSI
        sequences from the text, and optionally converting them into win32
        calls.
        'u'
        Write the given text to our wrapped stream, stripping any ANSI
        sequences from the text, and optionally converting them into win32
        calls.
        'b'Hf'u'Hf'b'JKm'u'JKm'b'ABCD'u'ABCD'b'02'u'02'u'colorama.ansitowin32'u'ansitowin32'flaskflask_loginyour_secret_keysecret_keyinit_appREMEMBER_COOKIE_HTTPONLYSESSION_COOKIE_HTTPONLYUserpassworduser_idusers<Id: , Username: mario1234paologiovanniabcduser_loaderload_userrouteanonymousis_authenticated
        <h1>Hi f"""</h1>
        <h3>Welcome to Flask Login without ORM!</h3>
        /login/<id>/<password>loginuseropen_redirect<h1>Invalid user id or password</h1>/logoutlogoutremember# Javascript access to cookies (insecure)# example query# Open redirect vulnerability# next = request.args.get('next')b'your_secret_key'u'your_secret_key'b'REMEMBER_COOKIE_HTTPONLY'u'REMEMBER_COOKIE_HTTPONLY'b'SESSION_COOKIE_HTTPONLY'u'SESSION_COOKIE_HTTPONLY'b'User'u'User'b'<Id: 'u'<Id: 'b', Username: 'u', Username: 'b'mario'u'mario'b'1234'u'1234'b'paolo'u'paolo'b'password'u'password'b'giovanni'u'giovanni'b'abcd'u'abcd'b'anonymous'u'anonymous'b'
        <h1>Hi 'u'
        <h1>Hi 'b'</h1>
        <h3>Welcome to Flask Login without ORM!</h3>
        'u'</h1>
        <h3>Welcome to Flask Login without ORM!</h3>
        'b'/login/<id>/<password>'u'/login/<id>/<password>'b'<h1>Invalid user id or password</h1>'u'<h1>Invalid user id or password</h1>'b'/logout'u'/logout'u'FlaskApp.app'u'FlaskApp'_abc_Iterator_url_quoteclickwerkzeug.datastructureswerkzeug.exceptionsAborterBadRequestBadRequestKeyErrorHTTPExceptionInternalServerErrorwerkzeug.routingwerkzeug.servingis_running_from_reloaderwerkzeug.utilscached_property_wz_redirectwerkzeug.wrappersBaseResponsecliftConfigAttribute_AppCtxGlobalsAppContextRequestContext_cv_app_cv_requestrequest_ctx_split_blueprint_pathget_debug_flagget_load_dotenvjson.providerDefaultJSONProviderJSONProvidercreate_loggerscaffold_endpoint_from_view_func_sentinelfind_packageScaffoldsetupmethodsessionsSecureCookieSessionInterfaceSessionInterfaceDispatchingJinjaLoadertestingFlaskClientFlaskCliRunnerT_shell_context_processorShellContextProcessorCallableT_teardownTeardownCallableT_template_filterTemplateFilterCallableT_template_globalTemplateGlobalCallableT_template_testTemplateTestCallable_make_timedeltaThe flask object implements a WSGI application and acts as the central
    object.  It is passed the name of the module or package of the
    application.  Once it is created it will act as a central registry for
    the view functions, the URL rules, template configuration and much more.

    The name of the package is used to resolve resources from inside the
    package or the folder the module is contained in depending on if the
    package parameter resolves to an actual python package (a folder with
    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).

    For more information about resource loading, see :func:`open_resource`.

    Usually you create a :class:`Flask` instance in your main module or
    in the :file:`__init__.py` file of your package like this::

        from flask import Flask
        app = Flask(__name__)

    .. admonition:: About the First Parameter

        The idea of the first parameter is to give Flask an idea of what
        belongs to your application.  This name is used to find resources
        on the filesystem, can be used by extensions to improve debugging
        information and a lot more.

        So it's important what you provide there.  If you are using a single
        module, `__name__` is always the correct value.  If you however are
        using a package, it's usually recommended to hardcode the name of
        your package there.

        For example if your application is defined in :file:`yourapplication/app.py`
        you should create it with one of the two versions below::

            app = Flask('yourapplication')
            app = Flask(__name__.split('.')[0])

        Why is that?  The application will work even with `__name__`, thanks
        to how resources are looked up.  However it will make debugging more
        painful.  Certain extensions can make assumptions based on the
        import name of your application.  For example the Flask-SQLAlchemy
        extension will look for the code in your application that triggered
        an SQL query in debug mode.  If the import name is not properly set
        up, that debugging information is lost.  (For example it would only
        pick up SQL queries in `yourapplication.app` and not
        `yourapplication.views.frontend`)

    .. versionadded:: 0.7
       The `static_url_path`, `static_folder`, and `template_folder`
       parameters were added.

    .. versionadded:: 0.8
       The `instance_path` and `instance_relative_config` parameters were
       added.

    .. versionadded:: 0.11
       The `root_path` parameter was added.

    .. versionadded:: 1.0
       The ``host_matching`` and ``static_host`` parameters were added.

    .. versionadded:: 1.0
       The ``subdomain_matching`` parameter was added. Subdomain
       matching needs to be enabled manually now. Setting
       :data:`SERVER_NAME` does not implicitly enable it.

    :param import_name: the name of the application package
    :param static_url_path: can be used to specify a different path for the
                            static files on the web.  Defaults to the name
                            of the `static_folder` folder.
    :param static_folder: The folder with static files that is served at
        ``static_url_path``. Relative to the application ``root_path``
        or an absolute path. Defaults to ``'static'``.
    :param static_host: the host to use when adding the static route.
        Defaults to None. Required when using ``host_matching=True``
        with a ``static_folder`` configured.
    :param host_matching: set ``url_map.host_matching`` attribute.
        Defaults to False.
    :param subdomain_matching: consider the subdomain relative to
        :data:`SERVER_NAME` when matching routes. Defaults to False.
    :param template_folder: the folder that contains the templates that should
                            be used by the application.  Defaults to
                            ``'templates'`` folder in the root path of the
                            application.
    :param instance_path: An alternative instance path for the application.
                          By default the folder ``'instance'`` next to the
                          package or module is assumed to be the instance
                          path.
    :param instance_relative_config: if set to ``True`` relative filenames
                                     for loading the config are assumed to
                                     be relative to the instance path instead
                                     of the application root.
    :param root_path: The path to the root of the application files.
        This should only be set manually when it can't be detected
        automatically, such as for namespace packages.
    request_classresponse_classaborter_classjinja_environmentapp_ctx_globals_classconfig_classTESTINGSECRET_KEYPERMANENT_SESSION_LIFETIMEget_converterpermanent_session_lifetimejson_provider_classA subclass of :class:`~flask.json.provider.JSONProvider`. An
    instance is created and assigned to :attr:`app.json` when creating
    the app.

    The default, :class:`~flask.json.provider.DefaultJSONProvider`, uses
    Python's built-in :mod:`json` library. A different provider can use
    a different JSON library.

    .. versionadded:: 2.2
    jinja_optionsPROPAGATE_EXCEPTIONSUSE_X_SENDFILESERVER_NAMEAPPLICATION_ROOTSESSION_COOKIE_NAMESESSION_COOKIE_DOMAINSESSION_COOKIE_PATHSESSION_COOKIE_SECURESESSION_COOKIE_SAMESITESESSION_REFRESH_EACH_REQUESTMAX_CONTENT_LENGTHSEND_FILE_MAX_AGE_DEFAULTTRAP_BAD_REQUEST_ERRORSTRAP_HTTP_EXCEPTIONSEXPLAIN_TEMPLATE_LOADINGPREFERRED_URL_SCHEMETEMPLATES_AUTO_RELOAD4093MAX_COOKIE_SIZEdefault_configurl_rule_classurl_map_classtest_client_classtest_cli_runner_classsession_interfacestatictemplatesimport_namestatic_url_pathstatic_folderstatic_hosthost_matchingsubdomain_matchingtemplate_folderinstance_pathinstance_relative_configroot_pathauto_find_instance_pathIf an instance path is provided it must be absolute. A relative path was given instead."If an instance path is provided it must be absolute."" A relative path was given instead."make_configmake_aborteraborterProvides access to JSON methods. Functions in ``flask.json``
        will call methods on this provider when the application context
        is active. Used for handling JSON requests and responses.

        An instance of :attr:`json_provider_class`. Can be customized by
        changing that attribute on a subclass, or by assigning to this
        attribute afterwards.

        The default, :class:`~flask.json.provider.DefaultJSONProvider`,
        uses Python's built-in :mod:`json` library. A different provider
        can use a different JSON library.

        .. versionadded:: 2.2
        url_build_error_handlersteardown_appcontext_funcsshell_context_processorsurl_map_got_first_requesthas_static_folderInvalid static_host/host_matching combinationself_refadd_url_rule/<path:filename>endpointhostsend_static_fileview_func_check_setup_finishedf_nameThe setup method '' can no longer be called on the application. It has already handled its first request, any changes will not be applied consistently.
Make sure all imports, decorators, functions, etc. needed to set up the application are done before running it."' can no longer be called"" on the application. It has already handled its first"" request, any changes will not be applied"" consistently.\n""Make sure all imports, decorators, functions, etc."" needed to set up the application are done before"" running it."The name of the application.  This is usually the import name
        with the difference that it's guessed from the run file if the
        import name is main.  This name is used as a display name when
        Flask needs the name of the application.  It can be set and overridden
        to change the value.

        .. versionadded:: 0.8
        A standard Python :class:`~logging.Logger` for the app, with
        the same name as :attr:`name`.

        In debug mode, the logger's :attr:`~logging.Logger.level` will
        be set to :data:`~logging.DEBUG`.

        If there are no handlers configured, a default handler will be
        added. See :doc:`/logging` for more information.

        .. versionchanged:: 1.1.0
            The logger takes the same name as :attr:`name` rather than
            hard-coding ``"flask.app"``.

        .. versionchanged:: 1.0.0
            Behavior was simplified. The logger is always named
            ``"flask.app"``. The level is only set during configuration,
            it doesn't check ``app.debug`` each time. Only one format is
            used, not different ones depending on ``app.debug``. No
            handlers are removed, and a handler is only added if no
            handlers are already configured.

        .. versionadded:: 0.3
        jinja_envThe Jinja environment used to load templates.

        The environment is created the first time this property is
        accessed. Changing :attr:`jinja_options` after that will have no
        effect.
        create_jinja_environmentgot_first_requestThis attribute is set to ``True`` if the application started
        handling the first request.

        .. deprecated:: 2.3
            Will be removed in Flask 2.4.

        .. versionadded:: 0.8
        'got_first_request' is deprecated and will be removed in Flask 2.4.instance_relativeUsed to create the config attribute by the Flask constructor.
        The `instance_relative` parameter is passed in from the constructor
        of Flask (there named `instance_relative_config`) and indicates if
        the config should be relative to the instance path or the root path
        of the application.

        .. versionadded:: 0.8
        Create the object to assign to :attr:`aborter`. That object
        is called by :func:`flask.abort` to raise HTTP errors, and can
        be called directly as well.

        By default, this creates an instance of :attr:`aborter_class`,
        which defaults to :class:`werkzeug.exceptions.Aborter`.

        .. versionadded:: 2.2
        Tries to locate the instance path if it was not provided to the
        constructor of the application class.  It will basically calculate
        the path to a folder named ``instance`` next to your main file or
        the package.

        .. versionadded:: 0.8
        package_path-instanceopen_instance_resourceOpens a resource from the application's instance folder
        (:attr:`instance_path`).  Otherwise works like
        :meth:`open_resource`.  Instance resources can also be opened for
        writing.

        :param resource: the name of the resource.  To access resources within
                         subfolders use forward slashes as separator.
        :param mode: resource file opening mode, default is 'rb'.
        Create the Jinja environment based on :attr:`jinja_options`
        and the various Jinja-related methods of the app. Changing
        :attr:`jinja_options` after this will have no effect. Also adds
        Flask-related globals and filters to the environment.

        .. versionchanged:: 0.11
           ``Environment.auto_reload`` set in accordance with
           ``TEMPLATES_AUTO_RELOAD`` configuration option.

        .. versionadded:: 0.5
        autoescapeselect_jinja_autoescapeauto_reloadpoliciesjson.dumps_functioncreate_global_jinja_loaderCreates the loader for the Jinja2 environment.  Can be used to
        override just the loader and keeping the rest unchanged.  It's
        discouraged to override this function.  Instead one should override
        the :meth:`jinja_loader` function instead.

        The global loader dispatches between the loaders of the application
        and the individual blueprints.

        .. versionadded:: 0.7
        Returns ``True`` if autoescaping should be active for the given
        template name. If no template name is given, returns `True`.

        .. versionchanged:: 2.2
            Autoescaping is now enabled by default for ``.svg`` files.

        .. versionadded:: 0.5
        .html.htm.xml.xhtml.svgupdate_template_contextUpdate the template context with some commonly used variables.
        This injects request, session, config and g into the template
        context as well as everything template context processors want
        to inject.  Note that the as of Flask 0.6, the original values
        in the context will not be overridden if a context processor
        decides to return a value with the same key.

        :param context: the context as a dictionary that is updated in place
                        to add extra variables.
        orig_ctxtemplate_context_processorsmake_shell_contextReturns the shell context for an interactive shell for this
        application.  This runs all the registered shell context
        processors.

        .. versionadded:: 0.11
        processorWhether debug mode is enabled. When using ``flask run`` to start the
        development server, an interactive debugger will be shown for unhandled
        exceptions, and the server will be reloaded when code changes. This maps to the
        :data:`DEBUG` config key. It may not behave as expected if set late.

        **Do not enable debug mode when deploying in production.**

        Default: ``False``
        portload_dotenvRuns the application on a local development server.

        Do not use ``run()`` in a production setting. It is not intended to
        meet security and performance requirements for a production server.
        Instead, see :doc:`/deploying/index` for WSGI server recommendations.

        If the :attr:`debug` flag is set the server will automatically reload
        for code changes and show a debugger in case an exception happened.

        If you want to run the application in debug mode, but disable the
        code execution on the interactive debugger, you can pass
        ``use_evalex=False`` as parameter.  This will keep the debugger's
        traceback screen active, but disable code execution.

        It is not recommended to use this function for development with
        automatic reloading as this is badly supported.  Instead you should
        be using the :command:`flask` command line script's ``run`` support.

        .. admonition:: Keep in Mind

           Flask will suppress any server error with a generic error page
           unless it is in debug mode.  As such to enable just the
           interactive debugger without the code reloading, you have to
           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.
           Setting ``use_debugger`` to ``True`` without being in debug mode
           won't catch any exceptions because there won't be any to
           catch.

        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to
            have the server available externally as well. Defaults to
            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable
            if present.
        :param port: the port of the webserver. Defaults to ``5000`` or the
            port defined in the ``SERVER_NAME`` config variable if present.
        :param debug: if given, enable or disable debug mode. See
            :attr:`debug`.
        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`
            files to set environment variables. Will also change the working
            directory to the directory containing the first file found.
        :param options: the options to be forwarded to the underlying Werkzeug
            server. See :func:`werkzeug.serving.run_simple` for more
            information.

        .. versionchanged:: 1.0
            If installed, python-dotenv will be used to load environment
            variables from :file:`.env` and :file:`.flaskenv` files.

            The :envvar:`FLASK_DEBUG` environment variable will override :attr:`debug`.

            Threaded mode is enabled by default.

        .. versionchanged:: 0.10
            The default port is now picked from the ``SERVER_NAME``
            variable.
        FLASK_RUN_FROM_CLI * Ignoring a call to 'app.run()' that would block the current 'flask' CLI command.
   Only call 'app.run()' in an 'if __name__ == "__main__"' guard." * Ignoring a call to 'app.run()' that would block"" the current 'flask' CLI command.\n""   Only call 'app.run()' in an 'if __name__ =="' "__main__"\' guard.'redfgFLASK_DEBUGserver_namesn_hostsn_port127.0.0.15000use_reloaderuse_debuggerthreadedshow_server_banneruse_cookiesCreates a test client for this application.  For information
        about unit testing head over to :doc:`/testing`.

        Note that if you are testing for assertions or exceptions in your
        application code, you must set ``app.testing = True`` in order for the
        exceptions to propagate to the test client.  Otherwise, the exception
        will be handled by the application (not visible to the test client) and
        the only indication of an AssertionError or other exception will be a
        500 status code response to the test client.  See the :attr:`testing`
        attribute.  For example::

            app.testing = True
            client = app.test_client()

        The test client can be used in a ``with`` block to defer the closing down
        of the context until the end of the ``with`` block.  This is useful if
        you want to access the context locals for testing::

            with app.test_client() as c:
                rv = c.get('/?vodka=42')
                assert request.args['vodka'] == '42'

        Additionally, you may pass optional keyword arguments that will then
        be passed to the application's :attr:`test_client_class` constructor.
        For example::

            from flask.testing import FlaskClient

            class CustomClient(FlaskClient):
                def __init__(self, *args, **kwargs):
                    self._authentication = kwargs.pop("authentication")
                    super(CustomClient,self).__init__( *args, **kwargs)

            app.test_client_class = CustomClient
            client = app.test_client(authentication='Basic ....')

        See :class:`~flask.testing.FlaskClient` for more information.

        .. versionchanged:: 0.4
           added support for ``with`` block usage for the client.

        .. versionadded:: 0.7
           The `use_cookies` parameter was added as well as the ability
           to override the client to be used by setting the
           :attr:`test_client_class` attribute.

        .. versionchanged:: 0.11
           Added `**kwargs` to support passing additional keyword arguments to
           the constructor of :attr:`test_client_class`.
        test_cli_runnerCreate a CLI runner for testing CLI commands.
        See :ref:`testing-cli`.

        Returns an instance of :attr:`test_cli_runner_class`, by default
        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is
        passed as the first argument.

        .. versionadded:: 1.0
        register_blueprintblueprintRegister a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.

        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.

        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.

        .. versionchanged:: 2.0.1
            The ``name`` option can be used to change the (pre-dotted)
            name the blueprint is registered with. This allows the same
            blueprint to be registered multiple times with unique names
            for ``url_for``.

        .. versionadded:: 0.7
        iter_blueprintsIterates over all blueprints by the order they were registered.

        .. versionadded:: 0.11
        RouteCallableruleprovide_automatic_optionsGETAllowed methods must be a list of strings, for example: @app.route(..., methods=["POST"])"Allowed methods must be a list of strings, for"' example: @app.route(..., methods=["POST"])'required_methodsOPTIONSview_functionsold_funcView function mapping is overwriting an existing endpoint function: "View function mapping is overwriting an existing"" endpoint function: "template_filterA decorator that is used to register custom template filter.
        You can specify a name for the filter, otherwise the function
        name will be used. Example::

          @app.template_filter()
          def reverse(s):
              return s[::-1]

        :param name: the optional name of the filter, otherwise the
                     function name will be used.
        add_template_filterRegister a custom template filter.  Works exactly like the
        :meth:`template_filter` decorator.

        :param name: the optional name of the filter, otherwise the
                     function name will be used.
        template_testA decorator that is used to register custom template test.
        You can specify a name for the test, otherwise the function
        name will be used. Example::

          @app.template_test()
          def is_prime(n):
              if n == 2:
                  return True
              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):
                  if n % i == 0:
                      return False
              return True

        .. versionadded:: 0.10

        :param name: the optional name of the test, otherwise the
                     function name will be used.
        add_template_testRegister a custom template test.  Works exactly like the
        :meth:`template_test` decorator.

        .. versionadded:: 0.10

        :param name: the optional name of the test, otherwise the
                     function name will be used.
        template_globalA decorator that is used to register a custom template global function.
        You can specify a name for the global function, otherwise the function
        name will be used. Example::

            @app.template_global()
            def double(n):
                return 2 * n

        .. versionadded:: 0.10

        :param name: the optional name of the global function, otherwise the
                     function name will be used.
        add_template_globalRegister a custom template global function. Works exactly like the
        :meth:`template_global` decorator.

        .. versionadded:: 0.10

        :param name: the optional name of the global function, otherwise the
                     function name will be used.
        teardown_appcontextRegisters a function to be called when the application
        context is popped. The application context is typically popped
        after the request context for each request, at the end of CLI
        commands, or after a manually pushed context ends.

        .. code-block:: python

            with app.app_context():
                ...

        When the ``with`` block exits (or ``ctx.pop()`` is called), the
        teardown functions are called just before the app context is
        made inactive. Since a request context typically also manages an
        application context it would also be called when you pop a
        request context.

        When a teardown function was called because of an unhandled
        exception it will be passed an error object. If an
        :meth:`errorhandler` is registered, it will handle the exception
        and the teardown will not receive it.

        Teardown functions must avoid raising exceptions. If they
        execute code that might fail they must surround that code with a
        ``try``/``except`` block and log any errors.

        The return values of teardown functions are ignored.

        .. versionadded:: 0.9
        shell_context_processorRegisters a shell context processor function.

        .. versionadded:: 0.11
        _find_error_handlerErrorHandlerCallableReturn a registered error handler for an exception in this order:
        blueprint handler for a specific code, app handler for a specific code,
        blueprint handler for an exception class, app handler for an exception
        class, or ``None`` if a suitable handler is not found.
        _get_exc_class_and_codeexc_classerror_handler_spechandler_maphandle_http_exceptionResponseReturnValueHandles an HTTP exception.  By default this will invoke the
        registered error handlers and fall back to returning the
        exception as response.

        .. versionchanged:: 1.0.3
            ``RoutingException``, used internally for actions such as
             slash redirects during routing, is not passed to error
             handlers.

        .. versionchanged:: 1.0
            Exceptions are looked up by code *and* by MRO, so
            ``HTTPException`` subclasses can be handled with a catch-all
            handler for the base ``HTTPException``.

        .. versionadded:: 0.3
        ensure_synctrap_http_exceptionChecks if an HTTP exception should be trapped or not.  By default
        this will return ``False`` for all exceptions except for a bad request
        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It
        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.

        This is called for all HTTP exceptions raised by a view function.
        If it returns ``True`` for any exception the error handler for this
        exception is not called and it shows up as regular exception in the
        traceback.  This is helpful for debugging implicitly raised HTTP
        exceptions.

        .. versionchanged:: 1.0
            Bad request errors are not trapped by default in debug mode.

        .. versionadded:: 0.8
        trap_bad_requesthandle_user_exceptionThis method is called whenever an exception occurs that
        should be handled. A special case is :class:`~werkzeug
        .exceptions.HTTPException` which is forwarded to the
        :meth:`handle_http_exception` method. This function will either
        return a response value or reraise the exception with the same
        traceback.

        .. versionchanged:: 1.0
            Key errors raised from request data like ``form`` show the
            bad key in debug mode rather than a generic bad request
            message.

        .. versionadded:: 0.7
        show_exceptionhandle_exceptionHandle an exception that did not have an error handler
        associated with it, or that was raised from an error handler.
        This always causes a 500 ``InternalServerError``.

        Always sends the :data:`got_request_exception` signal.

        If :data:`PROPAGATE_EXCEPTIONS` is ``True``, such as in debug
        mode, the error will be re-raised so that the debugger can
        display it. Otherwise, the original exception is logged, and
        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.

        If an error handler is registered for ``InternalServerError`` or
        ``500``, it will be used. For consistency, the handler will
        always receive the ``InternalServerError``. The original
        unhandled exception is available as ``e.original_exception``.

        .. versionchanged:: 1.1.0
            Always passes the ``InternalServerError`` instance to the
            handler, setting ``original_exception`` to the unhandled
            error.

        .. versionchanged:: 1.1.0
            ``after_request`` functions and other finalization is done
            even for the default 500 response when there is no handler.

        .. versionadded:: 0.3
        _async_wrapperlog_exceptionserver_errororiginal_exceptionfinalize_requestfrom_error_handlerLogs an exception.  This is called by :meth:`handle_exception`
        if debugging is disabled and right before the handler is called.
        The default implementation logs the exception as error on the
        :attr:`logger`.

        .. versionadded:: 0.8
        Exception on  [raise_routing_exceptionNoReturnIntercept routing exceptions and possibly do something else.

        In debug mode, intercept a routing redirect and replace it with
        an error if the body will be discarded.

        With modern Werkzeug this shouldn't occur, since it now uses a
        308 status which tells the browser to resend the method and
        body.

        .. versionchanged:: 2.1
            Don't intercept 307 and 308 redirects.

        :meta private:
        :internal:
        routing_exceptionHEADdebughelpersFormDataRoutingRedirectdispatch_requestDoes the request dispatching.  Matches the URL and returns the
        return value of the view or error handler.  This does not have to
        be a response object.  In order to convert the return value to a
        proper response object, call :func:`make_response`.

        .. versionchanged:: 0.7
           This no longer does the exception handling, this code was
           moved to the new :meth:`full_dispatch_request`.
        url_rulemake_default_options_responseview_argsfull_dispatch_requestDispatches the request and on top of that performs request
        pre and postprocessing as well as HTTP exception catching and
        error handling.

        .. versionadded:: 0.7
        preprocess_requestGiven the return value from a view function this finalizes
        the request by converting it into a response and invoking the
        postprocessing functions.  This is invoked for both normal
        request dispatching as well as error handlers.

        Because this means that it might be called as a result of a
        failure a special safe mode is available which can be enabled
        with the `from_error_handler` flag.  If enabled, failures in
        response processing will be logged and otherwise ignored.

        :internal:
        process_responseRequest finalizing failed with an error while handling an errorThis method is called to create the default ``OPTIONS`` response.
        This can be changed through subclassing to change the default
        behavior of ``OPTIONS`` responses.

        .. versionadded:: 0.7
        url_adapteradapterallowed_methodsallowshould_ignore_errorThis is called to figure out if an error should be ignored
        or not as far as the teardown system is concerned.  If this
        function returns ``True`` then the teardown handlers will not be
        passed the error.

        .. versionadded:: 0.10
        Ensure that the function is synchronous for WSGI workers.
        Plain ``def`` functions are returned as-is. ``async def``
        functions are wrapped to run and wait for the response.

        Override this method to change how the app runs async views.

        .. versionadded:: 2.0
        async_to_syncReturn a sync function that will run the coroutine function.

        .. code-block:: python

            result = app.async_to_sync(func)(*args, **kwargs)

        Override this method to change how the app converts async code
        to be synchronously callable.

        .. versionadded:: 2.0
        asgiref.syncasgiref_async_to_syncInstall Flask with the 'async' extra in order to use async views._anchor_method_scheme_externalGenerate a URL to the given endpoint with the given values.

        This is called by :func:`flask.url_for`, and can be called
        directly as well.

        An *endpoint* is the name of a URL rule, usually added with
        :meth:`@app.route() <route>`, and usually the same name as the
        view function. A route defined in a :class:`~flask.Blueprint`
        will prepend the blueprint's name separated by a ``.`` to the
        endpoint.

        In some cases, such as email messages, you want URLs to include
        the scheme and domain, like ``https://example.com/hello``. When
        not in an active request, URLs will be external by default, but
        this requires setting :data:`SERVER_NAME` so Flask knows what
        domain to use. :data:`APPLICATION_ROOT` and
        :data:`PREFERRED_URL_SCHEME` should also be configured as
        needed. This config is only used when not in an active request.

        Functions can be decorated with :meth:`url_defaults` to modify
        keyword arguments before the URL is built.

        If building fails for some reason, such as an unknown endpoint
        or incorrect values, the app's :meth:`handle_url_build_error`
        method is called. If that returns a string, that is returned,
        otherwise a :exc:`~werkzeug.routing.BuildError` is raised.

        :param endpoint: The endpoint name associated with the URL to
            generate. If this starts with a ``.``, the current blueprint
            name (if any) will be used.
        :param _anchor: If given, append this as ``#anchor`` to the URL.
        :param _method: If given, generate the URL associated with this
            method for the endpoint.
        :param _scheme: If given, the URL will have this scheme if it
            is external.
        :param _external: If given, prefer the URL to be internal
            (False) or require it to be external (True). External URLs
            include the scheme and domain. When not in an active
            request, URLs are external by default.
        :param values: Values to use for the variable parts of the URL
            rule. Unknown keys are appended as query string arguments,
            like ``?a=b&c=d``.

        .. versionadded:: 2.2
            Moved from ``flask.url_for``, which calls this method.
        req_ctxblueprint_nameapp_ctxcreate_url_adapterUnable to build URLs outside an active request without 'SERVER_NAME' configured. Also configure 'APPLICATION_ROOT' and 'PREFERRED_URL_SCHEME' as needed."Unable to build URLs outside an active request"" without 'SERVER_NAME' configured. Also configure"" 'APPLICATION_ROOT' and 'PREFERRED_URL_SCHEME' as"" needed."When specifying '_scheme', '_external' must be True.inject_url_defaultsbuildurl_schemeforce_externalhandle_url_build_error%!#$&'()*+,/:;=?@Create a redirect response object.

        This is called by :func:`flask.redirect`, and can be called
        directly as well.

        :param location: The URL to redirect to.
        :param code: The status code for the redirect.

        .. versionadded:: 2.2
            Moved from ``flask.redirect``, which calls this method.
        Convert the return value from a view function to an instance of
        :attr:`response_class`.

        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:

            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.

            ``bytes``
                A response object is created with the bytes as the body.

            ``dict``
                A dictionary that will be jsonify'd before being returned.

            ``list``
                A list that will be jsonify'd before being returned.

            ``generator`` or ``iterator``
                A generator that returns ``str`` or ``bytes`` to be
                streamed as the response.

            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.

            :attr:`response_class`
                The object is returned unchanged.

            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.

            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.

        .. versionchanged:: 2.2
            A generator will be converted to a streaming response.
            A list will be converted to a JSON response.

        .. versionchanged:: 1.1
            A dict will be converted to a JSON response.

        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        len_rvThe view function did not return a valid response tuple. The tuple must have the form (body, status, headers), (body, status), or (body, headers)."The view function did not return a valid response tuple."" The tuple must have the form (body, status, headers),"" (body, status), or (body, headers)."The view function for  did not return a valid response. The function either returned None or ended without a return statement." did not"" return a valid response. The function either returned"" None or ended without a return statement."force_type
The view function did not return a valid response. The return type must be a string, dict, list, tuple with headers or status, Response instance, or WSGI callable, but it was a "\nThe view function did not return a valid"" response. The return type must be a string,"" dict, list, tuple with headers or status,"" Response instance, or WSGI callable, but it"" was a "The view function did not return a valid response. The return type must be a string, dict, list, tuple with headers or status, Response instance, or WSGI callable, but it was a "The view function did not return a valid"" Response instance, or WSGI callable, but it was a"status_codeCreates a URL adapter for the given request. The URL adapter
        is created at a point where the request context is not yet set
        up so the request is passed explicitly.

        .. versionadded:: 0.6

        .. versionchanged:: 0.9
           This can now also be called without a request object when the
           URL adapter is created for the application context.

        .. versionchanged:: 1.0
            :data:`SERVER_NAME` no longer implicitly enables subdomain
            matching. Use :attr:`subdomain_matching` instead.
        default_subdomainsubdomainbind_to_environscript_nameInjects the URL defaults for the given endpoint directly into
        the values dictionary passed.  This is used internally and
        automatically called on URL building.

        .. versionadded:: 0.7
        url_default_functionsCalled by :meth:`.url_for` if a
        :exc:`~werkzeug.routing.BuildError` was raised. If this returns
        a value, it will be returned by ``url_for``, otherwise the error
        will be re-raised.

        Each function in :attr:`url_build_error_handlers` is called with
        ``error``, ``endpoint`` and ``values``. If a function returns
        ``None`` or raises a ``BuildError``, it is skipped. Otherwise,
        its return value is returned by ``url_for``.

        :param error: The active ``BuildError`` being handled.
        :param endpoint: The endpoint being built.
        :param values: The keyword arguments passed to ``url_for``.
        Called before the request is dispatched. Calls
        :attr:`url_value_preprocessors` registered with the app and the
        current blueprint (if any). Then calls :attr:`before_request_funcs`
        registered with the app and the blueprint.

        If any :meth:`before_request` handler returns a non-None value, the
        value is handled as if it was the return value from the view, and
        further request handling is stopped.
        url_value_preprocessorsurl_funcbefore_request_funcsbefore_funcCan be overridden in order to modify the response object
        before it's sent to the WSGI server.  By default this will
        call all the :meth:`after_request` decorated functions.

        .. versionchanged:: 0.5
           As of Flask 0.5 the functions registered for after request
           execution are called in reverse order of registration.

        :param response: a :attr:`response_class` object.
        :return: a new response object or the same, has to be an
                 instance of :attr:`response_class`.
        _get_current_object_after_request_functionsafter_request_funcsis_null_sessionsave_sessiondo_teardown_requestCalled after the request is dispatched and the response is
        returned, right before the request context is popped.

        This calls all functions decorated with
        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`
        if a blueprint handled the request. Finally, the
        :data:`request_tearing_down` signal is sent.

        This is called by
        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,
        which may be delayed during testing to maintain access to
        resources.

        :param exc: An unhandled exception raised while dispatching the
            request. Detected from the current exception information if
            not passed. Passed to each teardown function.

        .. versionchanged:: 0.9
            Added the ``exc`` argument.
        teardown_request_funcsdo_teardown_appcontextCalled right before the application context is popped.

        When handling a request, the application context is popped
        after the request context. See :meth:`do_teardown_request`.

        This calls all functions decorated with
        :meth:`teardown_appcontext`. Then the
        :data:`appcontext_tearing_down` signal is sent.

        This is called by
        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.

        .. versionadded:: 0.9
        app_contextCreate an :class:`~flask.ctx.AppContext`. Use as a ``with``
        block to push the context, which will make :data:`current_app`
        point at this application.

        An application context is automatically pushed by
        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`
        when handling a request, and when running a CLI command. Use
        this to manually create a context outside of these situations.

        ::

            with app.app_context():
                init_db()

        See :doc:`/appcontext`.

        .. versionadded:: 0.9
        request_contextCreate a :class:`~flask.ctx.RequestContext` representing a
        WSGI environment. Use a ``with`` block to push the context,
        which will make :data:`request` point at this request.

        See :doc:`/reqcontext`.

        Typically you should not call this from your own code. A request
        context is automatically pushed by the :meth:`wsgi_app` when
        handling a request. Use :meth:`test_request_context` to create
        an environment and context instead of this method.

        :param environ: a WSGI environment
        test_request_contextCreate a :class:`~flask.ctx.RequestContext` for a WSGI
        environment created from the given values. This is mostly useful
        during testing, where you may want to run a function that uses
        request data without dispatching a full request.

        See :doc:`/reqcontext`.

        Use a ``with`` block to push the context, which will make
        :data:`request` point at the request for the created
        environment. ::

            with app.test_request_context(...):
                generate_report()

        When using the shell, it may be easier to push and pop the
        context manually to avoid indentation. ::

            ctx = app.test_request_context(...)
            ctx.push()
            ...
            ctx.pop()

        Takes the same arguments as Werkzeug's
        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from
        the application. See the linked Werkzeug docs for most of the
        available arguments. Flask-specific behavior is listed here.

        :param path: URL path being requested.
        :param base_url: Base URL where the app is being served, which
            ``path`` is relative to. If not given, built from
            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,
            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.
        :param subdomain: Subdomain name to append to
            :data:`SERVER_NAME`.
        :param url_scheme: Scheme to use instead of
            :data:`PREFERRED_URL_SCHEME`.
        :param data: The request body, either as a string or a dict of
            form keys and values.
        :param json: If given, this is serialized as JSON and passed as
            ``data``. Also defaults ``content_type`` to
            ``application/json``.
        :param args: other positional arguments passed to
            :class:`~werkzeug.test.EnvironBuilder`.
        :param kwargs: other keyword arguments passed to
            :class:`~werkzeug.test.EnvironBuilder`.
        EnvironBuilderbuilderget_environwsgi_appThe actual WSGI application. This is not implemented in
        :meth:`__call__` so that middlewares can be applied without
        losing a reference to the app object. Instead of doing this::

            app = MyMiddleware(app)

        It's a better idea to do this instead::

            app.wsgi_app = MyMiddleware(app.wsgi_app)

        Then you still have the original application object around and
        can continue to call methods on it.

        .. versionchanged:: 0.7
            Teardown events for the request and app contexts are called
            even if an unhandled error occurs. Other events may not be
            called depending on when an error occurs during dispatch.
            See :ref:`callbacks-and-errors`.

        :param environ: A WSGI environment.
        :param start_response: A callable accepting a status code,
            a list of headers, and an optional exception context to
            start the response.
        pushThe WSGI server calls the Flask application object as the
        WSGI application. This calls :meth:`wsgi_app`, which can be
        wrapped to apply middleware.
        #: The class that is used for request objects.  See :class:`~flask.Request`#: for more information.#: The class that is used for response objects.  See#: :class:`~flask.Response` for more information.#: The class of the object assigned to :attr:`aborter`, created by#: :meth:`create_aborter`. That object is called by#: :func:`flask.abort` to raise HTTP errors, and can be#: called directly as well.#:#: Defaults to :class:`werkzeug.exceptions.Aborter`.#: .. versionadded:: 2.2#: The class that is used for the Jinja environment.#: .. versionadded:: 0.11#: The class that is used for the :data:`~flask.g` instance.#: Example use cases for a custom class:#: 1. Store arbitrary attributes on flask.g.#: 2. Add a property for lazy per-request database connectors.#: 3. Return None instead of AttributeError on unexpected attributes.#: 4. Raise exception if an unexpected attr is set, a "controlled" flask.g.#: In Flask 0.9 this property was called `request_globals_class` but it#: was changed in 0.10 to :attr:`app_ctx_globals_class` because the#: flask.g object is now application context scoped.#: .. versionadded:: 0.10#: The class that is used for the ``config`` attribute of this app.#: Defaults to :class:`~flask.Config`.#: 1. Default values for certain config options.#: 2. Access to config values through attributes in addition to keys.#: The testing flag.  Set this to ``True`` to enable the test mode of#: Flask extensions (and in the future probably also Flask itself).#: For example this might activate test helpers that have an#: additional runtime cost which should not be enabled by default.#: If this is enabled and PROPAGATE_EXCEPTIONS is not changed from the#: default it's implicitly enabled.#: This attribute can also be configured from the config with the#: ``TESTING`` configuration key.  Defaults to ``False``.#: If a secret key is set, cryptographic components can use this to#: sign cookies and other things. Set this to a complex random value#: when you want to use the secure cookie for instance.#: :data:`SECRET_KEY` configuration key. Defaults to ``None``.#: A :class:`~datetime.timedelta` which is used to set the expiration#: date of a permanent session.  The default is 31 days which makes a#: permanent session survive for roughly one month.#: ``PERMANENT_SESSION_LIFETIME`` configuration key.  Defaults to#: ``timedelta(days=31)``#: Options that are passed to the Jinja environment in#: :meth:`create_jinja_environment`. Changing these options after#: the environment is created (accessing :attr:`jinja_env`) will#: have no effect.#: .. versionchanged:: 1.1.0#:     This is a ``dict`` instead of an ``ImmutableDict`` to allow#:     easier configuration.#: Default configuration parameters.#: The rule object to use for URL rules created.  This is used by#: :meth:`add_url_rule`.  Defaults to :class:`werkzeug.routing.Rule`.#: .. versionadded:: 0.7#: The map object to use for storing the URL rules and routing#: configuration parameters. Defaults to :class:`werkzeug.routing.Map`.#: .. versionadded:: 1.1.0#: The :meth:`test_client` method creates an instance of this test#: client class. Defaults to :class:`~flask.testing.FlaskClient`.#: The :class:`~click.testing.CliRunner` subclass, by default#: :class:`~flask.testing.FlaskCliRunner` that is used by#: :meth:`test_cli_runner`. Its ``__init__`` method should take a#: Flask app object as the first argument.#: .. versionadded:: 1.0#: the session interface to use.  By default an instance of#: :class:`~flask.sessions.SecureCookieSessionInterface` is used here.#: .. versionadded:: 0.8#: Holds the path to the instance folder.#: The configuration dictionary as :class:`Config`.  This behaves#: exactly like a regular dictionary but supports additional methods#: to load a config from files.#: An instance of :attr:`aborter_class` created by#: :meth:`make_aborter`. This is called by :func:`flask.abort`#: to raise HTTP errors, and can be called directly as well.#:     Moved from ``flask.abort``, which calls this object.#: A list of functions that are called by#: :meth:`handle_url_build_error` when :meth:`.url_for` raises a#: :exc:`~werkzeug.routing.BuildError`. Each function is called#: with ``error``, ``endpoint`` and ``values``. If a function#: returns ``None`` or raises a ``BuildError``, it is skipped.#: Otherwise, its return value is returned by ``url_for``.#: .. versionadded:: 0.9#: A list of functions that are called when the application context#: is destroyed.  Since the application context is also torn down#: if the request ends this is the place to store code that disconnects#: from databases.#: A list of shell context processor functions that should be run#: when a shell context is created.#: Maps registered blueprint names to blueprint objects. The#: dict retains the order the blueprints were registered in.#: Blueprints can be registered multiple times, this dict does#: not track how often they were attached.#: a place where extensions can store application specific state.  For#: example this is where an extension could store database engines and#: similar things.#: The key must match the name of the extension module. For example in#: case of a "Flask-Foo" extension in `flask_foo`, the key would be#: ``'foo'``.#: The :class:`~werkzeug.routing.Map` for this instance.  You can use#: this to change the routing converters after the class was created#: but before any routes are connected.  Example::#:    from werkzeug.routing import BaseConverter#:    class ListConverter(BaseConverter):#:        def to_python(self, value):#:            return value.split(',')#:        def to_url(self, values):#:            return ','.join(super(ListConverter, self).to_url(value)#:                            for value in values)#:    app = Flask(__name__)#:    app.url_map.converters['list'] = ListConverter# tracks internally if the application already handled at least one# request.# Add a static route using the provided static_url_path, static_host,# and static_folder if there is a configured static_folder.# Note we do this without checking if static_folder exists.# For one, it might be created while the server is running (e.g. during# development). Also, Google App Engine stores static files somewhere# Use a weakref to avoid creating a reference cycle between the app# and the view function (see #3761).# type: ignore # noqa: B950# Set the name of the Click group in case someone wants to add# the app's commands to another CLI tool.# request, session and g are normally added with the# context processor for efficiency reasons but for imported# templates we also want the proxies in there.# A template may be rendered outside a request context.# The values passed to render_template take precedence. Keep a# copy to re-apply after all context functions.# Ignore this call so that it doesn't start another server if# the 'flask run' command is used.# if set, env var overrides existing value# debug passed to method overrides all other sources# reset the first request information if the development server# reset normally.  This makes it possible to restart the server# without reloader and that stuff from an interactive shell.# if the methods are not given and the view_func object knows its# methods we can use that instead.  If neither exists, we go with# a tuple of only ``GET`` as default.# Methods that should always be added# starting with Flask 0.8 the view_func object can disable and# force-enable the automatic options handling.# Add the required methods now.# Proxy exceptions don't have error codes.  We want to always return# those unchanged as errors# RoutingExceptions are used internally to trigger routing# actions, such as slash redirects raising RequestRedirect. They# are not raised or handled in user code.# if unset, trap key errors in debug mode# Re-raise if called with an active exception, otherwise# raise the passed in exception.# type: ignore[assignment]# if we provide automatic options for this URL and the# request came with the OPTIONS method, reply automatically# otherwise dispatch to the handler for that endpoint# type: ignore[union-attr]# If the endpoint starts with "." and the request matches a# blueprint, the endpoint is relative to the blueprint.# When in a request, generate a URL without scheme and# domain by default, unless a scheme is given.# If called by helpers.url_for, an app context is active,# use its url_adapter. Otherwise, app.url_for was called# directly, build an adapter.# When outside a request, generate a URL with scheme and# domain by default.# It is an error to set _scheme when _external=False, in order# to avoid accidental insecure URLs.# unpack tuple returns# a 3-tuple is unpacked directly# type: ignore[misc]# decide if a 2-tuple has status or headers# type: ignore[assignment,misc]# other sized tuples are not allowed# the body must not be None# make sure the body is an instance of the response class# let the response class set the status and headers instead of# waiting to do it manually, so that the class can handle any# special logic# evaluate a WSGI callable, or coerce a different response# class to the correct type# prefer the status if it was provided# extend existing headers with provided headers# If subdomain matching is disabled (the default), use the# default subdomain in all cases. This should be the default# in Werkzeug but it currently does not have that feature.# We need at the very least the server name to be set for this# to work.# url_for may be called outside a request context, parse the# passed endpoint instead of using request.blueprints.# make error available outside except block# Re-raise if called with an active exception, otherwise raise# the passed in exception.# noqa: B001b'T_shell_context_processor'u'T_shell_context_processor'b'T_teardown'u'T_teardown'b'T_template_filter'u'T_template_filter'b'T_template_global'u'T_template_global'b'T_template_test'u'T_template_test'b'The flask object implements a WSGI application and acts as the central
    object.  It is passed the name of the module or package of the
    application.  Once it is created it will act as a central registry for
    the view functions, the URL rules, template configuration and much more.

    The name of the package is used to resolve resources from inside the
    package or the folder the module is contained in depending on if the
    package parameter resolves to an actual python package (a folder with
    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).

    For more information about resource loading, see :func:`open_resource`.

    Usually you create a :class:`Flask` instance in your main module or
    in the :file:`__init__.py` file of your package like this::

        from flask import Flask
        app = Flask(__name__)

    .. admonition:: About the First Parameter

        The idea of the first parameter is to give Flask an idea of what
        belongs to your application.  This name is used to find resources
        on the filesystem, can be used by extensions to improve debugging
        information and a lot more.

        So it's important what you provide there.  If you are using a single
        module, `__name__` is always the correct value.  If you however are
        using a package, it's usually recommended to hardcode the name of
        your package there.

        For example if your application is defined in :file:`yourapplication/app.py`
        you should create it with one of the two versions below::

            app = Flask('yourapplication')
            app = Flask(__name__.split('.')[0])

        Why is that?  The application will work even with `__name__`, thanks
        to how resources are looked up.  However it will make debugging more
        painful.  Certain extensions can make assumptions based on the
        import name of your application.  For example the Flask-SQLAlchemy
        extension will look for the code in your application that triggered
        an SQL query in debug mode.  If the import name is not properly set
        up, that debugging information is lost.  (For example it would only
        pick up SQL queries in `yourapplication.app` and not
        `yourapplication.views.frontend`)

    .. versionadded:: 0.7
       The `static_url_path`, `static_folder`, and `template_folder`
       parameters were added.

    .. versionadded:: 0.8
       The `instance_path` and `instance_relative_config` parameters were
       added.

    .. versionadded:: 0.11
       The `root_path` parameter was added.

    .. versionadded:: 1.0
       The ``host_matching`` and ``static_host`` parameters were added.

    .. versionadded:: 1.0
       The ``subdomain_matching`` parameter was added. Subdomain
       matching needs to be enabled manually now. Setting
       :data:`SERVER_NAME` does not implicitly enable it.

    :param import_name: the name of the application package
    :param static_url_path: can be used to specify a different path for the
                            static files on the web.  Defaults to the name
                            of the `static_folder` folder.
    :param static_folder: The folder with static files that is served at
        ``static_url_path``. Relative to the application ``root_path``
        or an absolute path. Defaults to ``'static'``.
    :param static_host: the host to use when adding the static route.
        Defaults to None. Required when using ``host_matching=True``
        with a ``static_folder`` configured.
    :param host_matching: set ``url_map.host_matching`` attribute.
        Defaults to False.
    :param subdomain_matching: consider the subdomain relative to
        :data:`SERVER_NAME` when matching routes. Defaults to False.
    :param template_folder: the folder that contains the templates that should
                            be used by the application.  Defaults to
                            ``'templates'`` folder in the root path of the
                            application.
    :param instance_path: An alternative instance path for the application.
                          By default the folder ``'instance'`` next to the
                          package or module is assumed to be the instance
                          path.
    :param instance_relative_config: if set to ``True`` relative filenames
                                     for loading the config are assumed to
                                     be relative to the instance path instead
                                     of the application root.
    :param root_path: The path to the root of the application files.
        This should only be set manually when it can't be detected
        automatically, such as for namespace packages.
    'u'The flask object implements a WSGI application and acts as the central
    object.  It is passed the name of the module or package of the
    application.  Once it is created it will act as a central registry for
    the view functions, the URL rules, template configuration and much more.

    The name of the package is used to resolve resources from inside the
    package or the folder the module is contained in depending on if the
    package parameter resolves to an actual python package (a folder with
    an :file:`__init__.py` file inside) or a standard module (just a ``.py`` file).

    For more information about resource loading, see :func:`open_resource`.

    Usually you create a :class:`Flask` instance in your main module or
    in the :file:`__init__.py` file of your package like this::

        from flask import Flask
        app = Flask(__name__)

    .. admonition:: About the First Parameter

        The idea of the first parameter is to give Flask an idea of what
        belongs to your application.  This name is used to find resources
        on the filesystem, can be used by extensions to improve debugging
        information and a lot more.

        So it's important what you provide there.  If you are using a single
        module, `__name__` is always the correct value.  If you however are
        using a package, it's usually recommended to hardcode the name of
        your package there.

        For example if your application is defined in :file:`yourapplication/app.py`
        you should create it with one of the two versions below::

            app = Flask('yourapplication')
            app = Flask(__name__.split('.')[0])

        Why is that?  The application will work even with `__name__`, thanks
        to how resources are looked up.  However it will make debugging more
        painful.  Certain extensions can make assumptions based on the
        import name of your application.  For example the Flask-SQLAlchemy
        extension will look for the code in your application that triggered
        an SQL query in debug mode.  If the import name is not properly set
        up, that debugging information is lost.  (For example it would only
        pick up SQL queries in `yourapplication.app` and not
        `yourapplication.views.frontend`)

    .. versionadded:: 0.7
       The `static_url_path`, `static_folder`, and `template_folder`
       parameters were added.

    .. versionadded:: 0.8
       The `instance_path` and `instance_relative_config` parameters were
       added.

    .. versionadded:: 0.11
       The `root_path` parameter was added.

    .. versionadded:: 1.0
       The ``host_matching`` and ``static_host`` parameters were added.

    .. versionadded:: 1.0
       The ``subdomain_matching`` parameter was added. Subdomain
       matching needs to be enabled manually now. Setting
       :data:`SERVER_NAME` does not implicitly enable it.

    :param import_name: the name of the application package
    :param static_url_path: can be used to specify a different path for the
                            static files on the web.  Defaults to the name
                            of the `static_folder` folder.
    :param static_folder: The folder with static files that is served at
        ``static_url_path``. Relative to the application ``root_path``
        or an absolute path. Defaults to ``'static'``.
    :param static_host: the host to use when adding the static route.
        Defaults to None. Required when using ``host_matching=True``
        with a ``static_folder`` configured.
    :param host_matching: set ``url_map.host_matching`` attribute.
        Defaults to False.
    :param subdomain_matching: consider the subdomain relative to
        :data:`SERVER_NAME` when matching routes. Defaults to False.
    :param template_folder: the folder that contains the templates that should
                            be used by the application.  Defaults to
                            ``'templates'`` folder in the root path of the
                            application.
    :param instance_path: An alternative instance path for the application.
                          By default the folder ``'instance'`` next to the
                          package or module is assumed to be the instance
                          path.
    :param instance_relative_config: if set to ``True`` relative filenames
                                     for loading the config are assumed to
                                     be relative to the instance path instead
                                     of the application root.
    :param root_path: The path to the root of the application files.
        This should only be set manually when it can't be detected
        automatically, such as for namespace packages.
    'b'TESTING'u'TESTING'b'SECRET_KEY'u'SECRET_KEY'b'PERMANENT_SESSION_LIFETIME'u'PERMANENT_SESSION_LIFETIME'b'A subclass of :class:`~flask.json.provider.JSONProvider`. An
    instance is created and assigned to :attr:`app.json` when creating
    the app.

    The default, :class:`~flask.json.provider.DefaultJSONProvider`, uses
    Python's built-in :mod:`json` library. A different provider can use
    a different JSON library.

    .. versionadded:: 2.2
    'u'A subclass of :class:`~flask.json.provider.JSONProvider`. An
    instance is created and assigned to :attr:`app.json` when creating
    the app.

    The default, :class:`~flask.json.provider.DefaultJSONProvider`, uses
    Python's built-in :mod:`json` library. A different provider can use
    a different JSON library.

    .. versionadded:: 2.2
    'b'PROPAGATE_EXCEPTIONS'u'PROPAGATE_EXCEPTIONS'b'USE_X_SENDFILE'u'USE_X_SENDFILE'b'SERVER_NAME'u'SERVER_NAME'b'APPLICATION_ROOT'u'APPLICATION_ROOT'b'session'u'session'b'SESSION_COOKIE_NAME'u'SESSION_COOKIE_NAME'b'SESSION_COOKIE_DOMAIN'u'SESSION_COOKIE_DOMAIN'b'SESSION_COOKIE_PATH'u'SESSION_COOKIE_PATH'b'SESSION_COOKIE_SECURE'u'SESSION_COOKIE_SECURE'b'SESSION_COOKIE_SAMESITE'u'SESSION_COOKIE_SAMESITE'b'SESSION_REFRESH_EACH_REQUEST'u'SESSION_REFRESH_EACH_REQUEST'b'MAX_CONTENT_LENGTH'u'MAX_CONTENT_LENGTH'b'SEND_FILE_MAX_AGE_DEFAULT'u'SEND_FILE_MAX_AGE_DEFAULT'b'TRAP_BAD_REQUEST_ERRORS'u'TRAP_BAD_REQUEST_ERRORS'b'TRAP_HTTP_EXCEPTIONS'u'TRAP_HTTP_EXCEPTIONS'b'EXPLAIN_TEMPLATE_LOADING'u'EXPLAIN_TEMPLATE_LOADING'b'http'b'PREFERRED_URL_SCHEME'u'PREFERRED_URL_SCHEME'b'TEMPLATES_AUTO_RELOAD'u'TEMPLATES_AUTO_RELOAD'b'MAX_COOKIE_SIZE'u'MAX_COOKIE_SIZE'b'static'u'static'b'templates'u'templates'b'If an instance path is provided it must be absolute. A relative path was given instead.'u'If an instance path is provided it must be absolute. A relative path was given instead.'b'Provides access to JSON methods. Functions in ``flask.json``
        will call methods on this provider when the application context
        is active. Used for handling JSON requests and responses.

        An instance of :attr:`json_provider_class`. Can be customized by
        changing that attribute on a subclass, or by assigning to this
        attribute afterwards.

        The default, :class:`~flask.json.provider.DefaultJSONProvider`,
        uses Python's built-in :mod:`json` library. A different provider
        can use a different JSON library.

        .. versionadded:: 2.2
        'u'Provides access to JSON methods. Functions in ``flask.json``
        will call methods on this provider when the application context
        is active. Used for handling JSON requests and responses.

        An instance of :attr:`json_provider_class`. Can be customized by
        changing that attribute on a subclass, or by assigning to this
        attribute afterwards.

        The default, :class:`~flask.json.provider.DefaultJSONProvider`,
        uses Python's built-in :mod:`json` library. A different provider
        can use a different JSON library.

        .. versionadded:: 2.2
        'b'Invalid static_host/host_matching combination'u'Invalid static_host/host_matching combination'b'/<path:filename>'u'/<path:filename>'b'The setup method ''u'The setup method ''b'' can no longer be called on the application. It has already handled its first request, any changes will not be applied consistently.
Make sure all imports, decorators, functions, etc. needed to set up the application are done before running it.'u'' can no longer be called on the application. It has already handled its first request, any changes will not be applied consistently.
Make sure all imports, decorators, functions, etc. needed to set up the application are done before running it.'b'The name of the application.  This is usually the import name
        with the difference that it's guessed from the run file if the
        import name is main.  This name is used as a display name when
        Flask needs the name of the application.  It can be set and overridden
        to change the value.

        .. versionadded:: 0.8
        'u'The name of the application.  This is usually the import name
        with the difference that it's guessed from the run file if the
        import name is main.  This name is used as a display name when
        Flask needs the name of the application.  It can be set and overridden
        to change the value.

        .. versionadded:: 0.8
        'b'A standard Python :class:`~logging.Logger` for the app, with
        the same name as :attr:`name`.

        In debug mode, the logger's :attr:`~logging.Logger.level` will
        be set to :data:`~logging.DEBUG`.

        If there are no handlers configured, a default handler will be
        added. See :doc:`/logging` for more information.

        .. versionchanged:: 1.1.0
            The logger takes the same name as :attr:`name` rather than
            hard-coding ``"flask.app"``.

        .. versionchanged:: 1.0.0
            Behavior was simplified. The logger is always named
            ``"flask.app"``. The level is only set during configuration,
            it doesn't check ``app.debug`` each time. Only one format is
            used, not different ones depending on ``app.debug``. No
            handlers are removed, and a handler is only added if no
            handlers are already configured.

        .. versionadded:: 0.3
        'u'A standard Python :class:`~logging.Logger` for the app, with
        the same name as :attr:`name`.

        In debug mode, the logger's :attr:`~logging.Logger.level` will
        be set to :data:`~logging.DEBUG`.

        If there are no handlers configured, a default handler will be
        added. See :doc:`/logging` for more information.

        .. versionchanged:: 1.1.0
            The logger takes the same name as :attr:`name` rather than
            hard-coding ``"flask.app"``.

        .. versionchanged:: 1.0.0
            Behavior was simplified. The logger is always named
            ``"flask.app"``. The level is only set during configuration,
            it doesn't check ``app.debug`` each time. Only one format is
            used, not different ones depending on ``app.debug``. No
            handlers are removed, and a handler is only added if no
            handlers are already configured.

        .. versionadded:: 0.3
        'b'The Jinja environment used to load templates.

        The environment is created the first time this property is
        accessed. Changing :attr:`jinja_options` after that will have no
        effect.
        'u'The Jinja environment used to load templates.

        The environment is created the first time this property is
        accessed. Changing :attr:`jinja_options` after that will have no
        effect.
        'b'This attribute is set to ``True`` if the application started
        handling the first request.

        .. deprecated:: 2.3
            Will be removed in Flask 2.4.

        .. versionadded:: 0.8
        'u'This attribute is set to ``True`` if the application started
        handling the first request.

        .. deprecated:: 2.3
            Will be removed in Flask 2.4.

        .. versionadded:: 0.8
        'b''got_first_request' is deprecated and will be removed in Flask 2.4.'u''got_first_request' is deprecated and will be removed in Flask 2.4.'b'Used to create the config attribute by the Flask constructor.
        The `instance_relative` parameter is passed in from the constructor
        of Flask (there named `instance_relative_config`) and indicates if
        the config should be relative to the instance path or the root path
        of the application.

        .. versionadded:: 0.8
        'u'Used to create the config attribute by the Flask constructor.
        The `instance_relative` parameter is passed in from the constructor
        of Flask (there named `instance_relative_config`) and indicates if
        the config should be relative to the instance path or the root path
        of the application.

        .. versionadded:: 0.8
        'b'Create the object to assign to :attr:`aborter`. That object
        is called by :func:`flask.abort` to raise HTTP errors, and can
        be called directly as well.

        By default, this creates an instance of :attr:`aborter_class`,
        which defaults to :class:`werkzeug.exceptions.Aborter`.

        .. versionadded:: 2.2
        'u'Create the object to assign to :attr:`aborter`. That object
        is called by :func:`flask.abort` to raise HTTP errors, and can
        be called directly as well.

        By default, this creates an instance of :attr:`aborter_class`,
        which defaults to :class:`werkzeug.exceptions.Aborter`.

        .. versionadded:: 2.2
        'b'Tries to locate the instance path if it was not provided to the
        constructor of the application class.  It will basically calculate
        the path to a folder named ``instance`` next to your main file or
        the package.

        .. versionadded:: 0.8
        'u'Tries to locate the instance path if it was not provided to the
        constructor of the application class.  It will basically calculate
        the path to a folder named ``instance`` next to your main file or
        the package.

        .. versionadded:: 0.8
        'b'instance'u'instance'b'var'u'var'b'-instance'u'-instance'b'Opens a resource from the application's instance folder
        (:attr:`instance_path`).  Otherwise works like
        :meth:`open_resource`.  Instance resources can also be opened for
        writing.

        :param resource: the name of the resource.  To access resources within
                         subfolders use forward slashes as separator.
        :param mode: resource file opening mode, default is 'rb'.
        'u'Opens a resource from the application's instance folder
        (:attr:`instance_path`).  Otherwise works like
        :meth:`open_resource`.  Instance resources can also be opened for
        writing.

        :param resource: the name of the resource.  To access resources within
                         subfolders use forward slashes as separator.
        :param mode: resource file opening mode, default is 'rb'.
        'b'Create the Jinja environment based on :attr:`jinja_options`
        and the various Jinja-related methods of the app. Changing
        :attr:`jinja_options` after this will have no effect. Also adds
        Flask-related globals and filters to the environment.

        .. versionchanged:: 0.11
           ``Environment.auto_reload`` set in accordance with
           ``TEMPLATES_AUTO_RELOAD`` configuration option.

        .. versionadded:: 0.5
        'u'Create the Jinja environment based on :attr:`jinja_options`
        and the various Jinja-related methods of the app. Changing
        :attr:`jinja_options` after this will have no effect. Also adds
        Flask-related globals and filters to the environment.

        .. versionchanged:: 0.11
           ``Environment.auto_reload`` set in accordance with
           ``TEMPLATES_AUTO_RELOAD`` configuration option.

        .. versionadded:: 0.5
        'b'autoescape'u'autoescape'b'auto_reload'u'auto_reload'b'json.dumps_function'u'json.dumps_function'b'Creates the loader for the Jinja2 environment.  Can be used to
        override just the loader and keeping the rest unchanged.  It's
        discouraged to override this function.  Instead one should override
        the :meth:`jinja_loader` function instead.

        The global loader dispatches between the loaders of the application
        and the individual blueprints.

        .. versionadded:: 0.7
        'u'Creates the loader for the Jinja2 environment.  Can be used to
        override just the loader and keeping the rest unchanged.  It's
        discouraged to override this function.  Instead one should override
        the :meth:`jinja_loader` function instead.

        The global loader dispatches between the loaders of the application
        and the individual blueprints.

        .. versionadded:: 0.7
        'b'Returns ``True`` if autoescaping should be active for the given
        template name. If no template name is given, returns `True`.

        .. versionchanged:: 2.2
            Autoescaping is now enabled by default for ``.svg`` files.

        .. versionadded:: 0.5
        'u'Returns ``True`` if autoescaping should be active for the given
        template name. If no template name is given, returns `True`.

        .. versionchanged:: 2.2
            Autoescaping is now enabled by default for ``.svg`` files.

        .. versionadded:: 0.5
        'b'.html'u'.html'b'.htm'u'.htm'b'.xml'u'.xml'b'.xhtml'u'.xhtml'b'.svg'u'.svg'b'Update the template context with some commonly used variables.
        This injects request, session, config and g into the template
        context as well as everything template context processors want
        to inject.  Note that the as of Flask 0.6, the original values
        in the context will not be overridden if a context processor
        decides to return a value with the same key.

        :param context: the context as a dictionary that is updated in place
                        to add extra variables.
        'u'Update the template context with some commonly used variables.
        This injects request, session, config and g into the template
        context as well as everything template context processors want
        to inject.  Note that the as of Flask 0.6, the original values
        in the context will not be overridden if a context processor
        decides to return a value with the same key.

        :param context: the context as a dictionary that is updated in place
                        to add extra variables.
        'b'Returns the shell context for an interactive shell for this
        application.  This runs all the registered shell context
        processors.

        .. versionadded:: 0.11
        'u'Returns the shell context for an interactive shell for this
        application.  This runs all the registered shell context
        processors.

        .. versionadded:: 0.11
        'b'Whether debug mode is enabled. When using ``flask run`` to start the
        development server, an interactive debugger will be shown for unhandled
        exceptions, and the server will be reloaded when code changes. This maps to the
        :data:`DEBUG` config key. It may not behave as expected if set late.

        **Do not enable debug mode when deploying in production.**

        Default: ``False``
        'u'Whether debug mode is enabled. When using ``flask run`` to start the
        development server, an interactive debugger will be shown for unhandled
        exceptions, and the server will be reloaded when code changes. This maps to the
        :data:`DEBUG` config key. It may not behave as expected if set late.

        **Do not enable debug mode when deploying in production.**

        Default: ``False``
        'b'Runs the application on a local development server.

        Do not use ``run()`` in a production setting. It is not intended to
        meet security and performance requirements for a production server.
        Instead, see :doc:`/deploying/index` for WSGI server recommendations.

        If the :attr:`debug` flag is set the server will automatically reload
        for code changes and show a debugger in case an exception happened.

        If you want to run the application in debug mode, but disable the
        code execution on the interactive debugger, you can pass
        ``use_evalex=False`` as parameter.  This will keep the debugger's
        traceback screen active, but disable code execution.

        It is not recommended to use this function for development with
        automatic reloading as this is badly supported.  Instead you should
        be using the :command:`flask` command line script's ``run`` support.

        .. admonition:: Keep in Mind

           Flask will suppress any server error with a generic error page
           unless it is in debug mode.  As such to enable just the
           interactive debugger without the code reloading, you have to
           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.
           Setting ``use_debugger`` to ``True`` without being in debug mode
           won't catch any exceptions because there won't be any to
           catch.

        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to
            have the server available externally as well. Defaults to
            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable
            if present.
        :param port: the port of the webserver. Defaults to ``5000`` or the
            port defined in the ``SERVER_NAME`` config variable if present.
        :param debug: if given, enable or disable debug mode. See
            :attr:`debug`.
        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`
            files to set environment variables. Will also change the working
            directory to the directory containing the first file found.
        :param options: the options to be forwarded to the underlying Werkzeug
            server. See :func:`werkzeug.serving.run_simple` for more
            information.

        .. versionchanged:: 1.0
            If installed, python-dotenv will be used to load environment
            variables from :file:`.env` and :file:`.flaskenv` files.

            The :envvar:`FLASK_DEBUG` environment variable will override :attr:`debug`.

            Threaded mode is enabled by default.

        .. versionchanged:: 0.10
            The default port is now picked from the ``SERVER_NAME``
            variable.
        'u'Runs the application on a local development server.

        Do not use ``run()`` in a production setting. It is not intended to
        meet security and performance requirements for a production server.
        Instead, see :doc:`/deploying/index` for WSGI server recommendations.

        If the :attr:`debug` flag is set the server will automatically reload
        for code changes and show a debugger in case an exception happened.

        If you want to run the application in debug mode, but disable the
        code execution on the interactive debugger, you can pass
        ``use_evalex=False`` as parameter.  This will keep the debugger's
        traceback screen active, but disable code execution.

        It is not recommended to use this function for development with
        automatic reloading as this is badly supported.  Instead you should
        be using the :command:`flask` command line script's ``run`` support.

        .. admonition:: Keep in Mind

           Flask will suppress any server error with a generic error page
           unless it is in debug mode.  As such to enable just the
           interactive debugger without the code reloading, you have to
           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.
           Setting ``use_debugger`` to ``True`` without being in debug mode
           won't catch any exceptions because there won't be any to
           catch.

        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to
            have the server available externally as well. Defaults to
            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable
            if present.
        :param port: the port of the webserver. Defaults to ``5000`` or the
            port defined in the ``SERVER_NAME`` config variable if present.
        :param debug: if given, enable or disable debug mode. See
            :attr:`debug`.
        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`
            files to set environment variables. Will also change the working
            directory to the directory containing the first file found.
        :param options: the options to be forwarded to the underlying Werkzeug
            server. See :func:`werkzeug.serving.run_simple` for more
            information.

        .. versionchanged:: 1.0
            If installed, python-dotenv will be used to load environment
            variables from :file:`.env` and :file:`.flaskenv` files.

            The :envvar:`FLASK_DEBUG` environment variable will override :attr:`debug`.

            Threaded mode is enabled by default.

        .. versionchanged:: 0.10
            The default port is now picked from the ``SERVER_NAME``
            variable.
        'b'FLASK_RUN_FROM_CLI'u'FLASK_RUN_FROM_CLI'b' * Ignoring a call to 'app.run()' that would block the current 'flask' CLI command.
   Only call 'app.run()' in an 'if __name__ == "__main__"' guard.'u' * Ignoring a call to 'app.run()' that would block the current 'flask' CLI command.
   Only call 'app.run()' in an 'if __name__ == "__main__"' guard.'b'red'u'red'b'FLASK_DEBUG'u'FLASK_DEBUG'b'127.0.0.1'u'127.0.0.1'b'use_reloader'u'use_reloader'b'use_debugger'u'use_debugger'b'threaded'u'threaded'b'Creates a test client for this application.  For information
        about unit testing head over to :doc:`/testing`.

        Note that if you are testing for assertions or exceptions in your
        application code, you must set ``app.testing = True`` in order for the
        exceptions to propagate to the test client.  Otherwise, the exception
        will be handled by the application (not visible to the test client) and
        the only indication of an AssertionError or other exception will be a
        500 status code response to the test client.  See the :attr:`testing`
        attribute.  For example::

            app.testing = True
            client = app.test_client()

        The test client can be used in a ``with`` block to defer the closing down
        of the context until the end of the ``with`` block.  This is useful if
        you want to access the context locals for testing::

            with app.test_client() as c:
                rv = c.get('/?vodka=42')
                assert request.args['vodka'] == '42'

        Additionally, you may pass optional keyword arguments that will then
        be passed to the application's :attr:`test_client_class` constructor.
        For example::

            from flask.testing import FlaskClient

            class CustomClient(FlaskClient):
                def __init__(self, *args, **kwargs):
                    self._authentication = kwargs.pop("authentication")
                    super(CustomClient,self).__init__( *args, **kwargs)

            app.test_client_class = CustomClient
            client = app.test_client(authentication='Basic ....')

        See :class:`~flask.testing.FlaskClient` for more information.

        .. versionchanged:: 0.4
           added support for ``with`` block usage for the client.

        .. versionadded:: 0.7
           The `use_cookies` parameter was added as well as the ability
           to override the client to be used by setting the
           :attr:`test_client_class` attribute.

        .. versionchanged:: 0.11
           Added `**kwargs` to support passing additional keyword arguments to
           the constructor of :attr:`test_client_class`.
        'u'Creates a test client for this application.  For information
        about unit testing head over to :doc:`/testing`.

        Note that if you are testing for assertions or exceptions in your
        application code, you must set ``app.testing = True`` in order for the
        exceptions to propagate to the test client.  Otherwise, the exception
        will be handled by the application (not visible to the test client) and
        the only indication of an AssertionError or other exception will be a
        500 status code response to the test client.  See the :attr:`testing`
        attribute.  For example::

            app.testing = True
            client = app.test_client()

        The test client can be used in a ``with`` block to defer the closing down
        of the context until the end of the ``with`` block.  This is useful if
        you want to access the context locals for testing::

            with app.test_client() as c:
                rv = c.get('/?vodka=42')
                assert request.args['vodka'] == '42'

        Additionally, you may pass optional keyword arguments that will then
        be passed to the application's :attr:`test_client_class` constructor.
        For example::

            from flask.testing import FlaskClient

            class CustomClient(FlaskClient):
                def __init__(self, *args, **kwargs):
                    self._authentication = kwargs.pop("authentication")
                    super(CustomClient,self).__init__( *args, **kwargs)

            app.test_client_class = CustomClient
            client = app.test_client(authentication='Basic ....')

        See :class:`~flask.testing.FlaskClient` for more information.

        .. versionchanged:: 0.4
           added support for ``with`` block usage for the client.

        .. versionadded:: 0.7
           The `use_cookies` parameter was added as well as the ability
           to override the client to be used by setting the
           :attr:`test_client_class` attribute.

        .. versionchanged:: 0.11
           Added `**kwargs` to support passing additional keyword arguments to
           the constructor of :attr:`test_client_class`.
        'b'Create a CLI runner for testing CLI commands.
        See :ref:`testing-cli`.

        Returns an instance of :attr:`test_cli_runner_class`, by default
        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is
        passed as the first argument.

        .. versionadded:: 1.0
        'u'Create a CLI runner for testing CLI commands.
        See :ref:`testing-cli`.

        Returns an instance of :attr:`test_cli_runner_class`, by default
        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is
        passed as the first argument.

        .. versionadded:: 1.0
        'b'Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.

        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.

        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.

        .. versionchanged:: 2.0.1
            The ``name`` option can be used to change the (pre-dotted)
            name the blueprint is registered with. This allows the same
            blueprint to be registered multiple times with unique names
            for ``url_for``.

        .. versionadded:: 0.7
        'u'Register a :class:`~flask.Blueprint` on the application. Keyword
        arguments passed to this method will override the defaults set on the
        blueprint.

        Calls the blueprint's :meth:`~flask.Blueprint.register` method after
        recording the blueprint in the application's :attr:`blueprints`.

        :param blueprint: The blueprint to register.
        :param url_prefix: Blueprint routes will be prefixed with this.
        :param subdomain: Blueprint routes will match on this subdomain.
        :param url_defaults: Blueprint routes will use these default values for
            view arguments.
        :param options: Additional keyword arguments are passed to
            :class:`~flask.blueprints.BlueprintSetupState`. They can be
            accessed in :meth:`~flask.Blueprint.record` callbacks.

        .. versionchanged:: 2.0.1
            The ``name`` option can be used to change the (pre-dotted)
            name the blueprint is registered with. This allows the same
            blueprint to be registered multiple times with unique names
            for ``url_for``.

        .. versionadded:: 0.7
        'b'Iterates over all blueprints by the order they were registered.

        .. versionadded:: 0.11
        'u'Iterates over all blueprints by the order they were registered.

        .. versionadded:: 0.11
        'b'endpoint'u'endpoint'b'methods'u'methods'b'GET'u'GET'b'Allowed methods must be a list of strings, for example: @app.route(..., methods=["POST"])'u'Allowed methods must be a list of strings, for example: @app.route(..., methods=["POST"])'b'required_methods'u'required_methods'b'provide_automatic_options'u'provide_automatic_options'b'OPTIONS'u'OPTIONS'b'View function mapping is overwriting an existing endpoint function: 'u'View function mapping is overwriting an existing endpoint function: 'b'A decorator that is used to register custom template filter.
        You can specify a name for the filter, otherwise the function
        name will be used. Example::

          @app.template_filter()
          def reverse(s):
              return s[::-1]

        :param name: the optional name of the filter, otherwise the
                     function name will be used.
        'u'A decorator that is used to register custom template filter.
        You can specify a name for the filter, otherwise the function
        name will be used. Example::

          @app.template_filter()
          def reverse(s):
              return s[::-1]

        :param name: the optional name of the filter, otherwise the
                     function name will be used.
        'b'Register a custom template filter.  Works exactly like the
        :meth:`template_filter` decorator.

        :param name: the optional name of the filter, otherwise the
                     function name will be used.
        'u'Register a custom template filter.  Works exactly like the
        :meth:`template_filter` decorator.

        :param name: the optional name of the filter, otherwise the
                     function name will be used.
        'b'A decorator that is used to register custom template test.
        You can specify a name for the test, otherwise the function
        name will be used. Example::

          @app.template_test()
          def is_prime(n):
              if n == 2:
                  return True
              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):
                  if n % i == 0:
                      return False
              return True

        .. versionadded:: 0.10

        :param name: the optional name of the test, otherwise the
                     function name will be used.
        'u'A decorator that is used to register custom template test.
        You can specify a name for the test, otherwise the function
        name will be used. Example::

          @app.template_test()
          def is_prime(n):
              if n == 2:
                  return True
              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):
                  if n % i == 0:
                      return False
              return True

        .. versionadded:: 0.10

        :param name: the optional name of the test, otherwise the
                     function name will be used.
        'b'Register a custom template test.  Works exactly like the
        :meth:`template_test` decorator.

        .. versionadded:: 0.10

        :param name: the optional name of the test, otherwise the
                     function name will be used.
        'u'Register a custom template test.  Works exactly like the
        :meth:`template_test` decorator.

        .. versionadded:: 0.10

        :param name: the optional name of the test, otherwise the
                     function name will be used.
        'b'A decorator that is used to register a custom template global function.
        You can specify a name for the global function, otherwise the function
        name will be used. Example::

            @app.template_global()
            def double(n):
                return 2 * n

        .. versionadded:: 0.10

        :param name: the optional name of the global function, otherwise the
                     function name will be used.
        'u'A decorator that is used to register a custom template global function.
        You can specify a name for the global function, otherwise the function
        name will be used. Example::

            @app.template_global()
            def double(n):
                return 2 * n

        .. versionadded:: 0.10

        :param name: the optional name of the global function, otherwise the
                     function name will be used.
        'b'Register a custom template global function. Works exactly like the
        :meth:`template_global` decorator.

        .. versionadded:: 0.10

        :param name: the optional name of the global function, otherwise the
                     function name will be used.
        'u'Register a custom template global function. Works exactly like the
        :meth:`template_global` decorator.

        .. versionadded:: 0.10

        :param name: the optional name of the global function, otherwise the
                     function name will be used.
        'b'Registers a function to be called when the application
        context is popped. The application context is typically popped
        after the request context for each request, at the end of CLI
        commands, or after a manually pushed context ends.

        .. code-block:: python

            with app.app_context():
                ...

        When the ``with`` block exits (or ``ctx.pop()`` is called), the
        teardown functions are called just before the app context is
        made inactive. Since a request context typically also manages an
        application context it would also be called when you pop a
        request context.

        When a teardown function was called because of an unhandled
        exception it will be passed an error object. If an
        :meth:`errorhandler` is registered, it will handle the exception
        and the teardown will not receive it.

        Teardown functions must avoid raising exceptions. If they
        execute code that might fail they must surround that code with a
        ``try``/``except`` block and log any errors.

        The return values of teardown functions are ignored.

        .. versionadded:: 0.9
        'u'Registers a function to be called when the application
        context is popped. The application context is typically popped
        after the request context for each request, at the end of CLI
        commands, or after a manually pushed context ends.

        .. code-block:: python

            with app.app_context():
                ...

        When the ``with`` block exits (or ``ctx.pop()`` is called), the
        teardown functions are called just before the app context is
        made inactive. Since a request context typically also manages an
        application context it would also be called when you pop a
        request context.

        When a teardown function was called because of an unhandled
        exception it will be passed an error object. If an
        :meth:`errorhandler` is registered, it will handle the exception
        and the teardown will not receive it.

        Teardown functions must avoid raising exceptions. If they
        execute code that might fail they must surround that code with a
        ``try``/``except`` block and log any errors.

        The return values of teardown functions are ignored.

        .. versionadded:: 0.9
        'b'Registers a shell context processor function.

        .. versionadded:: 0.11
        'u'Registers a shell context processor function.

        .. versionadded:: 0.11
        'b'Return a registered error handler for an exception in this order:
        blueprint handler for a specific code, app handler for a specific code,
        blueprint handler for an exception class, app handler for an exception
        class, or ``None`` if a suitable handler is not found.
        'u'Return a registered error handler for an exception in this order:
        blueprint handler for a specific code, app handler for a specific code,
        blueprint handler for an exception class, app handler for an exception
        class, or ``None`` if a suitable handler is not found.
        'b'Handles an HTTP exception.  By default this will invoke the
        registered error handlers and fall back to returning the
        exception as response.

        .. versionchanged:: 1.0.3
            ``RoutingException``, used internally for actions such as
             slash redirects during routing, is not passed to error
             handlers.

        .. versionchanged:: 1.0
            Exceptions are looked up by code *and* by MRO, so
            ``HTTPException`` subclasses can be handled with a catch-all
            handler for the base ``HTTPException``.

        .. versionadded:: 0.3
        'u'Handles an HTTP exception.  By default this will invoke the
        registered error handlers and fall back to returning the
        exception as response.

        .. versionchanged:: 1.0.3
            ``RoutingException``, used internally for actions such as
             slash redirects during routing, is not passed to error
             handlers.

        .. versionchanged:: 1.0
            Exceptions are looked up by code *and* by MRO, so
            ``HTTPException`` subclasses can be handled with a catch-all
            handler for the base ``HTTPException``.

        .. versionadded:: 0.3
        'b'Checks if an HTTP exception should be trapped or not.  By default
        this will return ``False`` for all exceptions except for a bad request
        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It
        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.

        This is called for all HTTP exceptions raised by a view function.
        If it returns ``True`` for any exception the error handler for this
        exception is not called and it shows up as regular exception in the
        traceback.  This is helpful for debugging implicitly raised HTTP
        exceptions.

        .. versionchanged:: 1.0
            Bad request errors are not trapped by default in debug mode.

        .. versionadded:: 0.8
        'u'Checks if an HTTP exception should be trapped or not.  By default
        this will return ``False`` for all exceptions except for a bad request
        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It
        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.

        This is called for all HTTP exceptions raised by a view function.
        If it returns ``True`` for any exception the error handler for this
        exception is not called and it shows up as regular exception in the
        traceback.  This is helpful for debugging implicitly raised HTTP
        exceptions.

        .. versionchanged:: 1.0
            Bad request errors are not trapped by default in debug mode.

        .. versionadded:: 0.8
        'b'This method is called whenever an exception occurs that
        should be handled. A special case is :class:`~werkzeug
        .exceptions.HTTPException` which is forwarded to the
        :meth:`handle_http_exception` method. This function will either
        return a response value or reraise the exception with the same
        traceback.

        .. versionchanged:: 1.0
            Key errors raised from request data like ``form`` show the
            bad key in debug mode rather than a generic bad request
            message.

        .. versionadded:: 0.7
        'u'This method is called whenever an exception occurs that
        should be handled. A special case is :class:`~werkzeug
        .exceptions.HTTPException` which is forwarded to the
        :meth:`handle_http_exception` method. This function will either
        return a response value or reraise the exception with the same
        traceback.

        .. versionchanged:: 1.0
            Key errors raised from request data like ``form`` show the
            bad key in debug mode rather than a generic bad request
            message.

        .. versionadded:: 0.7
        'b'Handle an exception that did not have an error handler
        associated with it, or that was raised from an error handler.
        This always causes a 500 ``InternalServerError``.

        Always sends the :data:`got_request_exception` signal.

        If :data:`PROPAGATE_EXCEPTIONS` is ``True``, such as in debug
        mode, the error will be re-raised so that the debugger can
        display it. Otherwise, the original exception is logged, and
        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.

        If an error handler is registered for ``InternalServerError`` or
        ``500``, it will be used. For consistency, the handler will
        always receive the ``InternalServerError``. The original
        unhandled exception is available as ``e.original_exception``.

        .. versionchanged:: 1.1.0
            Always passes the ``InternalServerError`` instance to the
            handler, setting ``original_exception`` to the unhandled
            error.

        .. versionchanged:: 1.1.0
            ``after_request`` functions and other finalization is done
            even for the default 500 response when there is no handler.

        .. versionadded:: 0.3
        'u'Handle an exception that did not have an error handler
        associated with it, or that was raised from an error handler.
        This always causes a 500 ``InternalServerError``.

        Always sends the :data:`got_request_exception` signal.

        If :data:`PROPAGATE_EXCEPTIONS` is ``True``, such as in debug
        mode, the error will be re-raised so that the debugger can
        display it. Otherwise, the original exception is logged, and
        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.

        If an error handler is registered for ``InternalServerError`` or
        ``500``, it will be used. For consistency, the handler will
        always receive the ``InternalServerError``. The original
        unhandled exception is available as ``e.original_exception``.

        .. versionchanged:: 1.1.0
            Always passes the ``InternalServerError`` instance to the
            handler, setting ``original_exception`` to the unhandled
            error.

        .. versionchanged:: 1.1.0
            ``after_request`` functions and other finalization is done
            even for the default 500 response when there is no handler.

        .. versionadded:: 0.3
        'b'Logs an exception.  This is called by :meth:`handle_exception`
        if debugging is disabled and right before the handler is called.
        The default implementation logs the exception as error on the
        :attr:`logger`.

        .. versionadded:: 0.8
        'u'Logs an exception.  This is called by :meth:`handle_exception`
        if debugging is disabled and right before the handler is called.
        The default implementation logs the exception as error on the
        :attr:`logger`.

        .. versionadded:: 0.8
        'b'Exception on 'u'Exception on 'b' ['u' ['b'Intercept routing exceptions and possibly do something else.

        In debug mode, intercept a routing redirect and replace it with
        an error if the body will be discarded.

        With modern Werkzeug this shouldn't occur, since it now uses a
        308 status which tells the browser to resend the method and
        body.

        .. versionchanged:: 2.1
            Don't intercept 307 and 308 redirects.

        :meta private:
        :internal:
        'u'Intercept routing exceptions and possibly do something else.

        In debug mode, intercept a routing redirect and replace it with
        an error if the body will be discarded.

        With modern Werkzeug this shouldn't occur, since it now uses a
        308 status which tells the browser to resend the method and
        body.

        .. versionchanged:: 2.1
            Don't intercept 307 and 308 redirects.

        :meta private:
        :internal:
        'b'HEAD'u'HEAD'b'Does the request dispatching.  Matches the URL and returns the
        return value of the view or error handler.  This does not have to
        be a response object.  In order to convert the return value to a
        proper response object, call :func:`make_response`.

        .. versionchanged:: 0.7
           This no longer does the exception handling, this code was
           moved to the new :meth:`full_dispatch_request`.
        'u'Does the request dispatching.  Matches the URL and returns the
        return value of the view or error handler.  This does not have to
        be a response object.  In order to convert the return value to a
        proper response object, call :func:`make_response`.

        .. versionchanged:: 0.7
           This no longer does the exception handling, this code was
           moved to the new :meth:`full_dispatch_request`.
        'b'Dispatches the request and on top of that performs request
        pre and postprocessing as well as HTTP exception catching and
        error handling.

        .. versionadded:: 0.7
        'u'Dispatches the request and on top of that performs request
        pre and postprocessing as well as HTTP exception catching and
        error handling.

        .. versionadded:: 0.7
        'b'Given the return value from a view function this finalizes
        the request by converting it into a response and invoking the
        postprocessing functions.  This is invoked for both normal
        request dispatching as well as error handlers.

        Because this means that it might be called as a result of a
        failure a special safe mode is available which can be enabled
        with the `from_error_handler` flag.  If enabled, failures in
        response processing will be logged and otherwise ignored.

        :internal:
        'u'Given the return value from a view function this finalizes
        the request by converting it into a response and invoking the
        postprocessing functions.  This is invoked for both normal
        request dispatching as well as error handlers.

        Because this means that it might be called as a result of a
        failure a special safe mode is available which can be enabled
        with the `from_error_handler` flag.  If enabled, failures in
        response processing will be logged and otherwise ignored.

        :internal:
        'b'Request finalizing failed with an error while handling an error'u'Request finalizing failed with an error while handling an error'b'This method is called to create the default ``OPTIONS`` response.
        This can be changed through subclassing to change the default
        behavior of ``OPTIONS`` responses.

        .. versionadded:: 0.7
        'u'This method is called to create the default ``OPTIONS`` response.
        This can be changed through subclassing to change the default
        behavior of ``OPTIONS`` responses.

        .. versionadded:: 0.7
        'b'This is called to figure out if an error should be ignored
        or not as far as the teardown system is concerned.  If this
        function returns ``True`` then the teardown handlers will not be
        passed the error.

        .. versionadded:: 0.10
        'u'This is called to figure out if an error should be ignored
        or not as far as the teardown system is concerned.  If this
        function returns ``True`` then the teardown handlers will not be
        passed the error.

        .. versionadded:: 0.10
        'b'Ensure that the function is synchronous for WSGI workers.
        Plain ``def`` functions are returned as-is. ``async def``
        functions are wrapped to run and wait for the response.

        Override this method to change how the app runs async views.

        .. versionadded:: 2.0
        'u'Ensure that the function is synchronous for WSGI workers.
        Plain ``def`` functions are returned as-is. ``async def``
        functions are wrapped to run and wait for the response.

        Override this method to change how the app runs async views.

        .. versionadded:: 2.0
        'b'Return a sync function that will run the coroutine function.

        .. code-block:: python

            result = app.async_to_sync(func)(*args, **kwargs)

        Override this method to change how the app converts async code
        to be synchronously callable.

        .. versionadded:: 2.0
        'u'Return a sync function that will run the coroutine function.

        .. code-block:: python

            result = app.async_to_sync(func)(*args, **kwargs)

        Override this method to change how the app converts async code
        to be synchronously callable.

        .. versionadded:: 2.0
        'b'Install Flask with the 'async' extra in order to use async views.'u'Install Flask with the 'async' extra in order to use async views.'b'Generate a URL to the given endpoint with the given values.

        This is called by :func:`flask.url_for`, and can be called
        directly as well.

        An *endpoint* is the name of a URL rule, usually added with
        :meth:`@app.route() <route>`, and usually the same name as the
        view function. A route defined in a :class:`~flask.Blueprint`
        will prepend the blueprint's name separated by a ``.`` to the
        endpoint.

        In some cases, such as email messages, you want URLs to include
        the scheme and domain, like ``https://example.com/hello``. When
        not in an active request, URLs will be external by default, but
        this requires setting :data:`SERVER_NAME` so Flask knows what
        domain to use. :data:`APPLICATION_ROOT` and
        :data:`PREFERRED_URL_SCHEME` should also be configured as
        needed. This config is only used when not in an active request.

        Functions can be decorated with :meth:`url_defaults` to modify
        keyword arguments before the URL is built.

        If building fails for some reason, such as an unknown endpoint
        or incorrect values, the app's :meth:`handle_url_build_error`
        method is called. If that returns a string, that is returned,
        otherwise a :exc:`~werkzeug.routing.BuildError` is raised.

        :param endpoint: The endpoint name associated with the URL to
            generate. If this starts with a ``.``, the current blueprint
            name (if any) will be used.
        :param _anchor: If given, append this as ``#anchor`` to the URL.
        :param _method: If given, generate the URL associated with this
            method for the endpoint.
        :param _scheme: If given, the URL will have this scheme if it
            is external.
        :param _external: If given, prefer the URL to be internal
            (False) or require it to be external (True). External URLs
            include the scheme and domain. When not in an active
            request, URLs are external by default.
        :param values: Values to use for the variable parts of the URL
            rule. Unknown keys are appended as query string arguments,
            like ``?a=b&c=d``.

        .. versionadded:: 2.2
            Moved from ``flask.url_for``, which calls this method.
        'u'Generate a URL to the given endpoint with the given values.

        This is called by :func:`flask.url_for`, and can be called
        directly as well.

        An *endpoint* is the name of a URL rule, usually added with
        :meth:`@app.route() <route>`, and usually the same name as the
        view function. A route defined in a :class:`~flask.Blueprint`
        will prepend the blueprint's name separated by a ``.`` to the
        endpoint.

        In some cases, such as email messages, you want URLs to include
        the scheme and domain, like ``https://example.com/hello``. When
        not in an active request, URLs will be external by default, but
        this requires setting :data:`SERVER_NAME` so Flask knows what
        domain to use. :data:`APPLICATION_ROOT` and
        :data:`PREFERRED_URL_SCHEME` should also be configured as
        needed. This config is only used when not in an active request.

        Functions can be decorated with :meth:`url_defaults` to modify
        keyword arguments before the URL is built.

        If building fails for some reason, such as an unknown endpoint
        or incorrect values, the app's :meth:`handle_url_build_error`
        method is called. If that returns a string, that is returned,
        otherwise a :exc:`~werkzeug.routing.BuildError` is raised.

        :param endpoint: The endpoint name associated with the URL to
            generate. If this starts with a ``.``, the current blueprint
            name (if any) will be used.
        :param _anchor: If given, append this as ``#anchor`` to the URL.
        :param _method: If given, generate the URL associated with this
            method for the endpoint.
        :param _scheme: If given, the URL will have this scheme if it
            is external.
        :param _external: If given, prefer the URL to be internal
            (False) or require it to be external (True). External URLs
            include the scheme and domain. When not in an active
            request, URLs are external by default.
        :param values: Values to use for the variable parts of the URL
            rule. Unknown keys are appended as query string arguments,
            like ``?a=b&c=d``.

        .. versionadded:: 2.2
            Moved from ``flask.url_for``, which calls this method.
        'b'Unable to build URLs outside an active request without 'SERVER_NAME' configured. Also configure 'APPLICATION_ROOT' and 'PREFERRED_URL_SCHEME' as needed.'u'Unable to build URLs outside an active request without 'SERVER_NAME' configured. Also configure 'APPLICATION_ROOT' and 'PREFERRED_URL_SCHEME' as needed.'b'When specifying '_scheme', '_external' must be True.'u'When specifying '_scheme', '_external' must be True.'b'%!#$&'()*+,/:;=?@'u'%!#$&'()*+,/:;=?@'b'Create a redirect response object.

        This is called by :func:`flask.redirect`, and can be called
        directly as well.

        :param location: The URL to redirect to.
        :param code: The status code for the redirect.

        .. versionadded:: 2.2
            Moved from ``flask.redirect``, which calls this method.
        'u'Create a redirect response object.

        This is called by :func:`flask.redirect`, and can be called
        directly as well.

        :param location: The URL to redirect to.
        :param code: The status code for the redirect.

        .. versionadded:: 2.2
            Moved from ``flask.redirect``, which calls this method.
        'b'Convert the return value from a view function to an instance of
        :attr:`response_class`.

        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:

            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.

            ``bytes``
                A response object is created with the bytes as the body.

            ``dict``
                A dictionary that will be jsonify'd before being returned.

            ``list``
                A list that will be jsonify'd before being returned.

            ``generator`` or ``iterator``
                A generator that returns ``str`` or ``bytes`` to be
                streamed as the response.

            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.

            :attr:`response_class`
                The object is returned unchanged.

            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.

            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.

        .. versionchanged:: 2.2
            A generator will be converted to a streaming response.
            A list will be converted to a JSON response.

        .. versionchanged:: 1.1
            A dict will be converted to a JSON response.

        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        'u'Convert the return value from a view function to an instance of
        :attr:`response_class`.

        :param rv: the return value from the view function. The view function
            must return a response. Returning ``None``, or the view ending
            without returning, is not allowed. The following types are allowed
            for ``view_rv``:

            ``str``
                A response object is created with the string encoded to UTF-8
                as the body.

            ``bytes``
                A response object is created with the bytes as the body.

            ``dict``
                A dictionary that will be jsonify'd before being returned.

            ``list``
                A list that will be jsonify'd before being returned.

            ``generator`` or ``iterator``
                A generator that returns ``str`` or ``bytes`` to be
                streamed as the response.

            ``tuple``
                Either ``(body, status, headers)``, ``(body, status)``, or
                ``(body, headers)``, where ``body`` is any of the other types
                allowed here, ``status`` is a string or an integer, and
                ``headers`` is a dictionary or a list of ``(key, value)``
                tuples. If ``body`` is a :attr:`response_class` instance,
                ``status`` overwrites the exiting value and ``headers`` are
                extended.

            :attr:`response_class`
                The object is returned unchanged.

            other :class:`~werkzeug.wrappers.Response` class
                The object is coerced to :attr:`response_class`.

            :func:`callable`
                The function is called as a WSGI application. The result is
                used to create a response object.

        .. versionchanged:: 2.2
            A generator will be converted to a streaming response.
            A list will be converted to a JSON response.

        .. versionchanged:: 1.1
            A dict will be converted to a JSON response.

        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        'b'The view function did not return a valid response tuple. The tuple must have the form (body, status, headers), (body, status), or (body, headers).'u'The view function did not return a valid response tuple. The tuple must have the form (body, status, headers), (body, status), or (body, headers).'b'The view function for 'u'The view function for 'b' did not return a valid response. The function either returned None or ended without a return statement.'u' did not return a valid response. The function either returned None or ended without a return statement.'b'
The view function did not return a valid response. The return type must be a string, dict, list, tuple with headers or status, Response instance, or WSGI callable, but it was a 'u'
The view function did not return a valid response. The return type must be a string, dict, list, tuple with headers or status, Response instance, or WSGI callable, but it was a 'b'The view function did not return a valid response. The return type must be a string, dict, list, tuple with headers or status, Response instance, or WSGI callable, but it was a 'u'The view function did not return a valid response. The return type must be a string, dict, list, tuple with headers or status, Response instance, or WSGI callable, but it was a 'b'Creates a URL adapter for the given request. The URL adapter
        is created at a point where the request context is not yet set
        up so the request is passed explicitly.

        .. versionadded:: 0.6

        .. versionchanged:: 0.9
           This can now also be called without a request object when the
           URL adapter is created for the application context.

        .. versionchanged:: 1.0
            :data:`SERVER_NAME` no longer implicitly enables subdomain
            matching. Use :attr:`subdomain_matching` instead.
        'u'Creates a URL adapter for the given request. The URL adapter
        is created at a point where the request context is not yet set
        up so the request is passed explicitly.

        .. versionadded:: 0.6

        .. versionchanged:: 0.9
           This can now also be called without a request object when the
           URL adapter is created for the application context.

        .. versionchanged:: 1.0
            :data:`SERVER_NAME` no longer implicitly enables subdomain
            matching. Use :attr:`subdomain_matching` instead.
        'b'Injects the URL defaults for the given endpoint directly into
        the values dictionary passed.  This is used internally and
        automatically called on URL building.

        .. versionadded:: 0.7
        'u'Injects the URL defaults for the given endpoint directly into
        the values dictionary passed.  This is used internally and
        automatically called on URL building.

        .. versionadded:: 0.7
        'b'Called by :meth:`.url_for` if a
        :exc:`~werkzeug.routing.BuildError` was raised. If this returns
        a value, it will be returned by ``url_for``, otherwise the error
        will be re-raised.

        Each function in :attr:`url_build_error_handlers` is called with
        ``error``, ``endpoint`` and ``values``. If a function returns
        ``None`` or raises a ``BuildError``, it is skipped. Otherwise,
        its return value is returned by ``url_for``.

        :param error: The active ``BuildError`` being handled.
        :param endpoint: The endpoint being built.
        :param values: The keyword arguments passed to ``url_for``.
        'u'Called by :meth:`.url_for` if a
        :exc:`~werkzeug.routing.BuildError` was raised. If this returns
        a value, it will be returned by ``url_for``, otherwise the error
        will be re-raised.

        Each function in :attr:`url_build_error_handlers` is called with
        ``error``, ``endpoint`` and ``values``. If a function returns
        ``None`` or raises a ``BuildError``, it is skipped. Otherwise,
        its return value is returned by ``url_for``.

        :param error: The active ``BuildError`` being handled.
        :param endpoint: The endpoint being built.
        :param values: The keyword arguments passed to ``url_for``.
        'b'Called before the request is dispatched. Calls
        :attr:`url_value_preprocessors` registered with the app and the
        current blueprint (if any). Then calls :attr:`before_request_funcs`
        registered with the app and the blueprint.

        If any :meth:`before_request` handler returns a non-None value, the
        value is handled as if it was the return value from the view, and
        further request handling is stopped.
        'u'Called before the request is dispatched. Calls
        :attr:`url_value_preprocessors` registered with the app and the
        current blueprint (if any). Then calls :attr:`before_request_funcs`
        registered with the app and the blueprint.

        If any :meth:`before_request` handler returns a non-None value, the
        value is handled as if it was the return value from the view, and
        further request handling is stopped.
        'b'Can be overridden in order to modify the response object
        before it's sent to the WSGI server.  By default this will
        call all the :meth:`after_request` decorated functions.

        .. versionchanged:: 0.5
           As of Flask 0.5 the functions registered for after request
           execution are called in reverse order of registration.

        :param response: a :attr:`response_class` object.
        :return: a new response object or the same, has to be an
                 instance of :attr:`response_class`.
        'u'Can be overridden in order to modify the response object
        before it's sent to the WSGI server.  By default this will
        call all the :meth:`after_request` decorated functions.

        .. versionchanged:: 0.5
           As of Flask 0.5 the functions registered for after request
           execution are called in reverse order of registration.

        :param response: a :attr:`response_class` object.
        :return: a new response object or the same, has to be an
                 instance of :attr:`response_class`.
        'b'Called after the request is dispatched and the response is
        returned, right before the request context is popped.

        This calls all functions decorated with
        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`
        if a blueprint handled the request. Finally, the
        :data:`request_tearing_down` signal is sent.

        This is called by
        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,
        which may be delayed during testing to maintain access to
        resources.

        :param exc: An unhandled exception raised while dispatching the
            request. Detected from the current exception information if
            not passed. Passed to each teardown function.

        .. versionchanged:: 0.9
            Added the ``exc`` argument.
        'u'Called after the request is dispatched and the response is
        returned, right before the request context is popped.

        This calls all functions decorated with
        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`
        if a blueprint handled the request. Finally, the
        :data:`request_tearing_down` signal is sent.

        This is called by
        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,
        which may be delayed during testing to maintain access to
        resources.

        :param exc: An unhandled exception raised while dispatching the
            request. Detected from the current exception information if
            not passed. Passed to each teardown function.

        .. versionchanged:: 0.9
            Added the ``exc`` argument.
        'b'Called right before the application context is popped.

        When handling a request, the application context is popped
        after the request context. See :meth:`do_teardown_request`.

        This calls all functions decorated with
        :meth:`teardown_appcontext`. Then the
        :data:`appcontext_tearing_down` signal is sent.

        This is called by
        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.

        .. versionadded:: 0.9
        'u'Called right before the application context is popped.

        When handling a request, the application context is popped
        after the request context. See :meth:`do_teardown_request`.

        This calls all functions decorated with
        :meth:`teardown_appcontext`. Then the
        :data:`appcontext_tearing_down` signal is sent.

        This is called by
        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.

        .. versionadded:: 0.9
        'b'Create an :class:`~flask.ctx.AppContext`. Use as a ``with``
        block to push the context, which will make :data:`current_app`
        point at this application.

        An application context is automatically pushed by
        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`
        when handling a request, and when running a CLI command. Use
        this to manually create a context outside of these situations.

        ::

            with app.app_context():
                init_db()

        See :doc:`/appcontext`.

        .. versionadded:: 0.9
        'u'Create an :class:`~flask.ctx.AppContext`. Use as a ``with``
        block to push the context, which will make :data:`current_app`
        point at this application.

        An application context is automatically pushed by
        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`
        when handling a request, and when running a CLI command. Use
        this to manually create a context outside of these situations.

        ::

            with app.app_context():
                init_db()

        See :doc:`/appcontext`.

        .. versionadded:: 0.9
        'b'Create a :class:`~flask.ctx.RequestContext` representing a
        WSGI environment. Use a ``with`` block to push the context,
        which will make :data:`request` point at this request.

        See :doc:`/reqcontext`.

        Typically you should not call this from your own code. A request
        context is automatically pushed by the :meth:`wsgi_app` when
        handling a request. Use :meth:`test_request_context` to create
        an environment and context instead of this method.

        :param environ: a WSGI environment
        'u'Create a :class:`~flask.ctx.RequestContext` representing a
        WSGI environment. Use a ``with`` block to push the context,
        which will make :data:`request` point at this request.

        See :doc:`/reqcontext`.

        Typically you should not call this from your own code. A request
        context is automatically pushed by the :meth:`wsgi_app` when
        handling a request. Use :meth:`test_request_context` to create
        an environment and context instead of this method.

        :param environ: a WSGI environment
        'b'Create a :class:`~flask.ctx.RequestContext` for a WSGI
        environment created from the given values. This is mostly useful
        during testing, where you may want to run a function that uses
        request data without dispatching a full request.

        See :doc:`/reqcontext`.

        Use a ``with`` block to push the context, which will make
        :data:`request` point at the request for the created
        environment. ::

            with app.test_request_context(...):
                generate_report()

        When using the shell, it may be easier to push and pop the
        context manually to avoid indentation. ::

            ctx = app.test_request_context(...)
            ctx.push()
            ...
            ctx.pop()

        Takes the same arguments as Werkzeug's
        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from
        the application. See the linked Werkzeug docs for most of the
        available arguments. Flask-specific behavior is listed here.

        :param path: URL path being requested.
        :param base_url: Base URL where the app is being served, which
            ``path`` is relative to. If not given, built from
            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,
            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.
        :param subdomain: Subdomain name to append to
            :data:`SERVER_NAME`.
        :param url_scheme: Scheme to use instead of
            :data:`PREFERRED_URL_SCHEME`.
        :param data: The request body, either as a string or a dict of
            form keys and values.
        :param json: If given, this is serialized as JSON and passed as
            ``data``. Also defaults ``content_type`` to
            ``application/json``.
        :param args: other positional arguments passed to
            :class:`~werkzeug.test.EnvironBuilder`.
        :param kwargs: other keyword arguments passed to
            :class:`~werkzeug.test.EnvironBuilder`.
        'u'Create a :class:`~flask.ctx.RequestContext` for a WSGI
        environment created from the given values. This is mostly useful
        during testing, where you may want to run a function that uses
        request data without dispatching a full request.

        See :doc:`/reqcontext`.

        Use a ``with`` block to push the context, which will make
        :data:`request` point at the request for the created
        environment. ::

            with app.test_request_context(...):
                generate_report()

        When using the shell, it may be easier to push and pop the
        context manually to avoid indentation. ::

            ctx = app.test_request_context(...)
            ctx.push()
            ...
            ctx.pop()

        Takes the same arguments as Werkzeug's
        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from
        the application. See the linked Werkzeug docs for most of the
        available arguments. Flask-specific behavior is listed here.

        :param path: URL path being requested.
        :param base_url: Base URL where the app is being served, which
            ``path`` is relative to. If not given, built from
            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,
            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.
        :param subdomain: Subdomain name to append to
            :data:`SERVER_NAME`.
        :param url_scheme: Scheme to use instead of
            :data:`PREFERRED_URL_SCHEME`.
        :param data: The request body, either as a string or a dict of
            form keys and values.
        :param json: If given, this is serialized as JSON and passed as
            ``data``. Also defaults ``content_type`` to
            ``application/json``.
        :param args: other positional arguments passed to
            :class:`~werkzeug.test.EnvironBuilder`.
        :param kwargs: other keyword arguments passed to
            :class:`~werkzeug.test.EnvironBuilder`.
        'b'The actual WSGI application. This is not implemented in
        :meth:`__call__` so that middlewares can be applied without
        losing a reference to the app object. Instead of doing this::

            app = MyMiddleware(app)

        It's a better idea to do this instead::

            app.wsgi_app = MyMiddleware(app.wsgi_app)

        Then you still have the original application object around and
        can continue to call methods on it.

        .. versionchanged:: 0.7
            Teardown events for the request and app contexts are called
            even if an unhandled error occurs. Other events may not be
            called depending on when an error occurs during dispatch.
            See :ref:`callbacks-and-errors`.

        :param environ: A WSGI environment.
        :param start_response: A callable accepting a status code,
            a list of headers, and an optional exception context to
            start the response.
        'u'The actual WSGI application. This is not implemented in
        :meth:`__call__` so that middlewares can be applied without
        losing a reference to the app object. Instead of doing this::

            app = MyMiddleware(app)

        It's a better idea to do this instead::

            app.wsgi_app = MyMiddleware(app.wsgi_app)

        Then you still have the original application object around and
        can continue to call methods on it.

        .. versionchanged:: 0.7
            Teardown events for the request and app contexts are called
            even if an unhandled error occurs. Other events may not be
            called depending on when an error occurs during dispatch.
            See :ref:`callbacks-and-errors`.

        :param environ: A WSGI environment.
        :param start_response: A callable accepting a status code,
            a list of headers, and an optional exception context to
            start the response.
        'b'The WSGI server calls the Flask application object as the
        WSGI application. This calls :meth:`wsgi_app`, which can be
        wrapped to apply middleware.
        'u'The WSGI server calls the Flask application object as the
        WSGI application. This calls :meth:`wsgi_app`, which can be
        wrapped to apply middleware.
        'u'flask.app'Command-line parsing library

This module is an optparse-inspired command-line parsing library that:

    - handles both optional and positional arguments
    - produces highly informative usage messages
    - supports parsers that dispatch to sub-parsers

The following is a simple usage example that sums integers from the
command-line and writes the result to a file::

    parser = argparse.ArgumentParser(
        description='sum the integers at the command line')
    parser.add_argument(
        'integers', metavar='int', nargs='+', type=int,
        help='an integer to be summed')
    parser.add_argument(
        '--log', default=sys.stdout, type=argparse.FileType('w'),
        help='the file where the sum should be written')
    args = parser.parse_args()
    args.log.write('%s' % sum(args.integers))
    args.log.close()

The module contains the following public classes:

    - ArgumentParser -- The main entry point for command-line parsing. As the
        example above shows, the add_argument() method is used to populate
        the parser with actions for optional and positional arguments. Then
        the parse_args() method is invoked to convert the args at the
        command-line into an object with attributes.

    - ArgumentError -- The exception raised by ArgumentParser objects when
        there are errors with the parser's actions. Errors raised while
        parsing the command-line are caught by ArgumentParser and emitted
        as command-line messages.

    - FileType -- A factory for defining types of files to be created. As the
        example above shows, instances of FileType are typically passed as
        the type= argument of add_argument() calls.

    - Action -- The base class for parser actions. Typically actions are
        selected by passing strings like 'store_true' or 'append_const' to
        the action= argument of add_argument(). However, for greater
        customization of ArgumentParser actions, subclasses of Action may
        be defined and passed as the action= argument.

    - HelpFormatter, RawDescriptionHelpFormatter, RawTextHelpFormatter,
        ArgumentDefaultsHelpFormatter -- Formatter classes which
        may be passed as the formatter_class= argument to the
        ArgumentParser constructor. HelpFormatter is the default,
        RawDescriptionHelpFormatter and RawTextHelpFormatter tell the parser
        not to change the formatting for help text, and
        ArgumentDefaultsHelpFormatter adds information about argument defaults
        to the help.

All other classes in this module are considered implementation details.
(Also note that HelpFormatter and RawDescriptionHelpFormatter are only
considered public as object names -- the API of the formatter objects is
still considered an implementation detail.)
1.1ArgumentParserArgumentTypeErrorBooleanOptionalActionFileTypeArgumentDefaultsHelpFormatterRawDescriptionHelpFormatterRawTextHelpFormatterMetavarTypeHelpFormatterActionONE_OR_MOREOPTIONALPARSERREMAINDERSUPPRESSZERO_OR_MOREngettext==SUPPRESS==A..._unrecognized_args_UNRECOGNIZED_ARGS_ATTR_AttributeHolderAbstract base class that provides __repr__.

    The __repr__ method returns a string in the format::
        ClassName(attr=name, attr=name, ...)
    The attributes are determined either by a class-level attribute,
    '_kwarg_names', or by inspecting the instance __dict__.
    type_namearg_stringsstar_args_get_args_get_kwargs%s=%r**%s_copy_itemsFormatter for generating usage messages and argument help strings.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    progindent_incrementmax_help_position_prog_indent_increment_max_help_position_width_current_indent_level_action_max_length_Section_root_section_current_section_whitespace_matcher\n\n\n+_long_break_matcher_indent_dedentIndent decreased below 0.headingformat_help_join_partsitem_helpcurrent_indent%*s%s:
_add_itemstart_sectionend_sectionadd_text_format_textadd_usageusageactions_format_usageadd_argumenthelp_format_action_invocationget_invocationinvocationssubaction_iter_indented_subactionsinvocation_lengthaction_length_format_actionadd_arguments

part_stringsusage: %(prog)soptionalspositionalsoption_strings_format_actions_usageaction_usagetext_width\(.*?\)+(?=\s|$)|\[.*?\]+(?=\s|$)|\S+r'\(.*?\)+(?=\s|$)|'r'\[.*?\]+(?=\s|$)|'r'\S+'part_regexpopt_usagepos_usageopt_partspos_partsget_lines0.75%s%s

group_actionsinserts_group_actions_get_default_metavar_for_positional_format_argsoption_stringnargsformat_usage_get_default_metavar_for_optionalargs_string%s %s[\[(][\])](%s) \1 (%s)%s *%s\(([^|]*)\)%(prog)_fill_texthelp_positionhelp_widthaction_widthaction_headertup%*s%s
%*s%-*s  indent_first_expand_helphelp_text_split_lineshelp_lines_metavar_formattermetavardefault_metavarchoiceschoicechoice_strstuple_sizeget_metavar[%s [%s ...]][%s ...]%s [%s ...]%s ...formatsinvalid nargs valuechoices_str_get_help_string_get_subactionsget_subactionswrapdestHelp message formatter which retains any formatting in descriptions.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    Help message formatter which retains formatting of all help text.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    Help message formatter which adds default values to argument help.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    %(default)defaulting_nargs (default: %(default)s)Help message formatter which uses the argument 'type' as the default
    metavar value (instead of the argument 'dest')

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    _get_action_nameAn error from creating or using an argument (optional or positional).

    The string value of this exception is the message, augmented with
    information about the argument that caused it.
    argument_nameargument %(argument_name)s: %(message)sAn error from trying to convert a command line string to a type.Information about how to convert command line strings to Python objects.

    Action objects are used by an ArgumentParser to represent the information
    needed to parse a single argument from one or more strings from the
    command line. The keyword arguments to the Action constructor are also
    all attributes of Action instances.

    Keyword Arguments:

        - option_strings -- A list of command-line option strings which
            should be associated with this action.

        - dest -- The name of the attribute to hold the created object(s)

        - nargs -- The number of command-line arguments that should be
            consumed. By default, one argument will be consumed and a single
            value will be produced.  Other values include:
                - N (an integer) consumes N arguments (and produces a list)
                - '?' consumes zero or one arguments
                - '*' consumes zero or more arguments (and produces a list)
                - '+' consumes one or more arguments (and produces a list)
            Note that the difference between the default and nargs=1 is that
            with the default, a single value will be produced, while with
            nargs=1, a list containing a single value will be produced.

        - const -- The value to be produced if the option is specified and the
            option uses an action that takes no values.

        - default -- The value to be produced if the option is not specified.

        - type -- A callable that accepts a single string argument, and
            returns the converted value.  The standard Python types str, int,
            float, and complex are useful examples of such callables.  If None,
            str is used.

        - choices -- A container of values that should be allowed. If not None,
            after a command-line argument has been converted to the appropriate
            type, an exception will be raised if it is not a member of this
            collection.

        - required -- True if the action must always be specified at the
            command line. This is only meaningful for optional command-line
            arguments.

        - help -- The help string describing the argument.

        - metavar -- The name to be used for the option's argument with the
            help string. If None, the 'dest' value will be used as the name.
    const.__call__() not defined_option_strings--no- | _StoreActionnargs for store actions must be != 0; if you have nothing to store, actions such as store true or store const may be more appropriate'nargs for store actions must be != 0; if you ''have nothing to store, actions such as store ''true or store const may be more appropriate'nargs must be %r to supply const_StoreConstAction_StoreTrueAction_StoreFalseAction_AppendActionnargs for append actions must be != 0; if arg strings are not supplying the value to append, the append const action may be more appropriate'nargs for append actions must be != 0; if arg ''strings are not supplying the value to append, ''the append const action may be more appropriate'_AppendConstAction_CountAction_HelpActionprint_help_VersionActionshow program's version number and exit_get_formatter_print_message_SubParsersAction_ChoicesPseudoActionsupparser_class_prog_prefix_parser_class_name_parser_map_choices_actionsadd_parserchoice_actionparser_nameunknown parser %(parser_name)r (choices: %(choices)s)parse_known_argssubnamespace_ExtendActionFactory for creating file object types

    Instances of FileType are typically passed as type= arguments to the
    ArgumentParser add_argument() method.

    Keyword Arguments:
        - mode -- A string indicating how the file is to be opened. Accepts the
            same values as the builtin open() function.
        - bufsize -- The file's desired buffer size. Accepts the same values as
            the builtin open() function.
        - encoding -- The file's encoding. Accepts the same values as the
            builtin open() function.
        - errors -- A string indicating how encoding and decoding errors are to
            be handled. Accepts the same value as the builtin open() function.
    bufsize_bufsize_encoding_errorsargument "-" with mode %rcan't open '%(filename)s': %(error)sargs_strSimple object for storing attributes.

    Implements equality by attribute names and values, and provides a simple
    string representation.
    _ActionsContainerprefix_charsargument_defaultconflict_handler_registriesstorestore_conststore_truestore_falseappend_const_get_handler_actions_option_string_actions_action_groups_mutually_exclusive_groups_defaults^-\d+$|^-\d*\.\d+$_negative_number_matcher_has_negative_number_optionalsregistry_name_registry_getset_defaultsget_default
        add_argument(dest, ..., name=value, ...)
        add_argument(option_string, option_string, ..., name=value, ...)
        dest supplied twice for positional argument_get_positional_kwargs_get_optional_kwargs_pop_action_classaction_classunknown action "%s"type_func%r is not callable%r is a FileType class object, instance of it must be passed'%r is a FileType class object, instance of it'' must be passed'length of metavar tuple does not match nargs_add_actionadd_argument_group_ArgumentGroupadd_mutually_exclusive_group_MutuallyExclusiveGroup_check_conflictcontainer_remove_action_add_container_actionstitle_group_mapcannot merge actions - two groups are named %rgroup_mapmutex_group'required' is an invalid argument for positionalslong_option_stringsinvalid option string %(option)r: must start with a character %(prefix_chars)r'invalid option string %(option)r: ''must start with a character %(prefix_chars)r'dest_option_stringdest= is required for options like %r_handle_conflict_%shandler_func_nameinvalid conflict_resolution value: %rconfl_optionalsconfl_optional_handle_conflict_errorconflicting_actionsconflicting option string: %sconflicting option strings: %sconflict_string_handle_conflict_resolvesuper_init_containermutually exclusive arguments must be optionalObject for parsing command line strings into Python objects.

    Keyword Arguments:
        - prog -- The name of the program (default: sys.argv[0])
        - usage -- A usage message (default: auto-generated from arguments)
        - description -- A description of what the program does
        - epilog -- Text following the argument descriptions
        - parents -- Parsers whose arguments should be copied into this one
        - formatter_class -- HelpFormatter class for printing help messages
        - prefix_chars -- Characters that prefix optional arguments
        - fromfile_prefix_chars -- Characters that prefix files containing
            additional arguments
        - argument_default -- The default value for all arguments
        - conflict_handler -- String indicating how to handle conflicts
        - add_help -- Add a -h/-help option
        - allow_abbrev -- Allow long options to be abbreviated unambiguously
        - exit_on_error -- Determines whether or not ArgumentParser exits with
            error info when an error occurs
    epilogformatter_classfromfile_prefix_charsadd_helpallow_abbrevexit_on_errorsuperinitadd_grouppositional arguments_positionalsoptional arguments_optionals_subparsersidentitydefault_prefixshow this help message and exitadd_subparserscannot have multiple subparser argumentssubcommands_get_positional_actionsparsers_class_get_optional_actionsparse_argsunrecognized arguments: %s_parse_known_args_read_args_from_filesaction_conflictsmutex_actionconflictsoption_string_indicesarg_string_pattern_partsarg_strings_iterarg_string_parse_optionaloption_tuplearg_strings_patternseen_actionsseen_non_default_actionstake_actionargument_strings_get_valuesargument_valuesconflict_actionnot allowed with argument %saction_nameconsume_optionalstart_indexexplicit_arg_match_argumentmatch_argumentaction_tuplesarg_countnew_explicit_argoptionals_mapignored explicit argument %rselected_patternsconsume_positionals_match_arguments_partialmatch_partialselected_patternarg_countsmax_option_string_indexnext_option_string_indexpositionals_end_indexstringsstop_indexrequired_actions_get_valuethe following arguments are required: %sone of the arguments %s is requirednew_arg_stringsargs_filearg_lineconvert_arg_line_to_args_get_nargs_patternnargs_patternexpected one argumentexpected at most one argumentexpected at least one argumentnargs_errorsexpected %s argumentexpected %s argumentsactions_slice_get_option_tuplesoption_tuplesambiguous option: %(option)s could match %(matches)soption_prefixshort_option_prefixshort_explicit_argunexpected option string: %s(-*A-*)(-*A?-*)(-*[A-]*)(-*A[A-]*)([-AO]*)(-*A[-AO]*)(-*-*)(-*%s-*)-*parse_intermixed_argsparse_known_intermixed_argsparse_intermixed_args: positional arg with nargs=%s'parse_intermixed_args: positional arg'' with nargs=%s'parse_intermixed_args: positional in mutuallyExclusiveGroup'parse_intermixed_args: positional in'' mutuallyExclusiveGroup'save_usagesave_nargssave_defaultremaining_argsDo not expect %s in %ssave_required_check_valueinvalid %(type)s value: %(value)rinvalid choice: %(value)r (choose from %(choices)s)action_groupprint_usageerror(message: string)

        Prints a usage message incorporating the message to stderr and
        exits.

        If you override this in a subclass, it should not return -- it
        should either exit or raise an exception.
        %(prog)s: error: %(message)s
# Author: Steven J. Bethard <steven.bethard@gmail.com>.# New maintainer as of 29 August 2019:  Raymond Hettinger <raymond.hettinger@gmail.com># =============================# Utility functions and classes# The copy module is used only in the 'append' and 'append_const'# actions, and it is needed only when the default value isn't a list.# Delay its import for speeding up the common case.# ===============# Formatting Help# default setting for width# ===============================# Section and indentation methods# format the indented section# return nothing if the section was empty# add the heading if the section was non-empty# join the section-initial newline, the heading and the help# ========================# Message building methods# find all invocations# update the maximum item length# add the item to the list# =======================# Help-formatting methods# if usage is specified, use that# if no optionals or positionals are available, usage is just prog# if optionals and positionals are available, calculate usage# split optionals from positionals# build full usage string# wrap the usage parts if it's too long# break usage into wrappable parts# helper for wrapping lines# if prog is short, follow it with optionals or positionals# if prog is long, put it on its own line# join lines into usage# prefix with 'usage:'# find group indices and identify actions in groups# collect all actions format strings# suppressed arguments are marked with None# remove | separators for suppressed arguments# produce all arg strings# if it's in a group, strip the outer []# add the action string to the list# produce the first way to invoke the option in brackets# if the Optional doesn't take a value, format is:#    -s or --long# if the Optional takes a value, format is:#    -s ARGS or --long ARGS# make it look optional if it's not required or in a group# insert things at the necessary indices# join all the action items with spaces# clean up separators for mutually exclusive groups# return the text# determine the required width and the entry label# no help; start on same line and add a final newline# short action name; start on the same line and pad two spaces# long action name; start on the next line# collect the pieces of the action help# if there was help for the action, add lines of help text# or add a newline if the description doesn't end with one# if there are any sub-actions, add their help as well# return a single string#    -s, --long#    -s ARGS, --long ARGS# The textwrap module is used only for formatting help.# Delay its import for speeding up the common usage of argparse.# =====================# Options and Arguments# ==============# Action classes# set prog from the existing prefix# create a pseudo-action to hold the choice help# create the parser and add it to the map# make parser available under aliases also# set the parser name if requested# select the parser# parse all the remaining options into the namespace# store any unrecognized options on the object, so that the top# level parser can decide what to do with them# In case this subparser defines new defaults, we parse them# in a new namespace object and then update the original# namespace for the relevant parts.# Type classes# the special argument "-" means sys.std{in,out}# all other arguments are used as file names# ===========================# Optional and Positional Parsing# set up registries# register actions# raise an exception if the conflict handler is invalid# action storage# groups# defaults storage# determines whether an "option" looks like a negative number# whether or not there are any optionals that look like negative# numbers -- uses a list so it can be shared and edited# ====================# Registration methods# ==================================# Namespace default accessor methods# if these defaults match any existing arguments, replace# the previous default on the object with the new one# Adding argument actions# if no positional args are supplied or only one is supplied and# it doesn't look like an option string, parse a positional# argument# otherwise, we're adding an optional argument# if no default was supplied, use the parser-level default# create the action object, and add it to the parser# raise an error if the action type is not callable# raise an error if the metavar does not match the type# resolve any conflicts# add to actions list# index the action by any option strings it has# set the flag if any option strings look like negative numbers# return the created action# collect groups by titles# map each action to its group# if a group with the title exists, use that, otherwise# create a new group matching the container's group# map the actions to their new group# add container's mutually exclusive groups# NOTE: if add_mutually_exclusive_group ever gains title= and# description= then this code will need to be expanded as above# map the actions to their new mutex group# add all actions to this container or their group# make sure required is not specified# mark positional arguments as required if at least one is# always required# return the keyword arguments with no option strings# determine short and long option strings# error on strings that don't start with an appropriate prefix# strings starting with two prefix characters are long options# infer destination, '--foo-bar' -> 'foo_bar' and '-x' -> 'x'# return the updated keyword arguments# determine function from conflict handler string# find all options that conflict with this option# remove all conflicting options# remove the conflicting option# if the option now has no option string, remove it from the# container holding it# add any missing keyword arguments by checking the container# group attributes# share most attributes with the container# default setting for prog# register types# add help argument if necessary# (using explicit default to override global argument_default)# add parent arguments and defaults# Pretty __repr__ methods# Optional/Positional adding methods# add the parser class to the arguments if it's not present# prog defaults to the usage message of this parser, skipping# optional arguments and with no "usage:" prefix# create the parsers action and add it to the positionals list# return the created parsers action# =====================================# Command line argument parsing methods# args default to the system args# make sure that args are mutable# default Namespace built from parser defaults# add any action defaults that aren't present# add any parser defaults that aren't present# parse the arguments and exit if there are any errors# replace arg strings that are file references# map all mutually exclusive arguments to the other arguments# they can't occur with# find all option indices, and determine the arg_string_pattern# which has an 'O' if there is an option at an index,# an 'A' if there is an argument, or a '-' if there is a '--'# all args after -- are non-options# otherwise, add the arg to the arg strings# and note the index if it was an option# join the pieces together to form the pattern# converts arg strings to the appropriate and then takes the action# error if this argument is not allowed with other previously# seen arguments, assuming that actions that use the default# value don't really count as "present"# take the action if we didn't receive a SUPPRESS value# (e.g. from a default)# function to convert arg_strings into an optional action# get the optional identified at this index# identify additional optionals in the same arg string# (e.g. -xyz is the same as -x -y -z if no args are required)# if we found no optional action, skip it# if there is an explicit argument, try to match the# optional's string arguments to only this# if the action is a single-dash option and takes no# arguments, try to parse more single-dash options out# of the tail of the option string# if the action expect exactly one argument, we've# successfully matched the option; exit the loop# error if a double-dash option did not use the# explicit argument# if there is no explicit argument, try to match the# optional's string arguments with the following strings# if successful, exit the loop# add the Optional to the list and return the index at which# the Optional's string args stopped# the list of Positionals left to be parsed; this is modified# by consume_positionals()# function to convert arg_strings into positional actions# match as many Positionals as possible# slice off the appropriate arg strings for each Positional# and add the Positional and its args to the list# slice off the Positionals that we just parsed and return the# index at which the Positionals' string args stopped# consume Positionals and Optionals alternately, until we have# passed the last option string# consume any Positionals preceding the next option# only try to parse the next optional if we didn't consume# the option string during the positionals parsing# if we consumed all the positionals we could and we're not# at the index of an option string, there were extra arguments# consume the next optional and any arguments for it# consume any positionals following the last Optional# if we didn't consume all the argument strings, there were extras# make sure all required actions were present and also convert# action defaults which were not given as arguments# Convert action default now instead of doing it before# parsing arguments to avoid calling convert functions# twice (which may fail) if the argument was given, but# only if it was defined already in the namespace# make sure all required groups had one option present# if no actions were used, report the error# return the updated namespace and the extra arguments# expand arguments referencing files# for regular arguments, just add them back into the list# replace arguments referencing files with the file content# return the modified argument list# match the pattern for this action to the arg strings# raise an exception if we weren't able to find a match# return the number of arguments matched# progressively shorten the actions list by slicing off the# final actions until we find a match# return the list of arg string counts# if it's an empty string, it was meant to be a positional# if it doesn't start with a prefix, it was meant to be positional# if the option string is present in the parser, return the action# if it's just a single character, it was meant to be positional# if the option string before the "=" is present, return the action# search through all possible prefixes of the option string# and all actions in the parser for possible interpretations# if multiple actions match, the option string was ambiguous# if exactly one action matched, this segmentation is good,# so return the parsed action# if it was not found as an option, but it looks like a negative# number, it was meant to be positional# unless there are negative-number-like options# if it contains a space, it was meant to be a positional# it was meant to be an optional but there is no such option# in this parser (though it might be a valid option in a subparser)# option strings starting with two prefix characters are only# split at the '='# single character options can be concatenated with their arguments# but multiple character options always have to have their argument# separate# shouldn't ever get here# return the collected option tuples# in all examples below, we have to allow for '--' args# which are represented as '-' in the pattern# the default (None) is assumed to be a single argument# allow zero or one arguments# allow zero or more arguments# allow one or more arguments# allow any number of options or arguments# allow one argument followed by any number of options or arguments# suppress action, like nargs=0# all others should be integers# if this is an optional action, -- is not allowed# return the pattern# Alt command line argument parsing, allowing free intermix# returns a namespace and list of extras# positional can be freely intermixed with optionals.  optionals are# first parsed with all positional arguments deactivated.  The 'extras'# are then parsed.  If the parser definition is incompatible with the# intermixed assumptions (e.g. use of REMAINDER, subparsers) a# TypeError is raised.# positionals are 'deactivated' by setting nargs and default to# SUPPRESS.  This blocks the addition of that positional to the# namespace# capture the full usage for use in error messages# deactivate positionals# action.nargs = 0# remove the empty positional values from namespace# restore nargs and usage before exiting# parse positionals.  optionals aren't normally required, but# they could be, so make sure they aren't.# restore parser values before exiting# Value conversion methods# for everything but PARSER, REMAINDER args, strip out first '--'# optional argument produces a default when not present# when nargs='*' on a positional, if there were no command-line# args, use the default if it is anything other than None# single argument or optional argument produces a single value# REMAINDER arguments convert all values, checking none# PARSER arguments convert all values, but check only the first# SUPPRESS argument does not put anything in the namespace# all other types of nargs produce a list# return the converted value# convert the value to the appropriate type# ArgumentTypeErrors indicate errors# TypeErrors or ValueErrors also indicate errors# converted value must be one of the choices (if specified)# usage# description# positionals, optionals and user-defined groups# epilog# determine help from format above# Help-printing methods# Exiting methodsb'Command-line parsing library

This module is an optparse-inspired command-line parsing library that:

    - handles both optional and positional arguments
    - produces highly informative usage messages
    - supports parsers that dispatch to sub-parsers

The following is a simple usage example that sums integers from the
command-line and writes the result to a file::

    parser = argparse.ArgumentParser(
        description='sum the integers at the command line')
    parser.add_argument(
        'integers', metavar='int', nargs='+', type=int,
        help='an integer to be summed')
    parser.add_argument(
        '--log', default=sys.stdout, type=argparse.FileType('w'),
        help='the file where the sum should be written')
    args = parser.parse_args()
    args.log.write('%s' % sum(args.integers))
    args.log.close()

The module contains the following public classes:

    - ArgumentParser -- The main entry point for command-line parsing. As the
        example above shows, the add_argument() method is used to populate
        the parser with actions for optional and positional arguments. Then
        the parse_args() method is invoked to convert the args at the
        command-line into an object with attributes.

    - ArgumentError -- The exception raised by ArgumentParser objects when
        there are errors with the parser's actions. Errors raised while
        parsing the command-line are caught by ArgumentParser and emitted
        as command-line messages.

    - FileType -- A factory for defining types of files to be created. As the
        example above shows, instances of FileType are typically passed as
        the type= argument of add_argument() calls.

    - Action -- The base class for parser actions. Typically actions are
        selected by passing strings like 'store_true' or 'append_const' to
        the action= argument of add_argument(). However, for greater
        customization of ArgumentParser actions, subclasses of Action may
        be defined and passed as the action= argument.

    - HelpFormatter, RawDescriptionHelpFormatter, RawTextHelpFormatter,
        ArgumentDefaultsHelpFormatter -- Formatter classes which
        may be passed as the formatter_class= argument to the
        ArgumentParser constructor. HelpFormatter is the default,
        RawDescriptionHelpFormatter and RawTextHelpFormatter tell the parser
        not to change the formatting for help text, and
        ArgumentDefaultsHelpFormatter adds information about argument defaults
        to the help.

All other classes in this module are considered implementation details.
(Also note that HelpFormatter and RawDescriptionHelpFormatter are only
considered public as object names -- the API of the formatter objects is
still considered an implementation detail.)
'u'Command-line parsing library

This module is an optparse-inspired command-line parsing library that:

    - handles both optional and positional arguments
    - produces highly informative usage messages
    - supports parsers that dispatch to sub-parsers

The following is a simple usage example that sums integers from the
command-line and writes the result to a file::

    parser = argparse.ArgumentParser(
        description='sum the integers at the command line')
    parser.add_argument(
        'integers', metavar='int', nargs='+', type=int,
        help='an integer to be summed')
    parser.add_argument(
        '--log', default=sys.stdout, type=argparse.FileType('w'),
        help='the file where the sum should be written')
    args = parser.parse_args()
    args.log.write('%s' % sum(args.integers))
    args.log.close()

The module contains the following public classes:

    - ArgumentParser -- The main entry point for command-line parsing. As the
        example above shows, the add_argument() method is used to populate
        the parser with actions for optional and positional arguments. Then
        the parse_args() method is invoked to convert the args at the
        command-line into an object with attributes.

    - ArgumentError -- The exception raised by ArgumentParser objects when
        there are errors with the parser's actions. Errors raised while
        parsing the command-line are caught by ArgumentParser and emitted
        as command-line messages.

    - FileType -- A factory for defining types of files to be created. As the
        example above shows, instances of FileType are typically passed as
        the type= argument of add_argument() calls.

    - Action -- The base class for parser actions. Typically actions are
        selected by passing strings like 'store_true' or 'append_const' to
        the action= argument of add_argument(). However, for greater
        customization of ArgumentParser actions, subclasses of Action may
        be defined and passed as the action= argument.

    - HelpFormatter, RawDescriptionHelpFormatter, RawTextHelpFormatter,
        ArgumentDefaultsHelpFormatter -- Formatter classes which
        may be passed as the formatter_class= argument to the
        ArgumentParser constructor. HelpFormatter is the default,
        RawDescriptionHelpFormatter and RawTextHelpFormatter tell the parser
        not to change the formatting for help text, and
        ArgumentDefaultsHelpFormatter adds information about argument defaults
        to the help.

All other classes in this module are considered implementation details.
(Also note that HelpFormatter and RawDescriptionHelpFormatter are only
considered public as object names -- the API of the formatter objects is
still considered an implementation detail.)
'b'1.1'u'1.1'b'ArgumentParser'u'ArgumentParser'b'ArgumentError'u'ArgumentError'b'ArgumentTypeError'u'ArgumentTypeError'b'BooleanOptionalAction'u'BooleanOptionalAction'b'FileType'u'FileType'b'HelpFormatter'u'HelpFormatter'b'ArgumentDefaultsHelpFormatter'u'ArgumentDefaultsHelpFormatter'b'RawDescriptionHelpFormatter'u'RawDescriptionHelpFormatter'b'RawTextHelpFormatter'u'RawTextHelpFormatter'b'MetavarTypeHelpFormatter'u'MetavarTypeHelpFormatter'b'Action'u'Action'b'ONE_OR_MORE'u'ONE_OR_MORE'b'OPTIONAL'u'OPTIONAL'b'PARSER'u'PARSER'b'REMAINDER'u'REMAINDER'b'SUPPRESS'u'SUPPRESS'b'ZERO_OR_MORE'u'ZERO_OR_MORE'b'==SUPPRESS=='u'==SUPPRESS=='b'A...'u'A...'b'_unrecognized_args'u'_unrecognized_args'b'Abstract base class that provides __repr__.

    The __repr__ method returns a string in the format::
        ClassName(attr=name, attr=name, ...)
    The attributes are determined either by a class-level attribute,
    '_kwarg_names', or by inspecting the instance __dict__.
    'u'Abstract base class that provides __repr__.

    The __repr__ method returns a string in the format::
        ClassName(attr=name, attr=name, ...)
    The attributes are determined either by a class-level attribute,
    '_kwarg_names', or by inspecting the instance __dict__.
    'b'%s=%r'u'%s=%r'b'**%s'u'**%s'b'Formatter for generating usage messages and argument help strings.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    'u'Formatter for generating usage messages and argument help strings.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    'b'\n\n\n+'u'\n\n\n+'b'Indent decreased below 0.'u'Indent decreased below 0.'b'%*s%s:
'u'%*s%s:
'b'

'u'

'b'usage: 'u'usage: 'b'%(prog)s'u'%(prog)s'b'\(.*?\)+(?=\s|$)|\[.*?\]+(?=\s|$)|\S+'u'\(.*?\)+(?=\s|$)|\[.*?\]+(?=\s|$)|\S+'b'%s%s

'u'%s%s

'b'%s %s'u'%s %s'b'[\[(]'u'[\[(]'b'[\])]'u'[\])]'b'(%s) 'u'(%s) 'b'\1'u'\1'b' (%s)'u' (%s)'b'%s *%s'u'%s *%s'b'\(([^|]*)\)'u'\(([^|]*)\)'b'%(prog)'u'%(prog)'b'%*s%s
'u'%*s%s
'b'%*s%-*s  'u'%*s%-*s  'b'[%s [%s ...]]'u'[%s [%s ...]]'b'[%s ...]'u'[%s ...]'b'%s [%s ...]'u'%s [%s ...]'b'%s ...'u'%s ...'b'invalid nargs value'u'invalid nargs value'b'choices'u'choices'b'Help message formatter which retains any formatting in descriptions.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    'u'Help message formatter which retains any formatting in descriptions.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    'b'Help message formatter which retains formatting of all help text.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    'u'Help message formatter which retains formatting of all help text.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    'b'Help message formatter which adds default values to argument help.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    'u'Help message formatter which adds default values to argument help.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    'b'%(default)'u'%(default)'b' (default: %(default)s)'u' (default: %(default)s)'b'Help message formatter which uses the argument 'type' as the default
    metavar value (instead of the argument 'dest')

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    'u'Help message formatter which uses the argument 'type' as the default
    metavar value (instead of the argument 'dest')

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    'b'An error from creating or using an argument (optional or positional).

    The string value of this exception is the message, augmented with
    information about the argument that caused it.
    'u'An error from creating or using an argument (optional or positional).

    The string value of this exception is the message, augmented with
    information about the argument that caused it.
    'b'argument %(argument_name)s: %(message)s'u'argument %(argument_name)s: %(message)s'b'An error from trying to convert a command line string to a type.'u'An error from trying to convert a command line string to a type.'b'Information about how to convert command line strings to Python objects.

    Action objects are used by an ArgumentParser to represent the information
    needed to parse a single argument from one or more strings from the
    command line. The keyword arguments to the Action constructor are also
    all attributes of Action instances.

    Keyword Arguments:

        - option_strings -- A list of command-line option strings which
            should be associated with this action.

        - dest -- The name of the attribute to hold the created object(s)

        - nargs -- The number of command-line arguments that should be
            consumed. By default, one argument will be consumed and a single
            value will be produced.  Other values include:
                - N (an integer) consumes N arguments (and produces a list)
                - '?' consumes zero or one arguments
                - '*' consumes zero or more arguments (and produces a list)
                - '+' consumes one or more arguments (and produces a list)
            Note that the difference between the default and nargs=1 is that
            with the default, a single value will be produced, while with
            nargs=1, a list containing a single value will be produced.

        - const -- The value to be produced if the option is specified and the
            option uses an action that takes no values.

        - default -- The value to be produced if the option is not specified.

        - type -- A callable that accepts a single string argument, and
            returns the converted value.  The standard Python types str, int,
            float, and complex are useful examples of such callables.  If None,
            str is used.

        - choices -- A container of values that should be allowed. If not None,
            after a command-line argument has been converted to the appropriate
            type, an exception will be raised if it is not a member of this
            collection.

        - required -- True if the action must always be specified at the
            command line. This is only meaningful for optional command-line
            arguments.

        - help -- The help string describing the argument.

        - metavar -- The name to be used for the option's argument with the
            help string. If None, the 'dest' value will be used as the name.
    'u'Information about how to convert command line strings to Python objects.

    Action objects are used by an ArgumentParser to represent the information
    needed to parse a single argument from one or more strings from the
    command line. The keyword arguments to the Action constructor are also
    all attributes of Action instances.

    Keyword Arguments:

        - option_strings -- A list of command-line option strings which
            should be associated with this action.

        - dest -- The name of the attribute to hold the created object(s)

        - nargs -- The number of command-line arguments that should be
            consumed. By default, one argument will be consumed and a single
            value will be produced.  Other values include:
                - N (an integer) consumes N arguments (and produces a list)
                - '?' consumes zero or one arguments
                - '*' consumes zero or more arguments (and produces a list)
                - '+' consumes one or more arguments (and produces a list)
            Note that the difference between the default and nargs=1 is that
            with the default, a single value will be produced, while with
            nargs=1, a list containing a single value will be produced.

        - const -- The value to be produced if the option is specified and the
            option uses an action that takes no values.

        - default -- The value to be produced if the option is not specified.

        - type -- A callable that accepts a single string argument, and
            returns the converted value.  The standard Python types str, int,
            float, and complex are useful examples of such callables.  If None,
            str is used.

        - choices -- A container of values that should be allowed. If not None,
            after a command-line argument has been converted to the appropriate
            type, an exception will be raised if it is not a member of this
            collection.

        - required -- True if the action must always be specified at the
            command line. This is only meaningful for optional command-line
            arguments.

        - help -- The help string describing the argument.

        - metavar -- The name to be used for the option's argument with the
            help string. If None, the 'dest' value will be used as the name.
    'b'option_strings'u'option_strings'b'dest'u'dest'b'nargs'u'nargs'b'const'u'const'b'help'u'help'b'metavar'u'metavar'b'.__call__() not defined'u'.__call__() not defined'b'--no-'u'--no-'b' | 'u' | 'b'nargs for store actions must be != 0; if you have nothing to store, actions such as store true or store const may be more appropriate'u'nargs for store actions must be != 0; if you have nothing to store, actions such as store true or store const may be more appropriate'b'nargs must be %r to supply const'u'nargs must be %r to supply const'b'nargs for append actions must be != 0; if arg strings are not supplying the value to append, the append const action may be more appropriate'u'nargs for append actions must be != 0; if arg strings are not supplying the value to append, the append const action may be more appropriate'b'show program's version number and exit'u'show program's version number and exit'b'prog'u'prog'b'aliases'b'parser_name'u'parser_name'b'unknown parser %(parser_name)r (choices: %(choices)s)'u'unknown parser %(parser_name)r (choices: %(choices)s)'b'Factory for creating file object types

    Instances of FileType are typically passed as type= arguments to the
    ArgumentParser add_argument() method.

    Keyword Arguments:
        - mode -- A string indicating how the file is to be opened. Accepts the
            same values as the builtin open() function.
        - bufsize -- The file's desired buffer size. Accepts the same values as
            the builtin open() function.
        - encoding -- The file's encoding. Accepts the same values as the
            builtin open() function.
        - errors -- A string indicating how encoding and decoding errors are to
            be handled. Accepts the same value as the builtin open() function.
    'u'Factory for creating file object types

    Instances of FileType are typically passed as type= arguments to the
    ArgumentParser add_argument() method.

    Keyword Arguments:
        - mode -- A string indicating how the file is to be opened. Accepts the
            same values as the builtin open() function.
        - bufsize -- The file's desired buffer size. Accepts the same values as
            the builtin open() function.
        - encoding -- The file's encoding. Accepts the same values as the
            builtin open() function.
        - errors -- A string indicating how encoding and decoding errors are to
            be handled. Accepts the same value as the builtin open() function.
    'b'argument "-" with mode %r'u'argument "-" with mode %r'b'can't open '%(filename)s': %(error)s'u'can't open '%(filename)s': %(error)s'b'Simple object for storing attributes.

    Implements equality by attribute names and values, and provides a simple
    string representation.
    'u'Simple object for storing attributes.

    Implements equality by attribute names and values, and provides a simple
    string representation.
    'b'action'u'action'b'store'u'store'b'store_const'u'store_const'b'store_true'u'store_true'b'store_false'u'store_false'b'append_const'u'append_const'b'extend'u'extend'b'^-\d+$|^-\d*\.\d+$'u'^-\d+$|^-\d*\.\d+$'b'
        add_argument(dest, ..., name=value, ...)
        add_argument(option_string, option_string, ..., name=value, ...)
        'u'
        add_argument(dest, ..., name=value, ...)
        add_argument(option_string, option_string, ..., name=value, ...)
        'b'dest supplied twice for positional argument'u'dest supplied twice for positional argument'b'unknown action "%s"'u'unknown action "%s"'b'%r is not callable'u'%r is not callable'b'%r is a FileType class object, instance of it must be passed'u'%r is a FileType class object, instance of it must be passed'b'_get_formatter'u'_get_formatter'b'length of metavar tuple does not match nargs'u'length of metavar tuple does not match nargs'b'cannot merge actions - two groups are named %r'u'cannot merge actions - two groups are named %r'b'required'u'required'b''required' is an invalid argument for positionals'u''required' is an invalid argument for positionals'b'prefix_chars'u'prefix_chars'b'invalid option string %(option)r: must start with a character %(prefix_chars)r'u'invalid option string %(option)r: must start with a character %(prefix_chars)r'b'dest= is required for options like %r'u'dest= is required for options like %r'b'_handle_conflict_%s'u'_handle_conflict_%s'b'invalid conflict_resolution value: %r'u'invalid conflict_resolution value: %r'b'conflicting option string: %s'u'conflicting option string: %s'b'conflicting option strings: %s'u'conflicting option strings: %s'b'conflict_handler'u'conflict_handler'b'argument_default'u'argument_default'b'mutually exclusive arguments must be optional'u'mutually exclusive arguments must be optional'b'Object for parsing command line strings into Python objects.

    Keyword Arguments:
        - prog -- The name of the program (default: sys.argv[0])
        - usage -- A usage message (default: auto-generated from arguments)
        - description -- A description of what the program does
        - epilog -- Text following the argument descriptions
        - parents -- Parsers whose arguments should be copied into this one
        - formatter_class -- HelpFormatter class for printing help messages
        - prefix_chars -- Characters that prefix optional arguments
        - fromfile_prefix_chars -- Characters that prefix files containing
            additional arguments
        - argument_default -- The default value for all arguments
        - conflict_handler -- String indicating how to handle conflicts
        - add_help -- Add a -h/-help option
        - allow_abbrev -- Allow long options to be abbreviated unambiguously
        - exit_on_error -- Determines whether or not ArgumentParser exits with
            error info when an error occurs
    'u'Object for parsing command line strings into Python objects.

    Keyword Arguments:
        - prog -- The name of the program (default: sys.argv[0])
        - usage -- A usage message (default: auto-generated from arguments)
        - description -- A description of what the program does
        - epilog -- Text following the argument descriptions
        - parents -- Parsers whose arguments should be copied into this one
        - formatter_class -- HelpFormatter class for printing help messages
        - prefix_chars -- Characters that prefix optional arguments
        - fromfile_prefix_chars -- Characters that prefix files containing
            additional arguments
        - argument_default -- The default value for all arguments
        - conflict_handler -- String indicating how to handle conflicts
        - add_help -- Add a -h/-help option
        - allow_abbrev -- Allow long options to be abbreviated unambiguously
        - exit_on_error -- Determines whether or not ArgumentParser exits with
            error info when an error occurs
    'b'positional arguments'u'positional arguments'b'optional arguments'u'optional arguments'b'show this help message and exit'u'show this help message and exit'b'usage'u'usage'b'description'u'description'b'formatter_class'u'formatter_class'b'add_help'u'add_help'b'cannot have multiple subparser arguments'u'cannot have multiple subparser arguments'b'parser_class'u'parser_class'b'subcommands'u'subcommands'b'unrecognized arguments: %s'u'unrecognized arguments: %s'b'not allowed with argument %s'u'not allowed with argument %s'b'ignored explicit argument %r'u'ignored explicit argument %r'b'the following arguments are required: %s'u'the following arguments are required: %s'b'one of the arguments %s is required'u'one of the arguments %s is required'b'expected one argument'u'expected one argument'b'expected at most one argument'u'expected at most one argument'b'expected at least one argument'u'expected at least one argument'b'expected %s argument'u'expected %s argument'b'expected %s arguments'u'expected %s arguments'b'matches'u'matches'b'ambiguous option: %(option)s could match %(matches)s'u'ambiguous option: %(option)s could match %(matches)s'b'unexpected option string: %s'u'unexpected option string: %s'b'(-*A-*)'u'(-*A-*)'b'(-*A?-*)'u'(-*A?-*)'b'(-*[A-]*)'u'(-*[A-]*)'b'(-*A[A-]*)'u'(-*A[A-]*)'b'([-AO]*)'u'([-AO]*)'b'(-*A[-AO]*)'u'(-*A[-AO]*)'b'(-*-*)'u'(-*-*)'b'(-*%s-*)'u'(-*%s-*)'b'-*'u'-*'b'parse_intermixed_args: positional arg with nargs=%s'u'parse_intermixed_args: positional arg with nargs=%s'b'parse_intermixed_args: positional in mutuallyExclusiveGroup'u'parse_intermixed_args: positional in mutuallyExclusiveGroup'b'Do not expect %s in %s'u'Do not expect %s in %s'b'value'b'invalid %(type)s value: %(value)r'u'invalid %(type)s value: %(value)r'b'invalid choice: %(value)r (choose from %(choices)s)'u'invalid choice: %(value)r (choose from %(choices)s)'b'error(message: string)

        Prints a usage message incorporating the message to stderr and
        exits.

        If you override this in a subclass, it should not return -- it
        should either exit or raise an exception.
        'u'error(message: string)

        Prints a usage message incorporating the message to stderr and
        exits.

        If you override this in a subclass, it should not return -- it
        should either exit or raise an exception.
        'b'%(prog)s: error: %(message)s
'u'%(prog)s: error: %(message)s
'u'Python.Python39.lib.argparse'u'Python39.lib.argparse'u'lib.argparse'u'argparse'u'array(typecode [, initializer]) -> array

Return a new array whose items are restricted by typecode, and
initialized from the optional initializer value, which must be a list,
string or iterable over elements of the appropriate type.

Arrays represent basic values and behave very much like lists, except
the type of objects stored in them is constrained. The type is specified
at object creation time by using a type code, which is a single character.
The following type codes are defined:

    Type code   C Type             Minimum size in bytes
    'b'         signed integer     1
    'B'         unsigned integer   1
    'u'         Unicode character  2 (see note)
    'h'         signed integer     2
    'H'         unsigned integer   2
    'i'         signed integer     2
    'I'         unsigned integer   2
    'l'         signed integer     4
    'L'         unsigned integer   4
    'q'         signed integer     8 (see note)
    'Q'         unsigned integer   8 (see note)
    'f'         floating point     4
    'd'         floating point     8

NOTE: The 'u' typecode corresponds to Python's unicode character. On
narrow builds this is 2-bytes on wide builds this is 4-bytes.

NOTE: The 'q' and 'Q' type codes are only available if the platform
C compiler used to build Python supports 'long long', or, on Windows,
'__int64'.

Methods:

append() -- append a new item to the end of the array
buffer_info() -- return information giving the current memory info
byteswap() -- byteswap all the items of the array
count() -- return number of occurrences of an object
extend() -- extend array by appending multiple elements from an iterable
fromfile() -- read items from a file object
fromlist() -- append items from the list
frombytes() -- append items from the string
index() -- return index of first occurrence of an object
insert() -- insert a new item into the array at a provided position
pop() -- remove and return item (default last)
remove() -- remove first occurrence of an object
reverse() -- reverse the order of the items in the array
tofile() -- write all items to a file object
tolist() -- return the array converted to an ordinary list
tobytes() -- return the array converted to a string

Attributes:

typecode -- the typecode character used to create the array
itemsize -- the length in bytes of one array item
'buffer_infobyteswapfrombytesfromfilefromunicodeu'the size, in bytes, of one array item'u'array.itemsize'tofiletounicodeu'the typecode character used to create the array'u'array.typecode'array.arrayArrayTypeu'This module defines an object type which can efficiently represent
an array of basic values: characters, integers, floating point
numbers.  Arrays are sequence types and behave very much like lists,
except that the type of objects stored in them is constrained.
'_array_reconstructorarrayu'bBuhHiIlLqQfd'typecodes
    ast
    ~~~

    The `ast` module helps Python applications to process trees of the Python
    abstract syntax grammar.  The abstract syntax itself might change with
    each Python release; this module helps to find out programmatically what
    the current grammar looks like and allows modifications of it.

    An abstract syntax tree can be generated by passing `ast.PyCF_ONLY_AST` as
    a flag to the `compile()` builtin function or by using the `parse()`
    function from this module.  The result will be a tree of objects whose
    classes all inherit from `ast.AST`.

    A modified abstract syntax tree can be compiled into a Python code object
    using the built-in `compile()` function.

    Additionally various helper functions are provided that make working with
    the trees simpler.  The main intention of the helper functions and this
    module in general is to provide an easy to use interface for libraries
    that work tightly with the python syntax (template engines for example).


    :copyright: Copyright 2008 by Armin Ronacher.
    :license: Python License.
nullcontexttype_commentsfeature_version
    Parse the source into an AST node.
    Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
    Pass type_comments=True to get back type comments where the syntax allows.
    _feature_versionliteral_evalnode_or_string
    Safely evaluate an expression node or a string containing a Python
    expression.  The string or node provided may only consist of the following
    Python literal structures: strings, bytes, numbers, tuples, lists, dicts,
    sets, booleans, and None.
    _raise_malformed_nodemalformed node or string: _convert_num_convert_signed_numoperand_converteltsleftrightannotate_fieldsinclude_attributes
    Return a formatted dump of the tree in node.  This is mainly useful for
    debugging purposes.  If annotate_fields is true (by default),
    the returned string will show the names and the values for fields.
    If annotate_fields is false, the result string will be more compact by
    omitting unambiguous field names.  Attributes such as line
    numbers and column offsets are not dumped by default.  If this is wanted,
    include_attributes can be set to true.  If indent is a non-negative
    integer or string, then the tree will be pretty-printed with that indent
    level. None (the default) selects the single line representation.
    ,
allsimplesimple%s=%s%s(%s%s)[%s%s]expected AST, got %rcopy_locationnew_nodeold_node
    Copy source location (`lineno`, `col_offset`, `end_lineno`, and `end_col_offset`
    attributes) from *old_node* to *new_node* if possible, and return *new_node*.
    col_offsetend_fix_missing_locations
    When you compile a node tree with compile(), the compiler expects lineno and
    col_offset attributes for every node that supports them.  This is rather
    tedious to fill in for generated nodes, so this helper adds these attributes
    recursively where not already set, by setting them to the values of the
    parent node.  It works recursively starting at *node*.
    iter_child_nodesincrement_lineno
    Increment the line number and end line number of each node in the tree
    starting at *node* by *n*. This is useful to "move code" to a different
    location in a file.
    iter_fields
    Yield a tuple of ``(fieldname, value)`` for each field in ``node._fields``
    that is present on *node*.
    
    Yield all direct child nodes of *node*, that is, all fields that are nodes
    and all items of fields that are lists of nodes.
    get_docstringclean
    Return the docstring for the given node or None if no docstring can
    be found.  If the node provided does not have docstrings a TypeError
    will be raised.

    If *clean* is `True`, all tabs are expanded to spaces and any whitespace
    that can be uniformly removed from the second line onwards is removed.
    %r can't have docstringsStrcleandoc_splitlines_no_ffSplit a string into lines ignoring form feed and other chars.

    This mimics how the Python parser splits source code.
    next_line_pad_whitespaceReplace all chars except '\f\t' in a line with spaces.	get_source_segmentpaddedGet source code segment of the *source* that generated *node*.

    If some location information (`lineno`, `end_lineno`, `col_offset`,
    or `end_col_offset`) is missing, return None.

    If *padded* is `True`, the first line of a multi-line statement will
    be padded with spaces to match its original position.
    
    Recursively yield all descendant nodes in the tree starting at *node*
    (including *node* itself), in no specified order.  This is useful if you
    only want to modify nodes in place and don't care about the context.
    todoNodeVisitor
    A node visitor base class that walks the abstract syntax tree and calls a
    visitor function for every node found.  This function may return a value
    which is forwarded by the `visit` method.

    This class is meant to be subclassed, with the subclass adding visitor
    methods.

    Per default the visitor functions for the nodes are ``'visit_'`` +
    class name of the node.  So a `TryFinally` node visit function would
    be `visit_TryFinally`.  This behavior can be changed by overriding
    the `visit` method.  If no visitor function exists for a node
    (return value `None`) the `generic_visit` visitor is used instead.

    Don't use the `NodeVisitor` if you want to apply changes to nodes during
    traversing.  For this a special visitor exists (`NodeTransformer`) that
    allows modifications.
    visitVisit a node.visit_generic_visitvisitorCalled if no explicit visitor function exists for a node.visit_Constant_const_node_type_names is deprecated; add visit_ConstantNodeTransformer
    A :class:`NodeVisitor` subclass that walks the abstract syntax tree and
    allows modification of nodes.

    The `NodeTransformer` will walk the AST and use the return value of the
    visitor methods to replace or remove the old node.  If the return value of
    the visitor method is ``None``, the node will be removed from its location,
    otherwise it is replaced with the return value.  The return value may be the
    original node in which case no replacement takes place.

    Here is an example transformer that rewrites all occurrences of name lookups
    (``foo``) to ``data['foo']``::

       class RewriteName(NodeTransformer):

           def visit_Name(self, node):
               return Subscript(
                   value=Name(id='data', ctx=Load()),
                   slice=Constant(value=node.id),
                   ctx=node.ctx
               )

    Keep in mind that if the node you're operating on has child nodes you must
    either transform the child nodes yourself or call the :meth:`generic_visit`
    method for the node first.

    For nodes that were part of a collection of statements (that applies to all
    statement nodes), the visitor may also return a list of nodes rather than
    just a single node.

    Usually you use the transformer like this::

       node = YourTransformer().visit(node)
    new_values_getterDeprecated. Use value instead._setter_ABCDeprecated AST node class. Use ast.Constant instead_const_types_const_types_not_new got multiple values for argument NumBytesNameConstantDeprecated AST node class.IndexDeprecated AST node class. Use the index value directly instead.ExtSliceDeprecated AST node class. Use ast.Tuple instead._dims_getterDeprecated. Use elts instead._dims_setterSuiteDeprecated AST node class.  Unused in Python 3.AugLoadAugStoreParam1e_INFSTR_PrecedencePrecedence table that originated from python grammar.TUPLEYIELDTESTORANDNOTCMPEXPRBORBXORBANDSHIFTARITHFACTORPOWERAWAITATOM_SINGLE_QUOTES_MULTI_QUOTES_ALL_QUOTES_UnparserMethods in this class recursively traverse an AST and
    output source code for the abstract syntax; original formatting
    is disregarded._avoid_backslashes_source_buffer_precedences_type_ignoresinterleaveinterCall f on each item in seq, calling inter() in between.items_viewtraverserTraverse and separate the given *items* with a comma and append it to
        the buffer. If *items* is a single item sequence, a trailing comma
        will be added.maybe_newlineAdds a newline if it isn't the start of generated sourceIndent a piece of text and append it, according to the current
        indentation level    Append a piece of textbuffer_writerblockA context manager for preparing the source for blocks. It adds
        the character':', increases the indentation on enter and decreases
        the indentation on exit. If *extra* is given, it will be directly
        appended after the colon character.
        delimitA context manager for preparing the source for expressions. It adds
        *start* to the buffer and enters, after exit it adds *end*.delimit_ifrequire_parensprecedenceShortcut to adding precedence related parensget_precedenceset_precedencenodesget_raw_docstringIf a docstring node is found in the body of the *node* parameter,
        return that docstring node, None otherwise.

        Logic mirrored from ``_PyAST_GetDocString``.get_type_comment # type: traverseOutputs a source code string that, if converted back to an ast
        (using ast.parse) will generate an AST equivalent to *node*_write_docstring_and_traverse_bodydocstring_write_docstringvisit_Moduletype_ignoresvisit_FunctionType -> visit_Exprvisit_NamedExpr := visit_Importvisit_ImportFromfrom  import visit_Assigntargets = visit_AugAssignbinop= visit_AnnAssignvisit_Returnreturnvisit_Passpassvisit_Breakbreakvisit_Continuecontinuevisit_Deletedel visit_Assertassert visit_Globalglobal visit_Nonlocalnonlocal visit_Awaitawaitvisit_Yieldyieldvisit_YieldFromyield from Node can't be used without a value attribute.visit_RaiseNode can't use cause without an exception. from visit_Trytryorelseelsefinalbodyfinallyvisit_ExceptHandlerexcept as visit_ClassDefdecodecorator_listclass commavisit_FunctionDef_function_helperdefvisit_AsyncFunctionDefasync deffill_suffixdef_strvisit_For_for_helperfor visit_AsyncForasync for visit_Ifif elif visit_Whilewhile visit_Withwith visit_AsyncWithasync with _str_literal_helperquote_typesescape_special_whitespaceHelper for writing string literals, minimizing escapes.
        Returns the tuple (string literal to write, possible quote types).
        escape_char
	unicode_escapeescaped_stringpossible_quotes_write_str_avoiding_backslashesWrite string literal value with a best effort attempt to avoid backslashes.quote_typevisit_JoinedStr_fstring_JoinedStr_fstring_methnew_bufferis_constantvisit_FormattedValue_fstring_FormattedValue_fstring_ConstantConstants inside JoinedStr should be a string.unparserUnable to avoid backslash in f-string expression partsraUnknown f-string conversion.!visit_Name_write_constantvisit_Listvisit_ListCompgenvisit_GeneratorExpvisit_SetCompvisit_DictCompvisit_comprehensionis_async async for  for ifsif_clause if visit_IfExp else visit_Set{*()}visit_Dictwrite_key_value_pairwrite_item**visit_Tuple~notunopunop_precedencevisit_UnaryOpoperator_precedence<<>>binop_precedencebinop_rassocvisit_BinOpleft_precedenceright_precedence!=<=>=isis notnot incmpopsvisit_Comparecomparatorsandorboolopsboolop_precedencevisit_BoolOpincreasing_level_traversevisit_Attributevisit_Callvisit_Subscriptis_simple_tupleslice_valuevisit_Starredvisit_Ellipsisvisit_Slicevisit_argvisit_argumentsposonlyargsall_args, /kwonlyargskw_defaultsvisit_keywordvisit_Lambdalambda visit_aliasvisit_withitemcontext_exprunparseast_objargparsepython -m astinfilethe file to parse; defaults to stdin--modesinglefunc_typespecify what kind of code must be parsed--no-type-commentsdon't add information about type comments-a--include-attributesinclude attributes such as line numbers and column offsets'include attributes such as line numbers and ''column offsets'-i--indentindentation of nodes (number of spaces)no_type_comments# Should be a 2-tuple.# Else it should be an int giving the minor version for 3.x.# end_lineno and end_col_offset are optional attributes, and they# should be copied whether the value is None or not.# Keep \r\n together# If the ast module is loaded more than once, only add deprecated methods once# The following code is for backward compatibility.# It will be removed in future.# arbitrary keyword arguments are accepted# should be before int# Large float and imaginary literals get turned into infinities in the AST.# We unparse those infinities to INFSTR.# 'yield', 'yield from'# 'if'-'else', 'lambda'# 'or'# 'and'# 'not'# '<', '>', '==', '>=', '<=', '!=',# 'in', 'not in', 'is', 'is not'# '|'# '^'# '&'# '<<', '>>'# '+', '-'# '*', '@', '/', '%', '//'# unary '+', '-', '~'# '**'# 'await'# collapse nested ifs into equivalent elifs.# final else# \n and \t are non-printable, but we only escape them if# escape_special_whitespace is True# Always escape backslashes and other non-printable characters# If there aren't any possible_quotes, fallback to using repr# on the original string. Try to use a quote from quote_types,# e.g., so that we use triple quotes for docstrings.# Sort so that we prefer '''"''' over """\""""# If we're using triple quotes and we'd need to escape a final# quote, escape it# If we don't need to avoid backslashes globally (i.e., we only need# to avoid them inside FormattedValues), it's cosmetically preferred# to use escaped whitespace. That is, it's preferred to use backslashes# for cases like: f"{x}\n". To accomplish this, we keep track of what# in our buffer corresponds to FormattedValues and what corresponds to# Constant parts of the f-string, and allow escapes accordingly.# Repeatedly narrow down the list of possible quote_types# Separate pair of opening brackets as "{ {"# Substitute overflowing decimal literal for AST infinities,# and inf - inf for NaNs.# `{}` would be interpreted as a dictionary literal, and# `set` might be shadowed. Thus:# for dictionary unpacking operator in dicts {**{'y': 2}}# see PEP 448 for details# factor prefixes (+, -, ~) shouldn't be seperated# from the value they belong, (e.g: +1 instead of + 1)# Special case: 3.__abs__() is a syntax error, so if node.value# is an integer literal then we need to either parenthesize# it or add an extra space to get 3 .__abs__().# when unparsing a non-empty tuple, the parentheses can be safely# omitted if there aren't any elements that explicitly requires# parentheses (such as starred expressions).# normal arguments# varargs, or bare '*' if no varargs but keyword-only arguments present# keyword-only arguments# kwargsb'
    ast
    ~~~

    The `ast` module helps Python applications to process trees of the Python
    abstract syntax grammar.  The abstract syntax itself might change with
    each Python release; this module helps to find out programmatically what
    the current grammar looks like and allows modifications of it.

    An abstract syntax tree can be generated by passing `ast.PyCF_ONLY_AST` as
    a flag to the `compile()` builtin function or by using the `parse()`
    function from this module.  The result will be a tree of objects whose
    classes all inherit from `ast.AST`.

    A modified abstract syntax tree can be compiled into a Python code object
    using the built-in `compile()` function.

    Additionally various helper functions are provided that make working with
    the trees simpler.  The main intention of the helper functions and this
    module in general is to provide an easy to use interface for libraries
    that work tightly with the python syntax (template engines for example).


    :copyright: Copyright 2008 by Armin Ronacher.
    :license: Python License.
'u'
    ast
    ~~~

    The `ast` module helps Python applications to process trees of the Python
    abstract syntax grammar.  The abstract syntax itself might change with
    each Python release; this module helps to find out programmatically what
    the current grammar looks like and allows modifications of it.

    An abstract syntax tree can be generated by passing `ast.PyCF_ONLY_AST` as
    a flag to the `compile()` builtin function or by using the `parse()`
    function from this module.  The result will be a tree of objects whose
    classes all inherit from `ast.AST`.

    A modified abstract syntax tree can be compiled into a Python code object
    using the built-in `compile()` function.

    Additionally various helper functions are provided that make working with
    the trees simpler.  The main intention of the helper functions and this
    module in general is to provide an easy to use interface for libraries
    that work tightly with the python syntax (template engines for example).


    :copyright: Copyright 2008 by Armin Ronacher.
    :license: Python License.
'b'
    Parse the source into an AST node.
    Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
    Pass type_comments=True to get back type comments where the syntax allows.
    'u'
    Parse the source into an AST node.
    Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
    Pass type_comments=True to get back type comments where the syntax allows.
    'b'
    Safely evaluate an expression node or a string containing a Python
    expression.  The string or node provided may only consist of the following
    Python literal structures: strings, bytes, numbers, tuples, lists, dicts,
    sets, booleans, and None.
    'u'
    Safely evaluate an expression node or a string containing a Python
    expression.  The string or node provided may only consist of the following
    Python literal structures: strings, bytes, numbers, tuples, lists, dicts,
    sets, booleans, and None.
    'b'eval'u'eval'b'malformed node or string: 'u'malformed node or string: 'b'
    Return a formatted dump of the tree in node.  This is mainly useful for
    debugging purposes.  If annotate_fields is true (by default),
    the returned string will show the names and the values for fields.
    If annotate_fields is false, the result string will be more compact by
    omitting unambiguous field names.  Attributes such as line
    numbers and column offsets are not dumped by default.  If this is wanted,
    include_attributes can be set to true.  If indent is a non-negative
    integer or string, then the tree will be pretty-printed with that indent
    level. None (the default) selects the single line representation.
    'u'
    Return a formatted dump of the tree in node.  This is mainly useful for
    debugging purposes.  If annotate_fields is true (by default),
    the returned string will show the names and the values for fields.
    If annotate_fields is false, the result string will be more compact by
    omitting unambiguous field names.  Attributes such as line
    numbers and column offsets are not dumped by default.  If this is wanted,
    include_attributes can be set to true.  If indent is a non-negative
    integer or string, then the tree will be pretty-printed with that indent
    level. None (the default) selects the single line representation.
    'b',
'u',
'b'%s=%s'u'%s=%s'b'%s(%s%s)'u'%s(%s%s)'b'[%s%s]'u'[%s%s]'b'expected AST, got %r'u'expected AST, got %r'b'
    Copy source location (`lineno`, `col_offset`, `end_lineno`, and `end_col_offset`
    attributes) from *old_node* to *new_node* if possible, and return *new_node*.
    'u'
    Copy source location (`lineno`, `col_offset`, `end_lineno`, and `end_col_offset`
    attributes) from *old_node* to *new_node* if possible, and return *new_node*.
    'b'lineno'b'col_offset'b'end_lineno'b'end_col_offset'b'end_'u'end_'b'
    When you compile a node tree with compile(), the compiler expects lineno and
    col_offset attributes for every node that supports them.  This is rather
    tedious to fill in for generated nodes, so this helper adds these attributes
    recursively where not already set, by setting them to the values of the
    parent node.  It works recursively starting at *node*.
    'u'
    When you compile a node tree with compile(), the compiler expects lineno and
    col_offset attributes for every node that supports them.  This is rather
    tedious to fill in for generated nodes, so this helper adds these attributes
    recursively where not already set, by setting them to the values of the
    parent node.  It works recursively starting at *node*.
    'b'
    Increment the line number and end line number of each node in the tree
    starting at *node* by *n*. This is useful to "move code" to a different
    location in a file.
    'u'
    Increment the line number and end line number of each node in the tree
    starting at *node* by *n*. This is useful to "move code" to a different
    location in a file.
    'b'
    Yield a tuple of ``(fieldname, value)`` for each field in ``node._fields``
    that is present on *node*.
    'u'
    Yield a tuple of ``(fieldname, value)`` for each field in ``node._fields``
    that is present on *node*.
    'b'
    Yield all direct child nodes of *node*, that is, all fields that are nodes
    and all items of fields that are lists of nodes.
    'u'
    Yield all direct child nodes of *node*, that is, all fields that are nodes
    and all items of fields that are lists of nodes.
    'b'
    Return the docstring for the given node or None if no docstring can
    be found.  If the node provided does not have docstrings a TypeError
    will be raised.

    If *clean* is `True`, all tabs are expanded to spaces and any whitespace
    that can be uniformly removed from the second line onwards is removed.
    'u'
    Return the docstring for the given node or None if no docstring can
    be found.  If the node provided does not have docstrings a TypeError
    will be raised.

    If *clean* is `True`, all tabs are expanded to spaces and any whitespace
    that can be uniformly removed from the second line onwards is removed.
    'b'%r can't have docstrings'u'%r can't have docstrings'b'Split a string into lines ignoring form feed and other chars.

    This mimics how the Python parser splits source code.
    'u'Split a string into lines ignoring form feed and other chars.

    This mimics how the Python parser splits source code.
    'b'Replace all chars except '\f\t' in a line with spaces.'u'Replace all chars except '\f\t' in a line with spaces.'b'	'u'	'b'Get source code segment of the *source* that generated *node*.

    If some location information (`lineno`, `end_lineno`, `col_offset`,
    or `end_col_offset`) is missing, return None.

    If *padded* is `True`, the first line of a multi-line statement will
    be padded with spaces to match its original position.
    'u'Get source code segment of the *source* that generated *node*.

    If some location information (`lineno`, `end_lineno`, `col_offset`,
    or `end_col_offset`) is missing, return None.

    If *padded* is `True`, the first line of a multi-line statement will
    be padded with spaces to match its original position.
    'b'
    Recursively yield all descendant nodes in the tree starting at *node*
    (including *node* itself), in no specified order.  This is useful if you
    only want to modify nodes in place and don't care about the context.
    'u'
    Recursively yield all descendant nodes in the tree starting at *node*
    (including *node* itself), in no specified order.  This is useful if you
    only want to modify nodes in place and don't care about the context.
    'b'
    A node visitor base class that walks the abstract syntax tree and calls a
    visitor function for every node found.  This function may return a value
    which is forwarded by the `visit` method.

    This class is meant to be subclassed, with the subclass adding visitor
    methods.

    Per default the visitor functions for the nodes are ``'visit_'`` +
    class name of the node.  So a `TryFinally` node visit function would
    be `visit_TryFinally`.  This behavior can be changed by overriding
    the `visit` method.  If no visitor function exists for a node
    (return value `None`) the `generic_visit` visitor is used instead.

    Don't use the `NodeVisitor` if you want to apply changes to nodes during
    traversing.  For this a special visitor exists (`NodeTransformer`) that
    allows modifications.
    'u'
    A node visitor base class that walks the abstract syntax tree and calls a
    visitor function for every node found.  This function may return a value
    which is forwarded by the `visit` method.

    This class is meant to be subclassed, with the subclass adding visitor
    methods.

    Per default the visitor functions for the nodes are ``'visit_'`` +
    class name of the node.  So a `TryFinally` node visit function would
    be `visit_TryFinally`.  This behavior can be changed by overriding
    the `visit` method.  If no visitor function exists for a node
    (return value `None`) the `generic_visit` visitor is used instead.

    Don't use the `NodeVisitor` if you want to apply changes to nodes during
    traversing.  For this a special visitor exists (`NodeTransformer`) that
    allows modifications.
    'b'Visit a node.'u'Visit a node.'b'visit_'u'visit_'b'Called if no explicit visitor function exists for a node.'u'Called if no explicit visitor function exists for a node.'b' is deprecated; add visit_Constant'u' is deprecated; add visit_Constant'b'
    A :class:`NodeVisitor` subclass that walks the abstract syntax tree and
    allows modification of nodes.

    The `NodeTransformer` will walk the AST and use the return value of the
    visitor methods to replace or remove the old node.  If the return value of
    the visitor method is ``None``, the node will be removed from its location,
    otherwise it is replaced with the return value.  The return value may be the
    original node in which case no replacement takes place.

    Here is an example transformer that rewrites all occurrences of name lookups
    (``foo``) to ``data['foo']``::

       class RewriteName(NodeTransformer):

           def visit_Name(self, node):
               return Subscript(
                   value=Name(id='data', ctx=Load()),
                   slice=Constant(value=node.id),
                   ctx=node.ctx
               )

    Keep in mind that if the node you're operating on has child nodes you must
    either transform the child nodes yourself or call the :meth:`generic_visit`
    method for the node first.

    For nodes that were part of a collection of statements (that applies to all
    statement nodes), the visitor may also return a list of nodes rather than
    just a single node.

    Usually you use the transformer like this::

       node = YourTransformer().visit(node)
    'u'
    A :class:`NodeVisitor` subclass that walks the abstract syntax tree and
    allows modification of nodes.

    The `NodeTransformer` will walk the AST and use the return value of the
    visitor methods to replace or remove the old node.  If the return value of
    the visitor method is ``None``, the node will be removed from its location,
    otherwise it is replaced with the return value.  The return value may be the
    original node in which case no replacement takes place.

    Here is an example transformer that rewrites all occurrences of name lookups
    (``foo``) to ``data['foo']``::

       class RewriteName(NodeTransformer):

           def visit_Name(self, node):
               return Subscript(
                   value=Name(id='data', ctx=Load()),
                   slice=Constant(value=node.id),
                   ctx=node.ctx
               )

    Keep in mind that if the node you're operating on has child nodes you must
    either transform the child nodes yourself or call the :meth:`generic_visit`
    method for the node first.

    For nodes that were part of a collection of statements (that applies to all
    statement nodes), the visitor may also return a list of nodes rather than
    just a single node.

    Usually you use the transformer like this::

       node = YourTransformer().visit(node)
    'b'Deprecated. Use value instead.'u'Deprecated. Use value instead.'b'Deprecated AST node class. Use ast.Constant instead'u'Deprecated AST node class. Use ast.Constant instead'b' got multiple values for argument 'u' got multiple values for argument 'b'NameConstant'u'NameConstant'b'Num'u'Num'b'Str'u'Str'b'Bytes'u'Bytes'b'Ellipsis'u'Ellipsis'b'Deprecated AST node class.'u'Deprecated AST node class.'b'Deprecated AST node class. Use the index value directly instead.'u'Deprecated AST node class. Use the index value directly instead.'b'Deprecated AST node class. Use ast.Tuple instead.'u'Deprecated AST node class. Use ast.Tuple instead.'b'dims'u'dims'b'Deprecated. Use elts instead.'u'Deprecated. Use elts instead.'b'Deprecated AST node class.  Unused in Python 3.'u'Deprecated AST node class.  Unused in Python 3.'b'1e'u'1e'b'Precedence table that originated from python grammar.'u'Precedence table that originated from python grammar.'b'"""'u'"""'b'''''u'''''b'Methods in this class recursively traverse an AST and
    output source code for the abstract syntax; original formatting
    is disregarded.'u'Methods in this class recursively traverse an AST and
    output source code for the abstract syntax; original formatting
    is disregarded.'b'Call f on each item in seq, calling inter() in between.'u'Call f on each item in seq, calling inter() in between.'b'Traverse and separate the given *items* with a comma and append it to
        the buffer. If *items* is a single item sequence, a trailing comma
        will be added.'u'Traverse and separate the given *items* with a comma and append it to
        the buffer. If *items* is a single item sequence, a trailing comma
        will be added.'b'Adds a newline if it isn't the start of generated source'u'Adds a newline if it isn't the start of generated source'b'Indent a piece of text and append it, according to the current
        indentation level'u'Indent a piece of text and append it, according to the current
        indentation level'b'    'u'    'b'Append a piece of text'u'Append a piece of text'b'A context manager for preparing the source for blocks. It adds
        the character':', increases the indentation on enter and decreases
        the indentation on exit. If *extra* is given, it will be directly
        appended after the colon character.
        'u'A context manager for preparing the source for blocks. It adds
        the character':', increases the indentation on enter and decreases
        the indentation on exit. If *extra* is given, it will be directly
        appended after the colon character.
        'b'A context manager for preparing the source for expressions. It adds
        *start* to the buffer and enters, after exit it adds *end*.'u'A context manager for preparing the source for expressions. It adds
        *start* to the buffer and enters, after exit it adds *end*.'b'Shortcut to adding precedence related parens'u'Shortcut to adding precedence related parens'b'If a docstring node is found in the body of the *node* parameter,
        return that docstring node, None otherwise.

        Logic mirrored from ``_PyAST_GetDocString``.'u'If a docstring node is found in the body of the *node* parameter,
        return that docstring node, None otherwise.

        Logic mirrored from ``_PyAST_GetDocString``.'b' # type: 'u' # type: 'b'Outputs a source code string that, if converted back to an ast
        (using ast.parse) will generate an AST equivalent to *node*'u'Outputs a source code string that, if converted back to an ast
        (using ast.parse) will generate an AST equivalent to *node*'b' -> 'u' -> 'b' := 'u' := 'b'from 'u'from 'b' import 'u' import 'b' = 'u' = 'b'= 'u'= 'b'return'u'return'b'pass'u'pass'b'break'u'break'b'continue'u'continue'b'del 'u'del 'b'assert 'u'assert 'b'global 'u'global 'b'nonlocal 'u'nonlocal 'b'await'u'await'b'yield'u'yield'b'yield from 'u'yield from 'b'Node can't be used without a value attribute.'u'Node can't be used without a value attribute.'b'Node can't use cause without an exception.'u'Node can't use cause without an exception.'b' from 'u' from 'b'try'u'try'b'else'u'else'b'finally'u'finally'b'except'u'except'b' as 'u' as 'b'class 'u'class 'b'def'u'def'b'async def'u'async def'b'for 'u'for 'b'async for 'u'async for 'b'if 'u'if 'b'elif 'u'elif 'b'while 'u'while 'b'with 'u'with 'b'async with 'u'async with 'b'Helper for writing string literals, minimizing escapes.
        Returns the tuple (string literal to write, possible quote types).
        'u'Helper for writing string literals, minimizing escapes.
        Returns the tuple (string literal to write, possible quote types).
        'b'
	'u'
	'b'unicode_escape'u'unicode_escape'b'Write string literal value with a best effort attempt to avoid backslashes.'u'Write string literal value with a best effort attempt to avoid backslashes.'b'_fstring_'u'_fstring_'b'Constants inside JoinedStr should be a string.'u'Constants inside JoinedStr should be a string.'b'Unable to avoid backslash in f-string expression part'u'Unable to avoid backslash in f-string expression part'b'sra'u'sra'b'Unknown f-string conversion.'u'Unknown f-string conversion.'b'!'u'!'b' async for 'u' async for 'b' for 'u' for 'b' if 'u' if 'b' else 'u' else 'b'{*()}'u'{*()}'b'**'u'**'b'~'u'~'b'Invert'b'not'u'not'b'Not'b'UAdd'b'USub'b'Add'b'Sub'b'Mult'b'MatMult'b'Div'b'Mod'b'<<'u'<<'b'LShift'b'>>'u'>>'b'RShift'b'BitOr'b'BitXor'b'BitAnd'b'FloorDiv'b'Pow'u'=='b'Eq'b'!='u'!='b'NotEq'b'Lt'b'<='u'<='b'LtE'b'Gt'b'>='u'>='b'GtE'b'is'u'is'b'Is'b'is not'u'is not'b'IsNot'b'In'b'not in'u'not in'b'NotIn'b'and'u'and'b'And'b'or'u'or'b'Or'b', /'u', /'b'lambda 'u'lambda 'b'python -m ast'u'python -m ast'b'infile'u'infile'b'the file to parse; defaults to stdin'u'the file to parse; defaults to stdin'b'--mode'u'--mode'b'single'u'single'b'func_type'u'func_type'b'specify what kind of code must be parsed'u'specify what kind of code must be parsed'b'--no-type-comments'u'--no-type-comments'b'don't add information about type comments'u'don't add information about type comments'b'-a'u'-a'b'--include-attributes'u'--include-attributes'b'include attributes such as line numbers and column offsets'u'include attributes such as line numbers and column offsets'b'-i'u'-i'b'--indent'u'--indent'b'indentation of nodes (number of spaces)'u'indentation of nodes (number of spaces)'u'Python.Python39.lib.ast'u'Python39.lib.ast'u'lib.ast'runTestmethodName_asyncioTestLoop_asyncioCallsQueueasyncSetUpasyncTearDownaddAsyncCleanup_callSetUpsetUp_callAsync_callTestMethod_callMaybeAsync_callTearDowntearDown_callCleanupretisawaitablecreate_futurefutput_nowaitrun_until_complete_asyncioLoopRunnerquerytask_doneawaitable_setupAsyncioLoopnew_event_looploopset_event_loopset_debugcreate_task_asyncioCallsTask_tearDownAsyncioLoopall_tasksto_canceltaskgatherreturn_exceptionscall_exception_handlerunhandled exception during test shutdownshutdown_asyncgens# Names intentionally have a long prefix# to reduce a chance of clashing with user-defined attributes# from inherited test case# The class doesn't call loop.run_until_complete(self.setUp()) and family# but uses a different approach:# 1. create a long-running task that reads self.setUp()#    awaitable from queue along with a future# 2. await the awaitable object passing in and set the result#    into the future object# 3. Outer code puts the awaitable and the future object into a queue#    with waiting for the future# The trick is necessary because every run_until_complete() call# creates a new task with embedded ContextVar context.# To share contextvars between setUp(), test and tearDown() we need to execute# them inside the same task.# Note: the test case modifies event loop policy if the policy was not instantiated# yet.# asyncio.get_event_loop_policy() creates a default policy on demand but never# returns None# I believe this is not an issue in user level tests but python itself for testing# should reset a policy in every test module# by calling asyncio.set_event_loop_policy(None) in tearDownModule()# A trivial trampoline to addCleanup()# the function exists because it has a different semantics# and signature:# addCleanup() accepts regular functions# but addAsyncCleanup() accepts coroutines# We intentionally don't add inspect.iscoroutinefunction() check# for func argument because there is no way# to check for async function reliably:# 1. It can be "async def func()" iself# 2. Class can implement "async def __call__()" method# 3. Regular "def func()" that returns awaitable object# cancel all tasks# shutdown asyncgensb'runTest'u'runTest'b'unhandled exception during test shutdown'u'unhandled exception during test shutdown'b'task'u'task'u'Python39.lib.unittest.async_case'u'lib.unittest.async_case'u'unittest.async_case'u'async_case'WRAPPER_ASSIGNMENTS_PassArgasync_variantnormal_funcasync_funcfrom_objpass_argneed_eval_contextasync_func_attrsnormal_func_attrsassignedupdatedjinja_async_variant_common_primitivesauto_awaitt.Awaitable[V]auto_aitert.Union[t.AsyncIterable[V], t.Iterable[V]]t.AsyncIterator[V]t.AsyncIterable[V]t.Iterable[V]auto_to_list# Take the doc and annotations from the sync function, but the# name from the async function. Pallets-Sphinx-Themes# build_function_directive expects __wrapped__ to point to the# sync function.# Avoid a costly call to isawaitableb't.Awaitable[V]'u't.Awaitable[V]'b't.Union[t.AsyncIterable[V], t.Iterable[V]]'u't.Union[t.AsyncIterable[V], t.Iterable[V]]'b't.AsyncIterator[V]'u't.AsyncIterator[V]'b't.AsyncIterable[V]'u't.AsyncIterable[V]'b't.Iterable[V]'u't.Iterable[V]'u'jinja2.async_utils'u'async_utils'u'allow programmer to define multiple exit functions to be executedupon normal program termination.

Two public functions, register and unregister, are defined.
'_clear_ncallbacks_run_exitfuncsunregisterdump_headerparse_dict_headerparse_set_headerquote_header_valueRepresents the parts of an ``Authorization`` request header.

    :attr:`.Request.authorization` returns an instance if the header is set.

    An instance can be used with the test :class:`.Client` request methods' ``auth``
    parameter to send the header in test requests.

    Depending on the auth scheme, either :attr:`parameters` or :attr:`token` will be
    set. The ``Basic`` scheme's token is decoded into the ``username`` and ``password``
    parameters.

    For convenience, ``auth["key"]`` and ``auth.key`` both access the key in the
    :attr:`parameters` dict, along with ``auth.get("key")`` and ``"key" in auth``.

    .. versionchanged:: 2.3
        The ``token`` parameter and attribute was added to support auth schemes that use
        a token instead of parameters, such as ``Bearer``.

    .. versionchanged:: 2.3
        The object is no longer a ``dict``.

    .. versionchanged:: 0.5
        The object is an immutable dict.
    auth_typeThe authorization scheme, like ``Basic``, ``Digest``, or ``Bearer``.parametersA dict of parameters parsed from the header. Either this or :attr:`token`
        will have a value for a give scheme.
        A token parsed from the header. Either this or :attr:`parameters` will have a
        value for a given scheme.

        .. versionadded:: 2.3
        from_headerSelfParse an ``Authorization`` header value and return an instance, or ``None``
        if the value is empty.

        :param value: The header value to parse.

        .. versionadded:: 2.3
        schemebasicProduce an ``Authorization`` header value representing this data.

        .. versionadded:: 2.0
        Basic auth_propertyA static helper function for Authentication subclasses to add
    extra authentication system properties onto a class::

        class FooAuthenticate(WWWAuthenticate):
            special_realm = auth_property('special_realm')

    .. deprecated:: 2.3
        Will be removed in Werkzeug 3.0.
    'auth_property' is deprecated and will be removed in Werkzeug 3.0._set_valueRepresents the parts of a ``WWW-Authenticate`` response header.

    Set :attr:`.Response.www_authenticate` to an instance of list of instances to set
    values for this header in the response. Modifying this instance will modify the
    header value.

    Depending on the auth scheme, either :attr:`parameters` or :attr:`token` should be
    set. The ``Basic`` scheme will encode ``username`` and ``password`` parameters to a
    token.

    For convenience, ``auth["key"]`` and ``auth.key`` both act on the :attr:`parameters`
    dict, and can be used to get, set, or delete parameters. ``auth.get("key")`` and
    ``"key" in auth`` are also provided.

    .. versionchanged:: 2.3
        The ``token`` parameter and attribute was added to support auth schemes that use
        a token instead of parameters, such as ``Bearer``.

    .. versionchanged:: 2.3
        The object is no longer a ``dict``.

    .. versionchanged:: 2.3
        The ``on_update`` parameter was removed.
    An auth type must be given as the first parameter. Assuming 'basic' is deprecated and will be removed in Werkzeug 3.0."An auth type must be given as the first parameter. Assuming 'basic' is"" deprecated and will be removed in Werkzeug 3.0."_type_trigger_on_update_parameters_token_on_updateA dict of parameters for the header. Only one of this or :attr:`token` should
        have a value for a give scheme.
        A token for the header. Only one of this or :attr:`parameters` should have a
        value for a given scheme.

        .. versionadded:: 2.3
        set_basicauthentication requiredrealmClear any existing data and set a ``Basic`` challenge.

        .. deprecated:: 2.3
            Will be removed in Werkzeug 3.0. Create and assign an instance instead.
        The 'set_basic' method is deprecated and will be removed in Werkzeug 3.0. Create and assign an instance instead."The 'set_basic' method is deprecated and will be removed in Werkzeug 3.0."" Create and assign an instance instead."set_digestnonceqopopaquestaleClear any existing data and set a ``Digest`` challenge.

        .. deprecated:: 2.3
            Will be removed in Werkzeug 3.0. Create and assign an instance instead.
        The 'set_digest' method is deprecated and will be removed in Werkzeug 3.0. Create and assign an instance instead."The 'set_digest' method is deprecated and will be removed in Werkzeug 3.0."TRUEFALSEParse a ``WWW-Authenticate`` header value and return an instance, or ``None``
        if the value is empty.

        :param value: The header value to parse.

        .. versionadded:: 2.3
        Produce a ``WWW-Authenticate`` header value representing this data.allow_tokenDigest The ``qop`` parameter as a set.

        .. deprecated:: 2.3
            Will be removed in Werkzeug 3.0. It will become the same as other
            parameters, returning a string.
        The 'qop' property is deprecated and will be removed in Werkzeug 3.0. It will become the same as other parameters, returning a string."The 'qop' property is deprecated and will be removed in Werkzeug 3.0."" It will become the same as other parameters, returning a string."on_updateThe ``stale`` parameter as a boolean.

        .. deprecated:: 2.3
            Will be removed in Werkzeug 3.0. It will become the same as other
            parameters, returning a string.
        The 'stale' property is deprecated and will be removed in Werkzeug 3.0. It will become the same as other parameters, returning a string."The 'stale' property is deprecated and will be removed in Werkzeug 3.0."Setting the 'stale' property to a boolean is deprecated and will be removed in Werkzeug 3.0."Setting the 'stale' property to a boolean is deprecated and will be"" removed in Werkzeug 3.0."_deprecated_dict_methodTreating 'Authorization' and 'WWWAuthenticate' as a dict is deprecated and will be removed in Werkzeug 3.0. Use the 'parameters' attribute instead."Treating 'Authorization' and 'WWWAuthenticate' as a dict is deprecated and"" will be removed in Werkzeug 3.0. Use the 'parameters' attribute instead."# = that is not trailing, this is parameters.# No = or only trailing =, this is a token.# type: ignore[dict-item]b'Represents the parts of an ``Authorization`` request header.

    :attr:`.Request.authorization` returns an instance if the header is set.

    An instance can be used with the test :class:`.Client` request methods' ``auth``
    parameter to send the header in test requests.

    Depending on the auth scheme, either :attr:`parameters` or :attr:`token` will be
    set. The ``Basic`` scheme's token is decoded into the ``username`` and ``password``
    parameters.

    For convenience, ``auth["key"]`` and ``auth.key`` both access the key in the
    :attr:`parameters` dict, along with ``auth.get("key")`` and ``"key" in auth``.

    .. versionchanged:: 2.3
        The ``token`` parameter and attribute was added to support auth schemes that use
        a token instead of parameters, such as ``Bearer``.

    .. versionchanged:: 2.3
        The object is no longer a ``dict``.

    .. versionchanged:: 0.5
        The object is an immutable dict.
    'u'Represents the parts of an ``Authorization`` request header.

    :attr:`.Request.authorization` returns an instance if the header is set.

    An instance can be used with the test :class:`.Client` request methods' ``auth``
    parameter to send the header in test requests.

    Depending on the auth scheme, either :attr:`parameters` or :attr:`token` will be
    set. The ``Basic`` scheme's token is decoded into the ``username`` and ``password``
    parameters.

    For convenience, ``auth["key"]`` and ``auth.key`` both access the key in the
    :attr:`parameters` dict, along with ``auth.get("key")`` and ``"key" in auth``.

    .. versionchanged:: 2.3
        The ``token`` parameter and attribute was added to support auth schemes that use
        a token instead of parameters, such as ``Bearer``.

    .. versionchanged:: 2.3
        The object is no longer a ``dict``.

    .. versionchanged:: 0.5
        The object is an immutable dict.
    'b'The authorization scheme, like ``Basic``, ``Digest``, or ``Bearer``.'u'The authorization scheme, like ``Basic``, ``Digest``, or ``Bearer``.'b'A dict of parameters parsed from the header. Either this or :attr:`token`
        will have a value for a give scheme.
        'u'A dict of parameters parsed from the header. Either this or :attr:`token`
        will have a value for a give scheme.
        'b'A token parsed from the header. Either this or :attr:`parameters` will have a
        value for a given scheme.

        .. versionadded:: 2.3
        'u'A token parsed from the header. Either this or :attr:`parameters` will have a
        value for a given scheme.

        .. versionadded:: 2.3
        'b'Parse an ``Authorization`` header value and return an instance, or ``None``
        if the value is empty.

        :param value: The header value to parse.

        .. versionadded:: 2.3
        'u'Parse an ``Authorization`` header value and return an instance, or ``None``
        if the value is empty.

        :param value: The header value to parse.

        .. versionadded:: 2.3
        'b'basic'u'basic'b'username'u'username'b'Produce an ``Authorization`` header value representing this data.

        .. versionadded:: 2.0
        'u'Produce an ``Authorization`` header value representing this data.

        .. versionadded:: 2.0
        'b'Basic 'u'Basic 'b'A static helper function for Authentication subclasses to add
    extra authentication system properties onto a class::

        class FooAuthenticate(WWWAuthenticate):
            special_realm = auth_property('special_realm')

    .. deprecated:: 2.3
        Will be removed in Werkzeug 3.0.
    'u'A static helper function for Authentication subclasses to add
    extra authentication system properties onto a class::

        class FooAuthenticate(WWWAuthenticate):
            special_realm = auth_property('special_realm')

    .. deprecated:: 2.3
        Will be removed in Werkzeug 3.0.
    'b''auth_property' is deprecated and will be removed in Werkzeug 3.0.'u''auth_property' is deprecated and will be removed in Werkzeug 3.0.'b'Represents the parts of a ``WWW-Authenticate`` response header.

    Set :attr:`.Response.www_authenticate` to an instance of list of instances to set
    values for this header in the response. Modifying this instance will modify the
    header value.

    Depending on the auth scheme, either :attr:`parameters` or :attr:`token` should be
    set. The ``Basic`` scheme will encode ``username`` and ``password`` parameters to a
    token.

    For convenience, ``auth["key"]`` and ``auth.key`` both act on the :attr:`parameters`
    dict, and can be used to get, set, or delete parameters. ``auth.get("key")`` and
    ``"key" in auth`` are also provided.

    .. versionchanged:: 2.3
        The ``token`` parameter and attribute was added to support auth schemes that use
        a token instead of parameters, such as ``Bearer``.

    .. versionchanged:: 2.3
        The object is no longer a ``dict``.

    .. versionchanged:: 2.3
        The ``on_update`` parameter was removed.
    'u'Represents the parts of a ``WWW-Authenticate`` response header.

    Set :attr:`.Response.www_authenticate` to an instance of list of instances to set
    values for this header in the response. Modifying this instance will modify the
    header value.

    Depending on the auth scheme, either :attr:`parameters` or :attr:`token` should be
    set. The ``Basic`` scheme will encode ``username`` and ``password`` parameters to a
    token.

    For convenience, ``auth["key"]`` and ``auth.key`` both act on the :attr:`parameters`
    dict, and can be used to get, set, or delete parameters. ``auth.get("key")`` and
    ``"key" in auth`` are also provided.

    .. versionchanged:: 2.3
        The ``token`` parameter and attribute was added to support auth schemes that use
        a token instead of parameters, such as ``Bearer``.

    .. versionchanged:: 2.3
        The object is no longer a ``dict``.

    .. versionchanged:: 2.3
        The ``on_update`` parameter was removed.
    'b'An auth type must be given as the first parameter. Assuming 'basic' is deprecated and will be removed in Werkzeug 3.0.'u'An auth type must be given as the first parameter. Assuming 'basic' is deprecated and will be removed in Werkzeug 3.0.'b'A dict of parameters for the header. Only one of this or :attr:`token` should
        have a value for a give scheme.
        'u'A dict of parameters for the header. Only one of this or :attr:`token` should
        have a value for a give scheme.
        'b'A token for the header. Only one of this or :attr:`parameters` should have a
        value for a given scheme.

        .. versionadded:: 2.3
        'u'A token for the header. Only one of this or :attr:`parameters` should have a
        value for a given scheme.

        .. versionadded:: 2.3
        'b'authentication required'u'authentication required'b'Clear any existing data and set a ``Basic`` challenge.

        .. deprecated:: 2.3
            Will be removed in Werkzeug 3.0. Create and assign an instance instead.
        'u'Clear any existing data and set a ``Basic`` challenge.

        .. deprecated:: 2.3
            Will be removed in Werkzeug 3.0. Create and assign an instance instead.
        'b'The 'set_basic' method is deprecated and will be removed in Werkzeug 3.0. Create and assign an instance instead.'u'The 'set_basic' method is deprecated and will be removed in Werkzeug 3.0. Create and assign an instance instead.'b'realm'u'realm'b'Clear any existing data and set a ``Digest`` challenge.

        .. deprecated:: 2.3
            Will be removed in Werkzeug 3.0. Create and assign an instance instead.
        'u'Clear any existing data and set a ``Digest`` challenge.

        .. deprecated:: 2.3
            Will be removed in Werkzeug 3.0. Create and assign an instance instead.
        'b'The 'set_digest' method is deprecated and will be removed in Werkzeug 3.0. Create and assign an instance instead.'u'The 'set_digest' method is deprecated and will be removed in Werkzeug 3.0. Create and assign an instance instead.'b'digest'u'digest'b'nonce'u'nonce'b'qop'u'qop'b'TRUE'u'TRUE'b'FALSE'u'FALSE'b'stale'u'stale'b'opaque'u'opaque'b'algorithm'u'algorithm'b'_type'u'_type'b'_parameters'u'_parameters'b'_token'u'_token'b'_on_update'u'_on_update'b'Parse a ``WWW-Authenticate`` header value and return an instance, or ``None``
        if the value is empty.

        :param value: The header value to parse.

        .. versionadded:: 2.3
        'u'Parse a ``WWW-Authenticate`` header value and return an instance, or ``None``
        if the value is empty.

        :param value: The header value to parse.

        .. versionadded:: 2.3
        'b'Produce a ``WWW-Authenticate`` header value representing this data.'u'Produce a ``WWW-Authenticate`` header value representing this data.'b'domain'u'domain'b'Digest 'u'Digest 'b'The ``qop`` parameter as a set.

        .. deprecated:: 2.3
            Will be removed in Werkzeug 3.0. It will become the same as other
            parameters, returning a string.
        'u'The ``qop`` parameter as a set.

        .. deprecated:: 2.3
            Will be removed in Werkzeug 3.0. It will become the same as other
            parameters, returning a string.
        'b'The 'qop' property is deprecated and will be removed in Werkzeug 3.0. It will become the same as other parameters, returning a string.'u'The 'qop' property is deprecated and will be removed in Werkzeug 3.0. It will become the same as other parameters, returning a string.'b'The ``stale`` parameter as a boolean.

        .. deprecated:: 2.3
            Will be removed in Werkzeug 3.0. It will become the same as other
            parameters, returning a string.
        'u'The ``stale`` parameter as a boolean.

        .. deprecated:: 2.3
            Will be removed in Werkzeug 3.0. It will become the same as other
            parameters, returning a string.
        'b'The 'stale' property is deprecated and will be removed in Werkzeug 3.0. It will become the same as other parameters, returning a string.'u'The 'stale' property is deprecated and will be removed in Werkzeug 3.0. It will become the same as other parameters, returning a string.'b'Setting the 'stale' property to a boolean is deprecated and will be removed in Werkzeug 3.0.'u'Setting the 'stale' property to a boolean is deprecated and will be removed in Werkzeug 3.0.'b'Treating 'Authorization' and 'WWWAuthenticate' as a dict is deprecated and will be removed in Werkzeug 3.0. Use the 'parameters' attribute instead.'u'Treating 'Authorization' and 'WWWAuthenticate' as a dict is deprecated and will be removed in Werkzeug 3.0. Use the 'parameters' attribute instead.'b'items'b'pop'u'pop'b'popitem'u'popitem'b'setdefault'u'setdefault'b'values'u'werkzeug.datastructures.auth'u'datastructures.auth'Signals and events.

A small implementation of signals, inspired by a snippet of Django signal
API client code seen in a blog post.  Signals are first-class objects and
each manages its own receivers and message emission.

The :func:`signal` function provides singleton behavior for named signals.

blinker._utilitiesT_callableAsyncWrapperTypeSyncWrapperTypeToken for "any sender".ANY_IDA notification emitter.Emitted after each :meth:`connect`.

        The signal sender is the signal instance, and the :meth:`connect`
        arguments are passed through: *receiver*, *sender*, and *weak*.

        .. versionadded:: 1.2

        Emitted after a receiver connects.receiver_disconnectedEmitted after :meth:`disconnect`.

        The sender is the signal instance, and the :meth:`disconnect` arguments
        are passed through: *receiver* and *sender*.

        Note, this signal is emitted **only** when :meth:`disconnect` is
        called explicitly.

        The disconnect signal can not be emitted by an automatic disconnect
        (due to a weakly referenced receiver or sender going out of scope),
        as the receiver and/or sender instances are no longer available for
        use at the time this signal would be emitted.

        An alternative approach is available by subscribing to
        :attr:`receiver_connected` and setting up a custom weakref cleanup
        callback on weak receivers and senders.

        .. versionadded:: 1.2

        Emitted after a receiver disconnects.
        :param doc: optional.  If provided, will be assigned to the signal's
          __doc__ attribute.

        receiversis_muted_by_receiver_by_sender_weak_sendersconnectreceiversenderConnect *receiver* to signal events sent by *sender*.

        :param receiver: A callable.  Will be invoked by :meth:`send` with
          `sender=` as a single positional argument and any ``kwargs`` that
          were provided to a call to :meth:`send`.

        :param sender: Any object or :obj:`ANY`, defaults to ``ANY``.
          Restricts notifications delivered to *receiver* to only those
          :meth:`send` emissions sent by *sender*.  If ``ANY``, the receiver
          will always be notified.  A *receiver* may be connected to
          multiple *sender* values on the same Signal through multiple calls
          to :meth:`connect`.

        :param weak: If true, the Signal will hold a weakref to *receiver*
          and automatically disconnect when *receiver* goes out of scope or
          is garbage collected.  Defaults to True.

        receiver_ref_cleanup_receiver_cleanup_sendersender_refdisconnectreceiver_argsender_argweak_argconnect_viaConnect the decorated function as a receiver for *sender*.

        :param sender: Any object or :obj:`ANY`.  The decorated function
          will only receive :meth:`send` emissions sent by *sender*.  If
          ``ANY``, the receiver will always be notified.  A function may be
          decorated multiple times with differing *sender* values.

        :param weak: If true, the Signal will hold a weakref to the
          decorated function and automatically disconnect when *receiver*
          goes out of scope or is garbage collected.  Unlike
          :meth:`connect`, this defaults to False.

        The decorated function will be invoked by :meth:`send` with
          `sender=` as a single positional argument and any ``kwargs`` that
          were provided to the call to :meth:`send`.


        .. versionadded:: 1.1

        connected_toExecute a block with the signal temporarily connected to *receiver*.

        :param receiver: a receiver callable
        :param sender: optional, a sender to filter on

        This is a context manager for use in the ``with`` statement.  It can
        be useful in unit tests.  *receiver* is connected to the signal for
        the duration of the ``with`` block, and will be disconnected
        automatically when exiting the block:

        .. code-block:: python

          with on_ready.connected_to(receiver):
             # do stuff
             on_ready.send(123)

        .. versionadded:: 1.1

        mutedContext manager for temporarily disabling signal.
        Useful for test purposes.
        temporarily_connected_toAn alias for :meth:`connected_to`.

        :param receiver: a receiver callable
        :param sender: optional, a sender to filter on

        .. versionadded:: 0.9

        .. versionchanged:: 1.1
          Renamed to :meth:`connected_to`.  ``temporarily_connected_to`` was
          deprecated in 1.2 and will be removed in a subsequent version.

        temporarily_connected_to is deprecated; use connected_to instead.Emit this signal on behalf of *sender*, passing on ``kwargs``.

        Returns a list of 2-tuples, pairing receivers with their return
        value. The ordering of receiver notification is undefined.

        :param sender: Any object or ``None``.  If omitted, synonymous
          with ``None``.  Only accepts one positional argument.
        :param _async_wrapper: A callable that should wrap a coroutine
          receiver and run it when called synchronously.

        :param kwargs: Data to be sent to receivers.
        _extract_senderresultsreceivers_forCannot send to a coroutine functionsend_async_sync_wrapperEmit this signal on behalf of *sender*, passing on ``kwargs``.

        Returns a list of 2-tuples, pairing receivers with their return
        value. The ordering of receiver notification is undefined.

        :param sender: Any object or ``None``.  If omitted, synonymous
          with ``None``. Only accepts one positional argument.
        :param _sync_wrapper: A callable that should wrap a synchronous
          receiver and run it when awaited.

        :param kwargs: Data to be sent to receivers.
        Cannot send to a non-coroutine functionsend() accepts only one positional argument,  givenhas_receivers_forTrue if there is probably a receiver for *sender*.

        Performs an optimistic check only.  Does not guarantee that all
        weakly referenced receivers are still alive.  See
        :meth:`receivers_for` for a stronger search.

        Iterate all live receivers listening for *sender*.strong_disconnectDisconnect *receiver* from this signal's events.

        :param receiver: a previously :meth:`connected<connect>` callable

        :param sender: a specific sender to disconnect from, or :obj:`ANY`
          to disconnect from all senders.  Defaults to ``ANY``.

        bucketDisconnect a receiver from all senders.Disconnect all receivers from a sender._cleanup_bookkeepingPrune unused sender/receiver bookkeeping. Not threadsafe.

        Connecting & disconnecting leave behind a small amount of bookkeeping
        for the receiver and sender values. Typical workloads using Blinker,
        for example in most web apps, Flask, CLI scripts, etc., are not
        adversely affected by this bookkeeping.

        With a long-running Python process performing dynamic signal routing
        with high volume- e.g. connecting to function closures, "senders" are
        all unique object instances, and doing all of this over and over- you
        may see memory usage will grow due to extraneous bookkeeping. (An empty
        set() for each stale sender/receiver pair.)

        This method will prune that bookkeeping away, with the caveat that such
        pruning is not threadsafe. The risk is that cleanup of a fully
        disconnected receiver/sender pair occurs while another thread is
        connecting that same pair. If you are in the highly dynamic, unique
        receiver/sender situation that has lead you to this method, that
        failure mode is perhaps not a big deal for you.
        _clear_stateThrow away all signal state.  Useful for unit tests.Sent by a :class:`Signal` after a receiver connects.

:argument: the Signal that was connected to
:keyword receiver_arg: the connected receiver
:keyword sender_arg: the sender to connect to
:keyword weak_arg: true if the connection to receiver_arg is a weak reference

.. deprecated:: 1.2

As of 1.2, individual signals have their own private
:attr:`~Signal.receiver_connected` and
:attr:`~Signal.receiver_disconnected` signals with a slightly simplified
call signature.  This global signal is planned to be removed in 1.6.

A named generic notification emitter.A mapping of signal names to signals.Return the :class:`NamedSignal` *name*, creating it if required.

        Repeated calls to this function will return the same signal object.

        A weak mapping of signal names to signals.

    Automatically cleans up unused Signals when the last reference goes out
    of scope.  This namespace implementation exists for a measure of legacy
    compatibility with Blinker <= 1.2, and may be dropped in the future.

    .. versionadded:: 1.3

    #: An :obj:`ANY` convenience synonym, allows ``Signal.ANY``#: without an additional import.#: A mapping of connected receivers.#: The values of this mapping are not meaningful outside of the#: internal :class:`Signal` implementation, however the boolean value#: of the mapping is useful as an extremely efficient check to see if#: any receivers are connected to the signal.# wire together a cleanup for weakref-able senders# broadcast this connection.  if receivers raise, disconnect.# type: ignore[call-arg]# type: ignore[call-arg, misc]# Ensure correct signature even on no-op sends, disable with -O# for lowest possible cost.# Using '*sender' rather than 'sender=None' allows 'sender' to be# used as a keyword argument- i.e. it's an invisible name in the# function signature.# TODO: test receivers_for(ANY)#: The name of this signal.b'Signals and events.

A small implementation of signals, inspired by a snippet of Django signal
API client code seen in a blog post.  Signals are first-class objects and
each manages its own receivers and message emission.

The :func:`signal` function provides singleton behavior for named signals.

'u'Signals and events.

A small implementation of signals, inspired by a snippet of Django signal
API client code seen in a blog post.  Signals are first-class objects and
each manages its own receivers and message emission.

The :func:`signal` function provides singleton behavior for named signals.

'b'T_callable'u'T_callable'b'T'u'T'b'Token for "any sender".'u'Token for "any sender".'b'A notification emitter.'u'A notification emitter.'b'Emitted after each :meth:`connect`.

        The signal sender is the signal instance, and the :meth:`connect`
        arguments are passed through: *receiver*, *sender*, and *weak*.

        .. versionadded:: 1.2

        'u'Emitted after each :meth:`connect`.

        The signal sender is the signal instance, and the :meth:`connect`
        arguments are passed through: *receiver*, *sender*, and *weak*.

        .. versionadded:: 1.2

        'b'Emitted after a receiver connects.'u'Emitted after a receiver connects.'b'Emitted after :meth:`disconnect`.

        The sender is the signal instance, and the :meth:`disconnect` arguments
        are passed through: *receiver* and *sender*.

        Note, this signal is emitted **only** when :meth:`disconnect` is
        called explicitly.

        The disconnect signal can not be emitted by an automatic disconnect
        (due to a weakly referenced receiver or sender going out of scope),
        as the receiver and/or sender instances are no longer available for
        use at the time this signal would be emitted.

        An alternative approach is available by subscribing to
        :attr:`receiver_connected` and setting up a custom weakref cleanup
        callback on weak receivers and senders.

        .. versionadded:: 1.2

        'u'Emitted after :meth:`disconnect`.

        The sender is the signal instance, and the :meth:`disconnect` arguments
        are passed through: *receiver* and *sender*.

        Note, this signal is emitted **only** when :meth:`disconnect` is
        called explicitly.

        The disconnect signal can not be emitted by an automatic disconnect
        (due to a weakly referenced receiver or sender going out of scope),
        as the receiver and/or sender instances are no longer available for
        use at the time this signal would be emitted.

        An alternative approach is available by subscribing to
        :attr:`receiver_connected` and setting up a custom weakref cleanup
        callback on weak receivers and senders.

        .. versionadded:: 1.2

        'b'Emitted after a receiver disconnects.'u'Emitted after a receiver disconnects.'b'
        :param doc: optional.  If provided, will be assigned to the signal's
          __doc__ attribute.

        'u'
        :param doc: optional.  If provided, will be assigned to the signal's
          __doc__ attribute.

        'b'Connect *receiver* to signal events sent by *sender*.

        :param receiver: A callable.  Will be invoked by :meth:`send` with
          `sender=` as a single positional argument and any ``kwargs`` that
          were provided to a call to :meth:`send`.

        :param sender: Any object or :obj:`ANY`, defaults to ``ANY``.
          Restricts notifications delivered to *receiver* to only those
          :meth:`send` emissions sent by *sender*.  If ``ANY``, the receiver
          will always be notified.  A *receiver* may be connected to
          multiple *sender* values on the same Signal through multiple calls
          to :meth:`connect`.

        :param weak: If true, the Signal will hold a weakref to *receiver*
          and automatically disconnect when *receiver* goes out of scope or
          is garbage collected.  Defaults to True.

        'u'Connect *receiver* to signal events sent by *sender*.

        :param receiver: A callable.  Will be invoked by :meth:`send` with
          `sender=` as a single positional argument and any ``kwargs`` that
          were provided to a call to :meth:`send`.

        :param sender: Any object or :obj:`ANY`, defaults to ``ANY``.
          Restricts notifications delivered to *receiver* to only those
          :meth:`send` emissions sent by *sender*.  If ``ANY``, the receiver
          will always be notified.  A *receiver* may be connected to
          multiple *sender* values on the same Signal through multiple calls
          to :meth:`connect`.

        :param weak: If true, the Signal will hold a weakref to *receiver*
          and automatically disconnect when *receiver* goes out of scope or
          is garbage collected.  Defaults to True.

        'b'Connect the decorated function as a receiver for *sender*.

        :param sender: Any object or :obj:`ANY`.  The decorated function
          will only receive :meth:`send` emissions sent by *sender*.  If
          ``ANY``, the receiver will always be notified.  A function may be
          decorated multiple times with differing *sender* values.

        :param weak: If true, the Signal will hold a weakref to the
          decorated function and automatically disconnect when *receiver*
          goes out of scope or is garbage collected.  Unlike
          :meth:`connect`, this defaults to False.

        The decorated function will be invoked by :meth:`send` with
          `sender=` as a single positional argument and any ``kwargs`` that
          were provided to the call to :meth:`send`.


        .. versionadded:: 1.1

        'u'Connect the decorated function as a receiver for *sender*.

        :param sender: Any object or :obj:`ANY`.  The decorated function
          will only receive :meth:`send` emissions sent by *sender*.  If
          ``ANY``, the receiver will always be notified.  A function may be
          decorated multiple times with differing *sender* values.

        :param weak: If true, the Signal will hold a weakref to the
          decorated function and automatically disconnect when *receiver*
          goes out of scope or is garbage collected.  Unlike
          :meth:`connect`, this defaults to False.

        The decorated function will be invoked by :meth:`send` with
          `sender=` as a single positional argument and any ``kwargs`` that
          were provided to the call to :meth:`send`.


        .. versionadded:: 1.1

        'b'Execute a block with the signal temporarily connected to *receiver*.

        :param receiver: a receiver callable
        :param sender: optional, a sender to filter on

        This is a context manager for use in the ``with`` statement.  It can
        be useful in unit tests.  *receiver* is connected to the signal for
        the duration of the ``with`` block, and will be disconnected
        automatically when exiting the block:

        .. code-block:: python

          with on_ready.connected_to(receiver):
             # do stuff
             on_ready.send(123)

        .. versionadded:: 1.1

        'u'Execute a block with the signal temporarily connected to *receiver*.

        :param receiver: a receiver callable
        :param sender: optional, a sender to filter on

        This is a context manager for use in the ``with`` statement.  It can
        be useful in unit tests.  *receiver* is connected to the signal for
        the duration of the ``with`` block, and will be disconnected
        automatically when exiting the block:

        .. code-block:: python

          with on_ready.connected_to(receiver):
             # do stuff
             on_ready.send(123)

        .. versionadded:: 1.1

        'b'Context manager for temporarily disabling signal.
        Useful for test purposes.
        'u'Context manager for temporarily disabling signal.
        Useful for test purposes.
        'b'An alias for :meth:`connected_to`.

        :param receiver: a receiver callable
        :param sender: optional, a sender to filter on

        .. versionadded:: 0.9

        .. versionchanged:: 1.1
          Renamed to :meth:`connected_to`.  ``temporarily_connected_to`` was
          deprecated in 1.2 and will be removed in a subsequent version.

        'u'An alias for :meth:`connected_to`.

        :param receiver: a receiver callable
        :param sender: optional, a sender to filter on

        .. versionadded:: 0.9

        .. versionchanged:: 1.1
          Renamed to :meth:`connected_to`.  ``temporarily_connected_to`` was
          deprecated in 1.2 and will be removed in a subsequent version.

        'b'temporarily_connected_to is deprecated; use connected_to instead.'u'temporarily_connected_to is deprecated; use connected_to instead.'b'Emit this signal on behalf of *sender*, passing on ``kwargs``.

        Returns a list of 2-tuples, pairing receivers with their return
        value. The ordering of receiver notification is undefined.

        :param sender: Any object or ``None``.  If omitted, synonymous
          with ``None``.  Only accepts one positional argument.
        :param _async_wrapper: A callable that should wrap a coroutine
          receiver and run it when called synchronously.

        :param kwargs: Data to be sent to receivers.
        'u'Emit this signal on behalf of *sender*, passing on ``kwargs``.

        Returns a list of 2-tuples, pairing receivers with their return
        value. The ordering of receiver notification is undefined.

        :param sender: Any object or ``None``.  If omitted, synonymous
          with ``None``.  Only accepts one positional argument.
        :param _async_wrapper: A callable that should wrap a coroutine
          receiver and run it when called synchronously.

        :param kwargs: Data to be sent to receivers.
        'b'Cannot send to a coroutine function'u'Cannot send to a coroutine function'b'Emit this signal on behalf of *sender*, passing on ``kwargs``.

        Returns a list of 2-tuples, pairing receivers with their return
        value. The ordering of receiver notification is undefined.

        :param sender: Any object or ``None``.  If omitted, synonymous
          with ``None``. Only accepts one positional argument.
        :param _sync_wrapper: A callable that should wrap a synchronous
          receiver and run it when awaited.

        :param kwargs: Data to be sent to receivers.
        'u'Emit this signal on behalf of *sender*, passing on ``kwargs``.

        Returns a list of 2-tuples, pairing receivers with their return
        value. The ordering of receiver notification is undefined.

        :param sender: Any object or ``None``.  If omitted, synonymous
          with ``None``. Only accepts one positional argument.
        :param _sync_wrapper: A callable that should wrap a synchronous
          receiver and run it when awaited.

        :param kwargs: Data to be sent to receivers.
        'b'Cannot send to a non-coroutine function'u'Cannot send to a non-coroutine function'b'send() accepts only one positional argument, 'u'send() accepts only one positional argument, 'b' given'u' given'b'True if there is probably a receiver for *sender*.

        Performs an optimistic check only.  Does not guarantee that all
        weakly referenced receivers are still alive.  See
        :meth:`receivers_for` for a stronger search.

        'u'True if there is probably a receiver for *sender*.

        Performs an optimistic check only.  Does not guarantee that all
        weakly referenced receivers are still alive.  See
        :meth:`receivers_for` for a stronger search.

        'b'Iterate all live receivers listening for *sender*.'u'Iterate all live receivers listening for *sender*.'b'Disconnect *receiver* from this signal's events.

        :param receiver: a previously :meth:`connected<connect>` callable

        :param sender: a specific sender to disconnect from, or :obj:`ANY`
          to disconnect from all senders.  Defaults to ``ANY``.

        'u'Disconnect *receiver* from this signal's events.

        :param receiver: a previously :meth:`connected<connect>` callable

        :param sender: a specific sender to disconnect from, or :obj:`ANY`
          to disconnect from all senders.  Defaults to ``ANY``.

        'b'receiver_disconnected'u'receiver_disconnected'b'Disconnect a receiver from all senders.'u'Disconnect a receiver from all senders.'b'Disconnect all receivers from a sender.'u'Disconnect all receivers from a sender.'b'Prune unused sender/receiver bookkeeping. Not threadsafe.

        Connecting & disconnecting leave behind a small amount of bookkeeping
        for the receiver and sender values. Typical workloads using Blinker,
        for example in most web apps, Flask, CLI scripts, etc., are not
        adversely affected by this bookkeeping.

        With a long-running Python process performing dynamic signal routing
        with high volume- e.g. connecting to function closures, "senders" are
        all unique object instances, and doing all of this over and over- you
        may see memory usage will grow due to extraneous bookkeeping. (An empty
        set() for each stale sender/receiver pair.)

        This method will prune that bookkeeping away, with the caveat that such
        pruning is not threadsafe. The risk is that cleanup of a fully
        disconnected receiver/sender pair occurs while another thread is
        connecting that same pair. If you are in the highly dynamic, unique
        receiver/sender situation that has lead you to this method, that
        failure mode is perhaps not a big deal for you.
        'u'Prune unused sender/receiver bookkeeping. Not threadsafe.

        Connecting & disconnecting leave behind a small amount of bookkeeping
        for the receiver and sender values. Typical workloads using Blinker,
        for example in most web apps, Flask, CLI scripts, etc., are not
        adversely affected by this bookkeeping.

        With a long-running Python process performing dynamic signal routing
        with high volume- e.g. connecting to function closures, "senders" are
        all unique object instances, and doing all of this over and over- you
        may see memory usage will grow due to extraneous bookkeeping. (An empty
        set() for each stale sender/receiver pair.)

        This method will prune that bookkeeping away, with the caveat that such
        pruning is not threadsafe. The risk is that cleanup of a fully
        disconnected receiver/sender pair occurs while another thread is
        connecting that same pair. If you are in the highly dynamic, unique
        receiver/sender situation that has lead you to this method, that
        failure mode is perhaps not a big deal for you.
        'b'Throw away all signal state.  Useful for unit tests.'u'Throw away all signal state.  Useful for unit tests.'b'Sent by a :class:`Signal` after a receiver connects.

:argument: the Signal that was connected to
:keyword receiver_arg: the connected receiver
:keyword sender_arg: the sender to connect to
:keyword weak_arg: true if the connection to receiver_arg is a weak reference

.. deprecated:: 1.2

As of 1.2, individual signals have their own private
:attr:`~Signal.receiver_connected` and
:attr:`~Signal.receiver_disconnected` signals with a slightly simplified
call signature.  This global signal is planned to be removed in 1.6.

'u'Sent by a :class:`Signal` after a receiver connects.

:argument: the Signal that was connected to
:keyword receiver_arg: the connected receiver
:keyword sender_arg: the sender to connect to
:keyword weak_arg: true if the connection to receiver_arg is a weak reference

.. deprecated:: 1.2

As of 1.2, individual signals have their own private
:attr:`~Signal.receiver_connected` and
:attr:`~Signal.receiver_disconnected` signals with a slightly simplified
call signature.  This global signal is planned to be removed in 1.6.

'b'A named generic notification emitter.'u'A named generic notification emitter.'b'A mapping of signal names to signals.'u'A mapping of signal names to signals.'b'Return the :class:`NamedSignal` *name*, creating it if required.

        Repeated calls to this function will return the same signal object.

        'u'Return the :class:`NamedSignal` *name*, creating it if required.

        Repeated calls to this function will return the same signal object.

        'b'A weak mapping of signal names to signals.

    Automatically cleans up unused Signals when the last reference goes out
    of scope.  This namespace implementation exists for a measure of legacy
    compatibility with Blinker <= 1.2, and may be dropped in the future.

    .. versionadded:: 1.3

    'u'A weak mapping of signal names to signals.

    Automatically cleans up unused Signals when the last reference goes out
    of scope.  This namespace implementation exists for a measure of legacy
    compatibility with Blinker <= 1.2, and may be dropped in the future.

    .. versionadded:: 1.3

    'u'blinker.base'Base16, Base32, Base64 (RFC 3548), Base85 and Ascii85 data encodingsencodebytesdecodebytesb32encodeb32decodeb16encodeb16decodeb85encodeb85decodea85encodea85decodestandard_b64encodestandard_b64decodeurlsafe_b64encodeurlsafe_b64decodebytes_types_bytes_from_decode_datastring argument should contain only ASCII charactersargument should be a bytes-like object or ASCII string, not %r"argument should be a bytes-like object or ASCII ""string, not %r"altcharsEncode the bytes-like object s using Base64 and return a bytes object.

    Optional altchars should be a byte string of length 2 which specifies an
    alternative alphabet for the '+' and '/' characters.  This allows an
    application to e.g. generate url or filesystem safe Base64 strings.
    b2a_base64+/Decode the Base64 encoded bytes-like object or ASCII string s.

    Optional altchars must be a bytes-like object or ASCII string of length 2
    which specifies the alternative alphabet used instead of the '+' and '/'
    characters.

    The result is returned as a bytes object.  A binascii.Error is raised if
    s is incorrectly padded.

    If validate is False (the default), characters that are neither in the
    normal base-64 alphabet nor the alternative alphabet are discarded prior
    to the padding check.  If validate is True, these non-alphabet characters
    in the input result in a binascii.Error.
    [A-Za-z0-9+/]*={0,2}Non-base64 digit founda2b_base64Encode bytes-like object s using the standard Base64 alphabet.

    The result is returned as a bytes object.
    Decode bytes encoded with the standard Base64 alphabet.

    Argument s is a bytes-like object or ASCII string to decode.  The result
    is returned as a bytes object.  A binascii.Error is raised if the input
    is incorrectly padded.  Characters that are not in the standard alphabet
    are discarded prior to the padding check.
    -__urlsafe_encode_translation_urlsafe_decode_translationEncode bytes using the URL- and filesystem-safe Base64 alphabet.

    Argument s is a bytes-like object to encode.  The result is returned as a
    bytes object.  The alphabet uses '-' instead of '+' and '_' instead of
    '/'.
    Decode bytes using the URL- and filesystem-safe Base64 alphabet.

    Argument s is a bytes-like object or ASCII string to decode.  The result
    is returned as a bytes object.  A binascii.Error is raised if the input
    is incorrectly padded.  Characters that are not in the URL-safe base-64
    alphabet, and are not a plus '+' or slash '/', are discarded prior to the
    padding check.

    The alphabet uses '-' instead of '+' and '_' instead of '/'.
    ABCDEFGHIJKLMNOPQRSTUVWXYZ234567_b32alphabet_b32tab2_b32revEncode the bytes-like object s using Base32 and return a bytes object.
    b32tabb32tab210230x3ff==========map01Decode the Base32 encoded bytes-like object or ASCII string s.

    Optional casefold is a flag specifying whether a lowercase alphabet is
    acceptable as input.  For security purposes, the default is False.

    RFC 3548 allows for optional mapping of the digit 0 (zero) to the
    letter O (oh), and for optional mapping of the digit 1 (one) to
    either the letter I (eye) or letter L (el).  The optional argument
    map01 when not None, specifies which letter the digit 1 should be
    mapped to (when map01 is not None, the digit 0 is always mapped to
    the letter O).  For security purposes the default is None, so that
    0 and 1 are not allowed in the input.

    The result is returned as a bytes object.  A binascii.Error is raised if
    the input is incorrectly padded or if there are non-alphabet
    characters present in the input.
    Incorrect paddingpadcharsdecodedb32revquantaaccNon-base32 digit foundEncode the bytes-like object s using Base16 and return a bytes object.
    hexlifyDecode the Base16 encoded bytes-like object or ASCII string s.

    Optional casefold is a flag specifying whether a lowercase alphabet is
    acceptable as input.  For security purposes, the default is False.

    The result is returned as a bytes object.  A binascii.Error is raised if
    s is incorrectly padded or if there are non-alphabet characters present
    in the input.
    [^0-9A-F]Non-base16 digit foundunhexlify_a85chars_a85chars2<~_A85START~>_A85END_85encodechars2padfoldnulsfoldspaces!%dIwordsword5389762880x20202020614125857225wrapcoladobeEncode bytes-like object b using Ascii85 and return a bytes object.

    foldspaces is an optional flag that uses the special short sequence 'y'
    instead of 4 consecutive spaces (ASCII 0x20) as supported by 'btoa'. This
    feature is not supported by the "standard" Adobe encoding.

    wrapcol controls whether the output should have newline (b'\n') characters
    added to it. If this is non-zero, each output line will be at most this
    many characters long.

    pad controls whether the input is padded to a multiple of 4 before
    encoding. Note that the btoa implementation always pads.

    adobe controls whether the encoded byte sequence is framed with <~ and ~>,
    which is used by the Adobe implementation.
    118 	
ignorecharsDecode the Ascii85 encoded bytes-like object or ASCII string b.

    foldspaces is a flag that specifies whether the 'y' short sequence should be
    accepted as shorthand for 4 consecutive spaces (ASCII 0x20). This feature is
    not supported by the "standard" Adobe encoding.

    adobe controls whether the input sequence is in Adobe Ascii85 format (i.e.
    is framed with <~ and ~>).

    ignorechars should be a byte string containing characters to ignore from the
    input. This should only contain whitespace characters, and by default
    contains all whitespace characters in ASCII.

    The result is returned as a bytes object.
    Ascii85 encoded byte sequences must end with {!r}"Ascii85 encoded byte sequences must end ""with {!r}"!IpackIdecoded_appendcurr_appendcurr_clearAscii85 overflowz inside Ascii85 5-tuple    y inside Ascii85 5-tupleNon-Ascii85 digit found: %c0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!#$%&()*+-;<=>?@^_`{|}~b"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"b"abcdefghijklmnopqrstuvwxyz!#$%&()*+-;<=>?@^_`{|}~"_b85alphabet_b85chars_b85chars2_b85decEncode bytes-like object b in base85 format and return a bytes object.

    If pad is true, the input is padded with b'\0' so its length is a multiple of
    4 bytes before encoding.
    Decode the base85-encoded bytes-like object or ASCII string b

    The result is returned as a bytes object.
    jbad base85 character at position %dbase85 overflow in hunk starting at byte %d76MAXLINESIZEMAXBINSIZEoutputEncode a file; input and output are binary files.Decode a file; input and output are binary files._input_type_checkexpected bytes-like object, not %sexpected single byte elements, not %r from %sexpected 1-D data, not %d-D data from %sEncode a bytestring into a bytes object containing multiple lines
    of base-64 data.piecesDecode a bytestring of base-64 data into a bytes object.Small main programgetoptdeutoptsusage: %s [-d|-e|-u|-t] [file|-]
        -d, -u: decode
        -e: encode (default)
        -t: encode and decode string 'Aladdin:open sesame'-e-u-tAladdin:open sesames0s1s2Script#! /usr/bin/env python3# Modified 04-Oct-1995 by Jack Jansen to use binascii module# Modified 30-Dec-2003 by Barry Warsaw to add full RFC 3548 support# Modified 22-May-2007 by Guido van Rossum to use bytes everywhere# Legacy interface exports traditional RFC 2045 Base64 encodings# Generalized interface for other encodings# Base85 and Ascii85 encodings# Standard Base64 encoding# Some common Base64 alternatives.  As referenced by RFC 3458, see thread# starting at:# http://zgp.org/pipermail/p2p-hackers/2001-September/000316.html# Types acceptable as binary data# Base64 encoding/decoding uses binascii# Base32 encoding/decoding must be done in Python# Delay the initialization of the table to not waste memory# if the function is never called# Pad the last quantum with zero bits if necessary# Don't use += !# bits 1 - 10# bits 11 - 20# bits 21 - 30# bits 31 - 40# Adjust for any leftover partial quanta# Handle section 2.4 zero and one mapping.  The flag map01 will be either# False, or the character to map the digit 1 (one) to.  It should be# either L (el) or I (eye).# Strip off pad characters from the right.  We need to count the pad# characters because this will tell us how many null bytes to remove from# the end of the decoded string.# Now decode the full quanta# Process the last, partial quanta# 1: 4, 3: 3, 4: 2, 6: 1# RFC 3548, Base 16 Alphabet specifies uppercase, but hexlify() returns# lowercase.  The RFC also recommends against accepting input case# insensitively.# Ascii85 encoding/decoding# Helper function for a85encode and b85encode# Delay the initialization of tables to not waste memory# Strip off start/end markers# We have to go through this stepwise, so as to ignore spaces and handle# special short sequences# Skip whitespace# Throw away the extra padding# The following code is originally taken (with permission) from Mercurial# Legacy interface.  This code could be cleaned up since I don't believe# binascii has any line length limitations.  It just doesn't seem worth it# though.  The files should be opened in binary mode.# Excluding the CRLF# Usable as a script...b'Base16, Base32, Base64 (RFC 3548), Base85 and Ascii85 data encodings'u'Base16, Base32, Base64 (RFC 3548), Base85 and Ascii85 data encodings'b'encodebytes'u'encodebytes'b'decodebytes'u'decodebytes'b'b64encode'u'b64encode'b'b64decode'u'b64decode'b'b32encode'u'b32encode'b'b32decode'u'b32decode'b'b16encode'u'b16encode'b'b16decode'u'b16decode'b'b85encode'u'b85encode'b'b85decode'u'b85decode'b'a85encode'u'a85encode'b'a85decode'u'a85decode'b'standard_b64encode'u'standard_b64encode'b'standard_b64decode'u'standard_b64decode'b'urlsafe_b64encode'u'urlsafe_b64encode'b'urlsafe_b64decode'u'urlsafe_b64decode'b'string argument should contain only ASCII characters'u'string argument should contain only ASCII characters'b'argument should be a bytes-like object or ASCII string, not %r'u'argument should be a bytes-like object or ASCII string, not %r'b'Encode the bytes-like object s using Base64 and return a bytes object.

    Optional altchars should be a byte string of length 2 which specifies an
    alternative alphabet for the '+' and '/' characters.  This allows an
    application to e.g. generate url or filesystem safe Base64 strings.
    'u'Encode the bytes-like object s using Base64 and return a bytes object.

    Optional altchars should be a byte string of length 2 which specifies an
    alternative alphabet for the '+' and '/' characters.  This allows an
    application to e.g. generate url or filesystem safe Base64 strings.
    'b'+/'b'Decode the Base64 encoded bytes-like object or ASCII string s.

    Optional altchars must be a bytes-like object or ASCII string of length 2
    which specifies the alternative alphabet used instead of the '+' and '/'
    characters.

    The result is returned as a bytes object.  A binascii.Error is raised if
    s is incorrectly padded.

    If validate is False (the default), characters that are neither in the
    normal base-64 alphabet nor the alternative alphabet are discarded prior
    to the padding check.  If validate is True, these non-alphabet characters
    in the input result in a binascii.Error.
    'u'Decode the Base64 encoded bytes-like object or ASCII string s.

    Optional altchars must be a bytes-like object or ASCII string of length 2
    which specifies the alternative alphabet used instead of the '+' and '/'
    characters.

    The result is returned as a bytes object.  A binascii.Error is raised if
    s is incorrectly padded.

    If validate is False (the default), characters that are neither in the
    normal base-64 alphabet nor the alternative alphabet are discarded prior
    to the padding check.  If validate is True, these non-alphabet characters
    in the input result in a binascii.Error.
    'b'[A-Za-z0-9+/]*={0,2}'b'Non-base64 digit found'u'Non-base64 digit found'b'Encode bytes-like object s using the standard Base64 alphabet.

    The result is returned as a bytes object.
    'u'Encode bytes-like object s using the standard Base64 alphabet.

    The result is returned as a bytes object.
    'b'Decode bytes encoded with the standard Base64 alphabet.

    Argument s is a bytes-like object or ASCII string to decode.  The result
    is returned as a bytes object.  A binascii.Error is raised if the input
    is incorrectly padded.  Characters that are not in the standard alphabet
    are discarded prior to the padding check.
    'u'Decode bytes encoded with the standard Base64 alphabet.

    Argument s is a bytes-like object or ASCII string to decode.  The result
    is returned as a bytes object.  A binascii.Error is raised if the input
    is incorrectly padded.  Characters that are not in the standard alphabet
    are discarded prior to the padding check.
    'b'-_'b'Encode bytes using the URL- and filesystem-safe Base64 alphabet.

    Argument s is a bytes-like object to encode.  The result is returned as a
    bytes object.  The alphabet uses '-' instead of '+' and '_' instead of
    '/'.
    'u'Encode bytes using the URL- and filesystem-safe Base64 alphabet.

    Argument s is a bytes-like object to encode.  The result is returned as a
    bytes object.  The alphabet uses '-' instead of '+' and '_' instead of
    '/'.
    'b'Decode bytes using the URL- and filesystem-safe Base64 alphabet.

    Argument s is a bytes-like object or ASCII string to decode.  The result
    is returned as a bytes object.  A binascii.Error is raised if the input
    is incorrectly padded.  Characters that are not in the URL-safe base-64
    alphabet, and are not a plus '+' or slash '/', are discarded prior to the
    padding check.

    The alphabet uses '-' instead of '+' and '_' instead of '/'.
    'u'Decode bytes using the URL- and filesystem-safe Base64 alphabet.

    Argument s is a bytes-like object or ASCII string to decode.  The result
    is returned as a bytes object.  A binascii.Error is raised if the input
    is incorrectly padded.  Characters that are not in the URL-safe base-64
    alphabet, and are not a plus '+' or slash '/', are discarded prior to the
    padding check.

    The alphabet uses '-' instead of '+' and '_' instead of '/'.
    'b'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'b'Encode the bytes-like object s using Base32 and return a bytes object.
    'u'Encode the bytes-like object s using Base32 and return a bytes object.
    'b'======'b'===='b'Decode the Base32 encoded bytes-like object or ASCII string s.

    Optional casefold is a flag specifying whether a lowercase alphabet is
    acceptable as input.  For security purposes, the default is False.

    RFC 3548 allows for optional mapping of the digit 0 (zero) to the
    letter O (oh), and for optional mapping of the digit 1 (one) to
    either the letter I (eye) or letter L (el).  The optional argument
    map01 when not None, specifies which letter the digit 1 should be
    mapped to (when map01 is not None, the digit 0 is always mapped to
    the letter O).  For security purposes the default is None, so that
    0 and 1 are not allowed in the input.

    The result is returned as a bytes object.  A binascii.Error is raised if
    the input is incorrectly padded or if there are non-alphabet
    characters present in the input.
    'u'Decode the Base32 encoded bytes-like object or ASCII string s.

    Optional casefold is a flag specifying whether a lowercase alphabet is
    acceptable as input.  For security purposes, the default is False.

    RFC 3548 allows for optional mapping of the digit 0 (zero) to the
    letter O (oh), and for optional mapping of the digit 1 (one) to
    either the letter I (eye) or letter L (el).  The optional argument
    map01 when not None, specifies which letter the digit 1 should be
    mapped to (when map01 is not None, the digit 0 is always mapped to
    the letter O).  For security purposes the default is None, so that
    0 and 1 are not allowed in the input.

    The result is returned as a bytes object.  A binascii.Error is raised if
    the input is incorrectly padded or if there are non-alphabet
    characters present in the input.
    'b'Incorrect padding'u'Incorrect padding'b'Non-base32 digit found'u'Non-base32 digit found'b'Encode the bytes-like object s using Base16 and return a bytes object.
    'u'Encode the bytes-like object s using Base16 and return a bytes object.
    'b'Decode the Base16 encoded bytes-like object or ASCII string s.

    Optional casefold is a flag specifying whether a lowercase alphabet is
    acceptable as input.  For security purposes, the default is False.

    The result is returned as a bytes object.  A binascii.Error is raised if
    s is incorrectly padded or if there are non-alphabet characters present
    in the input.
    'u'Decode the Base16 encoded bytes-like object or ASCII string s.

    Optional casefold is a flag specifying whether a lowercase alphabet is
    acceptable as input.  For security purposes, the default is False.

    The result is returned as a bytes object.  A binascii.Error is raised if
    s is incorrectly padded or if there are non-alphabet characters present
    in the input.
    'b'[^0-9A-F]'b'Non-base16 digit found'u'Non-base16 digit found'b'<~'b'~>'b'!%dI'u'!%dI'b'Encode bytes-like object b using Ascii85 and return a bytes object.

    foldspaces is an optional flag that uses the special short sequence 'y'
    instead of 4 consecutive spaces (ASCII 0x20) as supported by 'btoa'. This
    feature is not supported by the "standard" Adobe encoding.

    wrapcol controls whether the output should have newline (b'\n') characters
    added to it. If this is non-zero, each output line will be at most this
    many characters long.

    pad controls whether the input is padded to a multiple of 4 before
    encoding. Note that the btoa implementation always pads.

    adobe controls whether the encoded byte sequence is framed with <~ and ~>,
    which is used by the Adobe implementation.
    'u'Encode bytes-like object b using Ascii85 and return a bytes object.

    foldspaces is an optional flag that uses the special short sequence 'y'
    instead of 4 consecutive spaces (ASCII 0x20) as supported by 'btoa'. This
    feature is not supported by the "standard" Adobe encoding.

    wrapcol controls whether the output should have newline (b'\n') characters
    added to it. If this is non-zero, each output line will be at most this
    many characters long.

    pad controls whether the input is padded to a multiple of 4 before
    encoding. Note that the btoa implementation always pads.

    adobe controls whether the encoded byte sequence is framed with <~ and ~>,
    which is used by the Adobe implementation.
    'b' 	
'b'Decode the Ascii85 encoded bytes-like object or ASCII string b.

    foldspaces is a flag that specifies whether the 'y' short sequence should be
    accepted as shorthand for 4 consecutive spaces (ASCII 0x20). This feature is
    not supported by the "standard" Adobe encoding.

    adobe controls whether the input sequence is in Adobe Ascii85 format (i.e.
    is framed with <~ and ~>).

    ignorechars should be a byte string containing characters to ignore from the
    input. This should only contain whitespace characters, and by default
    contains all whitespace characters in ASCII.

    The result is returned as a bytes object.
    'u'Decode the Ascii85 encoded bytes-like object or ASCII string b.

    foldspaces is a flag that specifies whether the 'y' short sequence should be
    accepted as shorthand for 4 consecutive spaces (ASCII 0x20). This feature is
    not supported by the "standard" Adobe encoding.

    adobe controls whether the input sequence is in Adobe Ascii85 format (i.e.
    is framed with <~ and ~>).

    ignorechars should be a byte string containing characters to ignore from the
    input. This should only contain whitespace characters, and by default
    contains all whitespace characters in ASCII.

    The result is returned as a bytes object.
    'b'Ascii85 encoded byte sequences must end with {!r}'u'Ascii85 encoded byte sequences must end with {!r}'b'!I'u'!I'b'Ascii85 overflow'u'Ascii85 overflow'b'z inside Ascii85 5-tuple'u'z inside Ascii85 5-tuple'b'    'b'y inside Ascii85 5-tuple'u'y inside Ascii85 5-tuple'b'Non-Ascii85 digit found: %c'u'Non-Ascii85 digit found: %c'b'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!#$%&()*+-;<=>?@^_`{|}~'b'Encode bytes-like object b in base85 format and return a bytes object.

    If pad is true, the input is padded with b'\0' so its length is a multiple of
    4 bytes before encoding.
    'u'Encode bytes-like object b in base85 format and return a bytes object.

    If pad is true, the input is padded with b'\0' so its length is a multiple of
    4 bytes before encoding.
    'b'Decode the base85-encoded bytes-like object or ASCII string b

    The result is returned as a bytes object.
    'u'Decode the base85-encoded bytes-like object or ASCII string b

    The result is returned as a bytes object.
    'b'bad base85 character at position %d'u'bad base85 character at position %d'b'base85 overflow in hunk starting at byte %d'u'base85 overflow in hunk starting at byte %d'b'Encode a file; input and output are binary files.'u'Encode a file; input and output are binary files.'b'Decode a file; input and output are binary files.'u'Decode a file; input and output are binary files.'b'expected bytes-like object, not %s'u'expected bytes-like object, not %s'b'expected single byte elements, not %r from %s'u'expected single byte elements, not %r from %s'b'expected 1-D data, not %d-D data from %s'u'expected 1-D data, not %d-D data from %s'b'Encode a bytestring into a bytes object containing multiple lines
    of base-64 data.'u'Encode a bytestring into a bytes object containing multiple lines
    of base-64 data.'b'Decode a bytestring of base-64 data into a bytes object.'u'Decode a bytestring of base-64 data into a bytes object.'b'Small main program'u'Small main program'b'deut'u'deut'b'usage: %s [-d|-e|-u|-t] [file|-]
        -d, -u: decode
        -e: encode (default)
        -t: encode and decode string 'Aladdin:open sesame''u'usage: %s [-d|-e|-u|-t] [file|-]
        -d, -u: decode
        -e: encode (default)
        -t: encode and decode string 'Aladdin:open sesame''b'-e'u'-e'b'-u'u'-u'b'-t'u'-t'b'Aladdin:open sesame'u'Python.Python39.lib.base64'u'Python39.lib.base64'u'lib.base64'Base64 content transfer encoding per RFCs 2045-2047.

This module handles the content transfer encoding method defined in RFC 2045
to encode arbitrary 8-bit data using the three 8-bit bytes in four 7-bit
characters encoding known as Base64.

It is used in the MIME standards for email to attach images, audio, and text
using some 8-bit character sets to messages.

This module provides an interface to encode and decode both headers and bodies
with Base64 encoding.

RFC 2045 defines a method for including character set information in an
`encoded-word' in a header.  This method is commonly used for 8-bit real names
in To:, From:, Cc:, etc. fields, as well as Subject: lines.

This module does not do the line wrapping or end-of-line character conversion
necessary for proper internationalized headers; it only does dumb encoding and
decoding.  To deal with the various line wrapping issues, use the email.header
module.
body_decodebody_encodedecodestringheader_encodeheader_lengthCRLFNLMISC_LENReturn the length of s when it is encoded with base64.iso-8859-1header_bytesEncode a single header line with Base64 encoding in a given charset.

    charset names the character set to use to encode the header.  It defaults
    to iso-8859-1.  Base64 encoding is defined in RFC 2045.
    =?%s?b?%s?=eolEncode a string with base64.

    Each line will be wrapped at, at most, maxlinelen characters (defaults to
    76 characters).

    Each line of encoded text will end with eol, which defaults to "\n".  Set
    this to "\r\n" if you will be using the result of this function directly
    in an email.
    encvecmax_unencodedencDecode a raw base64 string, returning a bytes object.

    This function does not parse a full MIME header value encoded with
    base64 (like =?iso-8859-1?b?bmloISBuaWgh?=) -- please use the high
    level email.header class for that functionality.
    raw-unicode-escape# Author: Ben Gertzfield# See also Charset.py# Helpers# BAW: should encode() inherit b2a_base64()'s dubious behavior in# adding a newline to the encoded string?# For convenience and backwards compatibility w/ standard base64 moduleb'Base64 content transfer encoding per RFCs 2045-2047.

This module handles the content transfer encoding method defined in RFC 2045
to encode arbitrary 8-bit data using the three 8-bit bytes in four 7-bit
characters encoding known as Base64.

It is used in the MIME standards for email to attach images, audio, and text
using some 8-bit character sets to messages.

This module provides an interface to encode and decode both headers and bodies
with Base64 encoding.

RFC 2045 defines a method for including character set information in an
`encoded-word' in a header.  This method is commonly used for 8-bit real names
in To:, From:, Cc:, etc. fields, as well as Subject: lines.

This module does not do the line wrapping or end-of-line character conversion
necessary for proper internationalized headers; it only does dumb encoding and
decoding.  To deal with the various line wrapping issues, use the email.header
module.
'u'Base64 content transfer encoding per RFCs 2045-2047.

This module handles the content transfer encoding method defined in RFC 2045
to encode arbitrary 8-bit data using the three 8-bit bytes in four 7-bit
characters encoding known as Base64.

It is used in the MIME standards for email to attach images, audio, and text
using some 8-bit character sets to messages.

This module provides an interface to encode and decode both headers and bodies
with Base64 encoding.

RFC 2045 defines a method for including character set information in an
`encoded-word' in a header.  This method is commonly used for 8-bit real names
in To:, From:, Cc:, etc. fields, as well as Subject: lines.

This module does not do the line wrapping or end-of-line character conversion
necessary for proper internationalized headers; it only does dumb encoding and
decoding.  To deal with the various line wrapping issues, use the email.header
module.
'b'body_decode'u'body_decode'b'body_encode'u'body_encode'b'decodestring'u'decodestring'b'header_encode'u'header_encode'b'header_length'u'header_length'b'Return the length of s when it is encoded with base64.'u'Return the length of s when it is encoded with base64.'b'iso-8859-1'u'iso-8859-1'b'Encode a single header line with Base64 encoding in a given charset.

    charset names the character set to use to encode the header.  It defaults
    to iso-8859-1.  Base64 encoding is defined in RFC 2045.
    'u'Encode a single header line with Base64 encoding in a given charset.

    charset names the character set to use to encode the header.  It defaults
    to iso-8859-1.  Base64 encoding is defined in RFC 2045.
    'b'=?%s?b?%s?='u'=?%s?b?%s?='b'Encode a string with base64.

    Each line will be wrapped at, at most, maxlinelen characters (defaults to
    76 characters).

    Each line of encoded text will end with eol, which defaults to "\n".  Set
    this to "\r\n" if you will be using the result of this function directly
    in an email.
    'u'Encode a string with base64.

    Each line will be wrapped at, at most, maxlinelen characters (defaults to
    76 characters).

    Each line of encoded text will end with eol, which defaults to "\n".  Set
    this to "\r\n" if you will be using the result of this function directly
    in an email.
    'b'Decode a raw base64 string, returning a bytes object.

    This function does not parse a full MIME header value encoded with
    base64 (like =?iso-8859-1?b?bmloISBuaWgh?=) -- please use the high
    level email.header class for that functionality.
    'u'Decode a raw base64 string, returning a bytes object.

    This function does not parse a full MIME header value encoded with
    base64 (like =?iso-8859-1?b?bmloISBuaWgh?=) -- please use the high
    level email.header class for that functionality.
    'b'raw-unicode-escape'u'raw-unicode-escape'u'Python39.lib.email.base64mime'u'lib.email.base64mime'u'email.base64mime'Base implementation of event loop.

The event loop can be broken up into a multiplexer (the part
responsible for notifying us of I/O events) and the event loop proper,
which wraps a multiplexer with functionality for scheduling callbacks,
immediately or at a given time in the future.

Whenever a public API takes a callback, subsequent positional
arguments will be passed to the callback if/when it is called.  This
avoids the proliferation of trivial lambdas implementing closures.
Keyword arguments for the callback are not supported; this is a
conscious design decision, leaving the door open for keyword arguments
to modify the meaning of the API call itself.
concurrentsslconstantssslprotostaggeredtrsockBaseEventLoop_MIN_SCHEDULED_TIMER_HANDLES_MIN_CANCELLED_TIMER_HANDLES_FRACTIONAF_INET6_HAS_IPv6MAXIMUM_SELECT_TIMEOUT_unset_format_handle_callbackTask_format_pipe<pipe>STDOUT<stdout>_set_reuseportsockSO_REUSEPORTreuse_port not supported by socket modulesetsockoptSOL_SOCKETreuse_port not supported by socket module, SO_REUSEPORT defined but not implemented.'reuse_port not supported by socket module, ''SO_REUSEPORT defined but not implemented.'_ipaddr_infofamilyprotoflowinfoscopeidinet_ptonIPPROTO_TCPIPPROTO_UDPSOCK_STREAMSOCK_DGRAMAF_UNSPECAF_INETafs_interleave_addrinfosaddrinfosfirst_address_family_countInterleave list of addrinfo tuples by family.addrinfos_by_familyaddraddrinfos_listsreordered_run_until_complete_cb_get_loopTCP_NODELAY_set_nodelay_SendfileFallbackProtocoltransp_FlowControlMixintransport should be _FlowControlMixin instance_transportget_protocol_protois_reading_should_resume_reading_protocol_paused_should_resume_writingpause_readingset_protocol_loop_write_ready_futdrainis_closingConnection closed by peerconnection_madetransportInvalid state: connection should have been established already."Invalid state: ""connection should have been established already."connection_lostConnection is closed by peerpause_writingresume_writingdata_receivedInvalid state: reading should be pausedeof_receivedresume_readingServerAbstractServersocketsprotocol_factoryssl_contextbacklogssl_handshake_timeout_sockets_active_count_protocol_factory_backlog_ssl_context_ssl_handshake_timeout_serving_serving_forever_fut sockets=_attach_detach_wakeup_start_servinglistenget_loopis_servingTransportSocket_stop_servingstart_servingserve_foreverserver  is already being awaited on serve_forever() is closedwait_closedAbstractEventLoop_timer_cancelled_count_closed_stopping_ready_scheduled_default_executor_internal_fds_thread_idget_clock_info_clock_resolution_exception_handler_is_debug_modeslow_callback_duration_current_handle_task_factory_coroutine_origin_tracking_enabled_coroutine_origin_tracking_saved_depth_asyncgens_asyncgens_shutdown_called_executor_shutdown_called running=is_running closed='closed='is_closed debug=get_debugCreate a Future object attached to the loop.coroSchedule a coroutine object.

        Return a task object.
        _check_closed_source_traceback_set_task_nameset_task_factorySet a task factory that will be used by loop.create_task().

        If factory is None the default task factory will be set.

        If factory is a callable, it should have a signature matching
        '(loop, coro)', where 'loop' will be a reference to the active
        event loop, 'coro' will be a coroutine object.  The callable
        must return a Future.
        task factory must be a callable or Noneget_task_factoryReturn a task factory, or None if the default one is in use._make_socket_transportCreate socket transport._make_ssl_transportrawsocksslcontextserver_sideserver_hostnamecall_connection_madeCreate SSL transport._make_datagram_transportaddressCreate datagram transport._make_read_pipe_transportpipeCreate read pipe transport._make_write_pipe_transportCreate write pipe transport._make_subprocess_transportCreate subprocess transport._write_to_selfWrite a byte to self-pipe, to wake up the event loop.

        This may be called from a different thread.

        The subclass is responsible for implementing the self-pipe.
        _process_eventsevent_listProcess selector events.Event loop is closed_check_default_executorExecutor shutdown has been called_asyncgen_finalizer_hookagencall_soon_threadsafe_asyncgen_firstiter_hookasynchronous generator  was scheduled after loop.shutdown_asyncgens() call" was scheduled after ""loop.shutdown_asyncgens() call"Shutdown all active asynchronous generators.closing_agensagan error occurred during closing of asynchronous generator 'an error occurred during closing of ''asynchronous generator 'asyncgenshutdown_default_executorSchedule the shutdown of the default executor._do_shutdown_check_runningThis event loop is already running_get_running_loopCannot run the event loop while another loop is runningrun_foreverRun until stop() is called._set_coroutine_origin_tracking_debugold_agen_hooksfirstiterfinalizer_set_running_loop_run_onceRun until the Future is done.

        If the argument is a coroutine, it is wrapped in a Task.

        WARNING: It would be disastrous to call run_until_complete()
        with the same coroutine twice -- it would wrap it in two
        different Tasks and that can't be good.

        Return the Future's result, or raise its exception.
        isfuturenew_taskensure_future_log_destroy_pendingremove_done_callbackEvent loop stopped before Future completed.Stop running the event loop.

        Every callback already scheduled will still run.  This simply informs
        run_forever to stop looping after a complete iteration.
        Close the event loop.

        This clears the queues and shuts down the executor,
        but does not wait for the executor to finish.

        The event loop must not be running.
        Cannot close a running event loopClose %rexecutorReturns True if the event loop was closed.unclosed event loop Returns True if the event loop is running.Return the time according to the event loop's clock.

        This is a float expressed in seconds since an epoch, but the
        epoch, precision, accuracy and drift are unspecified and may
        differ per event loop.
        call_laterArrange for a callback to be called at a given time.

        Return a Handle: an opaque object with a cancel() method that
        can be used to cancel the call.

        The delay can be an int or float, expressed in seconds.  It is
        always relative to the current time.

        Each callback will be called exactly once.  If two callbacks
        are scheduled for exactly the same time, it undefined which
        will be called first.

        Any positional arguments after the callback will be passed to
        the callback when it is called.
        call_attimerwhenLike call_later(), but uses an absolute time.

        Absolute time corresponds to the event loop's time() method.
        _check_thread_check_callbackTimerHandlecall_soonArrange for a callback to be called as soon as possible.

        This operates as a FIFO queue: callbacks are called in the
        order in which they are registered.  Each callback will be
        called exactly once.

        Any positional arguments after the callback will be passed to
        the callback when it is called.
        _call_sooniscoroutinecoroutines cannot be used with a callable object was expected by (), got '(), ''got 'HandleCheck that the current thread is the thread running the event loop.

        Non-thread-safe methods of this class make this assumption and will
        likely behave incorrectly when the assumption is violated.

        Should only be called when (self._debug == True).  The caller is
        responsible for checking this condition for performance reasons.
        thread_idNon-thread-safe operation invoked on an event loop other than the current one"Non-thread-safe operation invoked on an event loop other ""than the current one"Like call_soon(), but thread-safe.run_in_executorthread_name_prefixwrap_futureset_default_executorUsing the default executor that is not an instance of ThreadPoolExecutor is deprecated and will be prohibited in Python 3.9'Using the default executor that is not an instance of ''ThreadPoolExecutor is deprecated and will be prohibited ''in Python 3.9'_getaddrinfo_debugfamily=type=proto=flags=Get address info %sgetaddrinfoaddrinfoGetting address info  took 1000.01e3ms: getaddr_funcgetnameinfosockaddrsock_sendfilegettimeoutthe socket must be non-blocking_check_sendfile_params_sock_sendfile_nativeSendfileNotAvailableError_sock_sendfile_fallbacksyscall sendfile is not available for socket  and file {file!r} combination"and file {file!r} combination"SENDFILE_FALLBACK_READBUFFER_SIZEblocksizetotal_sentsock_sendallfile should be opened in binary modeonly SOCK_STREAM type sockets are supportedcount must be a positive integer (got {!r})offset must be a non-negative integer (got {!r})_connect_sockaddr_infolocal_addr_infosCreate, bind and connect one socket.my_exceptionssetblockingladdrerror while attempting to bind on address 'error while attempting to bind on ''address '': 'sock_connectcreate_connectionlocal_addrhappy_eyeballs_delayConnect to a TCP server.

        Create a streaming transport connection to a given Internet host and
        port: socket family AF_INET or socket.AF_INET6 depending on host (or
        family if specified), socket type SOCK_STREAM. protocol_factory must be
        a callable returning a protocol instance.

        This method is a coroutine which will try to establish the connection
        in the background.  When successful, the coroutine returns a
        (transport, protocol) pair.
        server_hostname is only meaningful with sslYou must set server_hostname when using ssl without a host'You must set server_hostname ''when using ssl without a host'ssl_handshake_timeout is only meaningful with sslhost/port and sock can not be specified at the same time_ensure_resolvedgetaddrinfo() returned empty listladdr_infosstaggered_raceMultiple exceptions: {}host and port was not specified and no sock specifiedA Stream Socket was expected, got _create_connection_transportget_extra_info%r connected to %s:%r: (%r, %r)sendfileSend a file to transport.

        Return the total number of bytes which were sent.

        The method uses high-performance os.sendfile if available.

        file must be a regular file object opened in binary mode.

        offset tells from where to start reading the file. If specified,
        count is the total number of bytes to transmit as opposed to
        sending the file until EOF is reached. File position is updated on
        return or also in case of error in which case file.tell()
        can be used to figure out the number of bytes
        which were sent.

        fallback set to True makes asyncio to manually read and send
        the file when the platform does not support the sendfile syscall
        (e.g. Windows or SSL socket on Unix).

        Raise SendfileNotAvailableError if the system does not support
        sendfile syscall and fallback is False.
        Transport is closing_sendfile_compatible_SendfileModeUNSUPPORTEDsendfile is not supported for transport TRY_NATIVE_sendfile_nativefallback is disabled and native sendfile is not supported for transport "fallback is disabled and native sendfile is not ""supported for transport "_sendfile_fallbacksendfile syscall is not supportedstart_tlsUpgrade transport to TLS.

        Return a new transport that *protocol* should start using
        immediately.
        Python ssl module is not availableSSLContextsslcontext is expected to be an instance of ssl.SSLContext, got 'sslcontext is expected to be an instance of ssl.SSLContext, '_start_tls_compatibletransport  is not supported by start_tls()SSLProtocolssl_protocolconmade_cbresume_cb_app_transportcreate_datagram_endpointremote_addrreuse_addressreuse_portallow_broadcastCreate datagram connection.A UDP Socket was expected, got problemssocket modifier keyword arguments can not be used when sock is specified. ('socket modifier keyword arguments can not be used ''when sock is specified. ('r_addrunexpected address familyaddr_pairs_infoAF_UNIXstring is expectedUnable to check or remove stale UNIX socket %r: %r'Unable to check or remove stale UNIX ''socket %r: %r'addr_infos2-tuple is expectedfamproaddr_paircan not get address informationPassing `reuse_address=True` is no longer supported, as the usage of SO_REUSEPORT in UDP poses a significant security concern."Passing `reuse_address=True` is no ""longer supported, as the usage of ""SO_REUSEPORT in UDP poses a significant ""security concern."The *reuse_address* parameter has been deprecated as of 3.5.10 and is scheduled for removal in 3.11."The *reuse_address* parameter has been ""deprecated as of 3.5.10 and is scheduled ""for removal in 3.11."local_addressremote_addressSO_BROADCASTDatagram endpoint local_addr=%r remote_addr=%r created: (%r, %r)"Datagram endpoint local_addr=%r remote_addr=%r ""created: (%r, %r)"Datagram endpoint remote_addr=%r created: (%r, %r)"Datagram endpoint remote_addr=%r created: ""(%r, %r)"_create_server_getaddrinfogetaddrinfo() returned empty listcreate_serverAI_PASSIVECreate a TCP server.

        The host parameter can be a string, in that case the TCP server is
        bound to host and port.

        The host parameter can also be a sequence of strings and in that case
        the TCP server is bound to all hosts of the sequence. If a host
        appears multiple times (possibly indirectly e.g. when hostnames
        resolve to the same IP address), the server is only bound once to that
        host.

        Return a Server object which can be used to stop the service.

        This method is a coroutine.
        ssl argument must be an SSLContext or Nonehostscompletedsocktypecanonnamesacreate_server() failed to create socket.socket(%r, %r, %r)'create_server() failed to create ''socket.socket(%r, %r, %r)'SO_REUSEADDRIPPROTO_IPV6IPV6_V6ONLYerror while attempting to bind on address %r: %s'error while attempting ''to bind on address %r: %s'Neither host/port nor sock were specified%r is servingconnect_accepted_socketHandle an accepted connection.

        This is used by servers that accept connections outside of
        asyncio but that use asyncio to handle connections.

        This method is a coroutine.  When completed, the coroutine
        returns a (transport, protocol) pair.
        %r handled: (%r, %r)connect_read_pipeRead pipe %r connected: (%r, %r)connect_write_pipeWrite pipe %r connected: (%r, %r)_log_subprocessstdin=stdout=stderr=stdout=stderr=subprocess_shellcmd must be a stringuniversal_newlines must be Falseshell must be Truebufsize must be 0text must be Falseencoding must be Noneerrors must be Nonedebug_logrun shell command %r%s: %rsubprocess_execprogramshell must be Falsepopen_argsexecute program get_exception_handlerReturn an exception handler, or None if the default one is in use.
        set_exception_handlerSet handler as the new event loop exception handler.

        If handler is None, the default exception handler will
        be set.

        If handler is a callable object, it should have a
        signature matching '(loop, context)', where 'loop'
        will be a reference to the active event loop, 'context'
        will be a dict object (see `call_exception_handler()`
        documentation for details about context).
        A callable object or None is expected, got 'A callable object or None is expected, 'default_exception_handlerDefault exception handler.

        This is called when an exception occurs and no exception
        handler is set, and can be called by a custom exception
        handler that wants to defer to the default behavior.

        This default handler logs the error message and other
        context-dependent information.  In debug mode, a truncated
        stack trace is also appended showing where the given object
        (e.g. a handle or future or task) was created, if any.

        The context parameter has the same meaning as in
        `call_exception_handler()`.
        Unhandled exception in event loopsource_tracebackhandle_tracebacklog_linesformat_listObject created at (most recent call last):
Handle created at (most recent call last):
Call the current event loop's exception handler.

        The context argument is a dict containing the following keys:

        - 'message': Error message;
        - 'exception' (optional): Exception object;
        - 'future' (optional): Future instance;
        - 'task' (optional): Task instance;
        - 'handle' (optional): Handle instance;
        - 'protocol' (optional): Protocol instance;
        - 'transport' (optional): Transport instance;
        - 'socket' (optional): Socket instance;
        - 'asyncgen' (optional): Asynchronous generator that caused
                                 the exception.

        New keys maybe introduced in the future.

        Note: do not overload this method in an event loop subclass.
        For custom exception handling, use the
        `set_exception_handler()` method.
        Exception in default exception handlerUnhandled error in exception handlerException in default exception handler while handling an unexpected error in custom exception handler'Exception in default exception handler ''while handling an unexpected error ''in custom exception handler'_add_callbackAdd a Handle to _scheduled (TimerHandle) or _ready.A Handle is required here_cancelled_add_callback_signalsafeLike _add_callback() but called from a signal handler._timer_handle_cancelledNotification that a TimerHandle has been cancelled.Run one full iteration of the event loop.

        This calls all currently ready callbacks, polls for I/O,
        schedules the resulting callbacks, and finally schedules
        'call_later' callbacks.
        sched_countnew_scheduled_when_selectorntodo_runExecuting %s took %.3f secondsenabledDEBUG_STACK_DEPTH# Minimum number of _scheduled timer handles before cleanup of# cancelled handles is performed.# Minimum fraction of _scheduled timer handles that are cancelled# before cleanup of cancelled handles is performed.# Maximum timeout passed to select to avoid OS limitations# Used for deprecation and removal of `loop.create_datagram_endpoint()`'s# *reuse_address* parameter# format the task# Try to skip getaddrinfo if "host" is already an IP. Users might have# handled name resolution in their own code and pass in resolved IPs.# If port's a service name like "http", don't skip getaddrinfo.# Linux's inet_pton doesn't accept an IPv6 zone index after host,# like '::1%lo0'.# The host has already been resolved.# "host" is not an IP address.# Group addresses by family# Issue #22429: run_forever() already finished, no need to# stop it.# Never happens if peer disconnects after sending the whole content# Thus disconnection is always an exception from user perspective# Cancel the future.# Basically it has no effect because protocol is switched back,# no code should wait for it anymore.# Skip one loop iteration so that all 'loop.add_reader'# go through.# Identifier of the thread running the event loop, or None if the# event loop is not running# In debug mode, if the execution of a callback or a step of a task# exceed this duration in seconds, the slow callback/task is logged.# A weak set of all asynchronous generators that are# being iterated by the loop.# Set to True when `loop.shutdown_asyncgens` is called.# Set to True when `loop.shutdown_default_executor` is called.# If Python version is <3.6 or we don't have any asynchronous# generators alive.# An exception is raised if the future didn't complete, so there# is no need to log the "destroy pending task" message# The coroutine raised a BaseException. Consume the exception# to not log a warning, the caller doesn't have access to the# local task.# Only check when the default executor is being used# NB: sendfile syscall is not supported for SSL sockets and# non-mmap files even if sendfile is supported by OS# EOF# all bind attempts failed# Use host as default for server_hostname.  It is an error# if host is empty or not set, e.g. when an# already-connected socket was passed or when only a port# is given.  To avoid this error, you can pass# server_hostname='' -- this will bypass the hostname# check.  (This also means that if host is a numeric# IP/IPv6 address, we will attempt to verify that exact# address; this will probably fail, but it is possible to# create a certificate for a specific IP address, so we# don't judge it here.)# If using happy eyeballs, default to interleave addresses by family# not using happy eyeballs# using happy eyeballs# If they all have the same str(), raise one.# Raise a combined exception so the user can see all# the various error messages.# We allow AF_INET, AF_INET6, AF_UNIX as long as they# are SOCK_STREAM.# We support passing AF_UNIX sockets even though we have# a dedicated API for that: create_unix_connection.# Disallowing AF_UNIX in this method, breaks backwards# compatibility.# Get the socket from the transport because SSL transport closes# the old socket and creates a new SSL socket# Pause early so that "ssl_protocol.data_received()" doesn't# have a chance to get called before "ssl_protocol.connection_made()".# show the problematic kwargs in exception msg# Directory may have permissions only to create socket.# join address by (family, protocol)# Using order preserving dict# each addr has to have info for each (family, proto) pair# bpo-37228# "host" is already a resolved IP.# Assume it's a bad family/type/protocol combination.# Disable IPv4/IPv6 dual stack support (enabled by# default on Linux) which makes a single socket# listen on both address families.# don't log parameters: they may contain sensitive information# (password) and may be too long# Second protection layer for unexpected errors# in the default implementation, as well as for subclassed# event loops with overloaded "default_exception_handler".# Exception in the user set custom exception handler.# Let's try default handler.# Guard 'default_exception_handler' in case it is# overloaded.# Remove delayed calls that were cancelled if their number# is too high# Remove delayed calls that were cancelled from head of queue.# Compute the desired timeout.# Handle 'later' callbacks that are ready.# This is the only place where callbacks are actually *called*.# All other places just add them to ready.# Note: We run all currently scheduled callbacks, but not any# callbacks scheduled by callbacks run this time around --# they will be run the next time (after another I/O poll).# Use an idiom that is thread-safe without using locks.# Needed to break cycles when an exception occurs.b'Base implementation of event loop.

The event loop can be broken up into a multiplexer (the part
responsible for notifying us of I/O events) and the event loop proper,
which wraps a multiplexer with functionality for scheduling callbacks,
immediately or at a given time in the future.

Whenever a public API takes a callback, subsequent positional
arguments will be passed to the callback if/when it is called.  This
avoids the proliferation of trivial lambdas implementing closures.
Keyword arguments for the callback are not supported; this is a
conscious design decision, leaving the door open for keyword arguments
to modify the meaning of the API call itself.
'u'Base implementation of event loop.

The event loop can be broken up into a multiplexer (the part
responsible for notifying us of I/O events) and the event loop proper,
which wraps a multiplexer with functionality for scheduling callbacks,
immediately or at a given time in the future.

Whenever a public API takes a callback, subsequent positional
arguments will be passed to the callback if/when it is called.  This
avoids the proliferation of trivial lambdas implementing closures.
Keyword arguments for the callback are not supported; this is a
conscious design decision, leaving the door open for keyword arguments
to modify the meaning of the API call itself.
'b'BaseEventLoop'u'BaseEventLoop'b'AF_INET6'u'AF_INET6'b'<pipe>'u'<pipe>'b'<stdout>'u'<stdout>'b'SO_REUSEPORT'u'SO_REUSEPORT'b'reuse_port not supported by socket module'u'reuse_port not supported by socket module'b'reuse_port not supported by socket module, SO_REUSEPORT defined but not implemented.'u'reuse_port not supported by socket module, SO_REUSEPORT defined but not implemented.'b'inet_pton'u'inet_pton'b'Interleave list of addrinfo tuples by family.'u'Interleave list of addrinfo tuples by family.'b'TCP_NODELAY'u'TCP_NODELAY'b'transport should be _FlowControlMixin instance'u'transport should be _FlowControlMixin instance'b'Connection closed by peer'u'Connection closed by peer'b'Invalid state: connection should have been established already.'u'Invalid state: connection should have been established already.'b'Connection is closed by peer'u'Connection is closed by peer'b'Invalid state: reading should be paused'u'Invalid state: reading should be paused'b' sockets='u' sockets='b'server 'u'server 'b' is already being awaited on serve_forever()'u' is already being awaited on serve_forever()'b' is closed'u' is closed'b'monotonic'u'monotonic'b' running='u' running='b' closed='u' closed='b' debug='u' debug='b'Create a Future object attached to the loop.'u'Create a Future object attached to the loop.'b'Schedule a coroutine object.

        Return a task object.
        'u'Schedule a coroutine object.

        Return a task object.
        'b'Set a task factory that will be used by loop.create_task().

        If factory is None the default task factory will be set.

        If factory is a callable, it should have a signature matching
        '(loop, coro)', where 'loop' will be a reference to the active
        event loop, 'coro' will be a coroutine object.  The callable
        must return a Future.
        'u'Set a task factory that will be used by loop.create_task().

        If factory is None the default task factory will be set.

        If factory is a callable, it should have a signature matching
        '(loop, coro)', where 'loop' will be a reference to the active
        event loop, 'coro' will be a coroutine object.  The callable
        must return a Future.
        'b'task factory must be a callable or None'u'task factory must be a callable or None'b'Return a task factory, or None if the default one is in use.'u'Return a task factory, or None if the default one is in use.'b'Create socket transport.'u'Create socket transport.'b'Create SSL transport.'u'Create SSL transport.'b'Create datagram transport.'u'Create datagram transport.'b'Create read pipe transport.'u'Create read pipe transport.'b'Create write pipe transport.'u'Create write pipe transport.'b'Create subprocess transport.'u'Create subprocess transport.'b'Write a byte to self-pipe, to wake up the event loop.

        This may be called from a different thread.

        The subclass is responsible for implementing the self-pipe.
        'u'Write a byte to self-pipe, to wake up the event loop.

        This may be called from a different thread.

        The subclass is responsible for implementing the self-pipe.
        'b'Process selector events.'u'Process selector events.'b'Event loop is closed'u'Event loop is closed'b'Executor shutdown has been called'u'Executor shutdown has been called'b'asynchronous generator 'u'asynchronous generator 'b' was scheduled after loop.shutdown_asyncgens() call'u' was scheduled after loop.shutdown_asyncgens() call'b'Shutdown all active asynchronous generators.'u'Shutdown all active asynchronous generators.'b'an error occurred during closing of asynchronous generator 'u'an error occurred during closing of asynchronous generator 'b'asyncgen'u'asyncgen'b'Schedule the shutdown of the default executor.'u'Schedule the shutdown of the default executor.'b'This event loop is already running'u'This event loop is already running'b'Cannot run the event loop while another loop is running'u'Cannot run the event loop while another loop is running'b'Run until stop() is called.'u'Run until stop() is called.'b'Run until the Future is done.

        If the argument is a coroutine, it is wrapped in a Task.

        WARNING: It would be disastrous to call run_until_complete()
        with the same coroutine twice -- it would wrap it in two
        different Tasks and that can't be good.

        Return the Future's result, or raise its exception.
        'u'Run until the Future is done.

        If the argument is a coroutine, it is wrapped in a Task.

        WARNING: It would be disastrous to call run_until_complete()
        with the same coroutine twice -- it would wrap it in two
        different Tasks and that can't be good.

        Return the Future's result, or raise its exception.
        'b'Event loop stopped before Future completed.'u'Event loop stopped before Future completed.'b'Stop running the event loop.

        Every callback already scheduled will still run.  This simply informs
        run_forever to stop looping after a complete iteration.
        'u'Stop running the event loop.

        Every callback already scheduled will still run.  This simply informs
        run_forever to stop looping after a complete iteration.
        'b'Close the event loop.

        This clears the queues and shuts down the executor,
        but does not wait for the executor to finish.

        The event loop must not be running.
        'u'Close the event loop.

        This clears the queues and shuts down the executor,
        but does not wait for the executor to finish.

        The event loop must not be running.
        'b'Cannot close a running event loop'u'Cannot close a running event loop'b'Close %r'u'Close %r'b'Returns True if the event loop was closed.'u'Returns True if the event loop was closed.'b'unclosed event loop 'u'unclosed event loop 'b'Returns True if the event loop is running.'u'Returns True if the event loop is running.'b'Return the time according to the event loop's clock.

        This is a float expressed in seconds since an epoch, but the
        epoch, precision, accuracy and drift are unspecified and may
        differ per event loop.
        'u'Return the time according to the event loop's clock.

        This is a float expressed in seconds since an epoch, but the
        epoch, precision, accuracy and drift are unspecified and may
        differ per event loop.
        'b'Arrange for a callback to be called at a given time.

        Return a Handle: an opaque object with a cancel() method that
        can be used to cancel the call.

        The delay can be an int or float, expressed in seconds.  It is
        always relative to the current time.

        Each callback will be called exactly once.  If two callbacks
        are scheduled for exactly the same time, it undefined which
        will be called first.

        Any positional arguments after the callback will be passed to
        the callback when it is called.
        'u'Arrange for a callback to be called at a given time.

        Return a Handle: an opaque object with a cancel() method that
        can be used to cancel the call.

        The delay can be an int or float, expressed in seconds.  It is
        always relative to the current time.

        Each callback will be called exactly once.  If two callbacks
        are scheduled for exactly the same time, it undefined which
        will be called first.

        Any positional arguments after the callback will be passed to
        the callback when it is called.
        'b'Like call_later(), but uses an absolute time.

        Absolute time corresponds to the event loop's time() method.
        'u'Like call_later(), but uses an absolute time.

        Absolute time corresponds to the event loop's time() method.
        'b'call_at'u'call_at'b'Arrange for a callback to be called as soon as possible.

        This operates as a FIFO queue: callbacks are called in the
        order in which they are registered.  Each callback will be
        called exactly once.

        Any positional arguments after the callback will be passed to
        the callback when it is called.
        'u'Arrange for a callback to be called as soon as possible.

        This operates as a FIFO queue: callbacks are called in the
        order in which they are registered.  Each callback will be
        called exactly once.

        Any positional arguments after the callback will be passed to
        the callback when it is called.
        'b'call_soon'u'call_soon'b'coroutines cannot be used with 'u'coroutines cannot be used with 'b'a callable object was expected by 'u'a callable object was expected by 'b'(), got 'u'(), got 'b'Check that the current thread is the thread running the event loop.

        Non-thread-safe methods of this class make this assumption and will
        likely behave incorrectly when the assumption is violated.

        Should only be called when (self._debug == True).  The caller is
        responsible for checking this condition for performance reasons.
        'u'Check that the current thread is the thread running the event loop.

        Non-thread-safe methods of this class make this assumption and will
        likely behave incorrectly when the assumption is violated.

        Should only be called when (self._debug == True).  The caller is
        responsible for checking this condition for performance reasons.
        'b'Non-thread-safe operation invoked on an event loop other than the current one'u'Non-thread-safe operation invoked on an event loop other than the current one'b'Like call_soon(), but thread-safe.'u'Like call_soon(), but thread-safe.'b'call_soon_threadsafe'u'call_soon_threadsafe'b'run_in_executor'u'run_in_executor'b'asyncio'b'Using the default executor that is not an instance of ThreadPoolExecutor is deprecated and will be prohibited in Python 3.9'u'Using the default executor that is not an instance of ThreadPoolExecutor is deprecated and will be prohibited in Python 3.9'b'family='u'family='b'type='u'type='b'proto='u'proto='b'flags='u'flags='b'Get address info %s'u'Get address info %s'b'Getting address info 'u'Getting address info 'b' took 'u' took 'b'ms: 'u'ms: 'b'the socket must be non-blocking'u'the socket must be non-blocking'b'syscall sendfile is not available for socket 'u'syscall sendfile is not available for socket 'b' and file {file!r} combination'u' and file {file!r} combination'b'seek'u'seek'b'mode'u'mode'b'file should be opened in binary mode'u'file should be opened in binary mode'b'only SOCK_STREAM type sockets are supported'u'only SOCK_STREAM type sockets are supported'b'count must be a positive integer (got {!r})'u'count must be a positive integer (got {!r})'b'offset must be a non-negative integer (got {!r})'u'offset must be a non-negative integer (got {!r})'b'Create, bind and connect one socket.'u'Create, bind and connect one socket.'b'error while attempting to bind on address 'u'error while attempting to bind on address 'b'Connect to a TCP server.

        Create a streaming transport connection to a given Internet host and
        port: socket family AF_INET or socket.AF_INET6 depending on host (or
        family if specified), socket type SOCK_STREAM. protocol_factory must be
        a callable returning a protocol instance.

        This method is a coroutine which will try to establish the connection
        in the background.  When successful, the coroutine returns a
        (transport, protocol) pair.
        'u'Connect to a TCP server.

        Create a streaming transport connection to a given Internet host and
        port: socket family AF_INET or socket.AF_INET6 depending on host (or
        family if specified), socket type SOCK_STREAM. protocol_factory must be
        a callable returning a protocol instance.

        This method is a coroutine which will try to establish the connection
        in the background.  When successful, the coroutine returns a
        (transport, protocol) pair.
        'b'server_hostname is only meaningful with ssl'u'server_hostname is only meaningful with ssl'b'You must set server_hostname when using ssl without a host'u'You must set server_hostname when using ssl without a host'b'ssl_handshake_timeout is only meaningful with ssl'u'ssl_handshake_timeout is only meaningful with ssl'b'host/port and sock can not be specified at the same time'u'host/port and sock can not be specified at the same time'b'getaddrinfo() returned empty list'u'getaddrinfo() returned empty list'b'Multiple exceptions: {}'u'Multiple exceptions: {}'b'host and port was not specified and no sock specified'u'host and port was not specified and no sock specified'b'A Stream Socket was expected, got 'u'A Stream Socket was expected, got 'b'%r connected to %s:%r: (%r, %r)'u'%r connected to %s:%r: (%r, %r)'b'Send a file to transport.

        Return the total number of bytes which were sent.

        The method uses high-performance os.sendfile if available.

        file must be a regular file object opened in binary mode.

        offset tells from where to start reading the file. If specified,
        count is the total number of bytes to transmit as opposed to
        sending the file until EOF is reached. File position is updated on
        return or also in case of error in which case file.tell()
        can be used to figure out the number of bytes
        which were sent.

        fallback set to True makes asyncio to manually read and send
        the file when the platform does not support the sendfile syscall
        (e.g. Windows or SSL socket on Unix).

        Raise SendfileNotAvailableError if the system does not support
        sendfile syscall and fallback is False.
        'u'Send a file to transport.

        Return the total number of bytes which were sent.

        The method uses high-performance os.sendfile if available.

        file must be a regular file object opened in binary mode.

        offset tells from where to start reading the file. If specified,
        count is the total number of bytes to transmit as opposed to
        sending the file until EOF is reached. File position is updated on
        return or also in case of error in which case file.tell()
        can be used to figure out the number of bytes
        which were sent.

        fallback set to True makes asyncio to manually read and send
        the file when the platform does not support the sendfile syscall
        (e.g. Windows or SSL socket on Unix).

        Raise SendfileNotAvailableError if the system does not support
        sendfile syscall and fallback is False.
        'b'Transport is closing'u'Transport is closing'b'_sendfile_compatible'u'_sendfile_compatible'b'sendfile is not supported for transport 'u'sendfile is not supported for transport 'b'fallback is disabled and native sendfile is not supported for transport 'u'fallback is disabled and native sendfile is not supported for transport 'b'sendfile syscall is not supported'u'sendfile syscall is not supported'b'Upgrade transport to TLS.

        Return a new transport that *protocol* should start using
        immediately.
        'u'Upgrade transport to TLS.

        Return a new transport that *protocol* should start using
        immediately.
        'b'Python ssl module is not available'u'Python ssl module is not available'b'sslcontext is expected to be an instance of ssl.SSLContext, got 'u'sslcontext is expected to be an instance of ssl.SSLContext, got 'b'_start_tls_compatible'u'_start_tls_compatible'b'transport 'u'transport 'b' is not supported by start_tls()'u' is not supported by start_tls()'b'Create datagram connection.'u'Create datagram connection.'b'A UDP Socket was expected, got 'u'A UDP Socket was expected, got 'b'socket modifier keyword arguments can not be used when sock is specified. ('u'socket modifier keyword arguments can not be used when sock is specified. ('b'unexpected address family'u'unexpected address family'b'AF_UNIX'u'AF_UNIX'b'string is expected'u'string is expected'b'Unable to check or remove stale UNIX socket %r: %r'u'Unable to check or remove stale UNIX socket %r: %r'b'2-tuple is expected'u'2-tuple is expected'b'can not get address information'u'can not get address information'b'Passing `reuse_address=True` is no longer supported, as the usage of SO_REUSEPORT in UDP poses a significant security concern.'u'Passing `reuse_address=True` is no longer supported, as the usage of SO_REUSEPORT in UDP poses a significant security concern.'b'The *reuse_address* parameter has been deprecated as of 3.5.10 and is scheduled for removal in 3.11.'u'The *reuse_address* parameter has been deprecated as of 3.5.10 and is scheduled for removal in 3.11.'b'Datagram endpoint local_addr=%r remote_addr=%r created: (%r, %r)'u'Datagram endpoint local_addr=%r remote_addr=%r created: (%r, %r)'b'Datagram endpoint remote_addr=%r created: (%r, %r)'u'Datagram endpoint remote_addr=%r created: (%r, %r)'b'getaddrinfo('u'getaddrinfo('b') returned empty list'u') returned empty list'b'Create a TCP server.

        The host parameter can be a string, in that case the TCP server is
        bound to host and port.

        The host parameter can also be a sequence of strings and in that case
        the TCP server is bound to all hosts of the sequence. If a host
        appears multiple times (possibly indirectly e.g. when hostnames
        resolve to the same IP address), the server is only bound once to that
        host.

        Return a Server object which can be used to stop the service.

        This method is a coroutine.
        'u'Create a TCP server.

        The host parameter can be a string, in that case the TCP server is
        bound to host and port.

        The host parameter can also be a sequence of strings and in that case
        the TCP server is bound to all hosts of the sequence. If a host
        appears multiple times (possibly indirectly e.g. when hostnames
        resolve to the same IP address), the server is only bound once to that
        host.

        Return a Server object which can be used to stop the service.

        This method is a coroutine.
        'b'ssl argument must be an SSLContext or None'u'ssl argument must be an SSLContext or None'b'create_server() failed to create socket.socket(%r, %r, %r)'u'create_server() failed to create socket.socket(%r, %r, %r)'b'IPPROTO_IPV6'u'IPPROTO_IPV6'b'error while attempting to bind on address %r: %s'u'error while attempting to bind on address %r: %s'b'Neither host/port nor sock were specified'u'Neither host/port nor sock were specified'b'%r is serving'u'%r is serving'b'Handle an accepted connection.

        This is used by servers that accept connections outside of
        asyncio but that use asyncio to handle connections.

        This method is a coroutine.  When completed, the coroutine
        returns a (transport, protocol) pair.
        'u'Handle an accepted connection.

        This is used by servers that accept connections outside of
        asyncio but that use asyncio to handle connections.

        This method is a coroutine.  When completed, the coroutine
        returns a (transport, protocol) pair.
        'b'%r handled: (%r, %r)'u'%r handled: (%r, %r)'b'Read pipe %r connected: (%r, %r)'u'Read pipe %r connected: (%r, %r)'b'Write pipe %r connected: (%r, %r)'u'Write pipe %r connected: (%r, %r)'b'stdin='u'stdin='b'stdout=stderr='u'stdout=stderr='b'stdout='u'stdout='b'stderr='u'stderr='b'cmd must be a string'u'cmd must be a string'b'universal_newlines must be False'u'universal_newlines must be False'b'shell must be True'u'shell must be True'b'bufsize must be 0'u'bufsize must be 0'b'text must be False'u'text must be False'b'encoding must be None'u'encoding must be None'b'errors must be None'u'errors must be None'b'run shell command %r'u'run shell command %r'b'%s: %r'u'%s: %r'b'shell must be False'u'shell must be False'b'execute program 'u'execute program 'b'Return an exception handler, or None if the default one is in use.
        'u'Return an exception handler, or None if the default one is in use.
        'b'Set handler as the new event loop exception handler.

        If handler is None, the default exception handler will
        be set.

        If handler is a callable object, it should have a
        signature matching '(loop, context)', where 'loop'
        will be a reference to the active event loop, 'context'
        will be a dict object (see `call_exception_handler()`
        documentation for details about context).
        'u'Set handler as the new event loop exception handler.

        If handler is None, the default exception handler will
        be set.

        If handler is a callable object, it should have a
        signature matching '(loop, context)', where 'loop'
        will be a reference to the active event loop, 'context'
        will be a dict object (see `call_exception_handler()`
        documentation for details about context).
        'b'A callable object or None is expected, got 'u'A callable object or None is expected, got 'b'Default exception handler.

        This is called when an exception occurs and no exception
        handler is set, and can be called by a custom exception
        handler that wants to defer to the default behavior.

        This default handler logs the error message and other
        context-dependent information.  In debug mode, a truncated
        stack trace is also appended showing where the given object
        (e.g. a handle or future or task) was created, if any.

        The context parameter has the same meaning as in
        `call_exception_handler()`.
        'u'Default exception handler.

        This is called when an exception occurs and no exception
        handler is set, and can be called by a custom exception
        handler that wants to defer to the default behavior.

        This default handler logs the error message and other
        context-dependent information.  In debug mode, a truncated
        stack trace is also appended showing where the given object
        (e.g. a handle or future or task) was created, if any.

        The context parameter has the same meaning as in
        `call_exception_handler()`.
        'b'Unhandled exception in event loop'u'Unhandled exception in event loop'b'source_traceback'u'source_traceback'b'handle_traceback'u'handle_traceback'b'Object created at (most recent call last):
'u'Object created at (most recent call last):
'b'Handle created at (most recent call last):
'u'Handle created at (most recent call last):
'b'Call the current event loop's exception handler.

        The context argument is a dict containing the following keys:

        - 'message': Error message;
        - 'exception' (optional): Exception object;
        - 'future' (optional): Future instance;
        - 'task' (optional): Task instance;
        - 'handle' (optional): Handle instance;
        - 'protocol' (optional): Protocol instance;
        - 'transport' (optional): Transport instance;
        - 'socket' (optional): Socket instance;
        - 'asyncgen' (optional): Asynchronous generator that caused
                                 the exception.

        New keys maybe introduced in the future.

        Note: do not overload this method in an event loop subclass.
        For custom exception handling, use the
        `set_exception_handler()` method.
        'u'Call the current event loop's exception handler.

        The context argument is a dict containing the following keys:

        - 'message': Error message;
        - 'exception' (optional): Exception object;
        - 'future' (optional): Future instance;
        - 'task' (optional): Task instance;
        - 'handle' (optional): Handle instance;
        - 'protocol' (optional): Protocol instance;
        - 'transport' (optional): Transport instance;
        - 'socket' (optional): Socket instance;
        - 'asyncgen' (optional): Asynchronous generator that caused
                                 the exception.

        New keys maybe introduced in the future.

        Note: do not overload this method in an event loop subclass.
        For custom exception handling, use the
        `set_exception_handler()` method.
        'b'Exception in default exception handler'u'Exception in default exception handler'b'Unhandled error in exception handler'u'Unhandled error in exception handler'b'Exception in default exception handler while handling an unexpected error in custom exception handler'u'Exception in default exception handler while handling an unexpected error in custom exception handler'b'Add a Handle to _scheduled (TimerHandle) or _ready.'u'Add a Handle to _scheduled (TimerHandle) or _ready.'b'A Handle is required here'u'A Handle is required here'b'Like _add_callback() but called from a signal handler.'u'Like _add_callback() but called from a signal handler.'b'Notification that a TimerHandle has been cancelled.'u'Notification that a TimerHandle has been cancelled.'b'Run one full iteration of the event loop.

        This calls all currently ready callbacks, polls for I/O,
        schedules the resulting callbacks, and finally schedules
        'call_later' callbacks.
        'u'Run one full iteration of the event loop.

        This calls all currently ready callbacks, polls for I/O,
        schedules the resulting callbacks, and finally schedules
        'call_later' callbacks.
        'b'Executing %s took %.3f seconds'u'Executing %s took %.3f seconds'u'Python39.lib.asyncio.base_events'u'lib.asyncio.base_events'u'asyncio.base_events'u'base_events'format_helpers_PENDING_CANCELLED_FINISHEDCheck for a Future.

    This returns True when obj is a Future instance or is advertising
    itself as duck-type compatible by setting _asyncio_future_blocking.
    See comment in Future for more details.
    _asyncio_future_blocking_format_callbackshelper function for Future.__repr__format_cb_format_callback_source{}, {}{}, <{} more>, {}cb=[_repr_running_future_repr_infoexception=result=_callbackscreated at # States for Future.# bpo-42183: _repr_running is needed for repr protection# when a Future or Task result contains itself directly or indirectly.# The logic is borrowed from @reprlib.recursive_repr decorator.# Unfortunately, the direct decorator usage is impossible because of# AttributeError: '_asyncio.Task' object has no attribute '__module__' error.# After fixing this thing we can return to the decorator based approach.# (Future) -> str# use reprlib to limit the length of the output, especially# for very long stringsb'Check for a Future.

    This returns True when obj is a Future instance or is advertising
    itself as duck-type compatible by setting _asyncio_future_blocking.
    See comment in Future for more details.
    'u'Check for a Future.

    This returns True when obj is a Future instance or is advertising
    itself as duck-type compatible by setting _asyncio_future_blocking.
    See comment in Future for more details.
    'b'_asyncio_future_blocking'u'_asyncio_future_blocking'b'helper function for Future.__repr__'u'helper function for Future.__repr__'b'{}, {}'u'{}, {}'b'{}, <{} more>, {}'u'{}, <{} more>, {}'b'cb=['u'cb=['b'exception='u'exception='b'result='u'result='b'created at 'u'created at 'u'Python39.lib.asyncio.base_futures'u'lib.asyncio.base_futures'u'asyncio.base_futures'u'base_futures'BaseSubprocessTransportSubprocessTransport_protocol_proc_pid_returncode_exit_waiters_pending_calls_pipes_finished_extraprocess %r created: pid %s_connect_pipespid=returncode=not started<{}>pollClose running child process: kill %runclosed transport get_pidget_returncodeget_pipe_transport_check_procsend_signalWriteSubprocessPipeProtoReadSubprocessPipeProto_pipe_connection_lostpipe_connection_lost_try_finish_pipe_data_receivedpipe_data_received_process_exited%r exited with return code %rprocess_exited_waitWait until the process exit and return the process return code.

        This method is a coroutine.disconnected_call_connection_lostBaseProtocol fd= pipe=# Create the child process: set the _proc attribute# has the child process finished?# the child process has finished, but the# transport hasn't been notified yet?# Don't clear the _proc reference yet: _post_init() may still run# asyncio uses a child watcher: copy the status into the Popen# object. On Python 3.6, it is required to avoid a ResourceWarning.# wake up futures waiting for wait()b'process %r created: pid %s'u'process %r created: pid %s'b'closed'u'closed'b'pid='u'pid='b'returncode='u'returncode='b'not started'u'not started'b'<{}>'u'<{}>'b'Close running child process: kill %r'u'Close running child process: kill %r'b'unclosed transport 'u'unclosed transport 'b'%r exited with return code %r'u'%r exited with return code %r'b'Wait until the process exit and return the process return code.

        This method is a coroutine.'u'Wait until the process exit and return the process return code.

        This method is a coroutine.'b' fd='u' fd='b' pipe='u' pipe='u'Python39.lib.asyncio.base_subprocess'u'lib.asyncio.base_subprocess'u'asyncio.base_subprocess'u'base_subprocess'linecachebase_futures_task_repr_info_must_cancelcancellingname=%r_format_coroutinecoro=<_fut_waiterwait_for=_task_get_stackcr_frameag_frametb_next_task_print_stackextracted_listget_stackcheckcachegetlineNo stack for Traceback for  (most recent call last):Stack for print_listformat_exception_only# replace status# case 1: 'async def' coroutines# case 2: legacy coroutines# case 3: async generators# case 4: unknown objectsb'cancelling'u'cancelling'b'name=%r'u'name=%r'b'coro=<'u'coro=<'b'wait_for='u'wait_for='b'cr_frame'u'cr_frame'b'gi_frame'u'gi_frame'b'ag_frame'u'ag_frame'b'No stack for 'u'No stack for 'b'Traceback for 'u'Traceback for 'b' (most recent call last):'u' (most recent call last):'b'Stack for 'u'Stack for 'u'Python39.lib.asyncio.base_tasks'u'lib.asyncio.base_tasks'u'asyncio.base_tasks'u'base_tasks'The optional bytecode cache system. This is useful if you have very
complex template situations and the compilation of all those templates
slows down your application too much.

Situations where this is useful are often forking web applications that
are initialized on the first request.
CodeType_MemcachedClientbc_versionj2bc_magicBucketBuckets are used to store the bytecode for one template.  It's created
    and initialized by the bytecode cache and passed to the loading functions.

    The buckets get an internal checksum from the cache assigned and use this
    to automatically reject outdated cache material.  Individual bytecode
    cache subclasses don't have to care about cache invalidation.
    checksumResets the bucket (unloads the bytecode).load_bytecodeLoads bytecode from a file or file like object.write_bytecodeDump the bytecode into the file or file like object passed.can't write empty bucketbytecode_from_stringLoad bytecode from bytes.bytecode_to_stringReturn the bytecode as bytes.To implement your own bytecode cache you have to subclass this class
    and override :meth:`load_bytecode` and :meth:`dump_bytecode`.  Both of
    these methods are passed a :class:`~jinja2.bccache.Bucket`.

    A very basic bytecode cache that saves the bytecode on the file system::

        from os import path

        class MyCache(BytecodeCache):

            def __init__(self, directory):
                self.directory = directory

            def load_bytecode(self, bucket):
                filename = path.join(self.directory, bucket.key)
                if path.exists(filename):
                    with open(filename, 'rb') as f:
                        bucket.load_bytecode(f)

            def dump_bytecode(self, bucket):
                filename = path.join(self.directory, bucket.key)
                with open(filename, 'wb') as f:
                    bucket.write_bytecode(f)

    A more advanced version of a filesystem based bytecode cache is part of
    Jinja.
    Subclasses have to override this method to load bytecode into a
        bucket.  If they are not able to find code in the cache for the
        bucket, it must not do anything.
        dump_bytecodeSubclasses have to override this method to write the bytecode
        from a bucket back to the cache.  If it unable to do so it must not
        fail silently but raise an exception.
        Clears the cache.  This method is not used by Jinja but should be
        implemented to allow applications to clear the bytecode cache used
        by a particular environment.
        get_cache_keyReturns the unique hash key for this template name.get_source_checksumReturns a checksum for the source.get_bucketReturn a cache bucket for the given template.  All arguments are
        mandatory but filename may be `None`.
        set_bucketPut the bucket into the cache.A bytecode cache that stores bytecode on the filesystem.  It accepts
    two arguments: The directory where the cache items are stored and a
    pattern string that is used to build the filename.

    If no directory is specified a default cache directory is selected.  On
    Windows the user's temp directory is used, on UNIX systems a directory
    is created for the user in the system temp directory.

    The pattern can be used to have multiple separate caches operate on the
    same directory.  The default pattern is ``'__jinja2_%s.cache'``.  ``%s``
    is replaced with the cache key.

    >>> bcc = FileSystemBytecodeCache('/tmp/jinja_cache', '%s.cache')

    This bytecode cache supports clearing of the cache using the clear method.
    __jinja2_%s.cache_get_default_cache_dir_unsafe_dirte.NoReturnCannot determine safe temp directory.  You need to explicitly provide one."Cannot determine safe temp directory.  You ""need to explicitly provide one."gettempdirtmpdirgetuid_jinja2-cache-actual_diractual_dir_statst_uid_get_cache_filename.tmpremove_silentThis class implements a bytecode cache that uses a memcache cache for
    storing the information.  It does not enforce a specific memcache library
    (tummy's memcache or cmemcache) but will accept any class that provides
    the minimal interface required.

    Libraries compatible with this class:

    -   `cachelib <https://github.com/pallets/cachelib>`_
    -   `python-memcached <https://pypi.org/project/python-memcached/>`_

    (Unfortunately the django cache interface is not compatible because it
    does not support storing binary data, only text. You can however pass
    the underlying cache client to the bytecode cache which is available
    as `django.core.cache.cache._client`.)

    The minimal interface for the client passed to the constructor is this:

    .. class:: MinimalClientInterface

        .. method:: set(key, value[, timeout])

            Stores the bytecode in the cache.  `value` is a string and
            `timeout` the timeout of the key.  If timeout is not provided
            a default timeout or no timeout should be assumed, if it's
            provided it's an integer with the number of seconds the cache
            item should exist.

        .. method:: get(key)

            Returns the value for the cache key.  If the item does not
            exist in the cache the return value must be `None`.

    The other arguments to the constructor are the prefix for all keys that
    is added before the actual cache key and the timeout for the bytecode in
    the cache system.  We recommend a high (or no) timeout.

    This bytecode cache does not support clearing of used items in the cache.
    The clear method is a no-operation function.

    .. versionadded:: 2.7
       Added support for ignoring memcache errors through the
       `ignore_memcache_errors` parameter.
    jinja2/bytecode/ignore_memcache_errors# Magic bytes to identify Jinja bytecode cache files. Contains the# Python major and minor version to avoid loading incompatible bytecode# if a project upgrades its Python version.# make sure the magic header is correct# the source code of the file changed, we need to reload# if marshal_load fails then we need to reload# On windows the temporary directory is used specific unless# explicitly forced otherwise.  We can just use that.# Don't test for existence before opening the file, since the# file could disappear after the test before the open.# PermissionError can occur on Windows when an operation is# in progress, such as calling clear().# Write to a temporary file, then rename to the real name after# writing. This avoids another process reading the file before# it is fully written.# Another process may have called clear(). On Windows,# another program may be holding the file open.# imported lazily here because google app-engine doesn't support# write access on the file system and the function does not exist# normally.b'The optional bytecode cache system. This is useful if you have very
complex template situations and the compilation of all those templates
slows down your application too much.

Situations where this is useful are often forking web applications that
are initialized on the first request.
'u'The optional bytecode cache system. This is useful if you have very
complex template situations and the compilation of all those templates
slows down your application too much.

Situations where this is useful are often forking web applications that
are initialized on the first request.
'b'j2'b'Buckets are used to store the bytecode for one template.  It's created
    and initialized by the bytecode cache and passed to the loading functions.

    The buckets get an internal checksum from the cache assigned and use this
    to automatically reject outdated cache material.  Individual bytecode
    cache subclasses don't have to care about cache invalidation.
    'u'Buckets are used to store the bytecode for one template.  It's created
    and initialized by the bytecode cache and passed to the loading functions.

    The buckets get an internal checksum from the cache assigned and use this
    to automatically reject outdated cache material.  Individual bytecode
    cache subclasses don't have to care about cache invalidation.
    'b'Environment'u'Environment'b'Resets the bucket (unloads the bytecode).'u'Resets the bucket (unloads the bytecode).'b'Loads bytecode from a file or file like object.'u'Loads bytecode from a file or file like object.'b'Dump the bytecode into the file or file like object passed.'u'Dump the bytecode into the file or file like object passed.'b'can't write empty bucket'u'can't write empty bucket'b'Load bytecode from bytes.'u'Load bytecode from bytes.'b'Return the bytecode as bytes.'u'Return the bytecode as bytes.'b'To implement your own bytecode cache you have to subclass this class
    and override :meth:`load_bytecode` and :meth:`dump_bytecode`.  Both of
    these methods are passed a :class:`~jinja2.bccache.Bucket`.

    A very basic bytecode cache that saves the bytecode on the file system::

        from os import path

        class MyCache(BytecodeCache):

            def __init__(self, directory):
                self.directory = directory

            def load_bytecode(self, bucket):
                filename = path.join(self.directory, bucket.key)
                if path.exists(filename):
                    with open(filename, 'rb') as f:
                        bucket.load_bytecode(f)

            def dump_bytecode(self, bucket):
                filename = path.join(self.directory, bucket.key)
                with open(filename, 'wb') as f:
                    bucket.write_bytecode(f)

    A more advanced version of a filesystem based bytecode cache is part of
    Jinja.
    'u'To implement your own bytecode cache you have to subclass this class
    and override :meth:`load_bytecode` and :meth:`dump_bytecode`.  Both of
    these methods are passed a :class:`~jinja2.bccache.Bucket`.

    A very basic bytecode cache that saves the bytecode on the file system::

        from os import path

        class MyCache(BytecodeCache):

            def __init__(self, directory):
                self.directory = directory

            def load_bytecode(self, bucket):
                filename = path.join(self.directory, bucket.key)
                if path.exists(filename):
                    with open(filename, 'rb') as f:
                        bucket.load_bytecode(f)

            def dump_bytecode(self, bucket):
                filename = path.join(self.directory, bucket.key)
                with open(filename, 'wb') as f:
                    bucket.write_bytecode(f)

    A more advanced version of a filesystem based bytecode cache is part of
    Jinja.
    'b'Subclasses have to override this method to load bytecode into a
        bucket.  If they are not able to find code in the cache for the
        bucket, it must not do anything.
        'u'Subclasses have to override this method to load bytecode into a
        bucket.  If they are not able to find code in the cache for the
        bucket, it must not do anything.
        'b'Subclasses have to override this method to write the bytecode
        from a bucket back to the cache.  If it unable to do so it must not
        fail silently but raise an exception.
        'u'Subclasses have to override this method to write the bytecode
        from a bucket back to the cache.  If it unable to do so it must not
        fail silently but raise an exception.
        'b'Clears the cache.  This method is not used by Jinja but should be
        implemented to allow applications to clear the bytecode cache used
        by a particular environment.
        'u'Clears the cache.  This method is not used by Jinja but should be
        implemented to allow applications to clear the bytecode cache used
        by a particular environment.
        'b'Returns the unique hash key for this template name.'u'Returns the unique hash key for this template name.'b'Returns a checksum for the source.'u'Returns a checksum for the source.'b'Return a cache bucket for the given template.  All arguments are
        mandatory but filename may be `None`.
        'u'Return a cache bucket for the given template.  All arguments are
        mandatory but filename may be `None`.
        'b'Put the bucket into the cache.'u'Put the bucket into the cache.'b'A bytecode cache that stores bytecode on the filesystem.  It accepts
    two arguments: The directory where the cache items are stored and a
    pattern string that is used to build the filename.

    If no directory is specified a default cache directory is selected.  On
    Windows the user's temp directory is used, on UNIX systems a directory
    is created for the user in the system temp directory.

    The pattern can be used to have multiple separate caches operate on the
    same directory.  The default pattern is ``'__jinja2_%s.cache'``.  ``%s``
    is replaced with the cache key.

    >>> bcc = FileSystemBytecodeCache('/tmp/jinja_cache', '%s.cache')

    This bytecode cache supports clearing of the cache using the clear method.
    'u'A bytecode cache that stores bytecode on the filesystem.  It accepts
    two arguments: The directory where the cache items are stored and a
    pattern string that is used to build the filename.

    If no directory is specified a default cache directory is selected.  On
    Windows the user's temp directory is used, on UNIX systems a directory
    is created for the user in the system temp directory.

    The pattern can be used to have multiple separate caches operate on the
    same directory.  The default pattern is ``'__jinja2_%s.cache'``.  ``%s``
    is replaced with the cache key.

    >>> bcc = FileSystemBytecodeCache('/tmp/jinja_cache', '%s.cache')

    This bytecode cache supports clearing of the cache using the clear method.
    'b'__jinja2_%s.cache'u'__jinja2_%s.cache'b'te.NoReturn'u'te.NoReturn'b'Cannot determine safe temp directory.  You need to explicitly provide one.'u'Cannot determine safe temp directory.  You need to explicitly provide one.'b'getuid'u'getuid'b'_jinja2-cache-'u'_jinja2-cache-'b'.tmp'u'.tmp'b'This class implements a bytecode cache that uses a memcache cache for
    storing the information.  It does not enforce a specific memcache library
    (tummy's memcache or cmemcache) but will accept any class that provides
    the minimal interface required.

    Libraries compatible with this class:

    -   `cachelib <https://github.com/pallets/cachelib>`_
    -   `python-memcached <https://pypi.org/project/python-memcached/>`_

    (Unfortunately the django cache interface is not compatible because it
    does not support storing binary data, only text. You can however pass
    the underlying cache client to the bytecode cache which is available
    as `django.core.cache.cache._client`.)

    The minimal interface for the client passed to the constructor is this:

    .. class:: MinimalClientInterface

        .. method:: set(key, value[, timeout])

            Stores the bytecode in the cache.  `value` is a string and
            `timeout` the timeout of the key.  If timeout is not provided
            a default timeout or no timeout should be assumed, if it's
            provided it's an integer with the number of seconds the cache
            item should exist.

        .. method:: get(key)

            Returns the value for the cache key.  If the item does not
            exist in the cache the return value must be `None`.

    The other arguments to the constructor are the prefix for all keys that
    is added before the actual cache key and the timeout for the bytecode in
    the cache system.  We recommend a high (or no) timeout.

    This bytecode cache does not support clearing of used items in the cache.
    The clear method is a no-operation function.

    .. versionadded:: 2.7
       Added support for ignoring memcache errors through the
       `ignore_memcache_errors` parameter.
    'u'This class implements a bytecode cache that uses a memcache cache for
    storing the information.  It does not enforce a specific memcache library
    (tummy's memcache or cmemcache) but will accept any class that provides
    the minimal interface required.

    Libraries compatible with this class:

    -   `cachelib <https://github.com/pallets/cachelib>`_
    -   `python-memcached <https://pypi.org/project/python-memcached/>`_

    (Unfortunately the django cache interface is not compatible because it
    does not support storing binary data, only text. You can however pass
    the underlying cache client to the bytecode cache which is available
    as `django.core.cache.cache._client`.)

    The minimal interface for the client passed to the constructor is this:

    .. class:: MinimalClientInterface

        .. method:: set(key, value[, timeout])

            Stores the bytecode in the cache.  `value` is a string and
            `timeout` the timeout of the key.  If timeout is not provided
            a default timeout or no timeout should be assumed, if it's
            provided it's an integer with the number of seconds the cache
            item should exist.

        .. method:: get(key)

            Returns the value for the cache key.  If the item does not
            exist in the cache the return value must be `None`.

    The other arguments to the constructor are the prefix for all keys that
    is added before the actual cache key and the timeout for the bytecode in
    the cache system.  We recommend a high (or no) timeout.

    This bytecode cache does not support clearing of used items in the cache.
    The clear method is a no-operation function.

    .. versionadded:: 2.7
       Added support for ignoring memcache errors through the
       `ignore_memcache_errors` parameter.
    'b'jinja2/bytecode/'u'jinja2/bytecode/'b'_MemcachedClient'u'_MemcachedClient'u'jinja2.bccache'u'bccache'Debugger basicsCO_GENERATORCO_ASYNC_GENERATORBdbQuitBdbBreakpointGENERATOR_AND_COROUTINE_FLAGSException to give up completely.Generic Python debugger base class.

    This class takes care of details of the trace facility;
    a derived class should implement user interaction.
    The standard debugger class (pdb.Pdb) is an example.

    The optional skip argument must be an iterable of glob-style
    module name patterns.  The debugger will not step into frames
    that originate in a module that matches one of these patterns.
    Whether a frame is considered to originate in a certain module
    is determined by the __name__ in the frame globals.
    breaksfncacheframe_returningcanonicReturn canonical form of filename.

        For real filenames, the canonical form is a case-normalized (on
        case insensitive filesystems) absolute path.  'Filenames' with
        angle brackets, such as "<stdin>", generated in interactive
        mode, are returned unchanged.
        Set values of attributes as ready to start debugging.botframe_set_stopinfotrace_dispatchDispatch a trace function for debugged frames based on the event.

        This function is installed as the trace function for debugged
        frames. Its return value is the new trace function, which is
        usually itself. The default implementation decides how to
        dispatch a frame, depending on the type of event (passed in as a
        string) that is about to be executed.

        The event can be one of the following:
            line: A new line of code is going to be executed.
            call: A function is about to be called or another code block
                  is entered.
            return: A function or other code block is about to return.
            exception: An exception has occurred.
            c_call: A C function is about to be called.
            c_return: A C function has returned.
            c_exception: A C function has raised an exception.

        For the Python events, specialized functions (see the dispatch_*()
        methods) are called.  For the C events, no action is taken.

        The arg parameter depends on the previous event.
        quittingdispatch_linedispatch_calldispatch_returndispatch_exceptionc_callc_exceptionc_returnbdb.Bdb.dispatch: unknown debugging event:Invoke user function and return trace function for line event.

        If the debugger stops on the current line, invoke
        self.user_line(). Raise BdbQuit if self.quitting is set.
        Return self.trace_dispatch to continue tracing in this scope.
        stop_herebreak_hereuser_lineInvoke user function and return trace function for call event.

        If the debugger stops on this function call, invoke
        self.user_call(). Raise BdbQuit if self.quitting is set.
        Return self.trace_dispatch to continue tracing in this scope.
        break_anywherestopframeuser_callInvoke user function and return trace function for return event.

        If the debugger stops on this function return, invoke
        self.user_return(). Raise BdbQuit if self.quitting is set.
        Return self.trace_dispatch to continue tracing in this scope.
        returnframeuser_returnstoplinenoInvoke user function and return trace function for exception event.

        If the debugger stops on this exception, invoke
        self.user_exception(). Raise BdbQuit if self.quitting is set.
        Return self.trace_dispatch to continue tracing in this scope.
        user_exceptionis_skipped_moduleReturn True if module_name matches any skip pattern.Return True if frame is below the starting frame in the stack.Return True if there is an effective breakpoint for this line.

        Check for line or function breakpoint and if in effect.
        Delete temporary breakpoints if effective() says to.
        co_firstlinenoeffectivebpcurrentbptemporarydo_clearRemove temporary breakpoint.

        Must implement in derived classes or get NotImplementedError.
        subclass of bdb must implement do_clear()Return True if there is any breakpoint for frame's filename.
        argument_listCalled if we might stop in a function.Called when we stop or break at a line.return_valueCalled when a return trap is set here.Called when we stop on an exception.Set the attributes for stopping.

        If stoplineno is greater than or equal to 0, then stop at line
        greater than or equal to the stopline.  If stoplineno is -1, then
        don't stop at all.
        set_untilStop when the line with the lineno greater than the current one is
        reached or when returning from current frame.set_stepStop after one line of code.caller_framef_traceset_nextStop on the next line in or below the given frame.set_returnStop when returning from the given frame.set_traceStart debugging from frame.

        If frame is not specified, debugging starts from caller's frame.
        set_continueStop only at breakpoints or when finished.

        If there are no breakpoints, set the system trace function to None.
        set_quitSet quitting attribute to True.

        Raises BdbQuit exception in the next call to a dispatch_*() method.
        set_breakcondfuncnameSet a new breakpoint for filename:lineno.

        If lineno doesn't exist for the filename, return an error message.
        The filename should be in canonical form.
        Line %s:%d does not exist_prune_breaksPrune breakpoints for filename:lineno.

        A list of breakpoints is maintained in the Bdb instance and in
        the Breakpoint class.  If a breakpoint in the Bdb instance no
        longer exists in the Breakpoint class, then it's removed from the
        Bdb instance.
        bplistclear_breakDelete breakpoints for filename:lineno.

        If no breakpoints were set, return an error message.
        There are no breakpoints in %sThere is no breakpoint at %s:%ddeleteMeclear_bpbynumberDelete a breakpoint by its index in Breakpoint.bpbynumber.

        If arg is invalid, return an error message.
        get_bpbynumberclear_all_file_breaksDelete all breakpoints in filename.

        If none were set, return an error message.
        blistclear_all_breaksDelete all existing breakpoints.

        If none were set, return an error message.
        There are no breakpointsbpbynumberReturn a breakpoint by its index in Breakpoint.bybpnumber.

        For invalid arg values or if the breakpoint doesn't exist,
        raise a ValueError.
        Breakpoint number expectedNon-numeric breakpoint number %sBreakpoint number %d out of rangeBreakpoint %d already deletedget_breakReturn True if there is a breakpoint for filename:lineno.get_breaksReturn all breakpoints for filename:lineno.

        If no breakpoints are set, return an empty list.
        get_file_breaksReturn all lines with breakpoints for filename.

        If no breakpoints are set, return an empty list.
        get_all_breaksReturn all breakpoints that are set.Return a list of (frame, lineno) in a stack trace and a size.

        List starts with original calling frame, if there is one.
        Size may be number of frames above or below f.
        tb_linenoformat_stack_entryframe_linenolprefixReturn a string with information about a stack entry.

        The stack entry frame_lineno is a (frame, lineno) tuple.  The
        return string contains the canonical filename, the function name
        or '<lambda>', the input arguments, the return value, and the
        line of code (if it exists).

        <lambda>__return__f_locals->Debug a statement executed via the exec() function.

        globals defaults to __main__.dict; locals defaults to globals.
        runevalDebug an expression executed via the eval() function.

        globals defaults to __main__.dict; locals defaults to globals.
        runctxFor backwards-compatibility.  Defers to run().runcallDebug a single function call.

        Return the result of the function call.
        Start debugging with a Bdb instance from the caller's frame.Breakpoint class.

    Implements temporary breakpoints, ignore counts, disabling and
    (re)-enabling, and conditionals.

    Breakpoints are indexed by number through bpbynumber and by
    the (file, line) tuple using bplist.  The former points to a
    single instance of class Breakpoint.  The latter points to a
    list of such instances since there may be more than one
    breakpoint per line.

    When creating a breakpoint, its associated filename should be
    in canonical form.  If funcname is defined, a breakpoint hit will be
    counted when the first line of that function is executed.  A
    conditional breakpoint always counts a hit.
    func_first_executable_linehitsDelete the breakpoint from the list associated to a file:line.

        If it is the last breakpoint in that position, it also deletes
        the entry for the file:line.
        Mark the breakpoint as enabled.Mark the breakpoint as disabled.bpprintPrint the output of bpformat().

        The optional out argument directs where the output is sent
        and defaults to standard output.
        bpformatReturn a string with information about the breakpoint.

        The information includes the breakpoint number, temporary
        status, file:line position, break condition, number of times to
        ignore, and number of times hit.

        del  dispkeep yes  no   %-4dbreakpoint   %s at %s:%d
	stop only if %s
	ignore next %d hitsss
	breakpoint already hit %d time%sReturn a condensed description of the breakpoint.breakpoint %s at %s:%scheckfuncnameReturn True if break should happen here.

    Whether a break should happen depends on the way that b (the breakpoint)
    was set.  If it was set via line number, check if b.line is the same as
    the one in the frame.  If it was set via function name, check if this is
    the right function and if it is on the first executable line.
    Determine which breakpoint for this file:line is to be acted upon.

    Called only if we know there is a breakpoint at this location.  Return
    the breakpoint that was triggered and a boolean that indicates if it is
    ok to delete a temporary breakpoint.  Return (None, None) if there is no
    matching breakpoint.
    possiblesTdb???+++ call+++retval+++ returnexc_stuff+++ exceptionfoofoo(bar returnedbar(import bdb; bdb.foo(10)# None# XXX 'arg' is no longer used# First call of dispatch since reset()# (CT) Note that this may also be None!# No need to trace this function# Ignore call events in generator except when stepping.# Ignore return events in generator except when stepping.# The user issued a 'next' or 'until' command.# When stepping with next/until/return in a generator frame, skip# the internal StopIteration exception (with no traceback)# triggered by a subiterator run with the 'yield from' statement.# Stop at the StopIteration or GeneratorExit exception when the user# has set stopframe in a generator by issuing a return command, or a# next/until command at the last statement in the generator before the# exception.# Normally derived classes don't override the following# methods, but they may if they want to redefine the# definition of stopping and breakpoints.# some modules do not have names# (CT) stopframe may now also be None, see dispatch_call.# (CT) the former test for None is therefore removed from here.# The line itself has no breakpoint, but maybe the line is the# first line of a function with breakpoint set by function name.# flag says ok to delete temp. bp# Derived classes should override the user_* methods# to gain control.# stoplineno >= 0 means: stop at line >= the stoplineno# stoplineno -1 means: don't stop at all# Derived classes and clients can call the following methods# to affect the stepping state.# the name "until" is borrowed from gdb# Issue #13183: pdb skips frames after hitting a breakpoint and running# step commands.# Restore the trace function in the caller (that may not have been set# for performance reasons) when returning from the current frame.# Don't stop except at breakpoints or when finished# no breakpoints; run without debugger overhead# to manipulate breakpoints.  These methods return an# error message if something went wrong, None if all is well.# Set_break prints out the breakpoint line and file:lineno.# Call self.get_*break*() to see the breakpoints or better# for bp in Breakpoint.bpbynumber: if bp: bp.bpprint().# Import as late as possible# If there's only one bp in the list for that file,line# pair, then remove the breaks entry# Derived classes and clients can call the following method# to get a data structure representing a stack trace.# The following methods can be called by clients to use# a debugger to debug a statement or an expression.# Both can be given as a string, or a code object.# B/W compatibility# This method is more useful to debug a single function call.# XXX Keeping state in the class is a mistake -- this means# you cannot have more than one active Bdb instance.# Next bp to be assigned# indexed by (file, lineno) tuple# Each entry is None or an instance of Bpt# index 0 is unused, except for marking an# effective break .... see effective()# Needed if funcname is not None.# This better be in canonical form!# Build the two lists# No longer in list# No more bp for this f:l combo# -----------end of Breakpoint class----------# Breakpoint was set via line number.# Breakpoint was set at a line with a def statement and the function# defined is called: don't break.# Breakpoint set via function name.# It's not a function call, but rather execution of def statement.# We are in the right frame.# The function is entered for the 1st time.# But we are not at the first line number: don't break.# Determines if there is an effective (active) breakpoint at this# line of code.  Returns breakpoint number or 0 if none# Count every hit when bp is enabled# If unconditional, and ignoring go on to next, else break# breakpoint and marker that it's ok to delete if temporary# Conditional bp.# Ignore count applies only to those bpt hits where the# condition evaluates to true.# continue# else:#   continue# if eval fails, most conservative thing is to stop on# breakpoint regardless of ignore count.  Don't delete# temporary, as another hint to user.# -------------------- testing --------------------b'Debugger basics'u'Debugger basics'b'BdbQuit'u'BdbQuit'b'Bdb'u'Bdb'b'Breakpoint'u'Breakpoint'b'Exception to give up completely.'u'Exception to give up completely.'b'Generic Python debugger base class.

    This class takes care of details of the trace facility;
    a derived class should implement user interaction.
    The standard debugger class (pdb.Pdb) is an example.

    The optional skip argument must be an iterable of glob-style
    module name patterns.  The debugger will not step into frames
    that originate in a module that matches one of these patterns.
    Whether a frame is considered to originate in a certain module
    is determined by the __name__ in the frame globals.
    'u'Generic Python debugger base class.

    This class takes care of details of the trace facility;
    a derived class should implement user interaction.
    The standard debugger class (pdb.Pdb) is an example.

    The optional skip argument must be an iterable of glob-style
    module name patterns.  The debugger will not step into frames
    that originate in a module that matches one of these patterns.
    Whether a frame is considered to originate in a certain module
    is determined by the __name__ in the frame globals.
    'b'Return canonical form of filename.

        For real filenames, the canonical form is a case-normalized (on
        case insensitive filesystems) absolute path.  'Filenames' with
        angle brackets, such as "<stdin>", generated in interactive
        mode, are returned unchanged.
        'u'Return canonical form of filename.

        For real filenames, the canonical form is a case-normalized (on
        case insensitive filesystems) absolute path.  'Filenames' with
        angle brackets, such as "<stdin>", generated in interactive
        mode, are returned unchanged.
        'b'Set values of attributes as ready to start debugging.'u'Set values of attributes as ready to start debugging.'b'Dispatch a trace function for debugged frames based on the event.

        This function is installed as the trace function for debugged
        frames. Its return value is the new trace function, which is
        usually itself. The default implementation decides how to
        dispatch a frame, depending on the type of event (passed in as a
        string) that is about to be executed.

        The event can be one of the following:
            line: A new line of code is going to be executed.
            call: A function is about to be called or another code block
                  is entered.
            return: A function or other code block is about to return.
            exception: An exception has occurred.
            c_call: A C function is about to be called.
            c_return: A C function has returned.
            c_exception: A C function has raised an exception.

        For the Python events, specialized functions (see the dispatch_*()
        methods) are called.  For the C events, no action is taken.

        The arg parameter depends on the previous event.
        'u'Dispatch a trace function for debugged frames based on the event.

        This function is installed as the trace function for debugged
        frames. Its return value is the new trace function, which is
        usually itself. The default implementation decides how to
        dispatch a frame, depending on the type of event (passed in as a
        string) that is about to be executed.

        The event can be one of the following:
            line: A new line of code is going to be executed.
            call: A function is about to be called or another code block
                  is entered.
            return: A function or other code block is about to return.
            exception: An exception has occurred.
            c_call: A C function is about to be called.
            c_return: A C function has returned.
            c_exception: A C function has raised an exception.

        For the Python events, specialized functions (see the dispatch_*()
        methods) are called.  For the C events, no action is taken.

        The arg parameter depends on the previous event.
        'b'call'u'call'b'c_call'u'c_call'b'c_exception'u'c_exception'b'c_return'u'c_return'b'bdb.Bdb.dispatch: unknown debugging event:'u'bdb.Bdb.dispatch: unknown debugging event:'b'Invoke user function and return trace function for line event.

        If the debugger stops on the current line, invoke
        self.user_line(). Raise BdbQuit if self.quitting is set.
        Return self.trace_dispatch to continue tracing in this scope.
        'u'Invoke user function and return trace function for line event.

        If the debugger stops on the current line, invoke
        self.user_line(). Raise BdbQuit if self.quitting is set.
        Return self.trace_dispatch to continue tracing in this scope.
        'b'Invoke user function and return trace function for call event.

        If the debugger stops on this function call, invoke
        self.user_call(). Raise BdbQuit if self.quitting is set.
        Return self.trace_dispatch to continue tracing in this scope.
        'u'Invoke user function and return trace function for call event.

        If the debugger stops on this function call, invoke
        self.user_call(). Raise BdbQuit if self.quitting is set.
        Return self.trace_dispatch to continue tracing in this scope.
        'b'Invoke user function and return trace function for return event.

        If the debugger stops on this function return, invoke
        self.user_return(). Raise BdbQuit if self.quitting is set.
        Return self.trace_dispatch to continue tracing in this scope.
        'u'Invoke user function and return trace function for return event.

        If the debugger stops on this function return, invoke
        self.user_return(). Raise BdbQuit if self.quitting is set.
        Return self.trace_dispatch to continue tracing in this scope.
        'b'Invoke user function and return trace function for exception event.

        If the debugger stops on this exception, invoke
        self.user_exception(). Raise BdbQuit if self.quitting is set.
        Return self.trace_dispatch to continue tracing in this scope.
        'u'Invoke user function and return trace function for exception event.

        If the debugger stops on this exception, invoke
        self.user_exception(). Raise BdbQuit if self.quitting is set.
        Return self.trace_dispatch to continue tracing in this scope.
        'b'Return True if module_name matches any skip pattern.'u'Return True if module_name matches any skip pattern.'b'Return True if frame is below the starting frame in the stack.'u'Return True if frame is below the starting frame in the stack.'b'Return True if there is an effective breakpoint for this line.

        Check for line or function breakpoint and if in effect.
        Delete temporary breakpoints if effective() says to.
        'u'Return True if there is an effective breakpoint for this line.

        Check for line or function breakpoint and if in effect.
        Delete temporary breakpoints if effective() says to.
        'b'Remove temporary breakpoint.

        Must implement in derived classes or get NotImplementedError.
        'u'Remove temporary breakpoint.

        Must implement in derived classes or get NotImplementedError.
        'b'subclass of bdb must implement do_clear()'u'subclass of bdb must implement do_clear()'b'Return True if there is any breakpoint for frame's filename.
        'u'Return True if there is any breakpoint for frame's filename.
        'b'Called if we might stop in a function.'u'Called if we might stop in a function.'b'Called when we stop or break at a line.'u'Called when we stop or break at a line.'b'Called when a return trap is set here.'u'Called when a return trap is set here.'b'Called when we stop on an exception.'u'Called when we stop on an exception.'b'Set the attributes for stopping.

        If stoplineno is greater than or equal to 0, then stop at line
        greater than or equal to the stopline.  If stoplineno is -1, then
        don't stop at all.
        'u'Set the attributes for stopping.

        If stoplineno is greater than or equal to 0, then stop at line
        greater than or equal to the stopline.  If stoplineno is -1, then
        don't stop at all.
        'b'Stop when the line with the lineno greater than the current one is
        reached or when returning from current frame.'u'Stop when the line with the lineno greater than the current one is
        reached or when returning from current frame.'b'Stop after one line of code.'u'Stop after one line of code.'b'Stop on the next line in or below the given frame.'u'Stop on the next line in or below the given frame.'b'Stop when returning from the given frame.'u'Stop when returning from the given frame.'b'Start debugging from frame.

        If frame is not specified, debugging starts from caller's frame.
        'u'Start debugging from frame.

        If frame is not specified, debugging starts from caller's frame.
        'b'Stop only at breakpoints or when finished.

        If there are no breakpoints, set the system trace function to None.
        'u'Stop only at breakpoints or when finished.

        If there are no breakpoints, set the system trace function to None.
        'b'Set quitting attribute to True.

        Raises BdbQuit exception in the next call to a dispatch_*() method.
        'u'Set quitting attribute to True.

        Raises BdbQuit exception in the next call to a dispatch_*() method.
        'b'Set a new breakpoint for filename:lineno.

        If lineno doesn't exist for the filename, return an error message.
        The filename should be in canonical form.
        'u'Set a new breakpoint for filename:lineno.

        If lineno doesn't exist for the filename, return an error message.
        The filename should be in canonical form.
        'b'Line %s:%d does not exist'u'Line %s:%d does not exist'b'Prune breakpoints for filename:lineno.

        A list of breakpoints is maintained in the Bdb instance and in
        the Breakpoint class.  If a breakpoint in the Bdb instance no
        longer exists in the Breakpoint class, then it's removed from the
        Bdb instance.
        'u'Prune breakpoints for filename:lineno.

        A list of breakpoints is maintained in the Bdb instance and in
        the Breakpoint class.  If a breakpoint in the Bdb instance no
        longer exists in the Breakpoint class, then it's removed from the
        Bdb instance.
        'b'Delete breakpoints for filename:lineno.

        If no breakpoints were set, return an error message.
        'u'Delete breakpoints for filename:lineno.

        If no breakpoints were set, return an error message.
        'b'There are no breakpoints in %s'u'There are no breakpoints in %s'b'There is no breakpoint at %s:%d'u'There is no breakpoint at %s:%d'b'Delete a breakpoint by its index in Breakpoint.bpbynumber.

        If arg is invalid, return an error message.
        'u'Delete a breakpoint by its index in Breakpoint.bpbynumber.

        If arg is invalid, return an error message.
        'b'Delete all breakpoints in filename.

        If none were set, return an error message.
        'u'Delete all breakpoints in filename.

        If none were set, return an error message.
        'b'Delete all existing breakpoints.

        If none were set, return an error message.
        'u'Delete all existing breakpoints.

        If none were set, return an error message.
        'b'There are no breakpoints'u'There are no breakpoints'b'Return a breakpoint by its index in Breakpoint.bybpnumber.

        For invalid arg values or if the breakpoint doesn't exist,
        raise a ValueError.
        'u'Return a breakpoint by its index in Breakpoint.bybpnumber.

        For invalid arg values or if the breakpoint doesn't exist,
        raise a ValueError.
        'b'Breakpoint number expected'u'Breakpoint number expected'b'Non-numeric breakpoint number %s'u'Non-numeric breakpoint number %s'b'Breakpoint number %d out of range'u'Breakpoint number %d out of range'b'Breakpoint %d already deleted'u'Breakpoint %d already deleted'b'Return True if there is a breakpoint for filename:lineno.'u'Return True if there is a breakpoint for filename:lineno.'b'Return all breakpoints for filename:lineno.

        If no breakpoints are set, return an empty list.
        'u'Return all breakpoints for filename:lineno.

        If no breakpoints are set, return an empty list.
        'b'Return all lines with breakpoints for filename.

        If no breakpoints are set, return an empty list.
        'u'Return all lines with breakpoints for filename.

        If no breakpoints are set, return an empty list.
        'b'Return all breakpoints that are set.'u'Return all breakpoints that are set.'b'Return a list of (frame, lineno) in a stack trace and a size.

        List starts with original calling frame, if there is one.
        Size may be number of frames above or below f.
        'u'Return a list of (frame, lineno) in a stack trace and a size.

        List starts with original calling frame, if there is one.
        Size may be number of frames above or below f.
        'b'Return a string with information about a stack entry.

        The stack entry frame_lineno is a (frame, lineno) tuple.  The
        return string contains the canonical filename, the function name
        or '<lambda>', the input arguments, the return value, and the
        line of code (if it exists).

        'u'Return a string with information about a stack entry.

        The stack entry frame_lineno is a (frame, lineno) tuple.  The
        return string contains the canonical filename, the function name
        or '<lambda>', the input arguments, the return value, and the
        line of code (if it exists).

        'b'<lambda>'u'<lambda>'b'__return__'u'__return__'b'->'u'->'b'Debug a statement executed via the exec() function.

        globals defaults to __main__.dict; locals defaults to globals.
        'u'Debug a statement executed via the exec() function.

        globals defaults to __main__.dict; locals defaults to globals.
        'b'Debug an expression executed via the eval() function.

        globals defaults to __main__.dict; locals defaults to globals.
        'u'Debug an expression executed via the eval() function.

        globals defaults to __main__.dict; locals defaults to globals.
        'b'For backwards-compatibility.  Defers to run().'u'For backwards-compatibility.  Defers to run().'b'Debug a single function call.

        Return the result of the function call.
        'u'Debug a single function call.

        Return the result of the function call.
        'b'Start debugging with a Bdb instance from the caller's frame.'u'Start debugging with a Bdb instance from the caller's frame.'b'Breakpoint class.

    Implements temporary breakpoints, ignore counts, disabling and
    (re)-enabling, and conditionals.

    Breakpoints are indexed by number through bpbynumber and by
    the (file, line) tuple using bplist.  The former points to a
    single instance of class Breakpoint.  The latter points to a
    list of such instances since there may be more than one
    breakpoint per line.

    When creating a breakpoint, its associated filename should be
    in canonical form.  If funcname is defined, a breakpoint hit will be
    counted when the first line of that function is executed.  A
    conditional breakpoint always counts a hit.
    'u'Breakpoint class.

    Implements temporary breakpoints, ignore counts, disabling and
    (re)-enabling, and conditionals.

    Breakpoints are indexed by number through bpbynumber and by
    the (file, line) tuple using bplist.  The former points to a
    single instance of class Breakpoint.  The latter points to a
    list of such instances since there may be more than one
    breakpoint per line.

    When creating a breakpoint, its associated filename should be
    in canonical form.  If funcname is defined, a breakpoint hit will be
    counted when the first line of that function is executed.  A
    conditional breakpoint always counts a hit.
    'b'Delete the breakpoint from the list associated to a file:line.

        If it is the last breakpoint in that position, it also deletes
        the entry for the file:line.
        'u'Delete the breakpoint from the list associated to a file:line.

        If it is the last breakpoint in that position, it also deletes
        the entry for the file:line.
        'b'Mark the breakpoint as enabled.'u'Mark the breakpoint as enabled.'b'Mark the breakpoint as disabled.'u'Mark the breakpoint as disabled.'b'Print the output of bpformat().

        The optional out argument directs where the output is sent
        and defaults to standard output.
        'u'Print the output of bpformat().

        The optional out argument directs where the output is sent
        and defaults to standard output.
        'b'Return a string with information about the breakpoint.

        The information includes the breakpoint number, temporary
        status, file:line position, break condition, number of times to
        ignore, and number of times hit.

        'u'Return a string with information about the breakpoint.

        The information includes the breakpoint number, temporary
        status, file:line position, break condition, number of times to
        ignore, and number of times hit.

        'b'del  'u'del  'b'keep 'u'keep 'b'yes  'u'yes  'b'no   'u'no   'b'%-4dbreakpoint   %s at %s:%d'u'%-4dbreakpoint   %s at %s:%d'b'
	stop only if %s'u'
	stop only if %s'b'
	ignore next %d hits'u'
	ignore next %d hits'b'
	breakpoint already hit %d time%s'u'
	breakpoint already hit %d time%s'b'Return a condensed description of the breakpoint.'u'Return a condensed description of the breakpoint.'b'breakpoint %s at %s:%s'u'breakpoint %s at %s:%s'b'Return True if break should happen here.

    Whether a break should happen depends on the way that b (the breakpoint)
    was set.  If it was set via line number, check if b.line is the same as
    the one in the frame.  If it was set via function name, check if this is
    the right function and if it is on the first executable line.
    'u'Return True if break should happen here.

    Whether a break should happen depends on the way that b (the breakpoint)
    was set.  If it was set via line number, check if b.line is the same as
    the one in the frame.  If it was set via function name, check if this is
    the right function and if it is on the first executable line.
    'b'Determine which breakpoint for this file:line is to be acted upon.

    Called only if we know there is a breakpoint at this location.  Return
    the breakpoint that was triggered and a boolean that indicates if it is
    ok to delete a temporary breakpoint.  Return (None, None) if there is no
    matching breakpoint.
    'u'Determine which breakpoint for this file:line is to be acted upon.

    Called only if we know there is a breakpoint at this location.  Return
    the breakpoint that was triggered and a boolean that indicates if it is
    ok to delete a temporary breakpoint.  Return (None, None) if there is no
    matching breakpoint.
    'b'???'u'???'b'+++ call'u'+++ call'b'+++'u'+++'b'+++ return'u'+++ return'b'+++ exception'u'+++ exception'b'foo('u'foo('b'bar returned'u'bar returned'b'bar('u'bar('b'import bdb; bdb.foo(10)'u'import bdb; bdb.foo(10)'u'Python.Python39.lib.bdb'u'Python39.lib.bdb'u'lib.bdb'u'bdb'binascii.Erroru'Incomplete.__weakref__'binascii.IncompleteIncompleteu'Conversion between binary data and ASCII'a2b_hexa2b_hqxa2b_qpa2b_uub2a_hexb2a_hqxb2a_qpb2a_uucrc32crc_hqxrlecode_hqxrledecode_hqxBisection algorithms.lohiInsert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the right of the rightmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    Return the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e <= x, and all e in
    a[i:] have e > x.  So if x already appears in the list, a.insert(x) will
    insert just after the rightmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    lo must be non-negativemidInsert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the left of the leftmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    Return the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e < x, and all e in
    a[i:] have e >= x.  So if x already appears in the list, a.insert(x) will
    insert just before the leftmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    bisectinsort# Use __lt__ to match the logic in list.sort() and in heapq# Overwrite above definitions with a fast C implementation# Create aliasesb'Bisection algorithms.'u'Bisection algorithms.'b'Insert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the right of the rightmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    'u'Insert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the right of the rightmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    'b'Return the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e <= x, and all e in
    a[i:] have e > x.  So if x already appears in the list, a.insert(x) will
    insert just after the rightmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    'u'Return the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e <= x, and all e in
    a[i:] have e > x.  So if x already appears in the list, a.insert(x) will
    insert just after the rightmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    'b'lo must be non-negative'u'lo must be non-negative'b'Insert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the left of the leftmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    'u'Insert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the left of the leftmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    'b'Return the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e < x, and all e in
    a[i:] have e >= x.  So if x already appears in the list, a.insert(x) will
    insert just before the leftmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    'u'Return the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e < x, and all e in
    a[i:] have e >= x.  So if x already appears in the list, a.insert(x) will
    insert just before the leftmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    'u'Python.Python39.lib.bisect'u'Python39.lib.bisect'u'lib.bisect'u'bisect'update_wrapperBlueprintSetupStateDeferredSetupFunctionT_after_requestAfterRequestCallableT_before_requestBeforeRequestCallableT_error_handlerT_template_context_processorTemplateContextProcessorCallableT_url_defaultsURLDefaultCallableT_url_value_preprocessorURLValuePreprocessorCallableTemporary holder object for registering a blueprint with the
    application.  An instance of this class is created by the
    :meth:`~flask.Blueprint.make_setup_state` method and later passed
    to all register callback functions.
    first_registrationurl_prefixname_prefixurl_values_defaultsurl_defaultsA helper method to register a rule (and optionally a view function)
        to the application.  The endpoint is automatically prefixed with the
        blueprint's name.
        Represents a blueprint, a collection of routes and other
    app-related functions that can be registered on a real application
    later.

    A blueprint is an object that allows defining application functions
    without requiring an application object ahead of time. It uses the
    same decorators as :class:`~flask.Flask`, but defers the need for an
    application by recording them for later registration.

    Decorating a function with a blueprint creates a deferred function
    that is called with :class:`~flask.blueprints.BlueprintSetupState`
    when the blueprint is registered on an application.

    See :doc:`/blueprints` for more information.

    :param name: The name of the blueprint. Will be prepended to each
        endpoint name.
    :param import_name: The name of the blueprint package, usually
        ``__name__``. This helps locate the ``root_path`` for the
        blueprint.
    :param static_folder: A folder with static files that should be
        served by the blueprint's static route. The path is relative to
        the blueprint's root path. Blueprint static files are disabled
        by default.
    :param static_url_path: The url to serve static files from.
        Defaults to ``static_folder``. If the blueprint does not have
        a ``url_prefix``, the app's static route will take precedence,
        and the blueprint's static files won't be accessible.
    :param template_folder: A folder with templates that should be added
        to the app's template search path. The path is relative to the
        blueprint's root path. Blueprint templates are disabled by
        default. Blueprint templates have a lower precedence than those
        in the app's templates folder.
    :param url_prefix: A path to prepend to all of the blueprint's URLs,
        to make them distinct from the rest of the app's routes.
    :param subdomain: A subdomain that blueprint routes will match on by
        default.
    :param url_defaults: A dict of default values that blueprint routes
        will receive by default.
    :param root_path: By default, the blueprint will automatically set
        this based on ``import_name``. In certain situations this
        automatic detection can fail, so the path can be specified
        manually instead.

    .. versionchanged:: 1.1.0
        Blueprints have a ``cli`` group to register nested CLI commands.
        The ``cli_group`` parameter controls the name of the group under
        the ``flask`` command.

    .. versionadded:: 0.7
    _got_registered_oncecli_group'name' may not be empty.'name' may not contain a dot '.' character.deferred_functions_blueprints' can no longer be called on the blueprint '"' can no longer be called on the blueprint"" '"'. It has already been registered at least once, any changes will not be applied consistently.
Make sure all imports, decorators, functions, etc. needed to set up the blueprint are done before registering it."'. It has already been registered at least once, any"" changes will not be applied consistently.\n""Make sure all imports, decorators, functions, etc. needed to set up"" the blueprint are done before registering it."Registers a function that is called when the blueprint is
        registered on the application.  This function is called with the
        state as argument as returned by the :meth:`make_setup_state`
        method.
        record_onceWorks like :meth:`record` but wraps the function in another
        function that will ensure the function is only called once.  If the
        blueprint is registered a second time on the application, the
        function passed is not called.
        make_setup_stateCreates an instance of :meth:`~flask.blueprints.BlueprintSetupState`
        object that is later passed to the register callback functions.
        Subclasses can override this to return a subclass of the setup state.
        Register a :class:`~flask.Blueprint` on this blueprint. Keyword
        arguments passed to this method will override the defaults set
        on the blueprint.

        .. versionchanged:: 2.0.1
            The ``name`` option can be used to change the (pre-dotted)
            name the blueprint is registered with. This allows the same
            blueprint to be registered multiple times with unique names
            for ``url_for``.

        .. versionadded:: 2.0
        Cannot register a blueprint on itselfCalled by :meth:`Flask.register_blueprint` to register all
        views and callbacks registered on the blueprint with the
        application. Creates a :class:`.BlueprintSetupState` and calls
        each :meth:`record` callback with it.

        :param app: The application this blueprint is being registered
            with.
        :param options: Keyword arguments forwarded from
            :meth:`~Flask.register_blueprint`.

        .. versionchanged:: 2.3
            Nested blueprints now correctly apply subdomains.

        .. versionchanged:: 2.1
            Registering the same blueprint with the same name multiple
            times is an error.

        .. versionchanged:: 2.0.1
            Nested blueprints are registered with their dotted name.
            This allows different blueprints with the same name to be
            nested at different locations.

        .. versionchanged:: 2.0.1
            The ``name`` option can be used to change the (pre-dotted)
            name the blueprint is registered with. This allows the same
            blueprint to be registered multiple times with unique names
            for ``url_for``.
        thisa differentbp_desc 'existing_atThe name '' is already registered for "' is already registered for" blueprint. Use 'name=' to provide a unique name.". Use 'name=' to"" provide a unique name."first_bp_registrationfirst_name_registrationbp_dictparent_dictcode_valuescli_resolved_groupbp_optionsbp_url_prefixbp_subdomainRegister a URL rule with the blueprint. See :meth:`.Flask.add_url_rule` for
        full documentation.

        The URL rule is prefixed with the blueprint's URL prefix. The endpoint name,
        used with :func:`url_for`, is prefixed with the blueprint's name.
        'endpoint' may not contain a dot '.' character.'view_func' name may not contain a dot '.' character.app_template_filterRegister a template filter, available in any template rendered by the
        application. Equivalent to :meth:`.Flask.template_filter`.

        :param name: the optional name of the filter, otherwise the
                     function name will be used.
        add_app_template_filterRegister a template filter, available in any template rendered by the
        application. Works like the :meth:`app_template_filter` decorator. Equivalent to
        :meth:`.Flask.add_template_filter`.

        :param name: the optional name of the filter, otherwise the
                     function name will be used.
        register_templateapp_template_testRegister a template test, available in any template rendered by the
        application. Equivalent to :meth:`.Flask.template_test`.

        .. versionadded:: 0.10

        :param name: the optional name of the test, otherwise the
                     function name will be used.
        add_app_template_testRegister a template test, available in any template rendered by the
        application. Works like the :meth:`app_template_test` decorator. Equivalent to
        :meth:`.Flask.add_template_test`.

        .. versionadded:: 0.10

        :param name: the optional name of the test, otherwise the
                     function name will be used.
        app_template_globalRegister a template global, available in any template rendered by the
        application. Equivalent to :meth:`.Flask.template_global`.

        .. versionadded:: 0.10

        :param name: the optional name of the global, otherwise the
                     function name will be used.
        add_app_template_globalRegister a template global, available in any template rendered by the
        application. Works like the :meth:`app_template_global` decorator. Equivalent to
        :meth:`.Flask.add_template_global`.

        .. versionadded:: 0.10

        :param name: the optional name of the global, otherwise the
                     function name will be used.
        before_app_requestLike :meth:`before_request`, but before every request, not only those handled
        by the blueprint. Equivalent to :meth:`.Flask.before_request`.
        after_app_requestLike :meth:`after_request`, but after every request, not only those handled
        by the blueprint. Equivalent to :meth:`.Flask.after_request`.
        teardown_app_requestLike :meth:`teardown_request`, but after every request, not only those
        handled by the blueprint. Equivalent to :meth:`.Flask.teardown_request`.
        app_context_processorLike :meth:`context_processor`, but for templates rendered by every view, not
        only by the blueprint. Equivalent to :meth:`.Flask.context_processor`.
        app_errorhandlerLike :meth:`errorhandler`, but for every request, not only those handled by
        the blueprint. Equivalent to :meth:`.Flask.errorhandler`.
        errorhandlerapp_url_value_preprocessorLike :meth:`url_value_preprocessor`, but for every request, not only those
        handled by the blueprint. Equivalent to :meth:`.Flask.url_value_preprocessor`.
        app_url_defaultsLike :meth:`url_defaults`, but for every request, not only those handled by
        the blueprint. Equivalent to :meth:`.Flask.url_defaults`.
        #: a reference to the current application#: a reference to the blueprint that created this setup state.#: a dictionary with all options that were passed to the#: :meth:`~flask.Flask.register_blueprint` method.#: as blueprints can be registered multiple times with the#: application and not everything wants to be registered#: multiple times on it, this attribute can be used to figure#: out if the blueprint was registered in the past already.#: The subdomain that the blueprint should be active for, ``None``#: otherwise.#: The prefix that should be used for all URLs defined on the#: blueprint.#: A dictionary with URL defaults that is added to each and every#: URL that was defined with the blueprint.# Merge blueprint data into parent.b'BlueprintSetupState'u'BlueprintSetupState'b'T_after_request'u'T_after_request'b'T_before_request'u'T_before_request'b'T_error_handler'u'T_error_handler'b'T_template_context_processor'u'T_template_context_processor'b'T_url_defaults'u'T_url_defaults'b'T_url_value_preprocessor'u'T_url_value_preprocessor'b'Temporary holder object for registering a blueprint with the
    application.  An instance of this class is created by the
    :meth:`~flask.Blueprint.make_setup_state` method and later passed
    to all register callback functions.
    'u'Temporary holder object for registering a blueprint with the
    application.  An instance of this class is created by the
    :meth:`~flask.Blueprint.make_setup_state` method and later passed
    to all register callback functions.
    'b'subdomain'u'subdomain'b'url_prefix'u'url_prefix'b'name_prefix'u'name_prefix'b'url_defaults'u'url_defaults'b'A helper method to register a rule (and optionally a view function)
        to the application.  The endpoint is automatically prefixed with the
        blueprint's name.
        'u'A helper method to register a rule (and optionally a view function)
        to the application.  The endpoint is automatically prefixed with the
        blueprint's name.
        'b'defaults'b'Represents a blueprint, a collection of routes and other
    app-related functions that can be registered on a real application
    later.

    A blueprint is an object that allows defining application functions
    without requiring an application object ahead of time. It uses the
    same decorators as :class:`~flask.Flask`, but defers the need for an
    application by recording them for later registration.

    Decorating a function with a blueprint creates a deferred function
    that is called with :class:`~flask.blueprints.BlueprintSetupState`
    when the blueprint is registered on an application.

    See :doc:`/blueprints` for more information.

    :param name: The name of the blueprint. Will be prepended to each
        endpoint name.
    :param import_name: The name of the blueprint package, usually
        ``__name__``. This helps locate the ``root_path`` for the
        blueprint.
    :param static_folder: A folder with static files that should be
        served by the blueprint's static route. The path is relative to
        the blueprint's root path. Blueprint static files are disabled
        by default.
    :param static_url_path: The url to serve static files from.
        Defaults to ``static_folder``. If the blueprint does not have
        a ``url_prefix``, the app's static route will take precedence,
        and the blueprint's static files won't be accessible.
    :param template_folder: A folder with templates that should be added
        to the app's template search path. The path is relative to the
        blueprint's root path. Blueprint templates are disabled by
        default. Blueprint templates have a lower precedence than those
        in the app's templates folder.
    :param url_prefix: A path to prepend to all of the blueprint's URLs,
        to make them distinct from the rest of the app's routes.
    :param subdomain: A subdomain that blueprint routes will match on by
        default.
    :param url_defaults: A dict of default values that blueprint routes
        will receive by default.
    :param root_path: By default, the blueprint will automatically set
        this based on ``import_name``. In certain situations this
        automatic detection can fail, so the path can be specified
        manually instead.

    .. versionchanged:: 1.1.0
        Blueprints have a ``cli`` group to register nested CLI commands.
        The ``cli_group`` parameter controls the name of the group under
        the ``flask`` command.

    .. versionadded:: 0.7
    'u'Represents a blueprint, a collection of routes and other
    app-related functions that can be registered on a real application
    later.

    A blueprint is an object that allows defining application functions
    without requiring an application object ahead of time. It uses the
    same decorators as :class:`~flask.Flask`, but defers the need for an
    application by recording them for later registration.

    Decorating a function with a blueprint creates a deferred function
    that is called with :class:`~flask.blueprints.BlueprintSetupState`
    when the blueprint is registered on an application.

    See :doc:`/blueprints` for more information.

    :param name: The name of the blueprint. Will be prepended to each
        endpoint name.
    :param import_name: The name of the blueprint package, usually
        ``__name__``. This helps locate the ``root_path`` for the
        blueprint.
    :param static_folder: A folder with static files that should be
        served by the blueprint's static route. The path is relative to
        the blueprint's root path. Blueprint static files are disabled
        by default.
    :param static_url_path: The url to serve static files from.
        Defaults to ``static_folder``. If the blueprint does not have
        a ``url_prefix``, the app's static route will take precedence,
        and the blueprint's static files won't be accessible.
    :param template_folder: A folder with templates that should be added
        to the app's template search path. The path is relative to the
        blueprint's root path. Blueprint templates are disabled by
        default. Blueprint templates have a lower precedence than those
        in the app's templates folder.
    :param url_prefix: A path to prepend to all of the blueprint's URLs,
        to make them distinct from the rest of the app's routes.
    :param subdomain: A subdomain that blueprint routes will match on by
        default.
    :param url_defaults: A dict of default values that blueprint routes
        will receive by default.
    :param root_path: By default, the blueprint will automatically set
        this based on ``import_name``. In certain situations this
        automatic detection can fail, so the path can be specified
        manually instead.

    .. versionchanged:: 1.1.0
        Blueprints have a ``cli`` group to register nested CLI commands.
        The ``cli_group`` parameter controls the name of the group under
        the ``flask`` command.

    .. versionadded:: 0.7
    'b''name' may not be empty.'u''name' may not be empty.'b''name' may not contain a dot '.' character.'u''name' may not contain a dot '.' character.'b'' can no longer be called on the blueprint ''u'' can no longer be called on the blueprint ''b''. It has already been registered at least once, any changes will not be applied consistently.
Make sure all imports, decorators, functions, etc. needed to set up the blueprint are done before registering it.'u''. It has already been registered at least once, any changes will not be applied consistently.
Make sure all imports, decorators, functions, etc. needed to set up the blueprint are done before registering it.'b'Registers a function that is called when the blueprint is
        registered on the application.  This function is called with the
        state as argument as returned by the :meth:`make_setup_state`
        method.
        'u'Registers a function that is called when the blueprint is
        registered on the application.  This function is called with the
        state as argument as returned by the :meth:`make_setup_state`
        method.
        'b'Works like :meth:`record` but wraps the function in another
        function that will ensure the function is only called once.  If the
        blueprint is registered a second time on the application, the
        function passed is not called.
        'u'Works like :meth:`record` but wraps the function in another
        function that will ensure the function is only called once.  If the
        blueprint is registered a second time on the application, the
        function passed is not called.
        'b'Creates an instance of :meth:`~flask.blueprints.BlueprintSetupState`
        object that is later passed to the register callback functions.
        Subclasses can override this to return a subclass of the setup state.
        'u'Creates an instance of :meth:`~flask.blueprints.BlueprintSetupState`
        object that is later passed to the register callback functions.
        Subclasses can override this to return a subclass of the setup state.
        'b'Register a :class:`~flask.Blueprint` on this blueprint. Keyword
        arguments passed to this method will override the defaults set
        on the blueprint.

        .. versionchanged:: 2.0.1
            The ``name`` option can be used to change the (pre-dotted)
            name the blueprint is registered with. This allows the same
            blueprint to be registered multiple times with unique names
            for ``url_for``.

        .. versionadded:: 2.0
        'u'Register a :class:`~flask.Blueprint` on this blueprint. Keyword
        arguments passed to this method will override the defaults set
        on the blueprint.

        .. versionchanged:: 2.0.1
            The ``name`` option can be used to change the (pre-dotted)
            name the blueprint is registered with. This allows the same
            blueprint to be registered multiple times with unique names
            for ``url_for``.

        .. versionadded:: 2.0
        'b'Cannot register a blueprint on itself'u'Cannot register a blueprint on itself'b'Called by :meth:`Flask.register_blueprint` to register all
        views and callbacks registered on the blueprint with the
        application. Creates a :class:`.BlueprintSetupState` and calls
        each :meth:`record` callback with it.

        :param app: The application this blueprint is being registered
            with.
        :param options: Keyword arguments forwarded from
            :meth:`~Flask.register_blueprint`.

        .. versionchanged:: 2.3
            Nested blueprints now correctly apply subdomains.

        .. versionchanged:: 2.1
            Registering the same blueprint with the same name multiple
            times is an error.

        .. versionchanged:: 2.0.1
            Nested blueprints are registered with their dotted name.
            This allows different blueprints with the same name to be
            nested at different locations.

        .. versionchanged:: 2.0.1
            The ``name`` option can be used to change the (pre-dotted)
            name the blueprint is registered with. This allows the same
            blueprint to be registered multiple times with unique names
            for ``url_for``.
        'u'Called by :meth:`Flask.register_blueprint` to register all
        views and callbacks registered on the blueprint with the
        application. Creates a :class:`.BlueprintSetupState` and calls
        each :meth:`record` callback with it.

        :param app: The application this blueprint is being registered
            with.
        :param options: Keyword arguments forwarded from
            :meth:`~Flask.register_blueprint`.

        .. versionchanged:: 2.3
            Nested blueprints now correctly apply subdomains.

        .. versionchanged:: 2.1
            Registering the same blueprint with the same name multiple
            times is an error.

        .. versionchanged:: 2.0.1
            Nested blueprints are registered with their dotted name.
            This allows different blueprints with the same name to be
            nested at different locations.

        .. versionchanged:: 2.0.1
            The ``name`` option can be used to change the (pre-dotted)
            name the blueprint is registered with. This allows the same
            blueprint to be registered multiple times with unique names
            for ``url_for``.
        'b'this'u'this'b'a different'u'a different'b' ''u' ''b'The name ''u'The name ''b'' is already registered for 'u'' is already registered for 'b' blueprint'u' blueprint'b'. Use 'name=' to provide a unique name.'u'. Use 'name=' to provide a unique name.'b'cli_group'u'cli_group'b'Register a URL rule with the blueprint. See :meth:`.Flask.add_url_rule` for
        full documentation.

        The URL rule is prefixed with the blueprint's URL prefix. The endpoint name,
        used with :func:`url_for`, is prefixed with the blueprint's name.
        'u'Register a URL rule with the blueprint. See :meth:`.Flask.add_url_rule` for
        full documentation.

        The URL rule is prefixed with the blueprint's URL prefix. The endpoint name,
        used with :func:`url_for`, is prefixed with the blueprint's name.
        'b''endpoint' may not contain a dot '.' character.'u''endpoint' may not contain a dot '.' character.'b''view_func' name may not contain a dot '.' character.'u''view_func' name may not contain a dot '.' character.'b'Register a template filter, available in any template rendered by the
        application. Equivalent to :meth:`.Flask.template_filter`.

        :param name: the optional name of the filter, otherwise the
                     function name will be used.
        'u'Register a template filter, available in any template rendered by the
        application. Equivalent to :meth:`.Flask.template_filter`.

        :param name: the optional name of the filter, otherwise the
                     function name will be used.
        'b'Register a template filter, available in any template rendered by the
        application. Works like the :meth:`app_template_filter` decorator. Equivalent to
        :meth:`.Flask.add_template_filter`.

        :param name: the optional name of the filter, otherwise the
                     function name will be used.
        'u'Register a template filter, available in any template rendered by the
        application. Works like the :meth:`app_template_filter` decorator. Equivalent to
        :meth:`.Flask.add_template_filter`.

        :param name: the optional name of the filter, otherwise the
                     function name will be used.
        'b'Register a template test, available in any template rendered by the
        application. Equivalent to :meth:`.Flask.template_test`.

        .. versionadded:: 0.10

        :param name: the optional name of the test, otherwise the
                     function name will be used.
        'u'Register a template test, available in any template rendered by the
        application. Equivalent to :meth:`.Flask.template_test`.

        .. versionadded:: 0.10

        :param name: the optional name of the test, otherwise the
                     function name will be used.
        'b'Register a template test, available in any template rendered by the
        application. Works like the :meth:`app_template_test` decorator. Equivalent to
        :meth:`.Flask.add_template_test`.

        .. versionadded:: 0.10

        :param name: the optional name of the test, otherwise the
                     function name will be used.
        'u'Register a template test, available in any template rendered by the
        application. Works like the :meth:`app_template_test` decorator. Equivalent to
        :meth:`.Flask.add_template_test`.

        .. versionadded:: 0.10

        :param name: the optional name of the test, otherwise the
                     function name will be used.
        'b'Register a template global, available in any template rendered by the
        application. Equivalent to :meth:`.Flask.template_global`.

        .. versionadded:: 0.10

        :param name: the optional name of the global, otherwise the
                     function name will be used.
        'u'Register a template global, available in any template rendered by the
        application. Equivalent to :meth:`.Flask.template_global`.

        .. versionadded:: 0.10

        :param name: the optional name of the global, otherwise the
                     function name will be used.
        'b'Register a template global, available in any template rendered by the
        application. Works like the :meth:`app_template_global` decorator. Equivalent to
        :meth:`.Flask.add_template_global`.

        .. versionadded:: 0.10

        :param name: the optional name of the global, otherwise the
                     function name will be used.
        'u'Register a template global, available in any template rendered by the
        application. Works like the :meth:`app_template_global` decorator. Equivalent to
        :meth:`.Flask.add_template_global`.

        .. versionadded:: 0.10

        :param name: the optional name of the global, otherwise the
                     function name will be used.
        'b'Like :meth:`before_request`, but before every request, not only those handled
        by the blueprint. Equivalent to :meth:`.Flask.before_request`.
        'u'Like :meth:`before_request`, but before every request, not only those handled
        by the blueprint. Equivalent to :meth:`.Flask.before_request`.
        'b'Like :meth:`after_request`, but after every request, not only those handled
        by the blueprint. Equivalent to :meth:`.Flask.after_request`.
        'u'Like :meth:`after_request`, but after every request, not only those handled
        by the blueprint. Equivalent to :meth:`.Flask.after_request`.
        'b'Like :meth:`teardown_request`, but after every request, not only those
        handled by the blueprint. Equivalent to :meth:`.Flask.teardown_request`.
        'u'Like :meth:`teardown_request`, but after every request, not only those
        handled by the blueprint. Equivalent to :meth:`.Flask.teardown_request`.
        'b'Like :meth:`context_processor`, but for templates rendered by every view, not
        only by the blueprint. Equivalent to :meth:`.Flask.context_processor`.
        'u'Like :meth:`context_processor`, but for templates rendered by every view, not
        only by the blueprint. Equivalent to :meth:`.Flask.context_processor`.
        'b'Like :meth:`errorhandler`, but for every request, not only those handled by
        the blueprint. Equivalent to :meth:`.Flask.errorhandler`.
        'u'Like :meth:`errorhandler`, but for every request, not only those handled by
        the blueprint. Equivalent to :meth:`.Flask.errorhandler`.
        'b'Like :meth:`url_value_preprocessor`, but for every request, not only those
        handled by the blueprint. Equivalent to :meth:`.Flask.url_value_preprocessor`.
        'u'Like :meth:`url_value_preprocessor`, but for every request, not only those
        handled by the blueprint. Equivalent to :meth:`.Flask.url_value_preprocessor`.
        'b'Like :meth:`url_defaults`, but for every request, not only those handled by
        the blueprint. Equivalent to :meth:`.Flask.url_defaults`.
        'u'Like :meth:`url_defaults`, but for every request, not only those handled by
        the blueprint. Equivalent to :meth:`.Flask.url_defaults`.
        'u'flask.blueprints'u'blueprints'A bottom-up tree matching algorithm implementation meant to speed
up 2to3's matching process. After the tree patterns are reduced to
their rarest linear path, a linear Aho-Corasick automaton is
created. The linear automaton traverses the linear paths from the
leaves to the root of the AST and returns a set of nodes for further
matching. This reduces significantly the number of candidate nodes.George Boutsioukis <gboutsioukis@gmail.com>pytreebtm_utilsreduce_treeBMNodeClass for a node of the Aho-Corasick automaton used in matchingtransition_tablefixerscontentBottomMatcherThe main matcher class. After instantiating the patterns should
    be added using the add_fixer methodRefactoringTooladd_fixerfixerReduces a fixer's pattern tree to a linear path and adds it
        to the matcher(a common Aho-Corasick automaton). The fixer is
        appended on the matching states and called when they are
        reachedpattern_treeget_linear_subpatternlinearmatch_nodesmatch_nodeRecursively adds a linear pattern to the AC automatonalternativeend_nodesnext_nodeleavesThe main interface with the bottom matcher. The tree is
        traversed from the bottom using the constructed
        automaton. Nodes are only checked once as the tree is
        retraversed. When the automaton fails, we give it one more
        shot(in case the above tree matches as a whole with the
        rejected leaf), then we break for the next leaf. There is the
        special case of multiple arguments(see code comments) where we
        recheck the nodes

        Args:
           The leaves of the AST tree to be matched

        Returns:
           A dictionary of node matches with fixers as the keys
        current_ac_nodeleafcurrent_ast_nodewas_checkedLeafnode_tokenprint_acPrints a graphviz diagram of the BM automaton(for debugging)digraph g{print_nodesubnode_keysubnode%d -> %d [label=%s] //%stype_repr_type_reprstype_numpygrampython_symbols#print("adding pattern", pattern, "to", start)#print("empty pattern")#alternatives#print("alternatives")#add all alternatives, and add the rest of the pattern#to each end node#single token#not last#transition did not exist, create new#transition exists already, follow# multiple statements, recheck#name#token matches#matching failed, reset automaton#the rest of the tree upwards has been checked, next leaf#recheck the rejected node once from the root# taken from pytree.py for debugging; only used by print_ac# printing tokens is possible but not as useful# from .pgen2 import token // token.__dict__.items():b'A bottom-up tree matching algorithm implementation meant to speed
up 2to3's matching process. After the tree patterns are reduced to
their rarest linear path, a linear Aho-Corasick automaton is
created. The linear automaton traverses the linear paths from the
leaves to the root of the AST and returns a set of nodes for further
matching. This reduces significantly the number of candidate nodes.'u'A bottom-up tree matching algorithm implementation meant to speed
up 2to3's matching process. After the tree patterns are reduced to
their rarest linear path, a linear Aho-Corasick automaton is
created. The linear automaton traverses the linear paths from the
leaves to the root of the AST and returns a set of nodes for further
matching. This reduces significantly the number of candidate nodes.'b'George Boutsioukis <gboutsioukis@gmail.com>'u'George Boutsioukis <gboutsioukis@gmail.com>'b'Class for a node of the Aho-Corasick automaton used in matching'u'Class for a node of the Aho-Corasick automaton used in matching'b'The main matcher class. After instantiating the patterns should
    be added using the add_fixer method'u'The main matcher class. After instantiating the patterns should
    be added using the add_fixer method'b'RefactoringTool'u'RefactoringTool'b'Reduces a fixer's pattern tree to a linear path and adds it
        to the matcher(a common Aho-Corasick automaton). The fixer is
        appended on the matching states and called when they are
        reached'u'Reduces a fixer's pattern tree to a linear path and adds it
        to the matcher(a common Aho-Corasick automaton). The fixer is
        appended on the matching states and called when they are
        reached'b'Recursively adds a linear pattern to the AC automaton'u'Recursively adds a linear pattern to the AC automaton'b'The main interface with the bottom matcher. The tree is
        traversed from the bottom using the constructed
        automaton. Nodes are only checked once as the tree is
        retraversed. When the automaton fails, we give it one more
        shot(in case the above tree matches as a whole with the
        rejected leaf), then we break for the next leaf. There is the
        special case of multiple arguments(see code comments) where we
        recheck the nodes

        Args:
           The leaves of the AST tree to be matched

        Returns:
           A dictionary of node matches with fixers as the keys
        'u'The main interface with the bottom matcher. The tree is
        traversed from the bottom using the constructed
        automaton. Nodes are only checked once as the tree is
        retraversed. When the automaton fails, we give it one more
        shot(in case the above tree matches as a whole with the
        rejected leaf), then we break for the next leaf. There is the
        special case of multiple arguments(see code comments) where we
        recheck the nodes

        Args:
           The leaves of the AST tree to be matched

        Returns:
           A dictionary of node matches with fixers as the keys
        'b'Prints a graphviz diagram of the BM automaton(for debugging)'u'Prints a graphviz diagram of the BM automaton(for debugging)'b'digraph g{'u'digraph g{'b'%d -> %d [label=%s] //%s'u'%d -> %d [label=%s] //%s'u'Python39.lib.lib2to3.btm_matcher'u'lib.lib2to3.btm_matcher'u'lib2to3.btm_matcher'u'btm_matcher'Utility functions used by the btm_matcher modulepgen2grammarpattern_symbolssymspysymsopmaptoken_labelsTYPE_ANYTYPE_ALTERNATIVESTYPE_GROUPMinNodeThis class serves as an intermediate representation of the
    pattern tree during the conversion to sets of leaf-to-root
    subpatternsalternativesleaf_to_rootInternal method. Returns a characteristic path of the
        pattern tree. This method must be run for all leaves until the
        linear subpatterns are merged into a singlesubpget_characteristic_subpatternNAMEDrives the leaf_to_root method. The reason that
        leaf_to_root must be run multiple times is because we need to
        reject 'group' matches; for example the alternative form
        (a | b c) creates a group [b c] that needs to be matched. Since
        matching multiple linear patterns overcomes the automaton's
        capabilities, leaf_to_root merges each group into a single
        choice based on 'characteristic'ity,

        i.e. (a|b c) -> (a|b) if b more characteristic than c

        Returns: The most 'characteristic'(as defined by
          get_characteristic_subpattern) path for the compiled pattern
          tree.
        Generator that returns the leaves of the tree
    Internal function. Reduces a compiled pattern tree to an
    intermediate representation suitable for feeding the
    automaton. This also trims off any optional pattern elements(like
    [a], a*).
    AlternativesreducedAlternativeUnitdetails_nodealternatives_nodehas_repeaterrepeater_nodehas_variable_nameDetailsRepeatername_leafsubpatternsPicks the most characteristic from a list of linear patterns
    Current order used is:
    names > common_names > common_chars
    subpatterns_with_namessubpatterns_with_common_namesforifcommon_namessubpatterns_with_common_chars[]().,:common_charssubpatternrec_testtest_funcTests test_func on all items of sequence and items of included
    sub-iterables#last alternative#probably should check the number of leaves#in case of type=name, use the name instead#switch on the node type#skip#2 cases#just a single 'Alternative', skip this node#real alternatives#skip odd children('|' tokens)# delete the group if all of the children were reduced to None#skip parentheses#skip whole unit if its optional# variable name#skip variable name#skip variable name, '='# skip parenthesis#set node type#(python) non-name or wildcard#(python) name or character; remove the apostrophes from#the string value#handle repeaters#reduce to None#reduce to a single occurrence i.e. do nothing#TODO: handle {min, max} repeaters#add children#skip '<', '>' markers# first pick out the ones containing variable names# of the remaining subpatterns pick out the longest oneb'Utility functions used by the btm_matcher module'u'Utility functions used by the btm_matcher module'b'This class serves as an intermediate representation of the
    pattern tree during the conversion to sets of leaf-to-root
    subpatterns'u'This class serves as an intermediate representation of the
    pattern tree during the conversion to sets of leaf-to-root
    subpatterns'b'Internal method. Returns a characteristic path of the
        pattern tree. This method must be run for all leaves until the
        linear subpatterns are merged into a single'u'Internal method. Returns a characteristic path of the
        pattern tree. This method must be run for all leaves until the
        linear subpatterns are merged into a single'b'Drives the leaf_to_root method. The reason that
        leaf_to_root must be run multiple times is because we need to
        reject 'group' matches; for example the alternative form
        (a | b c) creates a group [b c] that needs to be matched. Since
        matching multiple linear patterns overcomes the automaton's
        capabilities, leaf_to_root merges each group into a single
        choice based on 'characteristic'ity,

        i.e. (a|b c) -> (a|b) if b more characteristic than c

        Returns: The most 'characteristic'(as defined by
          get_characteristic_subpattern) path for the compiled pattern
          tree.
        'u'Drives the leaf_to_root method. The reason that
        leaf_to_root must be run multiple times is because we need to
        reject 'group' matches; for example the alternative form
        (a | b c) creates a group [b c] that needs to be matched. Since
        matching multiple linear patterns overcomes the automaton's
        capabilities, leaf_to_root merges each group into a single
        choice based on 'characteristic'ity,

        i.e. (a|b c) -> (a|b) if b more characteristic than c

        Returns: The most 'characteristic'(as defined by
          get_characteristic_subpattern) path for the compiled pattern
          tree.
        'b'Generator that returns the leaves of the tree'u'Generator that returns the leaves of the tree'b'
    Internal function. Reduces a compiled pattern tree to an
    intermediate representation suitable for feeding the
    automaton. This also trims off any optional pattern elements(like
    [a], a*).
    'u'
    Internal function. Reduces a compiled pattern tree to an
    intermediate representation suitable for feeding the
    automaton. This also trims off any optional pattern elements(like
    [a], a*).
    'b'any'u'any'b'Picks the most characteristic from a list of linear patterns
    Current order used is:
    names > common_names > common_chars
    'u'Picks the most characteristic from a list of linear patterns
    Current order used is:
    names > common_names > common_chars
    'b'for'u'for'b'if'u'if'b'None'u'None'b'[]().,:'u'[]().,:'b'Tests test_func on all items of sequence and items of included
    sub-iterables'u'Tests test_func on all items of sequence and items of included
    sub-iterables'u'Python39.lib.lib2to3.btm_utils'u'lib.lib2to3.btm_utils'u'lib2to3.btm_utils'u'btm_utils'Interface to the libbzip2 compression library.

This module provides a file interface, classes for incremental
(de)compression, and functions for one-shot (de)compression.
BZ2FileBZ2CompressorBZ2DecompressorcompressNadeem Vawda <nadeem.vawda@gmail.com>_builtin_open_compression_MODE_CLOSED_MODE_READ_MODE_WRITEA file object providing transparent bzip2 (de)compression.

    A BZ2File can act as a wrapper for an existing file object, or refer
    directly to a named file on disk.

    Note that BZ2File provides a *binary* file interface - data read is
    returned as bytes, and data to be written should be given as bytes.
    compresslevelOpen a bzip2-compressed file.

        If filename is a str, bytes, or PathLike object, it gives the
        name of the file to be opened. Otherwise, it should be a file
        object, which will be used to read or write the compressed data.

        mode can be 'r' for reading (default), 'w' for (over)writing,
        'x' for creating exclusively, or 'a' for appending. These can
        equivalently be given as 'rb', 'wb', 'xb', and 'ab'.

        If mode is 'w', 'x' or 'a', compresslevel can be a number between 1
        and 9 specifying the level of compression: 1 produces the least
        compression, and 9 (default) produces the most compression.

        If mode is 'r', the input file may be the concatenation of
        multiple compressed streams.
        _closefpcompresslevel must be between 1 and 9mode_code_compressorxbabInvalid mode: %rfilename must be a str, bytes, file or PathLike objectFlush and close the file.

        May be called more than once without error. Once the file is
        closed, any other operation on it will raise a ValueError.
        True if this file is closed.Return the file descriptor for the underlying file.Return whether the file supports seeking.Return whether the file was opened for reading.Return whether the file was opened for writing.Return buffered data without advancing the file position.

        Always returns at least one byte of data, unless at EOF.
        The exact number of bytes returned is unspecified.
        Read up to size uncompressed bytes from the file.

        If size is negative or omitted, read until EOF is reached.
        Returns b'' if the file is already at EOF.
        Read up to size uncompressed bytes, while trying to avoid
        making multiple reads from the underlying stream. Reads up to a
        buffer's worth of data if size is negative.

        Returns b'' if the file is at EOF.
        Read bytes into b.

        Returns the number of bytes read (0 for EOF).
        Read a line of uncompressed bytes from the file.

        The terminating newline (if present) is retained. If size is
        non-negative, no more than size bytes will be read (in which
        case the line may be incomplete). Returns b'' if already at EOF.
        Integer argument expectedRead a list of lines of uncompressed bytes from the file.

        size can be specified to control the number of lines read: no
        further lines will be read once the total size of the lines read
        so far equals or exceeds size.
        Write a byte string to the file.

        Returns the number of uncompressed bytes written, which is
        always the length of data in bytes. Note that due to buffering,
        the file on disk may not reflect the data written until close()
        is called.
        compressedWrite a sequence of byte strings to the file.

        Returns the number of uncompressed bytes written.
        seq can be any iterable yielding byte strings.

        Line separators are not added between the written byte strings.
        Change the file position.

        The new position is specified by offset, relative to the
        position indicated by whence. Values for whence are:

            0: start of stream (default); offset must not be negative
            1: current stream position
            2: end of stream; offset must not be positive

        Returns the new file position.

        Note that seeking is emulated, so depending on the parameters,
        this operation may be extremely slow.
        Open a bzip2-compressed file in binary or text mode.

    The filename argument can be an actual filename (a str, bytes, or
    PathLike object), or an existing file object to read from or write
    to.

    The mode argument can be "r", "rb", "w", "wb", "x", "xb", "a" or
    "ab" for binary mode, or "rt", "wt", "xt" or "at" for text mode.
    The default mode is "rb", and the default compresslevel is 9.

    For binary mode, this function is equivalent to the BZ2File
    constructor: BZ2File(filename, mode, compresslevel). In this case,
    the encoding, errors and newline arguments must not be provided.

    For text mode, a BZ2File object is created, and wrapped in an
    io.TextIOWrapper instance with the specified encoding, error
    handling behavior, and line ending(s).

    Argument 'encoding' not supported in binary modeArgument 'errors' not supported in binary modeArgument 'newline' not supported in binary modebz_modebinary_fileCompress a block of data.

    compresslevel, if given, must be a number between 1 and 9.

    For incremental compression, use a BZ2Compressor object instead.
    compDecompress a block of data.

    For incremental decompression, use a BZ2Decompressor object instead.
    decompCompressed data ended before the end-of-stream marker was reached"Compressed data ended before the "# Value 2 no longer used# This lock must be recursive, so that BufferedIOBase's# writelines() does not deadlock.# Relies on the undocumented fact that BufferedReader.peek()# always returns at least one byte (except at EOF), independent# of the value of n# accept any data that supports the buffer protocol# Leftover data is not a valid bzip2 stream; ignore it.# Error on the first iteration; bail out.b'Interface to the libbzip2 compression library.

This module provides a file interface, classes for incremental
(de)compression, and functions for one-shot (de)compression.
'u'Interface to the libbzip2 compression library.

This module provides a file interface, classes for incremental
(de)compression, and functions for one-shot (de)compression.
'b'BZ2File'u'BZ2File'b'BZ2Compressor'u'BZ2Compressor'b'BZ2Decompressor'u'BZ2Decompressor'b'compress'u'compress'b'decompress'u'decompress'b'Nadeem Vawda <nadeem.vawda@gmail.com>'u'Nadeem Vawda <nadeem.vawda@gmail.com>'b'A file object providing transparent bzip2 (de)compression.

    A BZ2File can act as a wrapper for an existing file object, or refer
    directly to a named file on disk.

    Note that BZ2File provides a *binary* file interface - data read is
    returned as bytes, and data to be written should be given as bytes.
    'u'A file object providing transparent bzip2 (de)compression.

    A BZ2File can act as a wrapper for an existing file object, or refer
    directly to a named file on disk.

    Note that BZ2File provides a *binary* file interface - data read is
    returned as bytes, and data to be written should be given as bytes.
    'b'Open a bzip2-compressed file.

        If filename is a str, bytes, or PathLike object, it gives the
        name of the file to be opened. Otherwise, it should be a file
        object, which will be used to read or write the compressed data.

        mode can be 'r' for reading (default), 'w' for (over)writing,
        'x' for creating exclusively, or 'a' for appending. These can
        equivalently be given as 'rb', 'wb', 'xb', and 'ab'.

        If mode is 'w', 'x' or 'a', compresslevel can be a number between 1
        and 9 specifying the level of compression: 1 produces the least
        compression, and 9 (default) produces the most compression.

        If mode is 'r', the input file may be the concatenation of
        multiple compressed streams.
        'u'Open a bzip2-compressed file.

        If filename is a str, bytes, or PathLike object, it gives the
        name of the file to be opened. Otherwise, it should be a file
        object, which will be used to read or write the compressed data.

        mode can be 'r' for reading (default), 'w' for (over)writing,
        'x' for creating exclusively, or 'a' for appending. These can
        equivalently be given as 'rb', 'wb', 'xb', and 'ab'.

        If mode is 'w', 'x' or 'a', compresslevel can be a number between 1
        and 9 specifying the level of compression: 1 produces the least
        compression, and 9 (default) produces the most compression.

        If mode is 'r', the input file may be the concatenation of
        multiple compressed streams.
        'b'compresslevel must be between 1 and 9'u'compresslevel must be between 1 and 9'b'xb'u'xb'b'ab'u'ab'b'Invalid mode: %r'u'Invalid mode: %r'b'filename must be a str, bytes, file or PathLike object'u'filename must be a str, bytes, file or PathLike object'b'Flush and close the file.

        May be called more than once without error. Once the file is
        closed, any other operation on it will raise a ValueError.
        'u'Flush and close the file.

        May be called more than once without error. Once the file is
        closed, any other operation on it will raise a ValueError.
        'b'True if this file is closed.'u'True if this file is closed.'b'Return the file descriptor for the underlying file.'u'Return the file descriptor for the underlying file.'b'Return whether the file supports seeking.'u'Return whether the file supports seeking.'b'Return whether the file was opened for reading.'u'Return whether the file was opened for reading.'b'Return whether the file was opened for writing.'u'Return whether the file was opened for writing.'b'Return buffered data without advancing the file position.

        Always returns at least one byte of data, unless at EOF.
        The exact number of bytes returned is unspecified.
        'u'Return buffered data without advancing the file position.

        Always returns at least one byte of data, unless at EOF.
        The exact number of bytes returned is unspecified.
        'b'Read up to size uncompressed bytes from the file.

        If size is negative or omitted, read until EOF is reached.
        Returns b'' if the file is already at EOF.
        'u'Read up to size uncompressed bytes from the file.

        If size is negative or omitted, read until EOF is reached.
        Returns b'' if the file is already at EOF.
        'b'Read up to size uncompressed bytes, while trying to avoid
        making multiple reads from the underlying stream. Reads up to a
        buffer's worth of data if size is negative.

        Returns b'' if the file is at EOF.
        'u'Read up to size uncompressed bytes, while trying to avoid
        making multiple reads from the underlying stream. Reads up to a
        buffer's worth of data if size is negative.

        Returns b'' if the file is at EOF.
        'b'Read bytes into b.

        Returns the number of bytes read (0 for EOF).
        'u'Read bytes into b.

        Returns the number of bytes read (0 for EOF).
        'b'Read a line of uncompressed bytes from the file.

        The terminating newline (if present) is retained. If size is
        non-negative, no more than size bytes will be read (in which
        case the line may be incomplete). Returns b'' if already at EOF.
        'u'Read a line of uncompressed bytes from the file.

        The terminating newline (if present) is retained. If size is
        non-negative, no more than size bytes will be read (in which
        case the line may be incomplete). Returns b'' if already at EOF.
        'b'__index__'u'__index__'b'Integer argument expected'u'Integer argument expected'b'Read a list of lines of uncompressed bytes from the file.

        size can be specified to control the number of lines read: no
        further lines will be read once the total size of the lines read
        so far equals or exceeds size.
        'u'Read a list of lines of uncompressed bytes from the file.

        size can be specified to control the number of lines read: no
        further lines will be read once the total size of the lines read
        so far equals or exceeds size.
        'b'Write a byte string to the file.

        Returns the number of uncompressed bytes written, which is
        always the length of data in bytes. Note that due to buffering,
        the file on disk may not reflect the data written until close()
        is called.
        'u'Write a byte string to the file.

        Returns the number of uncompressed bytes written, which is
        always the length of data in bytes. Note that due to buffering,
        the file on disk may not reflect the data written until close()
        is called.
        'b'Write a sequence of byte strings to the file.

        Returns the number of uncompressed bytes written.
        seq can be any iterable yielding byte strings.

        Line separators are not added between the written byte strings.
        'u'Write a sequence of byte strings to the file.

        Returns the number of uncompressed bytes written.
        seq can be any iterable yielding byte strings.

        Line separators are not added between the written byte strings.
        'b'Change the file position.

        The new position is specified by offset, relative to the
        position indicated by whence. Values for whence are:

            0: start of stream (default); offset must not be negative
            1: current stream position
            2: end of stream; offset must not be positive

        Returns the new file position.

        Note that seeking is emulated, so depending on the parameters,
        this operation may be extremely slow.
        'u'Change the file position.

        The new position is specified by offset, relative to the
        position indicated by whence. Values for whence are:

            0: start of stream (default); offset must not be negative
            1: current stream position
            2: end of stream; offset must not be positive

        Returns the new file position.

        Note that seeking is emulated, so depending on the parameters,
        this operation may be extremely slow.
        'b'Open a bzip2-compressed file in binary or text mode.

    The filename argument can be an actual filename (a str, bytes, or
    PathLike object), or an existing file object to read from or write
    to.

    The mode argument can be "r", "rb", "w", "wb", "x", "xb", "a" or
    "ab" for binary mode, or "rt", "wt", "xt" or "at" for text mode.
    The default mode is "rb", and the default compresslevel is 9.

    For binary mode, this function is equivalent to the BZ2File
    constructor: BZ2File(filename, mode, compresslevel). In this case,
    the encoding, errors and newline arguments must not be provided.

    For text mode, a BZ2File object is created, and wrapped in an
    io.TextIOWrapper instance with the specified encoding, error
    handling behavior, and line ending(s).

    'u'Open a bzip2-compressed file in binary or text mode.

    The filename argument can be an actual filename (a str, bytes, or
    PathLike object), or an existing file object to read from or write
    to.

    The mode argument can be "r", "rb", "w", "wb", "x", "xb", "a" or
    "ab" for binary mode, or "rt", "wt", "xt" or "at" for text mode.
    The default mode is "rb", and the default compresslevel is 9.

    For binary mode, this function is equivalent to the BZ2File
    constructor: BZ2File(filename, mode, compresslevel). In this case,
    the encoding, errors and newline arguments must not be provided.

    For text mode, a BZ2File object is created, and wrapped in an
    io.TextIOWrapper instance with the specified encoding, error
    handling behavior, and line ending(s).

    'b'Argument 'encoding' not supported in binary mode'u'Argument 'encoding' not supported in binary mode'b'Argument 'errors' not supported in binary mode'u'Argument 'errors' not supported in binary mode'b'Argument 'newline' not supported in binary mode'u'Argument 'newline' not supported in binary mode'b'Compress a block of data.

    compresslevel, if given, must be a number between 1 and 9.

    For incremental compression, use a BZ2Compressor object instead.
    'u'Compress a block of data.

    compresslevel, if given, must be a number between 1 and 9.

    For incremental compression, use a BZ2Compressor object instead.
    'b'Decompress a block of data.

    For incremental decompression, use a BZ2Decompressor object instead.
    'u'Decompress a block of data.

    For incremental decompression, use a BZ2Decompressor object instead.
    'b'Compressed data ended before the end-of-stream marker was reached'u'Compressed data ended before the end-of-stream marker was reached'u'Python.Python39.lib.bz2'u'Python39.lib.bz2'u'lib.bz2'cache_control_propertyemptyReturn a new property object for a cache header. Useful if you
    want to add support for a cache extension in a subclass.

    .. versionchanged:: 2.0
        Renamed from ``cache_property``.
    _get_cache_value_set_cache_value_del_cache_valueaccessor for _CacheControlSubclass of a dict that stores values for a Cache-Control header.  It
    has accessors for all the cache-control directives specified in RFC 2616.
    The class does not differentiate between request and response directives.

    Because the cache-control directives in the HTTP header use dashes the
    python descriptors use underscores for that.

    To get a header of the :class:`CacheControl` object again you can convert
    the object into a string or call the :meth:`to_header` method.  If you plan
    to subclass it and add your own items have a look at the sourcecode for
    that class.

    .. versionchanged:: 2.1.0
        Setting int properties such as ``max_age`` will convert the
        value to an int.

    .. versionchanged:: 0.4

       Setting `no_cache` or `private` to boolean `True` will set the implicit
       none-value which is ``*``:

       >>> cc = ResponseCacheControl()
       >>> cc.no_cache = True
       >>> cc
       <ResponseCacheControl 'no-cache'>
       >>> cc.no_cache
       '*'
       >>> cc.no_cache = None
       >>> cc
       <ResponseCacheControl ''>

       In versions before 0.5 the behavior documented here affected the now
       no longer existing `CacheControl` class.
    no-cacheno_cacheno-storeno_storemax-agemax_ageno-transformno_transformUsed internally by the accessor properties.Convert the stored values into a cache control header.kv_strcache_propertyA cache control for requests.  This is immutable and gives access
    to all the request-relevant cache control headers.

    To get a header of the :class:`RequestCacheControl` object again you can
    convert the object into a string or call the :meth:`to_header` method.  If
    you plan to subclass it and add your own items have a look at the sourcecode
    for that class.

    .. versionchanged:: 2.1.0
        Setting int properties such as ``max_age`` will convert the
        value to an int.

    .. versionadded:: 0.5
       In previous versions a `CacheControl` class existed that was used
       both for request and response.
    max-stalemax_stalemin-freshmin_freshonly-if-cachedonly_if_cachedA cache control for responses.  Unlike :class:`RequestCacheControl`
    this is mutable and gives access to response-relevant cache control
    headers.

    To get a header of the :class:`ResponseCacheControl` object again you can
    convert the object into a string or call the :meth:`to_header` method.  If
    you plan to subclass it and add your own items have a look at the sourcecode
    for that class.

    .. versionchanged:: 2.1.1
        ``s_maxage`` converts the value to an int.

    .. versionchanged:: 2.1.0
        Setting int properties such as ``max_age`` will convert the
        value to an int.

    .. versionadded:: 0.5
       In previous versions a `CacheControl` class existed that was used
       both for request and response.
    publicprivatemust-revalidatemust_revalidateproxy-revalidateproxy_revalidates-maxages_maxageimmutable# circular dependenciesb'Return a new property object for a cache header. Useful if you
    want to add support for a cache extension in a subclass.

    .. versionchanged:: 2.0
        Renamed from ``cache_property``.
    'u'Return a new property object for a cache header. Useful if you
    want to add support for a cache extension in a subclass.

    .. versionchanged:: 2.0
        Renamed from ``cache_property``.
    'b'accessor for 'u'accessor for 'b'Subclass of a dict that stores values for a Cache-Control header.  It
    has accessors for all the cache-control directives specified in RFC 2616.
    The class does not differentiate between request and response directives.

    Because the cache-control directives in the HTTP header use dashes the
    python descriptors use underscores for that.

    To get a header of the :class:`CacheControl` object again you can convert
    the object into a string or call the :meth:`to_header` method.  If you plan
    to subclass it and add your own items have a look at the sourcecode for
    that class.

    .. versionchanged:: 2.1.0
        Setting int properties such as ``max_age`` will convert the
        value to an int.

    .. versionchanged:: 0.4

       Setting `no_cache` or `private` to boolean `True` will set the implicit
       none-value which is ``*``:

       >>> cc = ResponseCacheControl()
       >>> cc.no_cache = True
       >>> cc
       <ResponseCacheControl 'no-cache'>
       >>> cc.no_cache
       '*'
       >>> cc.no_cache = None
       >>> cc
       <ResponseCacheControl ''>

       In versions before 0.5 the behavior documented here affected the now
       no longer existing `CacheControl` class.
    'u'Subclass of a dict that stores values for a Cache-Control header.  It
    has accessors for all the cache-control directives specified in RFC 2616.
    The class does not differentiate between request and response directives.

    Because the cache-control directives in the HTTP header use dashes the
    python descriptors use underscores for that.

    To get a header of the :class:`CacheControl` object again you can convert
    the object into a string or call the :meth:`to_header` method.  If you plan
    to subclass it and add your own items have a look at the sourcecode for
    that class.

    .. versionchanged:: 2.1.0
        Setting int properties such as ``max_age`` will convert the
        value to an int.

    .. versionchanged:: 0.4

       Setting `no_cache` or `private` to boolean `True` will set the implicit
       none-value which is ``*``:

       >>> cc = ResponseCacheControl()
       >>> cc.no_cache = True
       >>> cc
       <ResponseCacheControl 'no-cache'>
       >>> cc.no_cache
       '*'
       >>> cc.no_cache = None
       >>> cc
       <ResponseCacheControl ''>

       In versions before 0.5 the behavior documented here affected the now
       no longer existing `CacheControl` class.
    'b'no-cache'u'no-cache'b'no-store'u'no-store'b'max-age'u'max-age'b'no-transform'u'no-transform'b'Used internally by the accessor properties.'u'Used internally by the accessor properties.'b'Convert the stored values into a cache control header.'u'Convert the stored values into a cache control header.'b'A cache control for requests.  This is immutable and gives access
    to all the request-relevant cache control headers.

    To get a header of the :class:`RequestCacheControl` object again you can
    convert the object into a string or call the :meth:`to_header` method.  If
    you plan to subclass it and add your own items have a look at the sourcecode
    for that class.

    .. versionchanged:: 2.1.0
        Setting int properties such as ``max_age`` will convert the
        value to an int.

    .. versionadded:: 0.5
       In previous versions a `CacheControl` class existed that was used
       both for request and response.
    'u'A cache control for requests.  This is immutable and gives access
    to all the request-relevant cache control headers.

    To get a header of the :class:`RequestCacheControl` object again you can
    convert the object into a string or call the :meth:`to_header` method.  If
    you plan to subclass it and add your own items have a look at the sourcecode
    for that class.

    .. versionchanged:: 2.1.0
        Setting int properties such as ``max_age`` will convert the
        value to an int.

    .. versionadded:: 0.5
       In previous versions a `CacheControl` class existed that was used
       both for request and response.
    'b'max-stale'u'max-stale'b'min-fresh'u'min-fresh'b'only-if-cached'u'only-if-cached'b'A cache control for responses.  Unlike :class:`RequestCacheControl`
    this is mutable and gives access to response-relevant cache control
    headers.

    To get a header of the :class:`ResponseCacheControl` object again you can
    convert the object into a string or call the :meth:`to_header` method.  If
    you plan to subclass it and add your own items have a look at the sourcecode
    for that class.

    .. versionchanged:: 2.1.1
        ``s_maxage`` converts the value to an int.

    .. versionchanged:: 2.1.0
        Setting int properties such as ``max_age`` will convert the
        value to an int.

    .. versionadded:: 0.5
       In previous versions a `CacheControl` class existed that was used
       both for request and response.
    'u'A cache control for responses.  Unlike :class:`RequestCacheControl`
    this is mutable and gives access to response-relevant cache control
    headers.

    To get a header of the :class:`ResponseCacheControl` object again you can
    convert the object into a string or call the :meth:`to_header` method.  If
    you plan to subclass it and add your own items have a look at the sourcecode
    for that class.

    .. versionchanged:: 2.1.1
        ``s_maxage`` converts the value to an int.

    .. versionchanged:: 2.1.0
        Setting int properties such as ``max_age`` will convert the
        value to an int.

    .. versionadded:: 0.5
       In previous versions a `CacheControl` class existed that was used
       both for request and response.
    'b'public'u'public'b'private'u'private'b'must-revalidate'u'must-revalidate'b'proxy-revalidate'u'proxy-revalidate'b's-maxage'u's-maxage'b'immutable'u'immutable'u'werkzeug.datastructures.cache_control'u'datastructures.cache_control'u'cache_control'Calendar printing functions

Note when comparing these calendars to the ones printed by cal(1): By
default, these calendars have Monday as the first day of the week, and
Sunday as the last (the European convention). Use setfirstweekday() to
set the first day of the week (0=Monday, 6=Sunday).IllegalMonthErrorIllegalWeekdayErrorsetfirstweekdayfirstweekdayisleapleapdaysmonthrangemonthcalendarprmonthprcalmonth_namemonth_abbrday_nameday_abbrCalendarTextCalendarHTMLCalendarLocaleTextCalendarLocaleHTMLCalendarweekheaderbad month number %r; must be 1-12bad weekday number %r; must be 0 (Monday) to 6 (Sunday)JanuaryFebruarymdays_localized_month2001_monthsfuncs_localized_day_days%a%BMONDAYTUESDAYWEDNESDAYTHURSDAYFRIDAYSATURDAYSUNDAYReturn True for leap years, False for non-leap years.Return number of leap years in range [y1, y2).
       Assume y1 <= y2.Return weekday (0-6 ~ Mon-Sun) for year, month (1-12), day (1-31).Return weekday (0-6 ~ Mon-Sun) and number of days (28-31) for
       year, month.day1ndays_monthlen_prevmonth_nextmonth
    Base calendar class. This class doesn't do any formatting. It simply
    provides data to subclasses.
    getfirstweekday_firstweekdayiterweekdays
        Return an iterator for one week of weekday numbers starting with the
        configured first one.
        itermonthdates
        Return an iterator for one month. The iterator will yield datetime.date
        values and will always iterate through complete weeks, so it will yield
        dates outside the specified month.
        itermonthdays3itermonthdays
        Like itermonthdates(), but will yield day numbers. For days outside
        the specified month the day number is 0.
        days_beforedays_afteritermonthdays2
        Like itermonthdates(), but will yield (day number, weekday number)
        tuples. For days outside the specified month the day number is 0.
        
        Like itermonthdates(), but will yield (year, month, day) tuples.  Can be
        used for dates outside of datetime.date range.
        itermonthdays4
        Like itermonthdates(), but will yield (year, month, day, day_of_week) tuples.
        Can be used for dates outside of datetime.date range.
        monthdatescalendar
        Return a matrix (list of lists) representing a month's calendar.
        Each row represents a week; week entries are datetime.date values.
        datesmonthdays2calendar
        Return a matrix representing a month's calendar.
        Each row represents a week; week entries are
        (day number, weekday number) tuples. Day numbers outside this month
        are zero.
        monthdayscalendar
        Return a matrix representing a month's calendar.
        Each row represents a week; days outside this month are zero.
        yeardatescalendar
        Return the data for the specified year ready for formatting. The return
        value is a list of month rows. Each month row contains up to width months.
        Each month contains between 4 and 6 weeks and each week contains 1-7
        days. Days are datetime.date objects.
        monthsyeardays2calendar
        Return the data for the specified year ready for formatting (similar to
        yeardatescalendar()). Entries in the week lists are
        (day number, weekday number) tuples. Day numbers outside this month are
        zero.
        yeardayscalendar
        Return the data for the specified year ready for formatting (similar to
        yeardatescalendar()). Entries in the week lists are day numbers.
        Day numbers outside this month are zero.
        
    Subclass of Calendar that outputs a calendar as a simple plain text
    similar to the UNIX program cal.
    prweektheweek
        Print a single week (no newline).
        formatweekformatday
        Returns a formatted day.
        %2i
        Returns a single week in a string (no newline).
        wdformatweekday
        Returns a formatted week day name.
        formatweekheader
        Return a header for a week.
        formatmonthnametheyearthemonthwithyear
        Return a formatted month name.
        %s %r
        Print a month's calendar.
        formatmonth
        Return a month's calendar string (multi-line).
        weekformatyear
        Returns a year's calendar as a multi-line string.
        colwidthformatstringcalweekspryearPrint a year's calendar.
    This calendar returns complete HTML pages.
    cssclassescssclasses_weekday_headnodaycssclass_nodaycssclass_month_headcssclass_monthcssclass_year_headcssclass_year
        Return a day as a table cell.
        <td class="%s">&nbsp;</td><td class="%s">%d</td>
        Return a complete week as a table row.
        <tr>%s</tr>
        Return a weekday name as a table header.
        <th class="%s">%s</th>
        Return a header for a week as a table row.
        
        Return a month name as a table row.
        <tr><th colspan="7" class="%s">%s</th></tr>
        Return a formatted month as a table.
        <table border="0" cellpadding="0" cellspacing="0" class="%s"></table>
        Return a formatted year as a table of tables.
        <tr><th colspan="%d" class="%s">%s</th></tr><tr><td></td></tr>formatyearpagecalendar.csscss
        Return a formatted year as a complete HTML page.
        <?xml version="1.0" encoding="%s"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=%s" />
<link rel="stylesheet" type="text/css" href="%s" />
<title>Calendar for %d</title>
</head>
<body>
</body>
</html>
different_localegetlocaleoldlocale
    This class can be passed a locale name in the constructor and will return
    month and weekday names in the specified locale. If this locale includes
    an encoding all strings containing month and weekday names will be returned
    as unicode.
    <tr><th colspan="7" class="month">%s</th></tr>_colwidth_spacingcolsspacingPrints multi-column formatting for year calendarsReturns a string formatted from n strings, centered within n columns.1970EPOCH_EPOCH_ORDUnrelated but handy function to calculate Unix timestamp from GMT.text only argumentstextgrouphtml only argumentshtmlgroup--widthwidth of date column (default 2)-l--linesnumber of lines for each week (default 1)-s--spacingspacing between months (default 6)--monthsmonths per row (default 3)--cssCSS to use for page-L--localelocale to be used from month and weekday names--encodingencoding to use for output--typeoutput type (text or html)year number (1-9999)month number (1-12, text only)if --locale is specified --encoding is requiredoptdictincorrect number of arguments# Exception raised for bad input (with string parameter for details)# Exceptions raised for bad input# Constants for months referenced later# Number of days per month (except for February in leap years)# This module used to have hard-coded lists of day and month names, as# English strings.  The classes following emulate a read-only version of# that, but supply localized names.  Note that the values are computed# fresh on each call, in case the user changes locale between calls.# January 1, 2001, was a Monday.# Full and abbreviated names of weekdays# Full and abbreviated names of months (1-based arrays!!!)# Constants for weekdays# 0 = Monday, 6 = Sunday# right-align single-digit days# months in this row# max number of weeks for this row# CSS classes for the day <td>s# CSS classes for the day <th>s# CSS class for the days before and after current month# CSS class for the month's head# CSS class for the month# CSS class for the year's table head# CSS class for the whole year table# day outside month# Support for old module level interface# Spacing of month columns for multi-column year calendar# Amount printed by prweek()# Number of spaces between columnsb'Calendar printing functions

Note when comparing these calendars to the ones printed by cal(1): By
default, these calendars have Monday as the first day of the week, and
Sunday as the last (the European convention). Use setfirstweekday() to
set the first day of the week (0=Monday, 6=Sunday).'u'Calendar printing functions

Note when comparing these calendars to the ones printed by cal(1): By
default, these calendars have Monday as the first day of the week, and
Sunday as the last (the European convention). Use setfirstweekday() to
set the first day of the week (0=Monday, 6=Sunday).'b'IllegalMonthError'u'IllegalMonthError'b'IllegalWeekdayError'u'IllegalWeekdayError'b'setfirstweekday'u'setfirstweekday'b'firstweekday'u'firstweekday'b'isleap'u'isleap'b'leapdays'u'leapdays'b'weekday'u'weekday'b'monthrange'u'monthrange'b'monthcalendar'u'monthcalendar'b'prmonth'u'prmonth'b'month'u'month'b'prcal'u'prcal'b'calendar'u'calendar'b'timegm'u'timegm'b'month_name'u'month_name'b'month_abbr'u'month_abbr'b'day_name'u'day_name'b'day_abbr'u'day_abbr'b'Calendar'u'Calendar'b'TextCalendar'u'TextCalendar'b'HTMLCalendar'u'HTMLCalendar'b'LocaleTextCalendar'u'LocaleTextCalendar'b'LocaleHTMLCalendar'u'LocaleHTMLCalendar'b'weekheader'u'weekheader'b'bad month number %r; must be 1-12'u'bad month number %r; must be 1-12'b'bad weekday number %r; must be 0 (Monday) to 6 (Sunday)'u'bad weekday number %r; must be 0 (Monday) to 6 (Sunday)'b'%a'u'%a'b'%B'u'%B'b'Return True for leap years, False for non-leap years.'u'Return True for leap years, False for non-leap years.'b'Return number of leap years in range [y1, y2).
       Assume y1 <= y2.'u'Return number of leap years in range [y1, y2).
       Assume y1 <= y2.'b'Return weekday (0-6 ~ Mon-Sun) for year, month (1-12), day (1-31).'u'Return weekday (0-6 ~ Mon-Sun) for year, month (1-12), day (1-31).'b'Return weekday (0-6 ~ Mon-Sun) and number of days (28-31) for
       year, month.'u'Return weekday (0-6 ~ Mon-Sun) and number of days (28-31) for
       year, month.'b'
    Base calendar class. This class doesn't do any formatting. It simply
    provides data to subclasses.
    'u'
    Base calendar class. This class doesn't do any formatting. It simply
    provides data to subclasses.
    'b'
        Return an iterator for one week of weekday numbers starting with the
        configured first one.
        'u'
        Return an iterator for one week of weekday numbers starting with the
        configured first one.
        'b'
        Return an iterator for one month. The iterator will yield datetime.date
        values and will always iterate through complete weeks, so it will yield
        dates outside the specified month.
        'u'
        Return an iterator for one month. The iterator will yield datetime.date
        values and will always iterate through complete weeks, so it will yield
        dates outside the specified month.
        'b'
        Like itermonthdates(), but will yield day numbers. For days outside
        the specified month the day number is 0.
        'u'
        Like itermonthdates(), but will yield day numbers. For days outside
        the specified month the day number is 0.
        'b'
        Like itermonthdates(), but will yield (day number, weekday number)
        tuples. For days outside the specified month the day number is 0.
        'u'
        Like itermonthdates(), but will yield (day number, weekday number)
        tuples. For days outside the specified month the day number is 0.
        'b'
        Like itermonthdates(), but will yield (year, month, day) tuples.  Can be
        used for dates outside of datetime.date range.
        'u'
        Like itermonthdates(), but will yield (year, month, day) tuples.  Can be
        used for dates outside of datetime.date range.
        'b'
        Like itermonthdates(), but will yield (year, month, day, day_of_week) tuples.
        Can be used for dates outside of datetime.date range.
        'u'
        Like itermonthdates(), but will yield (year, month, day, day_of_week) tuples.
        Can be used for dates outside of datetime.date range.
        'b'
        Return a matrix (list of lists) representing a month's calendar.
        Each row represents a week; week entries are datetime.date values.
        'u'
        Return a matrix (list of lists) representing a month's calendar.
        Each row represents a week; week entries are datetime.date values.
        'b'
        Return a matrix representing a month's calendar.
        Each row represents a week; week entries are
        (day number, weekday number) tuples. Day numbers outside this month
        are zero.
        'u'
        Return a matrix representing a month's calendar.
        Each row represents a week; week entries are
        (day number, weekday number) tuples. Day numbers outside this month
        are zero.
        'b'
        Return a matrix representing a month's calendar.
        Each row represents a week; days outside this month are zero.
        'u'
        Return a matrix representing a month's calendar.
        Each row represents a week; days outside this month are zero.
        'b'
        Return the data for the specified year ready for formatting. The return
        value is a list of month rows. Each month row contains up to width months.
        Each month contains between 4 and 6 weeks and each week contains 1-7
        days. Days are datetime.date objects.
        'u'
        Return the data for the specified year ready for formatting. The return
        value is a list of month rows. Each month row contains up to width months.
        Each month contains between 4 and 6 weeks and each week contains 1-7
        days. Days are datetime.date objects.
        'b'
        Return the data for the specified year ready for formatting (similar to
        yeardatescalendar()). Entries in the week lists are
        (day number, weekday number) tuples. Day numbers outside this month are
        zero.
        'u'
        Return the data for the specified year ready for formatting (similar to
        yeardatescalendar()). Entries in the week lists are
        (day number, weekday number) tuples. Day numbers outside this month are
        zero.
        'b'
        Return the data for the specified year ready for formatting (similar to
        yeardatescalendar()). Entries in the week lists are day numbers.
        Day numbers outside this month are zero.
        'u'
        Return the data for the specified year ready for formatting (similar to
        yeardatescalendar()). Entries in the week lists are day numbers.
        Day numbers outside this month are zero.
        'b'
    Subclass of Calendar that outputs a calendar as a simple plain text
    similar to the UNIX program cal.
    'u'
    Subclass of Calendar that outputs a calendar as a simple plain text
    similar to the UNIX program cal.
    'b'
        Print a single week (no newline).
        'u'
        Print a single week (no newline).
        'b'
        Returns a formatted day.
        'u'
        Returns a formatted day.
        'b'%2i'u'%2i'b'
        Returns a single week in a string (no newline).
        'u'
        Returns a single week in a string (no newline).
        'b'
        Returns a formatted week day name.
        'u'
        Returns a formatted week day name.
        'b'
        Return a header for a week.
        'u'
        Return a header for a week.
        'b'
        Return a formatted month name.
        'u'
        Return a formatted month name.
        'b'%s %r'u'%s %r'b'
        Print a month's calendar.
        'u'
        Print a month's calendar.
        'b'
        Return a month's calendar string (multi-line).
        'u'
        Return a month's calendar string (multi-line).
        'b'
        Returns a year's calendar as a multi-line string.
        'u'
        Returns a year's calendar as a multi-line string.
        'b'Print a year's calendar.'u'Print a year's calendar.'b'
    This calendar returns complete HTML pages.
    'u'
    This calendar returns complete HTML pages.
    'b'noday'u'noday'b'year'u'year'b'
        Return a day as a table cell.
        'u'
        Return a day as a table cell.
        'b'<td class="%s">&nbsp;</td>'u'<td class="%s">&nbsp;</td>'b'<td class="%s">%d</td>'u'<td class="%s">%d</td>'b'
        Return a complete week as a table row.
        'u'
        Return a complete week as a table row.
        'b'<tr>%s</tr>'u'<tr>%s</tr>'b'
        Return a weekday name as a table header.
        'u'
        Return a weekday name as a table header.
        'b'<th class="%s">%s</th>'u'<th class="%s">%s</th>'b'
        Return a header for a week as a table row.
        'u'
        Return a header for a week as a table row.
        'b'
        Return a month name as a table row.
        'u'
        Return a month name as a table row.
        'b'<tr><th colspan="7" class="%s">%s</th></tr>'u'<tr><th colspan="7" class="%s">%s</th></tr>'b'
        Return a formatted month as a table.
        'u'
        Return a formatted month as a table.
        'b'<table border="0" cellpadding="0" cellspacing="0" class="%s">'u'<table border="0" cellpadding="0" cellspacing="0" class="%s">'b'</table>'u'</table>'b'
        Return a formatted year as a table of tables.
        'u'
        Return a formatted year as a table of tables.
        'b'<tr><th colspan="%d" class="%s">%s</th></tr>'u'<tr><th colspan="%d" class="%s">%s</th></tr>'b'<tr>'u'<tr>'b'<td>'u'<td>'b'</td>'u'</td>'b'</tr>'u'</tr>'b'calendar.css'u'calendar.css'b'
        Return a formatted year as a complete HTML page.
        'u'
        Return a formatted year as a complete HTML page.
        'b'<?xml version="1.0" encoding="%s"?>
'u'<?xml version="1.0" encoding="%s"?>
'b'<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
'u'<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
'b'<html>
'u'<html>
'b'<head>
'u'<head>
'b'<meta http-equiv="Content-Type" content="text/html; charset=%s" />
'u'<meta http-equiv="Content-Type" content="text/html; charset=%s" />
'b'<link rel="stylesheet" type="text/css" href="%s" />
'u'<link rel="stylesheet" type="text/css" href="%s" />
'b'<title>Calendar for %d</title>
'u'<title>Calendar for %d</title>
'b'</head>
'u'</head>
'b'<body>
'u'<body>
'b'</body>
'u'</body>
'b'</html>
'u'</html>
'b'
    This class can be passed a locale name in the constructor and will return
    month and weekday names in the specified locale. If this locale includes
    an encoding all strings containing month and weekday names will be returned
    as unicode.
    'u'
    This class can be passed a locale name in the constructor and will return
    month and weekday names in the specified locale. If this locale includes
    an encoding all strings containing month and weekday names will be returned
    as unicode.
    'b'<tr><th colspan="7" class="month">%s</th></tr>'u'<tr><th colspan="7" class="month">%s</th></tr>'b'Prints multi-column formatting for year calendars'u'Prints multi-column formatting for year calendars'b'Returns a string formatted from n strings, centered within n columns.'u'Returns a string formatted from n strings, centered within n columns.'b'Unrelated but handy function to calculate Unix timestamp from GMT.'u'Unrelated but handy function to calculate Unix timestamp from GMT.'b'text only arguments'u'text only arguments'b'html only arguments'u'html only arguments'b'--width'u'--width'b'width of date column (default 2)'u'width of date column (default 2)'b'-l'u'-l'b'--lines'u'--lines'b'number of lines for each week (default 1)'u'number of lines for each week (default 1)'b'-s'u'-s'b'--spacing'u'--spacing'b'spacing between months (default 6)'u'spacing between months (default 6)'b'--months'u'--months'b'months per row (default 3)'u'months per row (default 3)'b'--css'u'--css'b'CSS to use for page'u'CSS to use for page'b'-L'u'-L'b'--locale'u'--locale'b'locale to be used from month and weekday names'u'locale to be used from month and weekday names'b'--encoding'u'--encoding'b'encoding to use for output'u'encoding to use for output'b'--type'u'--type'b'output type (text or html)'u'output type (text or html)'b'year number (1-9999)'u'year number (1-9999)'b'month number (1-12, text only)'u'month number (1-12, text only)'b'if --locale is specified --encoding is required'u'if --locale is specified --encoding is required'b'incorrect number of arguments'u'incorrect number of arguments'u'Python.Python39.lib.calendar'u'Python39.lib.calendar'u'lib.calendar'Test case implementationdifflibpprintstrclasssafe_repr_count_diff_all_purpose_count_diff_hashable_common_shorten_repr_subtest_msg_sentinel
Diff is %s characters long. Set self.maxDiff to None to see it.'\nDiff is %s characters long. ''Set self.maxDiff to None to see it.'DIFF_OMITTED
    Raise this exception in a test to skip it.

    Usually you can use TestCase.skipTest() or one of the skipping decorators
    instead of raising this directly.
    _ShouldStop
    The test should stop.
    _UnexpectedSuccess
    The test was supposed to fail, but it didn't!
    _Outcomeexpecting_failureaddSubTestresult_supports_subtestssuccesstestPartExecutorisTestold_success_module_cleanupsSame as addCleanup, except the cleanup items are called even if
    setUpModule fails (unlike tearDownModule).doModuleCleanupsExecute all module cleanup functions. Normally called for you after
    tearDownModule.
    Unconditionally skip a test.
    test_itemskip_wrapper__unittest_skip____unittest_skip_why__
    Skip a test if the condition is true.
    
    Skip a test unless the condition is true.
    __unittest_expecting_failure___is_subtypebasetype_BaseTestCaseContext_raiseFailurestandardMsg_formatMessagefailureException_AssertRaisesBaseContextexpected_regexobj_name
        If args is empty, assertRaises/Warns is being used as a
        context manager, so check for a 'msg' kwarg and return self.
        If args is not empty, call a callable passing positional and keyword
        arguments.
        _base_type%s() arg 1 must be %s_base_type_str%r is an invalid keyword argument for this function'%r is an invalid keyword argument for ''this function'callable_obj_AssertRaisesContextA context manager used to implement TestCase.assertRaises* methods.an exception type or tuple of exception typesexc_name{} not raised by {}{} not raisedclear_frames"{}" does not match "{}"_AssertWarnsContextA context manager used to implement TestCase.assertWarns* methods.a warning type or tuple of warning typeswarnings_managerfirst_matching{} not triggered by {}{} not triggered_OrderedChainMapA class whose instances are single test cases.

    By default, the test code itself should be placed in a method named
    'runTest'.

    If the fixture may be used for many test cases, create as
    many test methods as are needed. When instantiating such a TestCase
    subclass, specify in the constructor arguments the name of the test method
    that the instance is to execute.

    Test authors should subclass TestCase for their own tests. Construction
    and deconstruction of the test's environment ('fixture') can be
    implemented by overriding the 'setUp' and 'tearDown' methods respectively.

    If it is necessary to override the __init__ method, the base class
    __init__ method must always be called. It is important that subclasses
    should not change the signature of their __init__ method, since instances
    of the classes are instantiated automatically by parts of the framework
    in order to be run.

    When subclassing TestCase, you can set these attributes:
    * failureException: determines which exception will be raised when
        the instance's assertion methods fail; test methods raising this
        exception will be deemed to have 'failed' rather than 'errored'.
    * longMessage: determines whether long messages (including repr of
        objects used in assert methods) will be printed on failure in *addition*
        to any explicit message passed.
    * maxDiff: sets the maximum length of a diff in failure messages
        by assert methods using difflib. It is looked up as an instance
        attribute so can be configured by individual tests if required.
    longMessage80maxDiff_diffThreshold_classSetupFailed_class_cleanupsCreate an instance of the class that will use the named test
           method when executed. Raises a ValueError if the instance does
           not have a method with the specified name.
        _testMethodName_outcomeNo test_testMethodDoctestMethodno such test method in %s: %s_cleanups_subtest_type_equality_funcsaddTypeEqualityFuncassertDictEqualassertListEqualassertTupleEqualassertSetEqualassertMultiLineEqualtypeobjAdd a type specific assertEqual style function to compare a type.

        This method is for use by TestCase subclasses that need to register
        their own type equality functions to provide nicer error messages.

        Args:
            typeobj: The data type to call this function on when both values
                    are of the same type in assertEqual().
            function: The callable taking two arguments and an optional
                    msg= argument that raises self.failureException with a
                    useful error message when the two arguments are not equal.
        Add a function, with arguments, to be called when the test is
        completed. Functions added are called on a LIFO basis and are
        called after tearDown on test failure or success.

        Cleanup items are called even if setUp fails (unlike tearDown).addClassCleanupSame as addCleanup, except the cleanup items are called even if
        setUpClass fails (unlike tearDownClass).Hook method for setting up the test fixture before exercising it.Hook method for deconstructing the test fixture after testing it.setUpClassHook method for setting up class fixture before running tests in the class.tearDownClassHook method for deconstructing the class fixture after running all tests in the class.countTestCasesdefaultTestResultshortDescriptionReturns a one-line description of the test, or None if no
        description has been provided.

        The default implementation of this method returns the first line of
        the specified test method's docstring.
        %s.%s%s (%s)<%s testMethod=%s>_addSkipaddSkipTestResult has no addSkip method, skips not reportedaddSuccesssubTestReturn a context manager that will return the enclosed block
        of code in a subtest identified by the optional message and
        keyword parameters.  A failure in the subtest marks the test
        case as failed but resumes execution at the end of the enclosed
        block, allowing further test code to be executed.
        params_map_SubTest_feedErrorsToResultaddFailureaddError_addExpectedFailureaddExpectedFailureTestResult has no addExpectedFailure method, reporting as passes_addUnexpectedSuccessaddUnexpectedSuccessTestResult has no addUnexpectedSuccess method, reporting as failurestartTestRunstopTestRunstartTestskip_whyoutcomedoCleanupsstopTestExecute all cleanup functions. Normally called for you after
        tearDown.doClassCleanupsExecute all class cleanup functions. Normally called for you after
        tearDownClass.tearDown_exceptionsRun the test without collecting errors in a TestResultskipTestSkip this test.failFail immediately, with the given message.assertFalseCheck that the expression is false.%s is not falseCheck that the expression is true.%s is not trueHonour the longMessage attribute when generating failure messages.
        If longMessage is False this means:
        * Use only an explicit message if it is provided
        * Otherwise use the standard message for the assert

        If longMessage is True:
        * Use the standard message
        * If an explicit message is provided, plus ' : ' and the explicit message
        %s : %sexpected_exceptionFail unless an exception of class expected_exception is raised
           by the callable when invoked with specified positional and
           keyword arguments. If a different type of exception is
           raised, it will not be caught, and the test case will be
           deemed to have suffered an error, exactly as for an
           unexpected exception.

           If called with the callable and arguments omitted, will return a
           context object used like this::

                with self.assertRaises(SomeException):
                    do_something()

           An optional keyword argument 'msg' can be provided when assertRaises
           is used as a context object.

           The context manager keeps a reference to the exception as
           the 'exception' attribute. This allows you to inspect the
           exception after the assertion::

               with self.assertRaises(SomeException) as cm:
                   do_something()
               the_exception = cm.exception
               self.assertEqual(the_exception.error_code, 3)
        assertWarnsexpected_warningFail unless a warning of class warnClass is triggered
           by the callable when invoked with specified positional and
           keyword arguments.  If a different type of warning is
           triggered, it will not be handled: depending on the other
           warning filtering rules in effect, it might be silenced, printed
           out, or raised as an exception.

           If called with the callable and arguments omitted, will return a
           context object used like this::

                with self.assertWarns(SomeWarning):
                    do_something()

           An optional keyword argument 'msg' can be provided when assertWarns
           is used as a context object.

           The context manager keeps a reference to the first matching
           warning as the 'warning' attribute; similarly, the 'filename'
           and 'lineno' attributes give you information about the line
           of Python code from which the warning was triggered.
           This allows you to inspect the warning after the assertion::

               with self.assertWarns(SomeWarning) as cm:
                   do_something()
               the_warning = cm.warning
               self.assertEqual(the_warning.some_attribute, 147)
        assertLogsFail unless a log message of level *level* or higher is emitted
        on *logger_name* or its children.  If omitted, *level* defaults to
        INFO and *logger* defaults to the root logger.

        This method must be used as a context manager, and will yield
        a recording object with two attributes: `output` and `records`.
        At the end of the context manager, the `output` attribute will
        be a list of the matching formatted log messages and the
        `records` attribute will be a list of the corresponding LogRecord
        objects.

        Example::

            with self.assertLogs('foo', level='INFO') as cm:
                logging.getLogger('foo').info('first message')
                logging.getLogger('foo.bar').error('second message')
            self.assertEqual(cm.output, ['INFO:foo:first message',
                                         'ERROR:foo.bar:second message'])
        _AssertLogsContext_getAssertEqualityFuncGet a detailed comparison function for the types of the two args.

        Returns: A callable accepting (first, second, msg=None) that will
        raise a failure exception if first != second with a useful human
        readable error message for those types.
        asserter_baseAssertEqualThe default assertEqual implementation, not type specific.%s != %sFail if the two objects are unequal as determined by the '=='
           operator.
        assertion_funcassertNotEqualFail if the two objects are equal as determined by the '!='
           operator.
        %s == %sassertAlmostEqualFail if the two objects are unequal as determined by their
           difference rounded to the given number of decimal places
           (default 7) and comparing to zero, or by comparing that the
           difference between the two objects is more than the given
           delta.

           Note that decimal places (from zero) are usually not the same
           as significant digits (measured from the most significant digit).

           If the two objects compare equal then they will automatically
           compare almost equal.
        specify delta or places not bothdiff%s != %s within %s delta (%s difference)%s != %s within %r places (%s difference)assertNotAlmostEqualFail if the two objects are equal as determined by their
           difference rounded to the given number of decimal places
           (default 7) and comparing to zero, or by comparing that the
           difference between the two objects is less than the given delta.

           Note that decimal places (from zero) are usually not the same
           as significant digits (measured from the most significant digit).

           Objects that are equal automatically fail.
        %s == %s within %s delta (%s difference)%s == %s within %r placesassertSequenceEqualseq1seq2seq_typeAn equality assertion for ordered sequences (like lists and tuples).

        For the purposes of this function, a valid ordered sequence type is one
        which can be indexed, has a length, and has an equality operator.

        Args:
            seq1: The first sequence to compare.
            seq2: The second sequence to compare.
            seq_type: The expected datatype of the sequences, or None if no
                    datatype should be enforced.
            msg: Optional message to use on failure instead of a list of
                    differences.
        seq_type_nameFirst sequence is not a %s: %sSecond sequence is not a %s: %sdifferinglen1First %s has no length.    Non-sequence?len2Second %s has no length.    Non-sequence?%ss differ: %s != %s
item1
Unable to index element %d of first %s
item2
Unable to index element %d of second %s

First differing element %d:
%s
%s

First %s contains %d additional elements.
'\nFirst %s contains %d additional ''elements.\n'First extra element %d:
%s
Unable to index element %d of first %s
'Unable to index element %d ''of first %s\n'
Second %s contains %d additional elements.
'\nSecond %s contains %d additional 'Unable to index element %d of second %s
'of second %s\n'ndiffpformatdiffMsg_truncateMessagemax_difflist1list2A list-specific equality assertion.

        Args:
            list1: The first list to compare.
            list2: The second list to compare.
            msg: Optional message to use on failure instead of a list of
                    differences.

        tuple1tuple2A tuple-specific equality assertion.

        Args:
            tuple1: The first tuple to compare.
            tuple2: The second tuple to compare.
            msg: Optional message to use on failure instead of a list of
                    differences.
        set1set2A set-specific equality assertion.

        Args:
            set1: The first set to compare.
            set2: The second set to compare.
            msg: Optional message to use on failure instead of a list of
                    differences.

        assertSetEqual uses ducktyping to support different types of sets, and
        is optimized for sets specifically (parameters must support a
        difference method).
        difference1invalid type when attempting set difference: %sfirst argument does not support set difference: %sdifference2second argument does not support set difference: %sItems in the first set but not the second:Items in the second set but not the first:assertInJust like self.assertTrue(a in b), but with a nicer default message.%s not found in %sassertNotInJust like self.assertTrue(a not in b), but with a nicer default message.%s unexpectedly found in %sassertIsexpr1expr2Just like self.assertTrue(a is b), but with a nicer default message.%s is not %sassertIsNotJust like self.assertTrue(a is not b), but with a nicer default message.unexpectedly identical: %sd1assertIsInstanceFirst argument is not a dictionarySecond argument is not a dictionaryassertDictContainsSubsetsubsetdictionaryChecks whether dictionary is a superset of subset.assertDictContainsSubset is deprecatedmismatched%s, expected: %s, actual: %sMissing: %sMismatched values: %sAsserts that two iterables have the same elements, the same number of
        times, without regard to order.

            self.assertEqual(Counter(list(first)),
                             Counter(list(second)))

         Example:
            - [0, 1, 1] and [1, 0, 1] compare equal.
            - [0, 0, 1] and [0, 1] compare unequal.

        first_seqsecond_seqdifferencesElement counts were not equal:
First has %d, Second has %d:  %rAssert that two multi-line strings are equal.First argument is not a stringSecond argument is not a stringfirstlinessecondlinesassertLessJust like self.assertTrue(a < b), but with a nicer default message.%s not less than %sassertLessEqualJust like self.assertTrue(a <= b), but with a nicer default message.%s not less than or equal to %sassertGreaterJust like self.assertTrue(a > b), but with a nicer default message.%s not greater than %sassertGreaterEqualJust like self.assertTrue(a >= b), but with a nicer default message.%s not greater than or equal to %sassertIsNoneSame as self.assertTrue(obj is None), with a nicer default message.%s is not NoneIncluded for symmetry with assertIsNone.unexpectedly NoneSame as self.assertTrue(isinstance(obj, cls)), with a nicer
        default message.%s is not an instance of %rassertNotIsInstanceIncluded for symmetry with assertIsInstance.%s is an instance of %rAsserts that the message in a raised exception matches a regex.

        Args:
            expected_exception: Exception class expected to be raised.
            expected_regex: Regex (re.Pattern object or string) expected
                    to be found in error message.
            args: Function to be called and extra positional args.
            kwargs: Extra kwargs.
            msg: Optional message used in case of failure. Can only be used
                    when assertRaisesRegex is used as a context manager.
        assertWarnsRegexAsserts that the message in a triggered warning matches a regexp.
        Basic functioning is similar to assertWarns() with the addition
        that only warnings whose messages also match the regular expression
        are considered successful matches.

        Args:
            expected_warning: Warning class expected to be triggered.
            expected_regex: Regex (re.Pattern object or string) expected
                    to be found in error message.
            args: Function to be called and extra positional args.
            kwargs: Extra kwargs.
            msg: Optional message used in case of failure. Can only be used
                    when assertWarnsRegex is used as a context manager.
        Fail the test unless the text matches the regular expression.expected_regex must not be empty.Regex didn't match: %r not found in %rassertNotRegexunexpected_regexFail the test if the text matches the regular expression.Regex matched: %r matches %r in %r_deprecateoriginal_funcdeprecated_funcPlease use {0} instead.failUnlessEqualassertEqualsfailIfEqualassertNotEqualsfailUnlessAlmostEqualassertAlmostEqualsfailIfAlmostEqualassertNotAlmostEqualsfailUnlessassert_failUnlessRaisesfailIfassertRaisesRegexpassertRegexpMatchesassertNotRegexpMatchesA test case that wraps a test function.

    This is useful for slipping pre-existing test functions into the
    unittest framework. Optionally, set-up and tidy-up functions can be
    supplied. As with TestCase, the tidy-up ('tearDown') function will
    always be called if the set-up ('setUp') function ran successfully.
    testFunc_setUpFunc_tearDownFunc_testFunc_description<%s tec=%s>_messagesubtests cannot be run directly_subDescription[{}]params_desc({})(<subtest>){} {}Returns a one-line description of the subtest, or None if no
        description has been provided.
        # explicitly break a reference cycle:# exc_info -> frame -> exc_info# Swallows all but first exception. If a multi-exception handler# gets written we should use that here instead.# bpo-23890: manually break a reference cycle# let unexpected exceptions pass through# store exception, without traceback, for later retrieval# The __warningregistry__'s need to be in a pristine state for tests# to work properly.# store warning for later retrieval# Now we simply try to choose a helpful failure message# If a string is longer than _diffThreshold, use normal comparison instead# of difflib.  See #11763.# Attribute used by TestSuite for classSetUp# we allow instantiation with no explicit method name# but not an *incorrect* or missing method name# Map types to custom assertEqual functions that will compare# instances of said type in more detail to generate a more useful# error message.# If the test is expecting a failure, we really want to# stop now and register the expected failure.# We need to pass an actual exception and traceback to addFailure,# otherwise the legacy result can choke.# If the class or method was skipped.# explicitly break reference cycles:# outcome.errors -> frame -> outcome -> outcome.errors# outcome.expectedFailure -> frame -> outcome -> outcome.expectedFailure# clear the outcome, no more needed# return this for backwards compatibility# even though we no longer use it internally# don't switch to '{}' formatting in Python 2.X# it changes the way unicode input is handled# Lazy import to avoid importing logging if it is not needed.# NOTE(gregory.p.smith): I considered isinstance(first, type(second))# and vice versa.  I opted for the conservative approach in case# subclasses are not intended to be compared in detail to their super# class instances using a type equality func.  This means testing# subtypes won't automagically use the detailed comparison.  Callers# should use their type specific assertSpamEqual method to compare# subclasses if the detailed comparison is desired and appropriate.# See the discussion in http://bugs.python.org/issue2578.# shortcut# The sequences are the same, but have differing types.# Handle case with unhashable elements# don't use difflib if the strings are too long# _formatMessage ensures the longMessage option is respected# see #9424b'Test case implementation'u'Test case implementation'b'
Diff is %s characters long. Set self.maxDiff to None to see it.'u'
Diff is %s characters long. Set self.maxDiff to None to see it.'b'
    Raise this exception in a test to skip it.

    Usually you can use TestCase.skipTest() or one of the skipping decorators
    instead of raising this directly.
    'u'
    Raise this exception in a test to skip it.

    Usually you can use TestCase.skipTest() or one of the skipping decorators
    instead of raising this directly.
    'b'
    The test should stop.
    'u'
    The test should stop.
    'b'
    The test was supposed to fail, but it didn't!
    'u'
    The test was supposed to fail, but it didn't!
    'b'addSubTest'u'addSubTest'b'Same as addCleanup, except the cleanup items are called even if
    setUpModule fails (unlike tearDownModule).'u'Same as addCleanup, except the cleanup items are called even if
    setUpModule fails (unlike tearDownModule).'b'Execute all module cleanup functions. Normally called for you after
    tearDownModule.'u'Execute all module cleanup functions. Normally called for you after
    tearDownModule.'b'
    Unconditionally skip a test.
    'u'
    Unconditionally skip a test.
    'b'
    Skip a test if the condition is true.
    'u'
    Skip a test if the condition is true.
    'b'
    Skip a test unless the condition is true.
    'u'
    Skip a test unless the condition is true.
    'b'
        If args is empty, assertRaises/Warns is being used as a
        context manager, so check for a 'msg' kwarg and return self.
        If args is not empty, call a callable passing positional and keyword
        arguments.
        'u'
        If args is empty, assertRaises/Warns is being used as a
        context manager, so check for a 'msg' kwarg and return self.
        If args is not empty, call a callable passing positional and keyword
        arguments.
        'b'%s() arg 1 must be %s'u'%s() arg 1 must be %s'b'%r is an invalid keyword argument for this function'u'%r is an invalid keyword argument for this function'b'A context manager used to implement TestCase.assertRaises* methods.'u'A context manager used to implement TestCase.assertRaises* methods.'b'an exception type or tuple of exception types'u'an exception type or tuple of exception types'b'{} not raised by {}'u'{} not raised by {}'b'{} not raised'u'{} not raised'b'"{}" does not match "{}"'u'"{}" does not match "{}"'b'A context manager used to implement TestCase.assertWarns* methods.'u'A context manager used to implement TestCase.assertWarns* methods.'b'a warning type or tuple of warning types'u'a warning type or tuple of warning types'b'{} not triggered by {}'u'{} not triggered by {}'b'{} not triggered'u'{} not triggered'b'A class whose instances are single test cases.

    By default, the test code itself should be placed in a method named
    'runTest'.

    If the fixture may be used for many test cases, create as
    many test methods as are needed. When instantiating such a TestCase
    subclass, specify in the constructor arguments the name of the test method
    that the instance is to execute.

    Test authors should subclass TestCase for their own tests. Construction
    and deconstruction of the test's environment ('fixture') can be
    implemented by overriding the 'setUp' and 'tearDown' methods respectively.

    If it is necessary to override the __init__ method, the base class
    __init__ method must always be called. It is important that subclasses
    should not change the signature of their __init__ method, since instances
    of the classes are instantiated automatically by parts of the framework
    in order to be run.

    When subclassing TestCase, you can set these attributes:
    * failureException: determines which exception will be raised when
        the instance's assertion methods fail; test methods raising this
        exception will be deemed to have 'failed' rather than 'errored'.
    * longMessage: determines whether long messages (including repr of
        objects used in assert methods) will be printed on failure in *addition*
        to any explicit message passed.
    * maxDiff: sets the maximum length of a diff in failure messages
        by assert methods using difflib. It is looked up as an instance
        attribute so can be configured by individual tests if required.
    'u'A class whose instances are single test cases.

    By default, the test code itself should be placed in a method named
    'runTest'.

    If the fixture may be used for many test cases, create as
    many test methods as are needed. When instantiating such a TestCase
    subclass, specify in the constructor arguments the name of the test method
    that the instance is to execute.

    Test authors should subclass TestCase for their own tests. Construction
    and deconstruction of the test's environment ('fixture') can be
    implemented by overriding the 'setUp' and 'tearDown' methods respectively.

    If it is necessary to override the __init__ method, the base class
    __init__ method must always be called. It is important that subclasses
    should not change the signature of their __init__ method, since instances
    of the classes are instantiated automatically by parts of the framework
    in order to be run.

    When subclassing TestCase, you can set these attributes:
    * failureException: determines which exception will be raised when
        the instance's assertion methods fail; test methods raising this
        exception will be deemed to have 'failed' rather than 'errored'.
    * longMessage: determines whether long messages (including repr of
        objects used in assert methods) will be printed on failure in *addition*
        to any explicit message passed.
    * maxDiff: sets the maximum length of a diff in failure messages
        by assert methods using difflib. It is looked up as an instance
        attribute so can be configured by individual tests if required.
    'b'Create an instance of the class that will use the named test
           method when executed. Raises a ValueError if the instance does
           not have a method with the specified name.
        'u'Create an instance of the class that will use the named test
           method when executed. Raises a ValueError if the instance does
           not have a method with the specified name.
        'b'No test'u'No test'b'no such test method in %s: %s'u'no such test method in %s: %s'b'assertDictEqual'u'assertDictEqual'b'assertListEqual'u'assertListEqual'b'assertTupleEqual'u'assertTupleEqual'b'assertSetEqual'u'assertSetEqual'b'assertMultiLineEqual'u'assertMultiLineEqual'b'Add a type specific assertEqual style function to compare a type.

        This method is for use by TestCase subclasses that need to register
        their own type equality functions to provide nicer error messages.

        Args:
            typeobj: The data type to call this function on when both values
                    are of the same type in assertEqual().
            function: The callable taking two arguments and an optional
                    msg= argument that raises self.failureException with a
                    useful error message when the two arguments are not equal.
        'u'Add a type specific assertEqual style function to compare a type.

        This method is for use by TestCase subclasses that need to register
        their own type equality functions to provide nicer error messages.

        Args:
            typeobj: The data type to call this function on when both values
                    are of the same type in assertEqual().
            function: The callable taking two arguments and an optional
                    msg= argument that raises self.failureException with a
                    useful error message when the two arguments are not equal.
        'b'Add a function, with arguments, to be called when the test is
        completed. Functions added are called on a LIFO basis and are
        called after tearDown on test failure or success.

        Cleanup items are called even if setUp fails (unlike tearDown).'u'Add a function, with arguments, to be called when the test is
        completed. Functions added are called on a LIFO basis and are
        called after tearDown on test failure or success.

        Cleanup items are called even if setUp fails (unlike tearDown).'b'Same as addCleanup, except the cleanup items are called even if
        setUpClass fails (unlike tearDownClass).'u'Same as addCleanup, except the cleanup items are called even if
        setUpClass fails (unlike tearDownClass).'b'Hook method for setting up the test fixture before exercising it.'u'Hook method for setting up the test fixture before exercising it.'b'Hook method for deconstructing the test fixture after testing it.'u'Hook method for deconstructing the test fixture after testing it.'b'Hook method for setting up class fixture before running tests in the class.'u'Hook method for setting up class fixture before running tests in the class.'b'Hook method for deconstructing the class fixture after running all tests in the class.'u'Hook method for deconstructing the class fixture after running all tests in the class.'b'Returns a one-line description of the test, or None if no
        description has been provided.

        The default implementation of this method returns the first line of
        the specified test method's docstring.
        'u'Returns a one-line description of the test, or None if no
        description has been provided.

        The default implementation of this method returns the first line of
        the specified test method's docstring.
        'b'%s.%s'u'%s.%s'b'%s (%s)'u'%s (%s)'b'<%s testMethod=%s>'u'<%s testMethod=%s>'b'addSkip'u'addSkip'b'TestResult has no addSkip method, skips not reported'u'TestResult has no addSkip method, skips not reported'b'Return a context manager that will return the enclosed block
        of code in a subtest identified by the optional message and
        keyword parameters.  A failure in the subtest marks the test
        case as failed but resumes execution at the end of the enclosed
        block, allowing further test code to be executed.
        'u'Return a context manager that will return the enclosed block
        of code in a subtest identified by the optional message and
        keyword parameters.  A failure in the subtest marks the test
        case as failed but resumes execution at the end of the enclosed
        block, allowing further test code to be executed.
        'b'TestResult has no addExpectedFailure method, reporting as passes'u'TestResult has no addExpectedFailure method, reporting as passes'b'TestResult has no addUnexpectedSuccess method, reporting as failure'u'TestResult has no addUnexpectedSuccess method, reporting as failure'b'startTestRun'u'startTestRun'b'stopTestRun'u'stopTestRun'b'__unittest_skip__'u'__unittest_skip__'b'__unittest_skip_why__'u'__unittest_skip_why__'b'__unittest_expecting_failure__'u'__unittest_expecting_failure__'b'Execute all cleanup functions. Normally called for you after
        tearDown.'u'Execute all cleanup functions. Normally called for you after
        tearDown.'b'Execute all class cleanup functions. Normally called for you after
        tearDownClass.'u'Execute all class cleanup functions. Normally called for you after
        tearDownClass.'b'Run the test without collecting errors in a TestResult'u'Run the test without collecting errors in a TestResult'b'Skip this test.'u'Skip this test.'b'Fail immediately, with the given message.'u'Fail immediately, with the given message.'b'Check that the expression is false.'u'Check that the expression is false.'b'%s is not false'u'%s is not false'b'Check that the expression is true.'u'Check that the expression is true.'b'%s is not true'u'%s is not true'b'Honour the longMessage attribute when generating failure messages.
        If longMessage is False this means:
        * Use only an explicit message if it is provided
        * Otherwise use the standard message for the assert

        If longMessage is True:
        * Use the standard message
        * If an explicit message is provided, plus ' : ' and the explicit message
        'u'Honour the longMessage attribute when generating failure messages.
        If longMessage is False this means:
        * Use only an explicit message if it is provided
        * Otherwise use the standard message for the assert

        If longMessage is True:
        * Use the standard message
        * If an explicit message is provided, plus ' : ' and the explicit message
        'b'%s : %s'u'%s : %s'b'Fail unless an exception of class expected_exception is raised
           by the callable when invoked with specified positional and
           keyword arguments. If a different type of exception is
           raised, it will not be caught, and the test case will be
           deemed to have suffered an error, exactly as for an
           unexpected exception.

           If called with the callable and arguments omitted, will return a
           context object used like this::

                with self.assertRaises(SomeException):
                    do_something()

           An optional keyword argument 'msg' can be provided when assertRaises
           is used as a context object.

           The context manager keeps a reference to the exception as
           the 'exception' attribute. This allows you to inspect the
           exception after the assertion::

               with self.assertRaises(SomeException) as cm:
                   do_something()
               the_exception = cm.exception
               self.assertEqual(the_exception.error_code, 3)
        'u'Fail unless an exception of class expected_exception is raised
           by the callable when invoked with specified positional and
           keyword arguments. If a different type of exception is
           raised, it will not be caught, and the test case will be
           deemed to have suffered an error, exactly as for an
           unexpected exception.

           If called with the callable and arguments omitted, will return a
           context object used like this::

                with self.assertRaises(SomeException):
                    do_something()

           An optional keyword argument 'msg' can be provided when assertRaises
           is used as a context object.

           The context manager keeps a reference to the exception as
           the 'exception' attribute. This allows you to inspect the
           exception after the assertion::

               with self.assertRaises(SomeException) as cm:
                   do_something()
               the_exception = cm.exception
               self.assertEqual(the_exception.error_code, 3)
        'b'assertRaises'u'assertRaises'b'Fail unless a warning of class warnClass is triggered
           by the callable when invoked with specified positional and
           keyword arguments.  If a different type of warning is
           triggered, it will not be handled: depending on the other
           warning filtering rules in effect, it might be silenced, printed
           out, or raised as an exception.

           If called with the callable and arguments omitted, will return a
           context object used like this::

                with self.assertWarns(SomeWarning):
                    do_something()

           An optional keyword argument 'msg' can be provided when assertWarns
           is used as a context object.

           The context manager keeps a reference to the first matching
           warning as the 'warning' attribute; similarly, the 'filename'
           and 'lineno' attributes give you information about the line
           of Python code from which the warning was triggered.
           This allows you to inspect the warning after the assertion::

               with self.assertWarns(SomeWarning) as cm:
                   do_something()
               the_warning = cm.warning
               self.assertEqual(the_warning.some_attribute, 147)
        'u'Fail unless a warning of class warnClass is triggered
           by the callable when invoked with specified positional and
           keyword arguments.  If a different type of warning is
           triggered, it will not be handled: depending on the other
           warning filtering rules in effect, it might be silenced, printed
           out, or raised as an exception.

           If called with the callable and arguments omitted, will return a
           context object used like this::

                with self.assertWarns(SomeWarning):
                    do_something()

           An optional keyword argument 'msg' can be provided when assertWarns
           is used as a context object.

           The context manager keeps a reference to the first matching
           warning as the 'warning' attribute; similarly, the 'filename'
           and 'lineno' attributes give you information about the line
           of Python code from which the warning was triggered.
           This allows you to inspect the warning after the assertion::

               with self.assertWarns(SomeWarning) as cm:
                   do_something()
               the_warning = cm.warning
               self.assertEqual(the_warning.some_attribute, 147)
        'b'assertWarns'u'assertWarns'b'Fail unless a log message of level *level* or higher is emitted
        on *logger_name* or its children.  If omitted, *level* defaults to
        INFO and *logger* defaults to the root logger.

        This method must be used as a context manager, and will yield
        a recording object with two attributes: `output` and `records`.
        At the end of the context manager, the `output` attribute will
        be a list of the matching formatted log messages and the
        `records` attribute will be a list of the corresponding LogRecord
        objects.

        Example::

            with self.assertLogs('foo', level='INFO') as cm:
                logging.getLogger('foo').info('first message')
                logging.getLogger('foo.bar').error('second message')
            self.assertEqual(cm.output, ['INFO:foo:first message',
                                         'ERROR:foo.bar:second message'])
        'u'Fail unless a log message of level *level* or higher is emitted
        on *logger_name* or its children.  If omitted, *level* defaults to
        INFO and *logger* defaults to the root logger.

        This method must be used as a context manager, and will yield
        a recording object with two attributes: `output` and `records`.
        At the end of the context manager, the `output` attribute will
        be a list of the matching formatted log messages and the
        `records` attribute will be a list of the corresponding LogRecord
        objects.

        Example::

            with self.assertLogs('foo', level='INFO') as cm:
                logging.getLogger('foo').info('first message')
                logging.getLogger('foo.bar').error('second message')
            self.assertEqual(cm.output, ['INFO:foo:first message',
                                         'ERROR:foo.bar:second message'])
        'b'Get a detailed comparison function for the types of the two args.

        Returns: A callable accepting (first, second, msg=None) that will
        raise a failure exception if first != second with a useful human
        readable error message for those types.
        'u'Get a detailed comparison function for the types of the two args.

        Returns: A callable accepting (first, second, msg=None) that will
        raise a failure exception if first != second with a useful human
        readable error message for those types.
        'b'The default assertEqual implementation, not type specific.'u'The default assertEqual implementation, not type specific.'b'%s != %s'u'%s != %s'b'Fail if the two objects are unequal as determined by the '=='
           operator.
        'u'Fail if the two objects are unequal as determined by the '=='
           operator.
        'b'Fail if the two objects are equal as determined by the '!='
           operator.
        'u'Fail if the two objects are equal as determined by the '!='
           operator.
        'b'%s == %s'u'%s == %s'b'Fail if the two objects are unequal as determined by their
           difference rounded to the given number of decimal places
           (default 7) and comparing to zero, or by comparing that the
           difference between the two objects is more than the given
           delta.

           Note that decimal places (from zero) are usually not the same
           as significant digits (measured from the most significant digit).

           If the two objects compare equal then they will automatically
           compare almost equal.
        'u'Fail if the two objects are unequal as determined by their
           difference rounded to the given number of decimal places
           (default 7) and comparing to zero, or by comparing that the
           difference between the two objects is more than the given
           delta.

           Note that decimal places (from zero) are usually not the same
           as significant digits (measured from the most significant digit).

           If the two objects compare equal then they will automatically
           compare almost equal.
        'b'specify delta or places not both'u'specify delta or places not both'b'%s != %s within %s delta (%s difference)'u'%s != %s within %s delta (%s difference)'b'%s != %s within %r places (%s difference)'u'%s != %s within %r places (%s difference)'b'Fail if the two objects are equal as determined by their
           difference rounded to the given number of decimal places
           (default 7) and comparing to zero, or by comparing that the
           difference between the two objects is less than the given delta.

           Note that decimal places (from zero) are usually not the same
           as significant digits (measured from the most significant digit).

           Objects that are equal automatically fail.
        'u'Fail if the two objects are equal as determined by their
           difference rounded to the given number of decimal places
           (default 7) and comparing to zero, or by comparing that the
           difference between the two objects is less than the given delta.

           Note that decimal places (from zero) are usually not the same
           as significant digits (measured from the most significant digit).

           Objects that are equal automatically fail.
        'b'%s == %s within %s delta (%s difference)'u'%s == %s within %s delta (%s difference)'b'%s == %s within %r places'u'%s == %s within %r places'b'An equality assertion for ordered sequences (like lists and tuples).

        For the purposes of this function, a valid ordered sequence type is one
        which can be indexed, has a length, and has an equality operator.

        Args:
            seq1: The first sequence to compare.
            seq2: The second sequence to compare.
            seq_type: The expected datatype of the sequences, or None if no
                    datatype should be enforced.
            msg: Optional message to use on failure instead of a list of
                    differences.
        'u'An equality assertion for ordered sequences (like lists and tuples).

        For the purposes of this function, a valid ordered sequence type is one
        which can be indexed, has a length, and has an equality operator.

        Args:
            seq1: The first sequence to compare.
            seq2: The second sequence to compare.
            seq_type: The expected datatype of the sequences, or None if no
                    datatype should be enforced.
            msg: Optional message to use on failure instead of a list of
                    differences.
        'b'First sequence is not a %s: %s'u'First sequence is not a %s: %s'b'Second sequence is not a %s: %s'u'Second sequence is not a %s: %s'b'sequence'u'sequence'b'First %s has no length.    Non-sequence?'u'First %s has no length.    Non-sequence?'b'Second %s has no length.    Non-sequence?'u'Second %s has no length.    Non-sequence?'b'%ss differ: %s != %s
'u'%ss differ: %s != %s
'b'
Unable to index element %d of first %s
'u'
Unable to index element %d of first %s
'b'
Unable to index element %d of second %s
'u'
Unable to index element %d of second %s
'b'
First differing element %d:
%s
%s
'u'
First differing element %d:
%s
%s
'b'
First %s contains %d additional elements.
'u'
First %s contains %d additional elements.
'b'First extra element %d:
%s
'u'First extra element %d:
%s
'b'Unable to index element %d of first %s
'u'Unable to index element %d of first %s
'b'
Second %s contains %d additional elements.
'u'
Second %s contains %d additional elements.
'b'Unable to index element %d of second %s
'u'Unable to index element %d of second %s
'b'A list-specific equality assertion.

        Args:
            list1: The first list to compare.
            list2: The second list to compare.
            msg: Optional message to use on failure instead of a list of
                    differences.

        'u'A list-specific equality assertion.

        Args:
            list1: The first list to compare.
            list2: The second list to compare.
            msg: Optional message to use on failure instead of a list of
                    differences.

        'b'A tuple-specific equality assertion.

        Args:
            tuple1: The first tuple to compare.
            tuple2: The second tuple to compare.
            msg: Optional message to use on failure instead of a list of
                    differences.
        'u'A tuple-specific equality assertion.

        Args:
            tuple1: The first tuple to compare.
            tuple2: The second tuple to compare.
            msg: Optional message to use on failure instead of a list of
                    differences.
        'b'A set-specific equality assertion.

        Args:
            set1: The first set to compare.
            set2: The second set to compare.
            msg: Optional message to use on failure instead of a list of
                    differences.

        assertSetEqual uses ducktyping to support different types of sets, and
        is optimized for sets specifically (parameters must support a
        difference method).
        'u'A set-specific equality assertion.

        Args:
            set1: The first set to compare.
            set2: The second set to compare.
            msg: Optional message to use on failure instead of a list of
                    differences.

        assertSetEqual uses ducktyping to support different types of sets, and
        is optimized for sets specifically (parameters must support a
        difference method).
        'b'invalid type when attempting set difference: %s'u'invalid type when attempting set difference: %s'b'first argument does not support set difference: %s'u'first argument does not support set difference: %s'b'second argument does not support set difference: %s'u'second argument does not support set difference: %s'b'Items in the first set but not the second:'u'Items in the first set but not the second:'b'Items in the second set but not the first:'u'Items in the second set but not the first:'b'Just like self.assertTrue(a in b), but with a nicer default message.'u'Just like self.assertTrue(a in b), but with a nicer default message.'b'%s not found in %s'u'%s not found in %s'b'Just like self.assertTrue(a not in b), but with a nicer default message.'u'Just like self.assertTrue(a not in b), but with a nicer default message.'b'%s unexpectedly found in %s'u'%s unexpectedly found in %s'b'Just like self.assertTrue(a is b), but with a nicer default message.'u'Just like self.assertTrue(a is b), but with a nicer default message.'b'%s is not %s'u'%s is not %s'b'Just like self.assertTrue(a is not b), but with a nicer default message.'u'Just like self.assertTrue(a is not b), but with a nicer default message.'b'unexpectedly identical: %s'u'unexpectedly identical: %s'b'First argument is not a dictionary'u'First argument is not a dictionary'b'Second argument is not a dictionary'u'Second argument is not a dictionary'b'Checks whether dictionary is a superset of subset.'u'Checks whether dictionary is a superset of subset.'b'assertDictContainsSubset is deprecated'u'assertDictContainsSubset is deprecated'b'%s, expected: %s, actual: %s'u'%s, expected: %s, actual: %s'b'Missing: %s'u'Missing: %s'b'Mismatched values: %s'u'Mismatched values: %s'b'Asserts that two iterables have the same elements, the same number of
        times, without regard to order.

            self.assertEqual(Counter(list(first)),
                             Counter(list(second)))

         Example:
            - [0, 1, 1] and [1, 0, 1] compare equal.
            - [0, 0, 1] and [0, 1] compare unequal.

        'u'Asserts that two iterables have the same elements, the same number of
        times, without regard to order.

            self.assertEqual(Counter(list(first)),
                             Counter(list(second)))

         Example:
            - [0, 1, 1] and [1, 0, 1] compare equal.
            - [0, 0, 1] and [0, 1] compare unequal.

        'b'Element counts were not equal:
'u'Element counts were not equal:
'b'First has %d, Second has %d:  %r'u'First has %d, Second has %d:  %r'b'Assert that two multi-line strings are equal.'u'Assert that two multi-line strings are equal.'b'First argument is not a string'u'First argument is not a string'b'Second argument is not a string'u'Second argument is not a string'b'Just like self.assertTrue(a < b), but with a nicer default message.'u'Just like self.assertTrue(a < b), but with a nicer default message.'b'%s not less than %s'u'%s not less than %s'b'Just like self.assertTrue(a <= b), but with a nicer default message.'u'Just like self.assertTrue(a <= b), but with a nicer default message.'b'%s not less than or equal to %s'u'%s not less than or equal to %s'b'Just like self.assertTrue(a > b), but with a nicer default message.'u'Just like self.assertTrue(a > b), but with a nicer default message.'b'%s not greater than %s'u'%s not greater than %s'b'Just like self.assertTrue(a >= b), but with a nicer default message.'u'Just like self.assertTrue(a >= b), but with a nicer default message.'b'%s not greater than or equal to %s'u'%s not greater than or equal to %s'b'Same as self.assertTrue(obj is None), with a nicer default message.'u'Same as self.assertTrue(obj is None), with a nicer default message.'b'%s is not None'u'%s is not None'b'Included for symmetry with assertIsNone.'u'Included for symmetry with assertIsNone.'b'unexpectedly None'u'unexpectedly None'b'Same as self.assertTrue(isinstance(obj, cls)), with a nicer
        default message.'u'Same as self.assertTrue(isinstance(obj, cls)), with a nicer
        default message.'b'%s is not an instance of %r'u'%s is not an instance of %r'b'Included for symmetry with assertIsInstance.'u'Included for symmetry with assertIsInstance.'b'%s is an instance of %r'u'%s is an instance of %r'b'Asserts that the message in a raised exception matches a regex.

        Args:
            expected_exception: Exception class expected to be raised.
            expected_regex: Regex (re.Pattern object or string) expected
                    to be found in error message.
            args: Function to be called and extra positional args.
            kwargs: Extra kwargs.
            msg: Optional message used in case of failure. Can only be used
                    when assertRaisesRegex is used as a context manager.
        'u'Asserts that the message in a raised exception matches a regex.

        Args:
            expected_exception: Exception class expected to be raised.
            expected_regex: Regex (re.Pattern object or string) expected
                    to be found in error message.
            args: Function to be called and extra positional args.
            kwargs: Extra kwargs.
            msg: Optional message used in case of failure. Can only be used
                    when assertRaisesRegex is used as a context manager.
        'b'assertRaisesRegex'u'assertRaisesRegex'b'Asserts that the message in a triggered warning matches a regexp.
        Basic functioning is similar to assertWarns() with the addition
        that only warnings whose messages also match the regular expression
        are considered successful matches.

        Args:
            expected_warning: Warning class expected to be triggered.
            expected_regex: Regex (re.Pattern object or string) expected
                    to be found in error message.
            args: Function to be called and extra positional args.
            kwargs: Extra kwargs.
            msg: Optional message used in case of failure. Can only be used
                    when assertWarnsRegex is used as a context manager.
        'u'Asserts that the message in a triggered warning matches a regexp.
        Basic functioning is similar to assertWarns() with the addition
        that only warnings whose messages also match the regular expression
        are considered successful matches.

        Args:
            expected_warning: Warning class expected to be triggered.
            expected_regex: Regex (re.Pattern object or string) expected
                    to be found in error message.
            args: Function to be called and extra positional args.
            kwargs: Extra kwargs.
            msg: Optional message used in case of failure. Can only be used
                    when assertWarnsRegex is used as a context manager.
        'b'assertWarnsRegex'u'assertWarnsRegex'b'Fail the test unless the text matches the regular expression.'u'Fail the test unless the text matches the regular expression.'b'expected_regex must not be empty.'u'expected_regex must not be empty.'b'Regex didn't match: %r not found in %r'u'Regex didn't match: %r not found in %r'b'Fail the test if the text matches the regular expression.'u'Fail the test if the text matches the regular expression.'b'Regex matched: %r matches %r in %r'u'Regex matched: %r matches %r in %r'b'Please use {0} instead.'u'Please use {0} instead.'b'A test case that wraps a test function.

    This is useful for slipping pre-existing test functions into the
    unittest framework. Optionally, set-up and tidy-up functions can be
    supplied. As with TestCase, the tidy-up ('tearDown') function will
    always be called if the set-up ('setUp') function ran successfully.
    'u'A test case that wraps a test function.

    This is useful for slipping pre-existing test functions into the
    unittest framework. Optionally, set-up and tidy-up functions can be
    supplied. As with TestCase, the tidy-up ('tearDown') function will
    always be called if the set-up ('setUp') function ran successfully.
    'b'<%s tec=%s>'u'<%s tec=%s>'b'subtests cannot be run directly'u'subtests cannot be run directly'b'[{}]'u'[{}]'b'({})'u'({})'b'(<subtest>)'u'(<subtest>)'b'{} {}'u'{} {}'b'Returns a one-line description of the subtest, or None if no
        description has been provided.
        'u'Returns a one-line description of the subtest, or None if no
        description has been provided.
        'u'Python39.lib.unittest.case'u'lib.unittest.case'u'unittest.case'u'case'distutils.ccompiler

Contains CCompiler, an abstract base class that defines the interface
for the Distutils compiler abstraction model.distutils.errorsdistutils.spawndistutils.file_utilmove_filedistutils.dir_utilmkpathdistutils.dep_utilnewer_groupdistutils.utilsplit_quotedexecuteCCompilerAbstract base class to define the interface that must be implemented
    by real compiler classes.  Also has some utility methods used by
    several compiler classes.

    The basic idea behind a compiler abstraction class is that each
    instance can be used for all the compile/link steps in building a
    single project.  Thus, attributes common to all of those compile and
    link steps -- include directories, macros to define, libraries to link
    against, etc. -- are attributes of the compiler instance.  To allow for
    variability in how individual files are treated, most of those
    attributes may be varied on a per-compilation or per-link basis.
    src_extensionsobj_extensionstatic_lib_extensionshared_lib_extensionstatic_lib_formatshared_lib_formatexe_extension.cc++.cc.cpp.cxxobjc.mlanguage_maplanguage_orderoutput_dirmacrosinclude_dirslibrarieslibrary_dirsruntime_library_dirsset_executableset_executablesDefine the executables (and options for them) that will be run
        to perform the various stages of compilation.  The exact set of
        executables that may be specified here depends on the compiler
        class (via the 'executables' class attribute), but most will have:
          compiler      the C/C++ compiler
          linker_so     linker used to create shared objects and libraries
          linker_exe    linker used to create binary executables
          archiver      static library creator

        On platforms with a command-line (Unix, DOS/Windows), each of these
        is a string that will be split into executable name and (optional)
        list of arguments.  (Splitting the string is done similarly to how
        Unix shells operate: words are delimited by spaces, but quotes and
        backslashes can override this.  See
        'distutils.util.split_quoted()'.)
        unknown executable '%s' for class %s_find_macrodefn_check_macro_definitionsdefinitionsEnsures that every element of 'definitions' is a valid macro
        definition, ie. either (name,value) 2-tuple or a (name,) tuple.  Do
        nothing if all definitions are OK, raise TypeError otherwise.
        invalid macro definition '%s': must be tuple (string,), (string, string), or (string, None)define_macroDefine a preprocessor macro for all compilations driven by this
        compiler object.  The optional parameter 'value' should be a
        string; if it is not supplied, then the macro will be defined
        without an explicit value and the exact outcome depends on the
        compiler used (XXX true? does ANSI say anything about this?)
        undefine_macroUndefine a preprocessor macro for all compilations driven by
        this compiler object.  If the same macro is defined by
        'define_macro()' and undefined by 'undefine_macro()' the last call
        takes precedence (including multiple redefinitions or
        undefinitions).  If the macro is redefined/undefined on a
        per-compilation basis (ie. in the call to 'compile()'), then that
        takes precedence.
        undefnadd_include_dirAdd 'dir' to the list of directories that will be searched for
        header files.  The compiler is instructed to search directories in
        the order in which they are supplied by successive calls to
        'add_include_dir()'.
        set_include_dirsSet the list of directories that will be searched to 'dirs' (a
        list of strings).  Overrides any preceding calls to
        'add_include_dir()'; subsequence calls to 'add_include_dir()' add
        to the list passed to 'set_include_dirs()'.  This does not affect
        any list of standard include directories that the compiler may
        search by default.
        add_libraryAdd 'libname' to the list of libraries that will be included in
        all links driven by this compiler object.  Note that 'libname'
        should *not* be the name of a file containing a library, but the
        name of the library itself: the actual filename will be inferred by
        the linker, the compiler, or the compiler class (depending on the
        platform).

        The linker will be instructed to link against libraries in the
        order they were supplied to 'add_library()' and/or
        'set_libraries()'.  It is perfectly valid to duplicate library
        names; the linker will be instructed to link against libraries as
        many times as they are mentioned.
        set_librariesSet the list of libraries to be included in all links driven by
        this compiler object to 'libnames' (a list of strings).  This does
        not affect any standard system libraries that the linker may
        include by default.
        add_library_dirAdd 'dir' to the list of directories that will be searched for
        libraries specified to 'add_library()' and 'set_libraries()'.  The
        linker will be instructed to search for libraries in the order they
        are supplied to 'add_library_dir()' and/or 'set_library_dirs()'.
        set_library_dirsSet the list of library search directories to 'dirs' (a list of
        strings).  This does not affect any standard library search path
        that the linker may search by default.
        add_runtime_library_dirAdd 'dir' to the list of directories that will be searched for
        shared libraries at runtime.
        set_runtime_library_dirsSet the list of directories to search for shared libraries at
        runtime to 'dirs' (a list of strings).  This does not affect any
        standard search path that the runtime linker may search by
        default.
        add_link_objectAdd 'object' to the list of object files (or analogues, such as
        explicitly named library files or the output of "resource
        compilers") to be included in every link driven by this compiler
        object.
        set_link_objectsSet the list of object files (or analogues) to be included in
        every link to 'objects'.  This does not affect any standard object
        files that the linker may include by default (such as system
        libraries).
        _setup_compileoutdirincdirssourcesdependsProcess arguments and decide which source files to compile.'output_dir' must be a string or None'macros' (if supplied) must be a list of tuples'include_dirs' (if supplied) must be a list of stringsobject_filenamesstrip_dirgen_preprocess_optionspp_optssrc_get_cc_args-g_fix_compile_argsTypecheck and fix-up some of the arguments to the 'compile()'
        method, and return fixed-up values.  Specifically: if 'output_dir'
        is None, replaces it with 'self.output_dir'; ensures that 'macros'
        is a list, and augments it with 'self.macros'; ensures that
        'include_dirs' is a list, and augments it with 'self.include_dirs'.
        Guarantees that the returned values are of the correct type,
        i.e. for 'output_dir' either string or None, and for 'macros' and
        'include_dirs' either list or None.
        _prep_compileDecide which souce files must be recompiled.

        Determine the list of object files corresponding to 'sources',
        and figure out which ones really need to be recompiled.
        Return a list of all object files and a dictionary telling
        which source files can be skipped.
        _fix_object_argsTypecheck and fix up some arguments supplied to various methods.
        Specifically: ensure that 'objects' is a list; if output_dir is
        None, replace with self.output_dir.  Return fixed versions of
        'objects' and 'output_dir'.
        'objects' must be a list or tuple of strings_fix_lib_argsTypecheck and fix up some of the arguments supplied to the
        'link_*' methods.  Specifically: ensure that all arguments are
        lists, and augment them with their permanent versions
        (eg. 'self.libraries' augments 'libraries').  Return a tuple with
        fixed versions of all arguments.
        'libraries' (if supplied) must be a list of strings'library_dirs' (if supplied) must be a list of strings'runtime_library_dirs' (if supplied) must be a list of strings"'runtime_library_dirs' (if supplied) ""must be a list of strings"_need_linkoutput_fileReturn true if we need to relink the files listed in 'objects'
        to recreate 'output_file'.
        newerdetect_languageDetect the language of a given file, or list of files. Uses
        language_map, and language_order to do the job.
        extlangextindexpreprocessextra_preargsextra_postargsPreprocess a single C/C++ source file, named in 'source'.
        Output will be written to file named 'output_file', or stdout if
        'output_file' not supplied.  'macros' is a list of macro
        definitions as for 'compile()', which will augment the macros set
        with 'define_macro()' and 'undefine_macro()'.  'include_dirs' is a
        list of directory names that will be added to the default list.

        Raises PreprocessError on failure.
        Compile one or more source files.

        'sources' must be a list of filenames, most likely C/C++
        files, but in reality anything that can be handled by a
        particular compiler and compiler class (eg. MSVCCompiler can
        handle resource files in 'sources').  Return a list of object
        filenames, one per source filename in 'sources'.  Depending on
        the implementation, not all source files will necessarily be
        compiled, but all corresponding object filenames will be
        returned.

        If 'output_dir' is given, object files will be put under it, while
        retaining their original path component.  That is, "foo/bar.c"
        normally compiles to "foo/bar.o" (for a Unix implementation); if
        'output_dir' is "build", then it would compile to
        "build/foo/bar.o".

        'macros', if given, must be a list of macro definitions.  A macro
        definition is either a (name, value) 2-tuple or a (name,) 1-tuple.
        The former defines a macro; if the value is None, the macro is
        defined without an explicit value.  The 1-tuple case undefines a
        macro.  Later definitions/redefinitions/ undefinitions take
        precedence.

        'include_dirs', if given, must be a list of strings, the
        directories to add to the default include file search path for this
        compilation only.

        'debug' is a boolean; if true, the compiler will be instructed to
        output debug symbols in (or alongside) the object file(s).

        'extra_preargs' and 'extra_postargs' are implementation- dependent.
        On platforms that have the notion of a command-line (e.g. Unix,
        DOS/Windows), they are most likely lists of strings: extra
        command-line arguments to prepend/append to the compiler command
        line.  On other platforms, consult the implementation class
        documentation.  In any event, they are intended as an escape hatch
        for those occasions when the abstract compiler framework doesn't
        cut the mustard.

        'depends', if given, is a list of filenames that all targets
        depend on.  If a source file is older than any file in
        depends, then the source file will be recompiled.  This
        supports dependency tracking, but only at a coarse
        granularity.

        Raises CompileError on failure.
        _compileCompile 'src' to product 'obj'.create_static_liboutput_libnametarget_langLink a bunch of stuff together to create a static library file.
        The "bunch of stuff" consists of the list of object files supplied
        as 'objects', the extra object files supplied to
        'add_link_object()' and/or 'set_link_objects()', the libraries
        supplied to 'add_library()' and/or 'set_libraries()', and the
        libraries supplied as 'libraries' (if any).

        'output_libname' should be a library name, not a filename; the
        filename will be inferred from the library name.  'output_dir' is
        the directory where the library file will be put.

        'debug' is a boolean; if true, debugging information will be
        included in the library (note that on most platforms, it is the
        compile step where this matters: the 'debug' flag is included here
        just for consistency).

        'target_lang' is the target language for which the given objects
        are being compiled. This allows specific linkage time treatment of
        certain languages.

        Raises LibError on failure.
        shared_objectSHARED_OBJECTshared_librarySHARED_LIBRARYEXECUTABLEtarget_descoutput_filenameexport_symbolsbuild_tempLink a bunch of stuff together to create an executable or
        shared library file.

        The "bunch of stuff" consists of the list of object files supplied
        as 'objects'.  'output_filename' should be a filename.  If
        'output_dir' is supplied, 'output_filename' is relative to it
        (i.e. 'output_filename' can provide directory components if
        needed).

        'libraries' is a list of libraries to link against.  These are
        library names, not filenames, since they're translated into
        filenames in a platform-specific way (eg. "foo" becomes "libfoo.a"
        on Unix and "foo.lib" on DOS/Windows).  However, they can include a
        directory component, which means the linker will look in that
        specific directory rather than searching all the normal locations.

        'library_dirs', if supplied, should be a list of directories to
        search for libraries that were specified as bare library names
        (ie. no directory component).  These are on top of the system
        default and those supplied to 'add_library_dir()' and/or
        'set_library_dirs()'.  'runtime_library_dirs' is a list of
        directories that will be embedded into the shared library and used
        to search for other shared libraries that *it* depends on at
        run-time.  (This may only be relevant on Unix.)

        'export_symbols' is a list of symbols that the shared library will
        export.  (This appears to be relevant only on Windows.)

        'debug' is as for 'compile()' and 'create_static_lib()', with the
        slight distinction that it actually matters on most platforms (as
        opposed to 'create_static_lib()', which includes a 'debug' flag
        mostly for form's sake).

        'extra_preargs' and 'extra_postargs' are as for 'compile()' (except
        of course that they supply command-line arguments for the
        particular linker being used).

        'target_lang' is the target language for which the given objects
        are being compiled. This allows specific linkage time treatment of
        certain languages.

        Raises LinkError on failure.
        link_shared_liblibrary_filenamelib_typelink_shared_objectlink_executableoutput_prognameexecutable_filenamelibrary_dir_optionReturn the compiler option to add 'dir' to the list of
        directories searched for libraries.
        runtime_library_dir_optionReturn the compiler option to add 'dir' to the list of
        directories searched for runtime libraries.
        library_optionReturn the compiler option to add 'lib' to the list of libraries
        linked into the shared library or executable.
        has_functionReturn a boolean indicating whether funcname is supported on
        the current platform.  The optional arguments can be used to
        augment the compilation environment.
        fnameincl#include "%s"
int main (int argc, char **argv) {
    %s();
    return 0;
}
CompileErrora.outLinkErrorfind_library_fileSearch the specified list of directories for a static or shared
        library file 'lib' and return the full path to that file.  If
        'debug' true, look for a debugging version (if that makes sense on
        the current platform).  Return None if 'lib' wasn't found in any of
        the specified directories.
        source_filenamesobj_namessrc_namesplitdriveUnknownFileErrorunknown file type '%s' (from '%s')shared_object_filenamedylibxcode_stub'lib_type' must be "static", "shared", "dylib", or "xcode_stub"_lib_format_lib_extensionannouncedebug_printdistutils.debugwarning: %s
0o777cygwin.*unix_default_compilersget_default_compilerDetermine the default compiler to use for the given platform.

       osname should be one of the standard Python OS names (i.e. the
       ones returned by os.name) and platform the common value
       returned by sys.platform for the platform in question.

       The default values are os.name and sys.platform in case the
       parameters are not given.
    unixccompilerUnixCCompilerstandard UNIX-style compiler_msvccompilerMSVCCompilerMicrosoft Visual C++cygwinccompilerCygwinCCompilerCygwin port of GNU C Compiler for Win32Mingw32CCompilerMingw32 port of GNU C Compiler for Win32mingw32bcppcompilerBCPPCompilerBorland C++ Compilerbcppcompiler_classshow_compilersPrint list of available compilers (used by the "--help-compiler"
    options to "build", "build_ext", "build_clib").
    distutils.fancy_getoptFancyGetoptcompilerscompiler=pretty_printerList of available compilers:platGenerate an instance of some CCompiler subclass for the supplied
    platform/compiler combination.  'plat' defaults to 'os.name'
    (eg. 'posix', 'nt'), and 'compiler' defaults to the default compiler
    for that platform.  Currently only 'posix' and 'nt' are supported, and
    the default compilers are "traditional Unix interface" (UnixCCompiler
    class) and Visual C++ (MSVCCompiler class).  Note that it's perfectly
    possible to ask for a Unix compiler object under Windows, and a
    Microsoft compiler object under Unix -- if you supply a value for
    'compiler', 'plat' is ignored.
    class_namelong_descriptiondon't know how to compile C/C++ code on platform '%s' with '%s' compilerdistutils.DistutilsModuleErrorcan't compile C/C++ code: unable to load module '%s'can't compile C/C++ code: unable to find class '%s' in module '%s'"can't compile C/C++ code: unable to find class '%s' ""in module '%s'"Generate C pre-processor options (-D, -U, -I) as used by at least
    two types of compilers: the typical Unix compiler and Visual C++.
    'macros' is the usual thing, a list of 1- or 2-tuples, where (name,)
    means undefine (-U) macro 'name', and (name,value) means define (-D)
    macro 'name' to 'value'.  'include_dirs' is just a list of directory
    names to be added to the header file search path (-I).  Returns a list
    of command-line options suitable for either Unix compilers or Visual
    C++.
    macrobad macro definition '%s': each element of 'macros' list must be a 1- or 2-tuple"bad macro definition '%s': ""each element of 'macros' list must be a 1- or 2-tuple"-U%s-D%s-D%s=%s-I%sgen_lib_optionsGenerate linker options for searching library directories and
    linking with specific libraries.  'libraries' and 'library_dirs' are,
    respectively, lists of library names (not filenames!) and search
    directories.  Returns a list of command-line options suitable for use
    with some compiler (depending on the two format strings passed in).
    lib_optslib_dirlib_namelib_fileno library file corresponding to '%s' found (skipping)"no library file corresponding to ""'%s' found (skipping)"# 'compiler_type' is a class attribute that identifies this class.  It# keeps code that wants to know what kind of compiler it's dealing with# from having to import all possible compiler classes just to do an# 'isinstance'.  In concrete CCompiler subclasses, 'compiler_type'# should really, really be one of the keys of the 'compiler_class'# dictionary (see below -- used by the 'new_compiler()' factory# function) -- authors of new compiler interface classes are# responsible for updating 'compiler_class'!# XXX things not handled by this compiler abstraction model:#   * client can't provide additional options for a compiler,#     e.g. warning, optimization, debugging flags.  Perhaps this#     should be the domain of concrete compiler abstraction classes#     (UnixCCompiler, MSVCCompiler, etc.) -- or perhaps the base#     class should have methods for the common ones.#   * can't completely override the include or library searchg#     path, ie. no "cc -I -Idir1 -Idir2" or "cc -L -Ldir1 -Ldir2".#     I'm not sure how widely supported this is even by Unix#     compilers, much less on other platforms.  And I'm even less#     sure how useful it is; maybe for cross-compiling, but#     support for that is a ways off.  (And anyways, cross#     compilers probably have a dedicated binary with the#     right paths compiled in.  I hope.)#   * can't do really freaky things with the library list/library#     dirs, e.g. "-Ldir1 -lfoo -Ldir2 -lfoo" to link against#     different versions of libfoo.a in different locations.  I#     think this is useless without the ability to null out the#     library search path anyways.# Subclasses that rely on the standard filename generation methods# implemented below should override these; see the comment near# those methods ('object_filenames()' et. al.) for details:# list of strings# string# format string# prob. same as static_lib_format# Default language settings. language_map is used to detect a source# file or Extension target language, checking source filenames.# language_order is used to detect the language precedence, when deciding# what language to use when mixing source types. For example, if some# extension has two files with ".c" extension, and one with ".cpp", it# is still linked as c++.# 'output_dir': a common output directory for object, library,# shared object, and shared library files# 'macros': a list of macro definitions (or undefinitions).  A# macro definition is a 2-tuple (name, value), where the value is# either a string or None (no explicit value).  A macro# undefinition is a 1-tuple (name,).# 'include_dirs': a list of directories to search for include files# 'libraries': a list of libraries to include in any link# (library names, not filenames: eg. "foo" not "libfoo.a")# 'library_dirs': a list of directories to search for libraries# 'runtime_library_dirs': a list of directories to search for# shared libraries/objects at runtime# 'objects': a list of object files (or similar, such as explicitly# named library files) to include on any link# Note that some CCompiler implementation classes will define class# attributes 'cpp', 'cc', etc. with hard-coded executable names;# this is appropriate when a compiler class is for exactly one# compiler/OS combination (eg. MSVCCompiler).  Other compiler# classes (UnixCCompiler, in particular) are driven by information# discovered at run-time, since there are many different ways to do# basically the same things with Unix C compilers.# -- Bookkeeping methods -------------------------------------------# Delete from the list of macro definitions/undefinitions if# already there (so that this one will take precedence).# -- Private utility methods --------------------------------------# (here for the convenience of subclasses)# Helper method to prep compiler in subclass compile() methods# Get the list of expected output (object) files# works for unixccompiler, cygwinccompiler# Return an empty dict for the "which source files can be skipped"# return value to preserve API compatibility.# -- Worker methods ------------------------------------------------# (must be implemented by subclasses)# A concrete compiler class can either override this method# entirely or implement _compile().# Return *all* object filenames, not just the ones we just built.# A concrete compiler class that does not override compile()# should implement _compile().# values for target_desc parameter in link()# Old 'link_*()' methods, rewritten to use the new 'link()' method.# -- Miscellaneous methods -----------------------------------------# These are all used by the 'gen_lib_options() function; there is# no appropriate default implementation so subclasses should# implement all of these.# this can't be included at module scope because it tries to# import math which might not be available at that point - maybe# the necessary logic should just be inlined?# -- Filename generation methods -----------------------------------# The default implementation of the filename generating methods are# prejudiced towards the Unix/DOS/Windows view of the world:#   * object files are named by replacing the source file extension#     (eg. .c/.cpp -> .o/.obj)#   * library files (shared or static) are named by plugging the#     library name and extension into a format string, eg.#     "lib%s.%s" % (lib_name, ".a") for Unix static libraries#   * executables are named by appending an extension (possibly#     empty) to the program name: eg. progname + ".exe" for#     Windows# To reduce redundant code, these methods expect to find# several attributes in the current object (presumably defined# as class attributes):#   * src_extensions -#     list of C/C++ source file extensions, eg. ['.c', '.cpp']#   * obj_extension -#     object file extension, eg. '.o' or '.obj'#   * static_lib_extension -#     extension for static library files, eg. '.a' or '.lib'#   * shared_lib_extension -#     extension for shared library/object files, eg. '.so', '.dll'#   * static_lib_format -#     format string for generating static library filenames,#     eg. 'lib%s.%s' or '%s.%s'#   * shared_lib_format#     format string for generating shared library filenames#     (probably same as static_lib_format, since the extension#     is one of the intended parameters to the format string)#   * exe_extension -#     extension for executable files, eg. '' or '.exe'# Chop off the drive# If abs, chop off leading /# or 'shared'# -- Utility methods -----------------------------------------------# Map a sys.platform/os.name ('posix', 'nt') to the default compiler# type for that platform. Keys are interpreted as re match# patterns. Order is important; platform mappings are preferred over# OS names.# Platform string mappings# on a cygwin built python we can use gcc like an ordinary UNIXish# compiler# OS name mappings# Default to Unix compiler# Map compiler types to (module_name, class_name) pairs -- ie. where to# find the code that implements an interface to this compiler.  (The module# is assumed to be in the 'distutils' package.)# XXX this "knows" that the compiler option it's describing is# "--compiler", which just happens to be the case for the three# commands that use it.# XXX The None is necessary to preserve backwards compatibility# with classes that expect verbose to be the first positional# argument.# XXX it would be nice (mainly aesthetic, and so we don't generate# stupid-looking command lines) to go over 'macros' and eliminate# redundant definitions/undefinitions (ie. ensure that only the# latest mention of a particular macro winds up on the command# line).  I don't think it's essential, though, since most (all?)# Unix C compilers only pay attention to the latest -D or -U# mention of a macro on their command line.  Similar situation for# 'include_dirs'.  I'm punting on both for now.  Anyways, weeding out# redundancies like this should probably be the province of# CCompiler, since the data structures used are inherited from it# and therefore common to all CCompiler classes.# undefine this macro# define with no explicit value# XXX *don't* need to be clever about quoting the# macro value here, because we're going to avoid the# shell at all costs when we spawn the command!# XXX it's important that we *not* remove redundant library mentions!# sometimes you really do have to say "-lfoo -lbar -lfoo" in order to# resolve all symbols.  I just hope we never have to say "-lfoo obj.o# -lbar" to get things to work -- that's certainly a possibility, but a# pretty nasty way to arrange your C code.b'distutils.ccompiler

Contains CCompiler, an abstract base class that defines the interface
for the Distutils compiler abstraction model.'u'distutils.ccompiler

Contains CCompiler, an abstract base class that defines the interface
for the Distutils compiler abstraction model.'b'Abstract base class to define the interface that must be implemented
    by real compiler classes.  Also has some utility methods used by
    several compiler classes.

    The basic idea behind a compiler abstraction class is that each
    instance can be used for all the compile/link steps in building a
    single project.  Thus, attributes common to all of those compile and
    link steps -- include directories, macros to define, libraries to link
    against, etc. -- are attributes of the compiler instance.  To allow for
    variability in how individual files are treated, most of those
    attributes may be varied on a per-compilation or per-link basis.
    'u'Abstract base class to define the interface that must be implemented
    by real compiler classes.  Also has some utility methods used by
    several compiler classes.

    The basic idea behind a compiler abstraction class is that each
    instance can be used for all the compile/link steps in building a
    single project.  Thus, attributes common to all of those compile and
    link steps -- include directories, macros to define, libraries to link
    against, etc. -- are attributes of the compiler instance.  To allow for
    variability in how individual files are treated, most of those
    attributes may be varied on a per-compilation or per-link basis.
    'b'.c'u'.c'b'c++'u'c++'b'.cc'u'.cc'b'.cpp'u'.cpp'b'.cxx'u'.cxx'b'objc'u'objc'b'.m'u'.m'b'Define the executables (and options for them) that will be run
        to perform the various stages of compilation.  The exact set of
        executables that may be specified here depends on the compiler
        class (via the 'executables' class attribute), but most will have:
          compiler      the C/C++ compiler
          linker_so     linker used to create shared objects and libraries
          linker_exe    linker used to create binary executables
          archiver      static library creator

        On platforms with a command-line (Unix, DOS/Windows), each of these
        is a string that will be split into executable name and (optional)
        list of arguments.  (Splitting the string is done similarly to how
        Unix shells operate: words are delimited by spaces, but quotes and
        backslashes can override this.  See
        'distutils.util.split_quoted()'.)
        'u'Define the executables (and options for them) that will be run
        to perform the various stages of compilation.  The exact set of
        executables that may be specified here depends on the compiler
        class (via the 'executables' class attribute), but most will have:
          compiler      the C/C++ compiler
          linker_so     linker used to create shared objects and libraries
          linker_exe    linker used to create binary executables
          archiver      static library creator

        On platforms with a command-line (Unix, DOS/Windows), each of these
        is a string that will be split into executable name and (optional)
        list of arguments.  (Splitting the string is done similarly to how
        Unix shells operate: words are delimited by spaces, but quotes and
        backslashes can override this.  See
        'distutils.util.split_quoted()'.)
        'b'unknown executable '%s' for class %s'u'unknown executable '%s' for class %s'b'Ensures that every element of 'definitions' is a valid macro
        definition, ie. either (name,value) 2-tuple or a (name,) tuple.  Do
        nothing if all definitions are OK, raise TypeError otherwise.
        'u'Ensures that every element of 'definitions' is a valid macro
        definition, ie. either (name,value) 2-tuple or a (name,) tuple.  Do
        nothing if all definitions are OK, raise TypeError otherwise.
        'b'invalid macro definition '%s': 'u'invalid macro definition '%s': 'b'must be tuple (string,), (string, string), or 'u'must be tuple (string,), (string, string), or 'b'(string, None)'u'(string, None)'b'Define a preprocessor macro for all compilations driven by this
        compiler object.  The optional parameter 'value' should be a
        string; if it is not supplied, then the macro will be defined
        without an explicit value and the exact outcome depends on the
        compiler used (XXX true? does ANSI say anything about this?)
        'u'Define a preprocessor macro for all compilations driven by this
        compiler object.  The optional parameter 'value' should be a
        string; if it is not supplied, then the macro will be defined
        without an explicit value and the exact outcome depends on the
        compiler used (XXX true? does ANSI say anything about this?)
        'b'Undefine a preprocessor macro for all compilations driven by
        this compiler object.  If the same macro is defined by
        'define_macro()' and undefined by 'undefine_macro()' the last call
        takes precedence (including multiple redefinitions or
        undefinitions).  If the macro is redefined/undefined on a
        per-compilation basis (ie. in the call to 'compile()'), then that
        takes precedence.
        'u'Undefine a preprocessor macro for all compilations driven by
        this compiler object.  If the same macro is defined by
        'define_macro()' and undefined by 'undefine_macro()' the last call
        takes precedence (including multiple redefinitions or
        undefinitions).  If the macro is redefined/undefined on a
        per-compilation basis (ie. in the call to 'compile()'), then that
        takes precedence.
        'b'Add 'dir' to the list of directories that will be searched for
        header files.  The compiler is instructed to search directories in
        the order in which they are supplied by successive calls to
        'add_include_dir()'.
        'u'Add 'dir' to the list of directories that will be searched for
        header files.  The compiler is instructed to search directories in
        the order in which they are supplied by successive calls to
        'add_include_dir()'.
        'b'Set the list of directories that will be searched to 'dirs' (a
        list of strings).  Overrides any preceding calls to
        'add_include_dir()'; subsequence calls to 'add_include_dir()' add
        to the list passed to 'set_include_dirs()'.  This does not affect
        any list of standard include directories that the compiler may
        search by default.
        'u'Set the list of directories that will be searched to 'dirs' (a
        list of strings).  Overrides any preceding calls to
        'add_include_dir()'; subsequence calls to 'add_include_dir()' add
        to the list passed to 'set_include_dirs()'.  This does not affect
        any list of standard include directories that the compiler may
        search by default.
        'b'Add 'libname' to the list of libraries that will be included in
        all links driven by this compiler object.  Note that 'libname'
        should *not* be the name of a file containing a library, but the
        name of the library itself: the actual filename will be inferred by
        the linker, the compiler, or the compiler class (depending on the
        platform).

        The linker will be instructed to link against libraries in the
        order they were supplied to 'add_library()' and/or
        'set_libraries()'.  It is perfectly valid to duplicate library
        names; the linker will be instructed to link against libraries as
        many times as they are mentioned.
        'u'Add 'libname' to the list of libraries that will be included in
        all links driven by this compiler object.  Note that 'libname'
        should *not* be the name of a file containing a library, but the
        name of the library itself: the actual filename will be inferred by
        the linker, the compiler, or the compiler class (depending on the
        platform).

        The linker will be instructed to link against libraries in the
        order they were supplied to 'add_library()' and/or
        'set_libraries()'.  It is perfectly valid to duplicate library
        names; the linker will be instructed to link against libraries as
        many times as they are mentioned.
        'b'Set the list of libraries to be included in all links driven by
        this compiler object to 'libnames' (a list of strings).  This does
        not affect any standard system libraries that the linker may
        include by default.
        'u'Set the list of libraries to be included in all links driven by
        this compiler object to 'libnames' (a list of strings).  This does
        not affect any standard system libraries that the linker may
        include by default.
        'b'Add 'dir' to the list of directories that will be searched for
        libraries specified to 'add_library()' and 'set_libraries()'.  The
        linker will be instructed to search for libraries in the order they
        are supplied to 'add_library_dir()' and/or 'set_library_dirs()'.
        'u'Add 'dir' to the list of directories that will be searched for
        libraries specified to 'add_library()' and 'set_libraries()'.  The
        linker will be instructed to search for libraries in the order they
        are supplied to 'add_library_dir()' and/or 'set_library_dirs()'.
        'b'Set the list of library search directories to 'dirs' (a list of
        strings).  This does not affect any standard library search path
        that the linker may search by default.
        'u'Set the list of library search directories to 'dirs' (a list of
        strings).  This does not affect any standard library search path
        that the linker may search by default.
        'b'Add 'dir' to the list of directories that will be searched for
        shared libraries at runtime.
        'u'Add 'dir' to the list of directories that will be searched for
        shared libraries at runtime.
        'b'Set the list of directories to search for shared libraries at
        runtime to 'dirs' (a list of strings).  This does not affect any
        standard search path that the runtime linker may search by
        default.
        'u'Set the list of directories to search for shared libraries at
        runtime to 'dirs' (a list of strings).  This does not affect any
        standard search path that the runtime linker may search by
        default.
        'b'Add 'object' to the list of object files (or analogues, such as
        explicitly named library files or the output of "resource
        compilers") to be included in every link driven by this compiler
        object.
        'u'Add 'object' to the list of object files (or analogues, such as
        explicitly named library files or the output of "resource
        compilers") to be included in every link driven by this compiler
        object.
        'b'Set the list of object files (or analogues) to be included in
        every link to 'objects'.  This does not affect any standard object
        files that the linker may include by default (such as system
        libraries).
        'u'Set the list of object files (or analogues) to be included in
        every link to 'objects'.  This does not affect any standard object
        files that the linker may include by default (such as system
        libraries).
        'b'Process arguments and decide which source files to compile.'u'Process arguments and decide which source files to compile.'b''output_dir' must be a string or None'u''output_dir' must be a string or None'b''macros' (if supplied) must be a list of tuples'u''macros' (if supplied) must be a list of tuples'b''include_dirs' (if supplied) must be a list of strings'u''include_dirs' (if supplied) must be a list of strings'b'-g'u'-g'b'Typecheck and fix-up some of the arguments to the 'compile()'
        method, and return fixed-up values.  Specifically: if 'output_dir'
        is None, replaces it with 'self.output_dir'; ensures that 'macros'
        is a list, and augments it with 'self.macros'; ensures that
        'include_dirs' is a list, and augments it with 'self.include_dirs'.
        Guarantees that the returned values are of the correct type,
        i.e. for 'output_dir' either string or None, and for 'macros' and
        'include_dirs' either list or None.
        'u'Typecheck and fix-up some of the arguments to the 'compile()'
        method, and return fixed-up values.  Specifically: if 'output_dir'
        is None, replaces it with 'self.output_dir'; ensures that 'macros'
        is a list, and augments it with 'self.macros'; ensures that
        'include_dirs' is a list, and augments it with 'self.include_dirs'.
        Guarantees that the returned values are of the correct type,
        i.e. for 'output_dir' either string or None, and for 'macros' and
        'include_dirs' either list or None.
        'b'Decide which souce files must be recompiled.

        Determine the list of object files corresponding to 'sources',
        and figure out which ones really need to be recompiled.
        Return a list of all object files and a dictionary telling
        which source files can be skipped.
        'u'Decide which souce files must be recompiled.

        Determine the list of object files corresponding to 'sources',
        and figure out which ones really need to be recompiled.
        Return a list of all object files and a dictionary telling
        which source files can be skipped.
        'b'Typecheck and fix up some arguments supplied to various methods.
        Specifically: ensure that 'objects' is a list; if output_dir is
        None, replace with self.output_dir.  Return fixed versions of
        'objects' and 'output_dir'.
        'u'Typecheck and fix up some arguments supplied to various methods.
        Specifically: ensure that 'objects' is a list; if output_dir is
        None, replace with self.output_dir.  Return fixed versions of
        'objects' and 'output_dir'.
        'b''objects' must be a list or tuple of strings'u''objects' must be a list or tuple of strings'b'Typecheck and fix up some of the arguments supplied to the
        'link_*' methods.  Specifically: ensure that all arguments are
        lists, and augment them with their permanent versions
        (eg. 'self.libraries' augments 'libraries').  Return a tuple with
        fixed versions of all arguments.
        'u'Typecheck and fix up some of the arguments supplied to the
        'link_*' methods.  Specifically: ensure that all arguments are
        lists, and augment them with their permanent versions
        (eg. 'self.libraries' augments 'libraries').  Return a tuple with
        fixed versions of all arguments.
        'b''libraries' (if supplied) must be a list of strings'u''libraries' (if supplied) must be a list of strings'b''library_dirs' (if supplied) must be a list of strings'u''library_dirs' (if supplied) must be a list of strings'b''runtime_library_dirs' (if supplied) must be a list of strings'u''runtime_library_dirs' (if supplied) must be a list of strings'b'Return true if we need to relink the files listed in 'objects'
        to recreate 'output_file'.
        'u'Return true if we need to relink the files listed in 'objects'
        to recreate 'output_file'.
        'b'newer'u'newer'b'Detect the language of a given file, or list of files. Uses
        language_map, and language_order to do the job.
        'u'Detect the language of a given file, or list of files. Uses
        language_map, and language_order to do the job.
        'b'Preprocess a single C/C++ source file, named in 'source'.
        Output will be written to file named 'output_file', or stdout if
        'output_file' not supplied.  'macros' is a list of macro
        definitions as for 'compile()', which will augment the macros set
        with 'define_macro()' and 'undefine_macro()'.  'include_dirs' is a
        list of directory names that will be added to the default list.

        Raises PreprocessError on failure.
        'u'Preprocess a single C/C++ source file, named in 'source'.
        Output will be written to file named 'output_file', or stdout if
        'output_file' not supplied.  'macros' is a list of macro
        definitions as for 'compile()', which will augment the macros set
        with 'define_macro()' and 'undefine_macro()'.  'include_dirs' is a
        list of directory names that will be added to the default list.

        Raises PreprocessError on failure.
        'b'Compile one or more source files.

        'sources' must be a list of filenames, most likely C/C++
        files, but in reality anything that can be handled by a
        particular compiler and compiler class (eg. MSVCCompiler can
        handle resource files in 'sources').  Return a list of object
        filenames, one per source filename in 'sources'.  Depending on
        the implementation, not all source files will necessarily be
        compiled, but all corresponding object filenames will be
        returned.

        If 'output_dir' is given, object files will be put under it, while
        retaining their original path component.  That is, "foo/bar.c"
        normally compiles to "foo/bar.o" (for a Unix implementation); if
        'output_dir' is "build", then it would compile to
        "build/foo/bar.o".

        'macros', if given, must be a list of macro definitions.  A macro
        definition is either a (name, value) 2-tuple or a (name,) 1-tuple.
        The former defines a macro; if the value is None, the macro is
        defined without an explicit value.  The 1-tuple case undefines a
        macro.  Later definitions/redefinitions/ undefinitions take
        precedence.

        'include_dirs', if given, must be a list of strings, the
        directories to add to the default include file search path for this
        compilation only.

        'debug' is a boolean; if true, the compiler will be instructed to
        output debug symbols in (or alongside) the object file(s).

        'extra_preargs' and 'extra_postargs' are implementation- dependent.
        On platforms that have the notion of a command-line (e.g. Unix,
        DOS/Windows), they are most likely lists of strings: extra
        command-line arguments to prepend/append to the compiler command
        line.  On other platforms, consult the implementation class
        documentation.  In any event, they are intended as an escape hatch
        for those occasions when the abstract compiler framework doesn't
        cut the mustard.

        'depends', if given, is a list of filenames that all targets
        depend on.  If a source file is older than any file in
        depends, then the source file will be recompiled.  This
        supports dependency tracking, but only at a coarse
        granularity.

        Raises CompileError on failure.
        'u'Compile one or more source files.

        'sources' must be a list of filenames, most likely C/C++
        files, but in reality anything that can be handled by a
        particular compiler and compiler class (eg. MSVCCompiler can
        handle resource files in 'sources').  Return a list of object
        filenames, one per source filename in 'sources'.  Depending on
        the implementation, not all source files will necessarily be
        compiled, but all corresponding object filenames will be
        returned.

        If 'output_dir' is given, object files will be put under it, while
        retaining their original path component.  That is, "foo/bar.c"
        normally compiles to "foo/bar.o" (for a Unix implementation); if
        'output_dir' is "build", then it would compile to
        "build/foo/bar.o".

        'macros', if given, must be a list of macro definitions.  A macro
        definition is either a (name, value) 2-tuple or a (name,) 1-tuple.
        The former defines a macro; if the value is None, the macro is
        defined without an explicit value.  The 1-tuple case undefines a
        macro.  Later definitions/redefinitions/ undefinitions take
        precedence.

        'include_dirs', if given, must be a list of strings, the
        directories to add to the default include file search path for this
        compilation only.

        'debug' is a boolean; if true, the compiler will be instructed to
        output debug symbols in (or alongside) the object file(s).

        'extra_preargs' and 'extra_postargs' are implementation- dependent.
        On platforms that have the notion of a command-line (e.g. Unix,
        DOS/Windows), they are most likely lists of strings: extra
        command-line arguments to prepend/append to the compiler command
        line.  On other platforms, consult the implementation class
        documentation.  In any event, they are intended as an escape hatch
        for those occasions when the abstract compiler framework doesn't
        cut the mustard.

        'depends', if given, is a list of filenames that all targets
        depend on.  If a source file is older than any file in
        depends, then the source file will be recompiled.  This
        supports dependency tracking, but only at a coarse
        granularity.

        Raises CompileError on failure.
        'b'Compile 'src' to product 'obj'.'u'Compile 'src' to product 'obj'.'b'Link a bunch of stuff together to create a static library file.
        The "bunch of stuff" consists of the list of object files supplied
        as 'objects', the extra object files supplied to
        'add_link_object()' and/or 'set_link_objects()', the libraries
        supplied to 'add_library()' and/or 'set_libraries()', and the
        libraries supplied as 'libraries' (if any).

        'output_libname' should be a library name, not a filename; the
        filename will be inferred from the library name.  'output_dir' is
        the directory where the library file will be put.

        'debug' is a boolean; if true, debugging information will be
        included in the library (note that on most platforms, it is the
        compile step where this matters: the 'debug' flag is included here
        just for consistency).

        'target_lang' is the target language for which the given objects
        are being compiled. This allows specific linkage time treatment of
        certain languages.

        Raises LibError on failure.
        'u'Link a bunch of stuff together to create a static library file.
        The "bunch of stuff" consists of the list of object files supplied
        as 'objects', the extra object files supplied to
        'add_link_object()' and/or 'set_link_objects()', the libraries
        supplied to 'add_library()' and/or 'set_libraries()', and the
        libraries supplied as 'libraries' (if any).

        'output_libname' should be a library name, not a filename; the
        filename will be inferred from the library name.  'output_dir' is
        the directory where the library file will be put.

        'debug' is a boolean; if true, debugging information will be
        included in the library (note that on most platforms, it is the
        compile step where this matters: the 'debug' flag is included here
        just for consistency).

        'target_lang' is the target language for which the given objects
        are being compiled. This allows specific linkage time treatment of
        certain languages.

        Raises LibError on failure.
        'b'shared_object'u'shared_object'b'shared_library'u'shared_library'b'executable'u'executable'b'Link a bunch of stuff together to create an executable or
        shared library file.

        The "bunch of stuff" consists of the list of object files supplied
        as 'objects'.  'output_filename' should be a filename.  If
        'output_dir' is supplied, 'output_filename' is relative to it
        (i.e. 'output_filename' can provide directory components if
        needed).

        'libraries' is a list of libraries to link against.  These are
        library names, not filenames, since they're translated into
        filenames in a platform-specific way (eg. "foo" becomes "libfoo.a"
        on Unix and "foo.lib" on DOS/Windows).  However, they can include a
        directory component, which means the linker will look in that
        specific directory rather than searching all the normal locations.

        'library_dirs', if supplied, should be a list of directories to
        search for libraries that were specified as bare library names
        (ie. no directory component).  These are on top of the system
        default and those supplied to 'add_library_dir()' and/or
        'set_library_dirs()'.  'runtime_library_dirs' is a list of
        directories that will be embedded into the shared library and used
        to search for other shared libraries that *it* depends on at
        run-time.  (This may only be relevant on Unix.)

        'export_symbols' is a list of symbols that the shared library will
        export.  (This appears to be relevant only on Windows.)

        'debug' is as for 'compile()' and 'create_static_lib()', with the
        slight distinction that it actually matters on most platforms (as
        opposed to 'create_static_lib()', which includes a 'debug' flag
        mostly for form's sake).

        'extra_preargs' and 'extra_postargs' are as for 'compile()' (except
        of course that they supply command-line arguments for the
        particular linker being used).

        'target_lang' is the target language for which the given objects
        are being compiled. This allows specific linkage time treatment of
        certain languages.

        Raises LinkError on failure.
        'u'Link a bunch of stuff together to create an executable or
        shared library file.

        The "bunch of stuff" consists of the list of object files supplied
        as 'objects'.  'output_filename' should be a filename.  If
        'output_dir' is supplied, 'output_filename' is relative to it
        (i.e. 'output_filename' can provide directory components if
        needed).

        'libraries' is a list of libraries to link against.  These are
        library names, not filenames, since they're translated into
        filenames in a platform-specific way (eg. "foo" becomes "libfoo.a"
        on Unix and "foo.lib" on DOS/Windows).  However, they can include a
        directory component, which means the linker will look in that
        specific directory rather than searching all the normal locations.

        'library_dirs', if supplied, should be a list of directories to
        search for libraries that were specified as bare library names
        (ie. no directory component).  These are on top of the system
        default and those supplied to 'add_library_dir()' and/or
        'set_library_dirs()'.  'runtime_library_dirs' is a list of
        directories that will be embedded into the shared library and used
        to search for other shared libraries that *it* depends on at
        run-time.  (This may only be relevant on Unix.)

        'export_symbols' is a list of symbols that the shared library will
        export.  (This appears to be relevant only on Windows.)

        'debug' is as for 'compile()' and 'create_static_lib()', with the
        slight distinction that it actually matters on most platforms (as
        opposed to 'create_static_lib()', which includes a 'debug' flag
        mostly for form's sake).

        'extra_preargs' and 'extra_postargs' are as for 'compile()' (except
        of course that they supply command-line arguments for the
        particular linker being used).

        'target_lang' is the target language for which the given objects
        are being compiled. This allows specific linkage time treatment of
        certain languages.

        Raises LinkError on failure.
        'b'Return the compiler option to add 'dir' to the list of
        directories searched for libraries.
        'u'Return the compiler option to add 'dir' to the list of
        directories searched for libraries.
        'b'Return the compiler option to add 'dir' to the list of
        directories searched for runtime libraries.
        'u'Return the compiler option to add 'dir' to the list of
        directories searched for runtime libraries.
        'b'Return the compiler option to add 'lib' to the list of libraries
        linked into the shared library or executable.
        'u'Return the compiler option to add 'lib' to the list of libraries
        linked into the shared library or executable.
        'b'Return a boolean indicating whether funcname is supported on
        the current platform.  The optional arguments can be used to
        augment the compilation environment.
        'u'Return a boolean indicating whether funcname is supported on
        the current platform.  The optional arguments can be used to
        augment the compilation environment.
        'b'#include "%s"
'u'#include "%s"
'b'int main (int argc, char **argv) {
    %s();
    return 0;
}
'u'int main (int argc, char **argv) {
    %s();
    return 0;
}
'b'a.out'u'a.out'b'Search the specified list of directories for a static or shared
        library file 'lib' and return the full path to that file.  If
        'debug' true, look for a debugging version (if that makes sense on
        the current platform).  Return None if 'lib' wasn't found in any of
        the specified directories.
        'u'Search the specified list of directories for a static or shared
        library file 'lib' and return the full path to that file.  If
        'debug' true, look for a debugging version (if that makes sense on
        the current platform).  Return None if 'lib' wasn't found in any of
        the specified directories.
        'b'unknown file type '%s' (from '%s')'u'unknown file type '%s' (from '%s')'b'dylib'u'dylib'b'xcode_stub'u'xcode_stub'b''lib_type' must be "static", "shared", "dylib", or "xcode_stub"'u''lib_type' must be "static", "shared", "dylib", or "xcode_stub"'b'_lib_format'u'_lib_format'b'_lib_extension'u'_lib_extension'b'warning: %s
'u'warning: %s
'b'cygwin.*'u'cygwin.*'b'unix'u'unix'b'Determine the default compiler to use for the given platform.

       osname should be one of the standard Python OS names (i.e. the
       ones returned by os.name) and platform the common value
       returned by sys.platform for the platform in question.

       The default values are os.name and sys.platform in case the
       parameters are not given.
    'u'Determine the default compiler to use for the given platform.

       osname should be one of the standard Python OS names (i.e. the
       ones returned by os.name) and platform the common value
       returned by sys.platform for the platform in question.

       The default values are os.name and sys.platform in case the
       parameters are not given.
    'b'unixccompiler'u'unixccompiler'b'UnixCCompiler'u'UnixCCompiler'b'standard UNIX-style compiler'u'standard UNIX-style compiler'b'_msvccompiler'u'_msvccompiler'b'MSVCCompiler'u'MSVCCompiler'b'Microsoft Visual C++'u'Microsoft Visual C++'b'cygwinccompiler'u'cygwinccompiler'b'CygwinCCompiler'u'CygwinCCompiler'b'Cygwin port of GNU C Compiler for Win32'u'Cygwin port of GNU C Compiler for Win32'b'Mingw32CCompiler'u'Mingw32CCompiler'b'Mingw32 port of GNU C Compiler for Win32'u'Mingw32 port of GNU C Compiler for Win32'b'mingw32'u'mingw32'b'bcppcompiler'u'bcppcompiler'b'BCPPCompiler'u'BCPPCompiler'b'Borland C++ Compiler'u'Borland C++ Compiler'b'bcpp'u'bcpp'b'Print list of available compilers (used by the "--help-compiler"
    options to "build", "build_ext", "build_clib").
    'u'Print list of available compilers (used by the "--help-compiler"
    options to "build", "build_ext", "build_clib").
    'b'compiler='u'compiler='b'List of available compilers:'u'List of available compilers:'b'Generate an instance of some CCompiler subclass for the supplied
    platform/compiler combination.  'plat' defaults to 'os.name'
    (eg. 'posix', 'nt'), and 'compiler' defaults to the default compiler
    for that platform.  Currently only 'posix' and 'nt' are supported, and
    the default compilers are "traditional Unix interface" (UnixCCompiler
    class) and Visual C++ (MSVCCompiler class).  Note that it's perfectly
    possible to ask for a Unix compiler object under Windows, and a
    Microsoft compiler object under Unix -- if you supply a value for
    'compiler', 'plat' is ignored.
    'u'Generate an instance of some CCompiler subclass for the supplied
    platform/compiler combination.  'plat' defaults to 'os.name'
    (eg. 'posix', 'nt'), and 'compiler' defaults to the default compiler
    for that platform.  Currently only 'posix' and 'nt' are supported, and
    the default compilers are "traditional Unix interface" (UnixCCompiler
    class) and Visual C++ (MSVCCompiler class).  Note that it's perfectly
    possible to ask for a Unix compiler object under Windows, and a
    Microsoft compiler object under Unix -- if you supply a value for
    'compiler', 'plat' is ignored.
    'b'don't know how to compile C/C++ code on platform '%s''u'don't know how to compile C/C++ code on platform '%s''b' with '%s' compiler'u' with '%s' compiler'b'distutils.'u'distutils.'b'can't compile C/C++ code: unable to load module '%s''u'can't compile C/C++ code: unable to load module '%s''b'can't compile C/C++ code: unable to find class '%s' in module '%s''u'can't compile C/C++ code: unable to find class '%s' in module '%s''b'Generate C pre-processor options (-D, -U, -I) as used by at least
    two types of compilers: the typical Unix compiler and Visual C++.
    'macros' is the usual thing, a list of 1- or 2-tuples, where (name,)
    means undefine (-U) macro 'name', and (name,value) means define (-D)
    macro 'name' to 'value'.  'include_dirs' is just a list of directory
    names to be added to the header file search path (-I).  Returns a list
    of command-line options suitable for either Unix compilers or Visual
    C++.
    'u'Generate C pre-processor options (-D, -U, -I) as used by at least
    two types of compilers: the typical Unix compiler and Visual C++.
    'macros' is the usual thing, a list of 1- or 2-tuples, where (name,)
    means undefine (-U) macro 'name', and (name,value) means define (-D)
    macro 'name' to 'value'.  'include_dirs' is just a list of directory
    names to be added to the header file search path (-I).  Returns a list
    of command-line options suitable for either Unix compilers or Visual
    C++.
    'b'bad macro definition '%s': each element of 'macros' list must be a 1- or 2-tuple'u'bad macro definition '%s': each element of 'macros' list must be a 1- or 2-tuple'b'-U%s'u'-U%s'b'-D%s'u'-D%s'b'-D%s=%s'u'-D%s=%s'b'-I%s'u'-I%s'b'Generate linker options for searching library directories and
    linking with specific libraries.  'libraries' and 'library_dirs' are,
    respectively, lists of library names (not filenames!) and search
    directories.  Returns a list of command-line options suitable for use
    with some compiler (depending on the two format strings passed in).
    'u'Generate linker options for searching library directories and
    linking with specific libraries.  'libraries' and 'library_dirs' are,
    respectively, lists of library names (not filenames!) and search
    directories.  Returns a list of command-line options suitable for use
    with some compiler (depending on the two format strings passed in).
    'b'no library file corresponding to '%s' found (skipping)'u'no library file corresponding to '%s' found (skipping)'u'Python39.lib.distutils.ccompiler'u'lib.distutils.ccompiler'u'distutils.ccompiler'u'ccompiler'Charsetadd_aliasadd_charsetadd_codecemail.base64mimeemail.quoprimimeemail.encodersencode_7or8bitQPBASE64SHORTESTRFC2047_CHROME_LENDEFAULT_CHARSETiso-8859-2iso-8859-3iso-8859-4iso-8859-9iso-8859-10iso-8859-13iso-8859-14iso-8859-15iso-8859-16windows-1252visciiiso-2022-jpeuc-jpkoi8-rCHARSETSlatin-1latin_2latin-2latin_3latin-3latin_4latin-4latin_5latin-5latin_6latin-6latin_7latin-7latin_8latin-8latin_9latin-9latin_10latin-10ks_c_5601-1987euc-krALIASESCODEC_MAPheader_encbody_encoutput_charsetAdd character set properties to the global registry.

    charset is the input character set, and must be the canonical name of a
    character set.

    Optional header_enc and body_enc is either Charset.QP for
    quoted-printable, Charset.BASE64 for base64 encoding, Charset.SHORTEST for
    the shortest of qp or base64 encoding, or None for no encoding.  SHORTEST
    is only valid for header_enc.  It describes how message headers and
    message bodies in the input charset are to be encoded.  Default is no
    encoding.

    Optional output_charset is the character set that the output should be
    in.  Conversions will proceed from input charset, to Unicode, to the
    output charset when the method Charset.convert() is called.  The default
    is to output in the same character set as the input.

    Both input_charset and output_charset must have Unicode codec entries in
    the module's charset-to-codec mapping; use add_codec(charset, codecname)
    to add codecs the module does not know about.  See the codecs module's
    documentation for more information.
    SHORTEST not allowed for body_encAdd a character set alias.

    alias is the alias name, e.g. latin-1
    canonical is the character set's canonical name, e.g. iso-8859-1
    codecnameAdd a codec that map characters in the given charset to/from Unicode.

    charset is the canonical name of a character set.  codecname is the name
    of a Python codec, as appropriate for the second argument to the unicode()
    built-in, or to the encode() method of a Unicode string.
    _encodecodecMap character sets to their email properties.

    This class provides information about the requirements imposed on email
    for a specific character set.  It also provides convenience routines for
    converting between character sets, given the availability of the
    applicable codecs.  Given a character set, it will do its best to provide
    information on how to use that character set in an email in an
    RFC-compliant way.

    Certain character sets must be encoded with quoted-printable or base64
    when used in email headers or bodies.  Certain character sets must be
    converted outright, and are not allowed in email.  Instances of this
    module expose the following information about a character set:

    input_charset: The initial character set specified.  Common aliases
                   are converted to their `official' email names (e.g. latin_1
                   is converted to iso-8859-1).  Defaults to 7-bit us-ascii.

    header_encoding: If the character set must be encoded before it can be
                     used in an email header, this attribute will be set to
                     Charset.QP (for quoted-printable), Charset.BASE64 (for
                     base64 encoding), or Charset.SHORTEST for the shortest of
                     QP or BASE64 encoding.  Otherwise, it will be None.

    body_encoding: Same as header_encoding, but describes the encoding for the
                   mail message's body, which indeed may be different than the
                   header encoding.  Charset.SHORTEST is not allowed for
                   body_encoding.

    output_charset: Some character sets must be converted before they can be
                    used in email headers or bodies.  If the input_charset is
                    one of them, this attribute will contain the name of the
                    charset output will be converted to.  Otherwise, it will
                    be None.

    input_codec: The name of the Python codec used to convert the
                 input_charset to Unicode.  If no conversion codec is
                 necessary, this attribute will be None.

    output_codec: The name of the Python codec used to convert Unicode
                  to the output_charset.  If no conversion codec is necessary,
                  this attribute will have the same value as the input_codec.
    input_charsethencbencheader_encodingbody_encodinginput_codecoutput_codecget_body_encodingReturn the content-transfer-encoding used for body encoding.

        This is either the string `quoted-printable' or `base64' depending on
        the encoding used, or it is a function in which case you should call
        the function with a single argument, the Message object being
        encoded.  The function should then set the Content-Transfer-Encoding
        header itself to whatever is appropriate.

        Returns "quoted-printable" if self.body_encoding is QP.
        Returns "base64" if self.body_encoding is BASE64.
        Returns conversion function otherwise.
        quoted-printableget_output_charsetReturn the output character set.

        This is self.output_charset if that is not None, otherwise it is
        self.input_charset.
        Header-encode a string by converting it first to bytes.

        The type of encoding (base64 or quoted-printable) will be based on
        this charset's `header_encoding`.

        :param string: A unicode string for the header.  It must be possible
            to encode this string to bytes using the character set's
            output codec.
        :return: The encoded string, with RFC 2047 chrome.
        _get_encoderencoder_moduleheader_encode_linesmaxlengthsHeader-encode a string by converting it first to bytes.

        This is similar to `header_encode()` except that the string is fit
        into maximum line lengths as given by the argument.

        :param string: A unicode string for the header.  It must be possible
            to encode this string to bytes using the character set's
            output codec.
        :param maxlengths: Maximum line length iterator.  Each element
            returned from this iterator will provide the next maximum line
            length.  This parameter is used as an argument to built-in next()
            and should never be exhausted.  The maximum line lengths should
            not count the RFC 2047 chrome.  These line lengths are only a
            hint; the splitter does the best it can.
        :return: Lines of encoded strings, each with RFC 2047 chrome.
        current_linethis_linejoined_linelen64lenqpBody-encode a string by converting it first to bytes.

        The type of encoding (base64 or quoted-printable) will be based on
        self.body_encoding.  If body_encoding is None, we assume the
        output charset is a 7bit encoding, so re-encoding the decoded
        string using the ascii codec produces the correct string version
        of the content.
        # Author: Ben Gertzfield, Barry Warsaw# Flags for types of header encodings# Quoted-Printable# the shorter of QP and base64, but only for headers# In "=?charset?q?hello_world?=", the =?, ?q?, and ?= add up to 7# Defaults# input        header enc  body enc output conv# iso-8859-5 is Cyrillic, and not especially used# iso-8859-6 is Arabic, also not particularly used# iso-8859-7 is Greek, QP will not make it readable# iso-8859-8 is Hebrew, QP will not make it readable# iso-8859-11 is Thai, QP will not make it readable# Aliases for other commonly-used names for character sets.  Map# them to the real ones used in email.# Map charsets to their Unicode codec strings.# Hack: We don't want *any* conversion for stuff marked us-ascii, as all# sorts of garbage might be sent to us in the guise of 7-bit us-ascii.# Let that stuff pass through without conversion to/from Unicode.# Convenience functions for extending the above mappings# Convenience function for encoding strings, taking into account# that they might be unknown-8bit (ie: have surrogate-escaped bytes)# RFC 2046, $4.1.2 says charsets are not case sensitive.  We coerce to# unicode because its .lower() is locale insensitive.  If the argument# is already a unicode, we leave it at that, but ensure that the# charset is ASCII, as the standard (RFC XXX) requires.# Set the input charset after filtering through the aliases# We can try to guess which encoding and conversion to use by the# charset_map dictionary.  Try that first, but let the user override# it.# Set the attributes, allowing the arguments to override the default.# Now set the codecs.  If one isn't defined for input_charset,# guess and try a Unicode codec with the same name as input_codec.# 7bit/8bit encodings return the string unchanged (modulo conversions)# See which encoding we should use.# Calculate the number of characters that the RFC 2047 chrome will# contribute to each line.# Now comes the hard part.  We must encode bytes but we can't split on# bytes because some character sets are variable length and each# encoded word must stand on its own.  So the problem is you have to# encode to bytes to figure out this word's length, but you must split# on characters.  This causes two problems: first, we don't know how# many octets a specific substring of unicode characters will get# encoded to, and second, we don't know how many ASCII characters# those octets will get encoded to.  Unless we try it.  Which seems# inefficient.  In the interest of being correct rather than fast (and# in the hope that there will be few encoded headers in any such# message), brute force it. :(# This last character doesn't fit so pop it off.# Does nothing fit on the first line?# quopromime.body_encode takes a string, but operates on it as if# it were a list of byte codes.  For a (minimal) history on why# this is so, see changeset 0cf700464177.  To correctly encode a# character set, then, we must turn it into pseudo bytes via the# latin1 charset, which will encode any byte as a single code point# between 0 and 255, which is what body_encode is expecting.b'Charset'u'Charset'b'add_alias'u'add_alias'b'add_charset'u'add_charset'b'add_codec'u'add_codec'b'iso-8859-2'u'iso-8859-2'b'iso-8859-3'u'iso-8859-3'b'iso-8859-4'u'iso-8859-4'b'iso-8859-9'u'iso-8859-9'b'iso-8859-10'u'iso-8859-10'b'iso-8859-13'u'iso-8859-13'b'iso-8859-14'u'iso-8859-14'b'iso-8859-15'u'iso-8859-15'b'iso-8859-16'u'iso-8859-16'b'windows-1252'u'windows-1252'b'viscii'u'viscii'b'iso-2022-jp'u'iso-2022-jp'b'euc-jp'u'euc-jp'b'koi8-r'u'koi8-r'b'latin-1'u'latin-1'b'latin_2'u'latin_2'b'latin-2'u'latin-2'b'latin_3'u'latin_3'b'latin-3'u'latin-3'b'latin_4'u'latin_4'b'latin-4'u'latin-4'b'latin_5'u'latin_5'b'latin-5'u'latin-5'b'latin_6'u'latin_6'b'latin-6'u'latin-6'b'latin_7'u'latin_7'b'latin-7'u'latin-7'b'latin_8'u'latin_8'b'latin-8'u'latin-8'b'latin_9'u'latin_9'b'latin-9'u'latin-9'b'latin_10'u'latin_10'b'latin-10'u'latin-10'b'ks_c_5601-1987'u'ks_c_5601-1987'b'euc-kr'u'euc-kr'b'Add character set properties to the global registry.

    charset is the input character set, and must be the canonical name of a
    character set.

    Optional header_enc and body_enc is either Charset.QP for
    quoted-printable, Charset.BASE64 for base64 encoding, Charset.SHORTEST for
    the shortest of qp or base64 encoding, or None for no encoding.  SHORTEST
    is only valid for header_enc.  It describes how message headers and
    message bodies in the input charset are to be encoded.  Default is no
    encoding.

    Optional output_charset is the character set that the output should be
    in.  Conversions will proceed from input charset, to Unicode, to the
    output charset when the method Charset.convert() is called.  The default
    is to output in the same character set as the input.

    Both input_charset and output_charset must have Unicode codec entries in
    the module's charset-to-codec mapping; use add_codec(charset, codecname)
    to add codecs the module does not know about.  See the codecs module's
    documentation for more information.
    'u'Add character set properties to the global registry.

    charset is the input character set, and must be the canonical name of a
    character set.

    Optional header_enc and body_enc is either Charset.QP for
    quoted-printable, Charset.BASE64 for base64 encoding, Charset.SHORTEST for
    the shortest of qp or base64 encoding, or None for no encoding.  SHORTEST
    is only valid for header_enc.  It describes how message headers and
    message bodies in the input charset are to be encoded.  Default is no
    encoding.

    Optional output_charset is the character set that the output should be
    in.  Conversions will proceed from input charset, to Unicode, to the
    output charset when the method Charset.convert() is called.  The default
    is to output in the same character set as the input.

    Both input_charset and output_charset must have Unicode codec entries in
    the module's charset-to-codec mapping; use add_codec(charset, codecname)
    to add codecs the module does not know about.  See the codecs module's
    documentation for more information.
    'b'SHORTEST not allowed for body_enc'u'SHORTEST not allowed for body_enc'b'Add a character set alias.

    alias is the alias name, e.g. latin-1
    canonical is the character set's canonical name, e.g. iso-8859-1
    'u'Add a character set alias.

    alias is the alias name, e.g. latin-1
    canonical is the character set's canonical name, e.g. iso-8859-1
    'b'Add a codec that map characters in the given charset to/from Unicode.

    charset is the canonical name of a character set.  codecname is the name
    of a Python codec, as appropriate for the second argument to the unicode()
    built-in, or to the encode() method of a Unicode string.
    'u'Add a codec that map characters in the given charset to/from Unicode.

    charset is the canonical name of a character set.  codecname is the name
    of a Python codec, as appropriate for the second argument to the unicode()
    built-in, or to the encode() method of a Unicode string.
    'b'Map character sets to their email properties.

    This class provides information about the requirements imposed on email
    for a specific character set.  It also provides convenience routines for
    converting between character sets, given the availability of the
    applicable codecs.  Given a character set, it will do its best to provide
    information on how to use that character set in an email in an
    RFC-compliant way.

    Certain character sets must be encoded with quoted-printable or base64
    when used in email headers or bodies.  Certain character sets must be
    converted outright, and are not allowed in email.  Instances of this
    module expose the following information about a character set:

    input_charset: The initial character set specified.  Common aliases
                   are converted to their `official' email names (e.g. latin_1
                   is converted to iso-8859-1).  Defaults to 7-bit us-ascii.

    header_encoding: If the character set must be encoded before it can be
                     used in an email header, this attribute will be set to
                     Charset.QP (for quoted-printable), Charset.BASE64 (for
                     base64 encoding), or Charset.SHORTEST for the shortest of
                     QP or BASE64 encoding.  Otherwise, it will be None.

    body_encoding: Same as header_encoding, but describes the encoding for the
                   mail message's body, which indeed may be different than the
                   header encoding.  Charset.SHORTEST is not allowed for
                   body_encoding.

    output_charset: Some character sets must be converted before they can be
                    used in email headers or bodies.  If the input_charset is
                    one of them, this attribute will contain the name of the
                    charset output will be converted to.  Otherwise, it will
                    be None.

    input_codec: The name of the Python codec used to convert the
                 input_charset to Unicode.  If no conversion codec is
                 necessary, this attribute will be None.

    output_codec: The name of the Python codec used to convert Unicode
                  to the output_charset.  If no conversion codec is necessary,
                  this attribute will have the same value as the input_codec.
    'u'Map character sets to their email properties.

    This class provides information about the requirements imposed on email
    for a specific character set.  It also provides convenience routines for
    converting between character sets, given the availability of the
    applicable codecs.  Given a character set, it will do its best to provide
    information on how to use that character set in an email in an
    RFC-compliant way.

    Certain character sets must be encoded with quoted-printable or base64
    when used in email headers or bodies.  Certain character sets must be
    converted outright, and are not allowed in email.  Instances of this
    module expose the following information about a character set:

    input_charset: The initial character set specified.  Common aliases
                   are converted to their `official' email names (e.g. latin_1
                   is converted to iso-8859-1).  Defaults to 7-bit us-ascii.

    header_encoding: If the character set must be encoded before it can be
                     used in an email header, this attribute will be set to
                     Charset.QP (for quoted-printable), Charset.BASE64 (for
                     base64 encoding), or Charset.SHORTEST for the shortest of
                     QP or BASE64 encoding.  Otherwise, it will be None.

    body_encoding: Same as header_encoding, but describes the encoding for the
                   mail message's body, which indeed may be different than the
                   header encoding.  Charset.SHORTEST is not allowed for
                   body_encoding.

    output_charset: Some character sets must be converted before they can be
                    used in email headers or bodies.  If the input_charset is
                    one of them, this attribute will contain the name of the
                    charset output will be converted to.  Otherwise, it will
                    be None.

    input_codec: The name of the Python codec used to convert the
                 input_charset to Unicode.  If no conversion codec is
                 necessary, this attribute will be None.

    output_codec: The name of the Python codec used to convert Unicode
                  to the output_charset.  If no conversion codec is necessary,
                  this attribute will have the same value as the input_codec.
    'b'Return the content-transfer-encoding used for body encoding.

        This is either the string `quoted-printable' or `base64' depending on
        the encoding used, or it is a function in which case you should call
        the function with a single argument, the Message object being
        encoded.  The function should then set the Content-Transfer-Encoding
        header itself to whatever is appropriate.

        Returns "quoted-printable" if self.body_encoding is QP.
        Returns "base64" if self.body_encoding is BASE64.
        Returns conversion function otherwise.
        'u'Return the content-transfer-encoding used for body encoding.

        This is either the string `quoted-printable' or `base64' depending on
        the encoding used, or it is a function in which case you should call
        the function with a single argument, the Message object being
        encoded.  The function should then set the Content-Transfer-Encoding
        header itself to whatever is appropriate.

        Returns "quoted-printable" if self.body_encoding is QP.
        Returns "base64" if self.body_encoding is BASE64.
        Returns conversion function otherwise.
        'b'quoted-printable'u'quoted-printable'b'Return the output character set.

        This is self.output_charset if that is not None, otherwise it is
        self.input_charset.
        'u'Return the output character set.

        This is self.output_charset if that is not None, otherwise it is
        self.input_charset.
        'b'Header-encode a string by converting it first to bytes.

        The type of encoding (base64 or quoted-printable) will be based on
        this charset's `header_encoding`.

        :param string: A unicode string for the header.  It must be possible
            to encode this string to bytes using the character set's
            output codec.
        :return: The encoded string, with RFC 2047 chrome.
        'u'Header-encode a string by converting it first to bytes.

        The type of encoding (base64 or quoted-printable) will be based on
        this charset's `header_encoding`.

        :param string: A unicode string for the header.  It must be possible
            to encode this string to bytes using the character set's
            output codec.
        :return: The encoded string, with RFC 2047 chrome.
        'b'Header-encode a string by converting it first to bytes.

        This is similar to `header_encode()` except that the string is fit
        into maximum line lengths as given by the argument.

        :param string: A unicode string for the header.  It must be possible
            to encode this string to bytes using the character set's
            output codec.
        :param maxlengths: Maximum line length iterator.  Each element
            returned from this iterator will provide the next maximum line
            length.  This parameter is used as an argument to built-in next()
            and should never be exhausted.  The maximum line lengths should
            not count the RFC 2047 chrome.  These line lengths are only a
            hint; the splitter does the best it can.
        :return: Lines of encoded strings, each with RFC 2047 chrome.
        'u'Header-encode a string by converting it first to bytes.

        This is similar to `header_encode()` except that the string is fit
        into maximum line lengths as given by the argument.

        :param string: A unicode string for the header.  It must be possible
            to encode this string to bytes using the character set's
            output codec.
        :param maxlengths: Maximum line length iterator.  Each element
            returned from this iterator will provide the next maximum line
            length.  This parameter is used as an argument to built-in next()
            and should never be exhausted.  The maximum line lengths should
            not count the RFC 2047 chrome.  These line lengths are only a
            hint; the splitter does the best it can.
        :return: Lines of encoded strings, each with RFC 2047 chrome.
        'b'Body-encode a string by converting it first to bytes.

        The type of encoding (base64 or quoted-printable) will be based on
        self.body_encoding.  If body_encoding is None, we assume the
        output charset is a 7bit encoding, so re-encoding the decoded
        string using the ascii codec produces the correct string version
        of the content.
        'u'Body-encode a string by converting it first to bytes.

        The type of encoding (base64 or quoted-printable) will be based on
        self.body_encoding.  If body_encoding is None, we assume the
        output charset is a 7bit encoding, so re-encoding the decoded
        string using the ascii codec produces the correct string version
        of the content.
        'u'Python39.lib.email.charset'u'lib.email.charset'u'email.charset'astclick.coreParameterSourceimport_stringNoAppExceptionRaised if an application cannot be found or loaded.find_best_appGiven a module instance this tries to find the best possible
    application in the module or raises an exception.
    applicationDetected multiple Flask applications in module '"Detected multiple Flask applications in module"'. Use ':name' to specify the correct one.":name'"" to specify the correct one."create_appmake_appapp_factory_called_with_wrong_argsDetected factory '' in module '', but could not call it without arguments. Use '"',"" but could not call it without arguments. Use"(args)' to specify arguments."(args)'"" to specify arguments."Failed to find Flask application or factory in module '"Failed to find Flask application or factory in module":name' to specify one." to specify one."Check whether calling a function raised a ``TypeError`` because
    the call failed or because something in the factory raised the
    error.

    :param f: The function that was called.
    :return: ``True`` if the call failed.
    find_app_by_stringapp_nameCheck if the given string is a variable name or a function. Call
    a function to get the app instance, or return the variable directly.
    Failed to parse  as an attribute name or function call.Function reference must be a simple name: Failed to parse arguments as literal values: Failed to find attribute The factory  in module " in module" could not be called with the specified arguments." could not be called with the"" specified arguments."A valid Flask application was not obtained from '"A valid Flask application was not obtained from"'.prepare_importGiven a filename this will try to calculate the python path, add it
    to the search path and return the actual module name that is expected.
    locate_appraise_if_not_foundWhile importing , an ImportError was raised:

", an ImportError was"" raised:\n\n"format_excCould not import resilient_parsingPython python_version
Flask "\n""Flask "
Werkzeug "Werkzeug "--versionShow the Flask version.expose_valueis_flagis_eagerScriptInfoHelper object to deal with Flask applications.  This is usually not
    necessary to interface with as it's used internally in the dispatching
    to click.  In future versions of Flask this object will most likely play
    a bigger role.  Typically it's created automatically by the
    :class:`FlaskGroup` but you can also manually create it and pass it
    onwards as click object.
    app_import_pathset_debug_flag_loaded_appload_appLoads the Flask app (if not yet loaded) and returns it.  Calling
        this multiple times will just result in the already loaded app to
        be returned.
        :(?![\\/])wsgi.pyapp.pyCould not locate a Flask application. Use the 'flask --app' option, 'FLASK_APP' environment variable, or a 'wsgi.py' or 'app.py' file in the current directory."Could not locate a Flask application. Use the"" 'flask --app' option, 'FLASK_APP' environment"" variable, or a 'wsgi.py' or 'app.py' file in the"" current directory."ensurepass_script_infowith_appcontextWraps a callback so that it's guaranteed to be executed with the
    script's application context.

    Custom commands (and their options) registered under ``app.cli`` or
    ``blueprint.cli`` will always have an app context available, this
    decorator is not required in that case.

    .. versionchanged:: 2.2
        The app context is active for subcommands as well as the
        decorated callback. The app context is always available to
        ``app.cli`` command and parameter callbacks.
    __ctxensure_objectwith_resourceAppGroupThis works similar to a regular click :class:`~click.Group` but it
    changes the behavior of the :meth:`command` decorator so that it
    automatically wraps the functions in :func:`with_appcontext`.

    Not to be confused with :class:`FlaskGroup`.
    This works exactly like the method of the same name on a regular
        :class:`click.Group` but it wraps callbacks in :func:`with_appcontext`
        unless it's disabled by passing ``with_appcontext=False``.
        wrap_for_ctxThis works exactly like the method of the same name on a regular
        :class:`click.Group` but it defaults the group class to
        :class:`AppGroup`.
        _set_app-A--appIMPORTThe Flask application or factory function to load, in the form 'module:name'. Module can be a dotted import or file path. Name is not required if it is 'app', 'application', 'create_app', or 'make_app', and can be 'name(args)' to pass arguments."The Flask application or factory function to load, in the form 'module:name'."" Module can be a dotted import or file path. Name is not required if it is"" 'app', 'application', 'create_app', or 'make_app', and can be 'name(args)' to"" pass arguments."_app_option_set_debugget_parameter_sourceDEFAULTDEFAULT_MAP--debug/--no-debugSet debug mode._debug_option_env_file_callbackdotenvpython-dotenv must be installed to load an env file.--env-filedir_okayLoad environment variables from this file. python-dotenv must be installed._env_file_optionFlaskGroupSpecial subclass of the :class:`AppGroup` group that supports
    loading more commands from the configured Flask app.  Normally a
    developer does not have to interface with this class but there are
    some very advanced use cases for which it makes sense to create an
    instance of this. see :ref:`custom-scripts`.

    :param add_default_commands: if this is True then the default run and
        shell commands will be added.
    :param add_version_option: adds the ``--version`` option.
    :param create_app: an optional callback that is passed the script info and
        returns the loaded app.
    :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`
        files to set environment variables. Will also change the working
        directory to the directory containing the first file found.
    :param set_debug_flag: Set the app's debug flag.

    .. versionchanged:: 2.2
        Added the ``-A/--app``, ``--debug/--no-debug``, ``-e/--env-file`` options.

    .. versionchanged:: 2.2
        An app context is pushed when running ``app.cli`` commands, so
        ``@with_appcontext`` is no longer required for those commands.

    .. versionchanged:: 1.0
        If installed, python-dotenv will be used to load environment variables
        from :file:`.env` and :file:`.flaskenv` files.
    add_default_commandsadd_version_optioncontext_settingsauto_envvar_prefixFLASKrun_commandshell_commandroutes_command_loaded_plugin_commands_load_plugin_commandsimportlib_metadataflask.commandsget_commandError: format_messagelist_commandsmake_contextinfo_nameno_args_is_helphandle_parse_result_path_is_ancestorTake ``other`` and remove the length of ``path`` from it. Then join it
    to ``path``. If it is the original value, ``path`` is an ancestor of
    ``other``.Load "dotenv" files in order of precedence to set environment variables.

    If an env var is already set it is not overwritten, so earlier files in the
    list are preferred over later files.

    This is a no-op if `python-dotenv`_ is not installed.

    .. _python-dotenv: https://github.com/theskumar/python-dotenv#readme

    :param path: Load the file at this location instead of searching.
    :return: ``True`` if a file was loaded.

    .. versionchanged:: 2.0
        The current directory is not changed to the location of the
        loaded file.

    .. versionchanged:: 2.0
        When loading the env files, set the default encoding to UTF-8.

    .. versionchanged:: 1.1.0
        Returns ``False`` when python-dotenv is not installed, or when
        the given path isn't a file.

    .. versionadded:: 1.0
    .env.flaskenv * Tip: There are .env or .flaskenv files present. Do "pip install python-dotenv" to use them." * Tip: There are .env or .flaskenv files present."' Do "pip install python-dotenv" to use them.'yellowloadedfind_dotenvusecwdShow extra startup messages the first time the server is run,
    ignoring the reloader.
     * Serving Flask app ' * Debug mode: CertParamTypeClick option type for the ``--cert`` option. Allows either an
    existing file, the string ``'adhoc'``, or an import for a
    :class:`~ssl.SSLContext` object.
    resolve_pathpath_typeUsing "--cert" requires Python to be compiled with SSL support.adhoccryptographyUsing ad-hoc certificates requires the cryptography library.silent_validate_keyThe ``--key`` option must be specified when ``--cert`` is a file.
    Modifies the ``cert`` param to be a ``(cert, key)`` pair if needed.
    certis_adhocis_contextWhen "--cert" is "adhoc", "--key" is not used.When "--cert" is an SSLContext object, "--key is not used."--cert" must also be specified.Required when using "--cert".SeparatedPathTypeClick option type that accepts a list of values separated by the
    OS's path separator (``:``, ``;`` on Windows). Each value is
    validated as a :class:`click.Path` type.
    split_envvar_valuesuper_convertRun a development server.short_help--host-hThe interface to bind to.--port-pThe port to bind to.--certSpecify a certificate file to use HTTPS.--keyThe key file to use when specifying a certificate.--reload/--no-reloadEnable or disable the reloader. By default the reloader is active if debug is enabled."Enable or disable the reloader. By default the reloader ""is active if debug is enabled."--debugger/--no-debuggerEnable or disable the debugger. By default the debugger is active if debug is enabled."Enable or disable the debugger. By default the debugger "--with-threads/--without-threadsEnable or disable multithreading.--extra-filesExtra files that trigger a reload on change. Multiple paths are separated by "Extra files that trigger a reload on change. Multiple paths"" are separated by "--exclude-patternsFiles matching these fnmatch patterns will not trigger a reload on change. Multiple patterns are separated by "Files matching these fnmatch patterns will not trigger a reload"" on change. Multiple patterns are separated by"debuggerwith_threadsRun a local development server.

    This server is for development purposes only. It does not provide
    the stability, security, or performance of production WSGI servers.

    The reloader and debugger are enabled by default with the '--debug'
    option.
    Run a shell in the app context.Run an interactive Python shell in the context of a given
    Flask application.  The application will populate the default
    namespace of this shell according to its configuration.

    This is useful for executing small snippets of management code
    without having to manually configure the application.
     on 
App: "App: "
Instance: "Instance: "bannerPYTHONSTARTUPstartup__interactivehook__interactive_hookrlcompleterCompleterset_completercompleteinteractroutesShow the routes for the app.--sortMethod to sort routes by. 'match' is the order that Flask will match routes when dispatching a request."Method to sort routes by. 'match' is the order that Flask will match routes"" when dispatching a request."--all-methodsShow HEAD and OPTIONS methods.all_methodsShow all registered routes with endpoints and methods.iter_rulesNo routes were registered.ignored_methodshas_domainrowsEndpointMethodssortsHostwidths:<A general utility script for Flask applications.

An application to load must be given with the '--app' option,
'FLASK_APP' environment variable, or with a 'wsgi.py' or 'app.py' file
in the current directory.
# Search for the most common names first.# Otherwise find the only object that is a Flask instance.# Search for app factory functions.# In the function, it was called successfully.# Didn't reach the function.# Delete tb to break a circular reference.# https://docs.python.org/2/library/sys.html#sys.exc_info# Parse app_name as a single expression to determine if it's a valid# attribute name or function call.# Ensure the function name is an attribute name only.# Parse the positional and keyword arguments as literals.# literal_eval gives cryptic error messages, show a generic# message with the full expression instead.# If the attribute is a function, call it with any args and kwargs# to get the real application.# move up until outside package structure (no __init__.py)# Reraise the ImportError if it occurred within the imported module.# Determine this by checking whether the trace has a depth > 1.#: Optionally the import path for the Flask application.#: Optionally a function that is passed the script info to create#: the instance of the application.#: A dictionary with arbitrary data that can be associated with#: this script info.# Update the app's debug flag through the descriptor so that# other values repopulate as well.# This option is eager so the app will be available if --help is given.# --help is also eager, so --app must be before it in the param list.# no_args_is_help bypasses eager processing, so this option must be# processed manually in that case to ensure FLASK_APP gets picked up.# If the flag isn't provided, it will default to False. Don't use# that, let debug be set by env in that case.# Set with env var instead of ScriptInfo.load so that it can be# accessed early during a factory function.# Don't check FLASK_SKIP_DOTENV, that only disables automatically# loading .env and .flaskenv files.# This option is eager so env vars are loaded as early as possible to be# used by other options.# Processing is done with option callbacks instead of a group# callback. This allows users to make a custom group callback# without losing the behavior. --env-file must come first so# that it is eagerly evaluated before --app.# Use a backport on Python < 3.10. We technically have# importlib.metadata on 3.8+, but the API changed in 3.10,# so use the backport for consistency.# Look up built-in and plugin commands, which should be# available even if the app fails to load.# Look up commands provided by the app, showing an error and# continuing if the app couldn't be loaded.# Push an app context for the loaded app unless it is already# active somehow. This makes the context available to parameter# and command callbacks without needing @with_appcontext.# Start with the built-in and plugin commands.# Add commands provided by the app, showing an error and# When an app couldn't be loaded, show the error message# without the traceback.# When any other errors occurred during loading, show the# full traceback.# Set a flag to tell app.run to become a no-op. If app.run was# not in a __name__ == __main__ guard, it would start the server# when importing, blocking whatever command is being called.# Attempt to load .env and .flask env files. The --env-file# option can cause another file to be loaded.# Attempt to load --env-file and --app early in case they# were given as env vars. Otherwise no_args_is_help will not# see commands from app.cli.# Always return after attempting to load a given path, don't load# the default files.# True if at least one file was located and loaded.# When reloading, print out the error immediately, but raise# it later so the debugger or server can handle it.# When not reloading, raise the error immediately so the# command fails.# Support the regular Python interpreter startup script if someone# is using it.# Site, customize, or startup script can set a hook to call when# entering interactive mode. The default one sets up readline with# tab and history completion.# rlcompleter uses __main__.__dict__ by default, which is# flask.__main__. Use the shell context instead.b'Raised if an application cannot be found or loaded.'u'Raised if an application cannot be found or loaded.'b'Given a module instance this tries to find the best possible
    application in the module or raises an exception.
    'u'Given a module instance this tries to find the best possible
    application in the module or raises an exception.
    'b'application'u'application'b'Detected multiple Flask applications in module ''u'Detected multiple Flask applications in module ''b''. Use ''u''. Use ''b':name' to specify the correct one.'u':name' to specify the correct one.'b'create_app'u'create_app'b'make_app'u'make_app'b'Detected factory ''u'Detected factory ''b'' in module ''u'' in module ''b'', but could not call it without arguments. Use ''u'', but could not call it without arguments. Use ''b'(args)' to specify arguments.'u'(args)' to specify arguments.'b'Failed to find Flask application or factory in module ''u'Failed to find Flask application or factory in module ''b':name' to specify one.'u':name' to specify one.'b'Check whether calling a function raised a ``TypeError`` because
    the call failed or because something in the factory raised the
    error.

    :param f: The function that was called.
    :return: ``True`` if the call failed.
    'u'Check whether calling a function raised a ``TypeError`` because
    the call failed or because something in the factory raised the
    error.

    :param f: The function that was called.
    :return: ``True`` if the call failed.
    'b'Check if the given string is a variable name or a function. Call
    a function to get the app instance, or return the variable directly.
    'u'Check if the given string is a variable name or a function. Call
    a function to get the app instance, or return the variable directly.
    'b'Failed to parse 'u'Failed to parse 'b' as an attribute name or function call.'u' as an attribute name or function call.'b'Function reference must be a simple name: 'u'Function reference must be a simple name: 'b'Failed to parse arguments as literal values: 'u'Failed to parse arguments as literal values: 'b'Failed to find attribute 'u'Failed to find attribute 'b'The factory 'u'The factory 'b' in module 'u' in module 'b' could not be called with the specified arguments.'u' could not be called with the specified arguments.'b'A valid Flask application was not obtained from ''u'A valid Flask application was not obtained from ''b''.'u''.'b'Given a filename this will try to calculate the python path, add it
    to the search path and return the actual module name that is expected.
    'u'Given a filename this will try to calculate the python path, add it
    to the search path and return the actual module name that is expected.
    'b'While importing 'u'While importing 'b', an ImportError was raised:

'u', an ImportError was raised:

'b'Could not import 'u'Could not import 'b'Python 'u'Python 'b'
Flask 'u'
Flask 'b'
Werkzeug 'u'
Werkzeug 'b'--version'u'--version'b'Show the Flask version.'u'Show the Flask version.'b'Helper object to deal with Flask applications.  This is usually not
    necessary to interface with as it's used internally in the dispatching
    to click.  In future versions of Flask this object will most likely play
    a bigger role.  Typically it's created automatically by the
    :class:`FlaskGroup` but you can also manually create it and pass it
    onwards as click object.
    'u'Helper object to deal with Flask applications.  This is usually not
    necessary to interface with as it's used internally in the dispatching
    to click.  In future versions of Flask this object will most likely play
    a bigger role.  Typically it's created automatically by the
    :class:`FlaskGroup` but you can also manually create it and pass it
    onwards as click object.
    'b'Loads the Flask app (if not yet loaded) and returns it.  Calling
        this multiple times will just result in the already loaded app to
        be returned.
        'u'Loads the Flask app (if not yet loaded) and returns it.  Calling
        this multiple times will just result in the already loaded app to
        be returned.
        'b':(?![\\/])'u':(?![\\/])'b'wsgi.py'u'wsgi.py'b'app.py'u'app.py'b'Could not locate a Flask application. Use the 'flask --app' option, 'FLASK_APP' environment variable, or a 'wsgi.py' or 'app.py' file in the current directory.'u'Could not locate a Flask application. Use the 'flask --app' option, 'FLASK_APP' environment variable, or a 'wsgi.py' or 'app.py' file in the current directory.'b'Wraps a callback so that it's guaranteed to be executed with the
    script's application context.

    Custom commands (and their options) registered under ``app.cli`` or
    ``blueprint.cli`` will always have an app context available, this
    decorator is not required in that case.

    .. versionchanged:: 2.2
        The app context is active for subcommands as well as the
        decorated callback. The app context is always available to
        ``app.cli`` command and parameter callbacks.
    'u'Wraps a callback so that it's guaranteed to be executed with the
    script's application context.

    Custom commands (and their options) registered under ``app.cli`` or
    ``blueprint.cli`` will always have an app context available, this
    decorator is not required in that case.

    .. versionchanged:: 2.2
        The app context is active for subcommands as well as the
        decorated callback. The app context is always available to
        ``app.cli`` command and parameter callbacks.
    'b'This works similar to a regular click :class:`~click.Group` but it
    changes the behavior of the :meth:`command` decorator so that it
    automatically wraps the functions in :func:`with_appcontext`.

    Not to be confused with :class:`FlaskGroup`.
    'u'This works similar to a regular click :class:`~click.Group` but it
    changes the behavior of the :meth:`command` decorator so that it
    automatically wraps the functions in :func:`with_appcontext`.

    Not to be confused with :class:`FlaskGroup`.
    'b'This works exactly like the method of the same name on a regular
        :class:`click.Group` but it wraps callbacks in :func:`with_appcontext`
        unless it's disabled by passing ``with_appcontext=False``.
        'u'This works exactly like the method of the same name on a regular
        :class:`click.Group` but it wraps callbacks in :func:`with_appcontext`
        unless it's disabled by passing ``with_appcontext=False``.
        'b'with_appcontext'u'with_appcontext'b'This works exactly like the method of the same name on a regular
        :class:`click.Group` but it defaults the group class to
        :class:`AppGroup`.
        'u'This works exactly like the method of the same name on a regular
        :class:`click.Group` but it defaults the group class to
        :class:`AppGroup`.
        'b'cls'u'cls'b'-A'u'-A'b'--app'u'--app'b'IMPORT'u'IMPORT'b'The Flask application or factory function to load, in the form 'module:name'. Module can be a dotted import or file path. Name is not required if it is 'app', 'application', 'create_app', or 'make_app', and can be 'name(args)' to pass arguments.'u'The Flask application or factory function to load, in the form 'module:name'. Module can be a dotted import or file path. Name is not required if it is 'app', 'application', 'create_app', or 'make_app', and can be 'name(args)' to pass arguments.'b'--debug/--no-debug'u'--debug/--no-debug'b'Set debug mode.'u'Set debug mode.'b'dotenv'u'dotenv'b'python-dotenv must be installed to load an env file.'u'python-dotenv must be installed to load an env file.'b'--env-file'u'--env-file'b'Load environment variables from this file. python-dotenv must be installed.'u'Load environment variables from this file. python-dotenv must be installed.'b'Special subclass of the :class:`AppGroup` group that supports
    loading more commands from the configured Flask app.  Normally a
    developer does not have to interface with this class but there are
    some very advanced use cases for which it makes sense to create an
    instance of this. see :ref:`custom-scripts`.

    :param add_default_commands: if this is True then the default run and
        shell commands will be added.
    :param add_version_option: adds the ``--version`` option.
    :param create_app: an optional callback that is passed the script info and
        returns the loaded app.
    :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`
        files to set environment variables. Will also change the working
        directory to the directory containing the first file found.
    :param set_debug_flag: Set the app's debug flag.

    .. versionchanged:: 2.2
        Added the ``-A/--app``, ``--debug/--no-debug``, ``-e/--env-file`` options.

    .. versionchanged:: 2.2
        An app context is pushed when running ``app.cli`` commands, so
        ``@with_appcontext`` is no longer required for those commands.

    .. versionchanged:: 1.0
        If installed, python-dotenv will be used to load environment variables
        from :file:`.env` and :file:`.flaskenv` files.
    'u'Special subclass of the :class:`AppGroup` group that supports
    loading more commands from the configured Flask app.  Normally a
    developer does not have to interface with this class but there are
    some very advanced use cases for which it makes sense to create an
    instance of this. see :ref:`custom-scripts`.

    :param add_default_commands: if this is True then the default run and
        shell commands will be added.
    :param add_version_option: adds the ``--version`` option.
    :param create_app: an optional callback that is passed the script info and
        returns the loaded app.
    :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`
        files to set environment variables. Will also change the working
        directory to the directory containing the first file found.
    :param set_debug_flag: Set the app's debug flag.

    .. versionchanged:: 2.2
        Added the ``-A/--app``, ``--debug/--no-debug``, ``-e/--env-file`` options.

    .. versionchanged:: 2.2
        An app context is pushed when running ``app.cli`` commands, so
        ``@with_appcontext`` is no longer required for those commands.

    .. versionchanged:: 1.0
        If installed, python-dotenv will be used to load environment variables
        from :file:`.env` and :file:`.flaskenv` files.
    'b'params'u'params'b'context_settings'u'context_settings'b'auto_envvar_prefix'u'auto_envvar_prefix'b'FLASK'u'FLASK'b'flask.commands'u'flask.commands'b'Error: 'u'Error: 'b'Take ``other`` and remove the length of ``path`` from it. Then join it
    to ``path``. If it is the original value, ``path`` is an ancestor of
    ``other``.'u'Take ``other`` and remove the length of ``path`` from it. Then join it
    to ``path``. If it is the original value, ``path`` is an ancestor of
    ``other``.'b'Load "dotenv" files in order of precedence to set environment variables.

    If an env var is already set it is not overwritten, so earlier files in the
    list are preferred over later files.

    This is a no-op if `python-dotenv`_ is not installed.

    .. _python-dotenv: https://github.com/theskumar/python-dotenv#readme

    :param path: Load the file at this location instead of searching.
    :return: ``True`` if a file was loaded.

    .. versionchanged:: 2.0
        The current directory is not changed to the location of the
        loaded file.

    .. versionchanged:: 2.0
        When loading the env files, set the default encoding to UTF-8.

    .. versionchanged:: 1.1.0
        Returns ``False`` when python-dotenv is not installed, or when
        the given path isn't a file.

    .. versionadded:: 1.0
    'u'Load "dotenv" files in order of precedence to set environment variables.

    If an env var is already set it is not overwritten, so earlier files in the
    list are preferred over later files.

    This is a no-op if `python-dotenv`_ is not installed.

    .. _python-dotenv: https://github.com/theskumar/python-dotenv#readme

    :param path: Load the file at this location instead of searching.
    :return: ``True`` if a file was loaded.

    .. versionchanged:: 2.0
        The current directory is not changed to the location of the
        loaded file.

    .. versionchanged:: 2.0
        When loading the env files, set the default encoding to UTF-8.

    .. versionchanged:: 1.1.0
        Returns ``False`` when python-dotenv is not installed, or when
        the given path isn't a file.

    .. versionadded:: 1.0
    'b'.env'u'.env'b'.flaskenv'u'.flaskenv'b' * Tip: There are .env or .flaskenv files present. Do "pip install python-dotenv" to use them.'u' * Tip: There are .env or .flaskenv files present. Do "pip install python-dotenv" to use them.'b'yellow'u'yellow'b'Show extra startup messages the first time the server is run,
    ignoring the reloader.
    'u'Show extra startup messages the first time the server is run,
    ignoring the reloader.
    'b' * Serving Flask app ''u' * Serving Flask app ''b' * Debug mode: 'u' * Debug mode: 'b'on'u'on'b'Click option type for the ``--cert`` option. Allows either an
    existing file, the string ``'adhoc'``, or an import for a
    :class:`~ssl.SSLContext` object.
    'u'Click option type for the ``--cert`` option. Allows either an
    existing file, the string ``'adhoc'``, or an import for a
    :class:`~ssl.SSLContext` object.
    'b'Using "--cert" requires Python to be compiled with SSL support.'u'Using "--cert" requires Python to be compiled with SSL support.'b'adhoc'u'adhoc'b'Using ad-hoc certificates requires the cryptography library.'u'Using ad-hoc certificates requires the cryptography library.'b'The ``--key`` option must be specified when ``--cert`` is a file.
    Modifies the ``cert`` param to be a ``(cert, key)`` pair if needed.
    'u'The ``--key`` option must be specified when ``--cert`` is a file.
    Modifies the ``cert`` param to be a ``(cert, key)`` pair if needed.
    'b'cert'u'cert'b'When "--cert" is "adhoc", "--key" is not used.'u'When "--cert" is "adhoc", "--key" is not used.'b'When "--cert" is an SSLContext object, "--key is not used.'u'When "--cert" is an SSLContext object, "--key is not used.'b'"--cert" must also be specified.'u'"--cert" must also be specified.'b'Required when using "--cert".'u'Required when using "--cert".'b'Click option type that accepts a list of values separated by the
    OS's path separator (``:``, ``;`` on Windows). Each value is
    validated as a :class:`click.Path` type.
    'u'Click option type that accepts a list of values separated by the
    OS's path separator (``:``, ``;`` on Windows). Each value is
    validated as a :class:`click.Path` type.
    'b'run'u'run'b'Run a development server.'u'Run a development server.'b'--host'u'--host'b'-h'u'-h'b'The interface to bind to.'u'The interface to bind to.'b'--port'u'--port'b'-p'b'The port to bind to.'u'The port to bind to.'b'--cert'u'--cert'b'Specify a certificate file to use HTTPS.'u'Specify a certificate file to use HTTPS.'b'--key'u'--key'b'The key file to use when specifying a certificate.'u'The key file to use when specifying a certificate.'b'--reload/--no-reload'u'--reload/--no-reload'b'Enable or disable the reloader. By default the reloader is active if debug is enabled.'u'Enable or disable the reloader. By default the reloader is active if debug is enabled.'b'--debugger/--no-debugger'u'--debugger/--no-debugger'b'Enable or disable the debugger. By default the debugger is active if debug is enabled.'u'Enable or disable the debugger. By default the debugger is active if debug is enabled.'b'--with-threads/--without-threads'u'--with-threads/--without-threads'b'Enable or disable multithreading.'u'Enable or disable multithreading.'b'--extra-files'u'--extra-files'b'Extra files that trigger a reload on change. Multiple paths are separated by 'u'Extra files that trigger a reload on change. Multiple paths are separated by 'b'--exclude-patterns'u'--exclude-patterns'b'Files matching these fnmatch patterns will not trigger a reload on change. Multiple patterns are separated by 'u'Files matching these fnmatch patterns will not trigger a reload on change. Multiple patterns are separated by 'b'Run a local development server.

    This server is for development purposes only. It does not provide
    the stability, security, or performance of production WSGI servers.

    The reloader and debugger are enabled by default with the '--debug'
    option.
    'u'Run a local development server.

    This server is for development purposes only. It does not provide
    the stability, security, or performance of production WSGI servers.

    The reloader and debugger are enabled by default with the '--debug'
    option.
    'b'shell'u'shell'b'Run a shell in the app context.'u'Run a shell in the app context.'b'Run an interactive Python shell in the context of a given
    Flask application.  The application will populate the default
    namespace of this shell according to its configuration.

    This is useful for executing small snippets of management code
    without having to manually configure the application.
    'u'Run an interactive Python shell in the context of a given
    Flask application.  The application will populate the default
    namespace of this shell according to its configuration.

    This is useful for executing small snippets of management code
    without having to manually configure the application.
    'b' on 'u' on 'b'
App: 'u'
App: 'b'
Instance: 'u'
Instance: 'b'PYTHONSTARTUP'u'PYTHONSTARTUP'b'__interactivehook__'u'__interactivehook__'b'routes'u'routes'b'Show the routes for the app.'u'Show the routes for the app.'b'--sort'u'--sort'b'rule'u'rule'b'match'u'match'b'Method to sort routes by. 'match' is the order that Flask will match routes when dispatching a request.'u'Method to sort routes by. 'match' is the order that Flask will match routes when dispatching a request.'b'--all-methods'u'--all-methods'b'Show HEAD and OPTIONS methods.'u'Show HEAD and OPTIONS methods.'b'Show all registered routes with endpoints and methods.'u'Show all registered routes with endpoints and methods.'b'No routes were registered.'u'No routes were registered.'b'Endpoint'u'Endpoint'b'Methods'u'Methods'b'Host'u'Host'b'Subdomain'u'Subdomain'b'Rule'u'Rule'b':<'u':<'b'flask'b'A general utility script for Flask applications.

An application to load must be given with the '--app' option,
'FLASK_APP' environment variable, or with a 'wsgi.py' or 'app.py' file
in the current directory.
'u'A general utility script for Flask applications.

An application to load must be given with the '--app' option,
'FLASK_APP' environment variable, or with a 'wsgi.py' or 'app.py' file
in the current directory.
'u'flask.cli'u'cli'HTTP/1.1 client library

<intro stuff goes here>
<other stuff, too>

HTTPConnection goes through a number of "states", which define when a client
may legally make another request or fetch the response for a particular
request. This diagram details these state transitions:

    (null)
      |
      | HTTPConnection()
      v
    Idle
      |
      | putrequest()
      v
    Request-started
      |
      | ( putheader() )*  endheaders()
      v
    Request-sent
      |\_____________________________
      |                              | getresponse() raises
      | response = getresponse()     | ConnectionError
      v                              v
    Unread-response                Idle
    [Response-headers-read]
      |\____________________
      |                     |
      | response.read()     | putrequest()
      v                     v
    Idle                  Req-started-unread-response
                     ______/|
                   /        |
   response.read() |        | ( putheader() )*  endheaders()
                   v        v
       Request-started    Req-sent-unread-response
                            |
                            | response.read()
                            v
                          Request-sent

This diagram presents the following rules:
  -- a second request may not be started until {response-headers-read}
  -- a response [object] cannot be retrieved until {request-sent}
  -- there is no differentiation between an unread response body and a
     partially read response body

Note: this enforcement is applied by the HTTPConnection class. The
      HTTPResponse class does not enforce this state machine, which
      implies sophisticated clients may accelerate the request/response
      pipeline. Caution should be taken, though: accelerating the states
      beyond the above pattern may imply knowledge of the server's
      connection-close behavior for certain requests. For example, it
      is impossible to tell whether the server will close the connection
      UNTIL the response headers have been read; this means that further
      requests cannot be placed into the pipeline until it is known that
      the server will NOT be closing the connection.

Logical State                  __state            __response
-------------                  -------            ----------
Idle                           _CS_IDLE           None
Request-started                _CS_REQ_STARTED    None
Request-sent                   _CS_REQ_SENT       None
Unread-response                _CS_IDLE           <response_class>
Req-started-unread-response    _CS_REQ_STARTED    <response_class>
Req-sent-unread-response       _CS_REQ_SENT       <response_class>
urlsplitHTTPResponseHTTPConnectionNotConnectedUnknownProtocolUnknownTransferEncodingUnimplementedFileModeIncompleteReadInvalidURLImproperConnectionStateCannotSendRequestCannotSendHeaderResponseNotReadyBadStatusLineLineTooLongRemoteDisconnectedresponsesHTTP_PORT443HTTPS_PORTUNKNOWN_UNKNOWNIdle_CS_IDLERequest-started_CS_REQ_STARTEDRequest-sent_CS_REQ_SENT__members__MAXAMOUNT_MAXLINE_MAXHEADERS[^:\s][^:\r\n]*rb'_is_legal_header_name\n(?![ \t])|\r(?![ \t\n])_is_illegal_header_value[ - ]_contains_disallowed_url_pchar_re[ -]_contains_disallowed_method_pchar_rePATCHPOSTPUT_METHODS_EXPECTING_BODYCall data.encode("latin-1") but show a better error message.%s (%.20r) is not valid Latin-1. Use %s.encode('utf-8') if you want to send it encoded in UTF-8."%s (%.20r) is not valid Latin-1. Use %s.encode('utf-8') ""if you want to send it encoded in UTF-8."HTTPMessagegetallmatchingheadersFind all header lines matching a given header name.

        Look through the list of headers and find all lines matching a given
        header name (and their continuation lines).  A list of the lines is
        returned, without interpretation.  If the header does not occur, an
        empty list is returned.  If the header occurs multiple times, all
        occurrences are returned.  Case is not important in the header name.

        hit_read_headersReads potential header lines into a list from a file pointer.

    Length of line is limited by _MAXLINE, and number of
    headers is limited by _MAXHEADERS.
    header linegot more than %d headersparse_headers_classParses only RFC2822 headers from a file pointer.

    email Parser wants to see strings rather than bytes.
    But a TextIOWrapper around self.rfile would buffer too many bytes
    from the stream, bytes which we later need to read as bytes.
    So we read the correct bytes here, as bytes, for email Parser
    to parse.

    hstringdebuglevelmakefilechunkedchunk_leftwill_close_read_statusstatus linereply:Remote end closed connection without response"Remote end closed connection without"" response"HTTP/_close_conn999beginskipped_headersheaders:HTTP/1.0HTTP/0.9HTTP/1.hdrheader:transfer-encodingtr_enc_check_closecontent-lengthconnectionconnkeep-aliveproxy-connectionpconnAlways returns TrueisclosedTrue if the connection is closed.amt_readall_chunked_safe_readRead up to len(b) bytes into bytearray b and return the number
        of bytes read.
        _readinto_chunked_read_next_chunk_sizechunk size_read_and_discard_trailertrailer line_get_chunk_lefttotal_bytesmvb_safe_readintotemp_mvbRead the number of bytes requested, compensating for partial reads.

        Normally, we have a blocking socket, but a read() can be interrupted
        by a signal (resulting in a partial read).

        Note that we cannot distinguish between EOF and an interrupt when zero
        bytes have been read. IncompleteRead() will be raised in this
        situation.

        This function should be used when <amt> bytes "should" be present for
        reading. If the bytes are truly not available (due to EOF), then the
        IncompleteRead exception can be used to detect the problem.
        Same as _safe_read, but for reading into a buffer.Read with at most one underlying system call.  If at least one
        byte is buffered, return that instead.
        _read1_chunked_peek_chunkedgetheaderReturns the value of the header matching *name*.

        If there are multiple matching headers, the values are
        combined into a single string separated by commas and spaces.

        If no matching header is found, returns *default* or None if
        the *default* is not specified.

        If the headers are unknown, raises http.client.ResponseNotReady.

        getheadersReturn list of (header, value) tuples.Returns an instance of the class mimetools.Message containing
        meta-information associated with the URL.

        When the method is HTTP, these headers are those returned by
        the server at the head of the retrieved HTML page (including
        Content-Length and Content-Type).

        When the method is FTP, a Content-Length header will be
        present if (as is now usual) the server passed back a file
        length in response to the FTP retrieval request. A
        Content-Type header will be present if the MIME type can be
        guessed.

        When the method is local-file, returned headers will include
        a Date representing the file's last-modified time, a
        Content-Length giving file size, and a Content-Type
        containing a guess at the file's type. See also the
        description of the mimetools module.

        geturlReturn the real URL of the page.

        In some cases, the HTTP server redirects a client to another
        URL. The urlopen() function handles this transparently, but in
        some cases the caller needs to know which URL the client was
        redirected to. The geturl() method can be used to get at this
        redirected URL.

        getcodeReturn the HTTP status code that was sent with the response,
        or None if the URL is not an HTTP URL.

        _http_vsnHTTP/1.1_http_vsn_strdefault_portauto_open_is_textIOTest whether a file-like object is a text or a binary stream.
        TextIOBase_get_content_lengthGet the content-length based on the body.

        If the body is None, we set Content-Length: 0 for methods that expect
        a body (RFC 7230, Section 3.3.2). We also set the Content-Length for
        any method if the body is a str or bytes-like object and not a file.
        mv_GLOBAL_DEFAULT_TIMEOUTsource_address__response__state_tunnel_host_tunnel_port_tunnel_headers_get_hostport_validate_host_create_connectionset_tunnelSet up host and port for HTTP CONNECT tunnelling.

        In a connection that uses HTTP CONNECT tunneling, the host passed to the
        constructor is used as a proxy server that relays all communication to
        the endpoint passed to `set_tunnel`. This done by sending an HTTP
        CONNECT request to the proxy server when the connection is established.

        This method must be called before the HTTP connection has been
        established.

        The headers argument should be a mapping of extra HTTP headers to send
        with the CONNECT request.
        Can't set up tunnel for established connectionnonnumeric port: '%s'set_debuglevel_tunnelCONNECT %s:%d HTTP/1.0
Tunnel connection failed: Connect to the host and port specified in __init__.Close the connection to the HTTP server.Send `data' to the server.
        ``data`` can be a string object, a bytes object, an array object, a
        file-like object that supports a .read() method, or an iterable object.
        send:sendIng a read()ableencoding file using iso-8859-1datablocksendalldata should be a bytes-like object or an iterable, got %r"data should be a bytes-like object ""or an iterable, got %r"_outputAdd a line of output to the current request buffer.

        Assumes that the line does *not* end with \r\n.
        _read_readable_send_outputmessage_bodyencode_chunkedSend the currently buffered request and clear the buffer.

        Appends an extra \r\n to the buffer.
        A message_body may be specified, to be appended to the request.
        message_body should be a bytes-like object or an iterable, got %r"message_body should be a bytes-like ""object or an iterable, got %r"Zero length chunk ignored0

putrequestskip_hostskip_accept_encodingSend a request to the server.

        `method' specifies an HTTP request method, e.g. 'GET'.
        `url' specifies the object being requested, e.g. '/index.html'.
        `skip_host' if True does not add automatically a 'Host:' header
        `skip_accept_encoding' if True does not add automatically an
           'Accept-Encoding:' header
        _validate_method_validate_path%s %s %s_encode_requestnetlocnilnetloc_encputheaderhost_encValidate a method name for putrequest.method can't contain control characters.  (found at least "(found at least "Validate a url for putrequest.URL can't contain control characters. Validate a host so it doesn't contain control characters.Send a request header line to the server.

        For example: h.putheader('Accept', 'text/html')
        Invalid header name %rone_valueInvalid header value %r
	endheadersIndicate that the last header line has been sent to the server.

        This method sends the request to the server.  The optional message_body
        argument can be used to pass a message body associated with the
        request.
        Send a complete request to the server._send_requestheader_namesskipsaccept-encodingcontent_lengthUnable to determine size of %rTransfer-EncodingContent-LengthgetresponseGet the response from the server.

        If the HTTPConnection is in the correct state, returns an
        instance of HTTPResponse or of whatever object is returned by
        the response_class variable.

        If a request has not been sent or if a previous response has
        not be handled, ResponseNotReady is raised.  If the HTTP
        response indicates that the connection should be closed, then
        it will be closed before the response is returned.  When the
        connection is closed, the underlying socket is closed.
        HTTPSConnectionThis class allows communication via SSL.key_filecert_filecheck_hostnamekey_file, cert_file and check_hostname are deprecated, use a custom context instead."key_file, cert_file and check_hostname are ""deprecated, use a custom context instead."_create_default_https_contextpost_handshake_authverify_modeCERT_NONEwill_verifycheck_hostname needs a SSL context with either CERT_OPTIONAL or CERT_REQUIRED"check_hostname needs a SSL context with ""either CERT_OPTIONAL or CERT_REQUIRED"load_cert_chain_contextConnect to a host on a given (SSL) port.wrap_socket, %i more expected%s(%i bytes read%s)line_typegot more than %d bytes when reading %s# HTTPMessage, parse_headers(), and the HTTP status code constants are# intentionally omitted for simplicity# connection states# hack to maintain backwards compatibility# another hack to maintain backwards compatibility# Mapping status codes to official W3C names# maximal amount of data to read at one time in _safe_read# maximal line length when calling readline().# Header name/value ABNF (http://tools.ietf.org/html/rfc7230#section-3.2)# VCHAR          = %x21-7E# obs-text       = %x80-FF# header-field   = field-name ":" OWS field-value OWS# field-name     = token# field-value    = *( field-content / obs-fold )# field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]# field-vchar    = VCHAR / obs-text# obs-fold       = CRLF 1*( SP / HTAB )#                ; obsolete line folding#                ; see Section 3.2.4# token          = 1*tchar# tchar          = "!" / "#" / "$" / "%" / "&" / "'" / "*"#                / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"#                / DIGIT / ALPHA#                ; any VCHAR, except delimiters# VCHAR defined in http://tools.ietf.org/html/rfc5234#appendix-B.1# the patterns for both name and value are more lenient than RFC# definitions to allow for backwards compatibility# These characters are not allowed within HTTP URL paths.#  See https://tools.ietf.org/html/rfc3986#section-3.3 and the#  https://tools.ietf.org/html/rfc3986#appendix-A pchar definition.# Prevents CVE-2019-9740.  Includes control characters such as \r\n.# We don't restrict chars above \x7f as putrequest() limits us to ASCII.# Arguably only these _should_ allowed:#  _is_allowed_url_pchars_re = re.compile(r"^[/!$&'()*+,;=:@%a-zA-Z0-9._~-]+$")# We are more lenient for assumed real world compatibility purposes.# These characters are not allowed within HTTP method names# to prevent http header injection.# We always set the Content-Length header for these methods because some# servers will otherwise respond with a 411# XXX The only usage of this method is in# http.server.CGIHTTPRequestHandler.  Maybe move the code there so# that it doesn't need to be part of the public API.  The API has# never been defined so this could cause backwards compatibility# issues.# See RFC 2616 sec 19.6 and RFC 1945 sec 6 for details.# The bytes from the socket object are iso-8859-1 strings.# See RFC 2616 sec 2.2 which notes an exception for MIME-encoded# text following RFC 2047.  The basic status line parsing only# accepts iso-8859-1.# If the response includes a content-length header, we need to# make sure that the client doesn't read more than the# specified number of bytes.  If it does, it will block until# the server times out and closes the connection.  This will# happen if a self.fp.read() is done (without a size) whether# self.fp is buffered or not.  So, no self.fp.read() by# clients unless they know what they are doing.# The HTTPResponse object is returned via urllib.  The clients# of http and urllib expect different attributes for the# headers.  headers is used here and supports urllib.  msg is# provided as a backwards compatibility layer for http# clients.# from the Status-Line of the response# HTTP-Version# Status-Code# Reason-Phrase# is "chunked" being used?# bytes left to read in current chunk# number of bytes left in response# conn will close at end of response# Presumably, the server closed the connection before# sending a valid response.# empty version will cause next test to fail.# The status code is a three-digit number# we've already started reading the response# read until we get a non-100 response# skip the header from the 100 response# Some servers might still return "0.9", treat it as 1.0 anyway# use HTTP/1.1 code for HTTP/1.x where x>=1# are we using the chunked-style of transfer encoding?# will the connection close at the end of the response?# do we have a Content-Length?# NOTE: RFC 2616, S4.4, #3 says we ignore this if tr_enc is "chunked"# ignore nonsensical negative lengths# does the body have a fixed length? (of zero)# 1xx codes# if the connection remains open, and we aren't using chunked, and# a content-length was not provided, then assume that the connection# WILL close.# An HTTP/1.1 proxy is assumed to stay open unless# explicitly closed.# Some HTTP/1.0 implementations have support for persistent# connections, using rules different than HTTP/1.1.# For older HTTP, Keep-Alive indicates persistent connection.# At least Akamai returns a "Connection: Keep-Alive" header,# which was supposed to be sent by the client.# Proxy-Connection is a netscape hack.# otherwise, assume it will close# set "closed" flag# These implementations are for the benefit of io.BufferedReader.# XXX This class should probably be revised to act more like# the "raw stream" that BufferedReader expects.# End of "raw stream" methods# NOTE: it is possible that we will not ever call self.close(). This#       case occurs when will_close is TRUE, length is None, and we#       read up to the last byte, but NOT past it.# IMPLIES: if will_close is FALSE, then self.close() will ALWAYS be#          called, meaning self.isclosed() is meaningful.# Amount is given, implement using readinto# Amount is not given (unbounded read) so we must check self.length# and self.chunked# we read everything# clip the read to the "end of response"# we do not use _safe_read() here because this may be a .will_close# connection, and the user is reading more bytes than will be provided# (for example, reading in 1k chunks)# Ideally, we would raise IncompleteRead if the content-length# wasn't satisfied, but it might break compatibility.# Read the next chunk size from the file# strip chunk-extensions# close the connection as protocol synchronisation is# probably lost# read and discard trailer up to the CRLF terminator### note: we shouldn't have any trailers!# a vanishingly small number of sites EOF without# sending the trailer# return self.chunk_left, reading a new chunk if necessary.# chunk_left == 0: at the end of the current chunk, need to close it# chunk_left == None: No current chunk, should read next.# This function returns non-zero or None if the last chunk has# been read.# Can be 0 or None# We are at the end of chunk, discard chunk end# toss the CRLF at the end of the chunk# last chunk: 1*("0") [ chunk-extension ] CRLF# we read everything; close the "file"# Having this enables IOBase.readline() to read more than one# byte at a time# Fallback to IOBase readline which uses peek() and read()# Strictly speaking, _get_chunk_left() may cause more than one read,# but that is ok, since that is to satisfy the chunked protocol.# if n is negative or larger than chunk_left# peek doesn't worry about protocol# eof# peek is allowed to return more than requested.  Just request the# entire chunk, and truncate what we get.# We override IOBase.__iter__ so that it doesn't check for closed-ness# For compatibility with old-style urllib responses.# do an explicit check for not None here to distinguish# between unset and set but empty# file-like object.# does it implement the buffer protocol (bytes, bytearray, array)?# This is stored as an instance variable to allow unit# tests to replace it with a suitable mockup# ipv6 addresses have [...]# http://foo.com:/ == http://foo.com/# Making a single send() call instead of one per line encourages# the host OS to use a more optimal packet size instead of# potentially emitting a series of small packets.# for sites which EOF without sending a trailer# close it manually... there may be other refs# create a consistent interface to message_body# Let file-like take precedence over byte-like.  This# is needed to allow the current position of mmap'ed# files to be taken into account.# this is solely to check to see if message_body# implements the buffer API.  it /would/ be easier# to capture if PyObject_CheckBuffer was exposed# to Python.# the object implements the buffer interface and# can be passed directly into socket methods# chunked encoding# end chunked transfer# if a prior response has been completed, then forget about it.# in certain cases, we cannot issue another request on this connection.# this occurs when:#   1) we are in the process of sending a request.   (_CS_REQ_STARTED)#   2) a response to a previous request has signalled that it is going#      to close the connection upon completion.#   3) the headers for the previous response have not been read, thus#      we cannot determine whether point (2) is true.   (_CS_REQ_SENT)# if there is no prior response, then we can request at will.# if point (2) is true, then we will have passed the socket to the# response (effectively meaning, "there is no prior response"), and# will open a new one when a new request is made.# Note: if a prior response exists, then we *can* start a new request.#       We are not allowed to begin fetching the response to this new#       request, however, until that prior response is complete.# Save the method for use later in the response phase# Issue some standard headers for better HTTP/1.1 compliance# this header is issued *only* for HTTP/1.1# connections. more specifically, this means it is# only issued when the client uses the new# HTTPConnection() class. backwards-compat clients# will be using HTTP/1.0 and those clients may be# issuing this header themselves. we should NOT issue# it twice; some web servers (such as Apache) barf# when they see two Host: headers# If we need a non-standard port,include it in the# header.  If the request is going through a proxy,# but the host of the actual URL, not the host of the# proxy.# As per RFC 273, IPv6 address should be wrapped with []# when used as Host header# note: we are assuming that clients will not attempt to set these#       headers since *this* library must deal with the#       consequences. this also means that when the supporting#       libraries are updated to recognize other forms, then this#       code should be changed (removed or updated).# we only want a Content-Encoding of "identity" since we don't# support encodings such as x-gzip or x-deflate.# we can accept "chunked" Transfer-Encodings, but no others# NOTE: no TE header implies *only* "chunked"#self.putheader('TE', 'chunked')# if TE is supplied in the header, then it must appear in a# Connection header.#self.putheader('Connection', 'TE')# For HTTP/1.0, the server will assume "not chunked"# ASCII also helps prevent CVE-2019-9740.# prevent http header injection# Prevent CVE-2019-9740.# Prevent CVE-2019-18348.# Honor explicitly requested Host: and Accept-Encoding: headers.# chunked encoding will happen if HTTP/1.1 is used and either# the caller passes encode_chunked=True or the following# conditions hold:# 1. content-length has not been explicitly set# 2. the body is a file or iterable, but not a str or bytes-like# 3. Transfer-Encoding has NOT been explicitly set by the caller# only chunk body if not explicitly set for backwards# compatibility, assuming the client code is already handling the# chunking# if content-length cannot be automatically determined, fall# back to chunked encoding# RFC 2616 Section 3.7.1 says that text default has a# default charset of iso-8859-1.# if a prior response exists, then it must be completed (otherwise, we# cannot read this response's header to determine the connection-close# behavior)# note: if a prior response existed, but was connection-close, then the# socket and response were made independent of this HTTPConnection# object since a new request requires that we open a whole new# connection# this means the prior response had one of two states:#   1) will_close: this connection was reset and the prior socket and#                  response operate independently#   2) persistent: the response was retained and we await its#                  isclosed() status to become true.# this effectively passes the connection to the response# remember this, so we can tell when it is complete# XXX Should key_file and cert_file be deprecated in favour of context?# enable PHA for TLS 1.3 connections if available# cert and key file means the user wants to authenticate.# enable TLS 1.3 PHA implicitly even for custom contexts.# Subclasses that define an __init__ must call Exception.__init__# or define self.args.  Otherwise, str() will fail.# for backwards compatibilityb'HTTP/1.1 client library

<intro stuff goes here>
<other stuff, too>

HTTPConnection goes through a number of "states", which define when a client
may legally make another request or fetch the response for a particular
request. This diagram details these state transitions:

    (null)
      |
      | HTTPConnection()
      v
    Idle
      |
      | putrequest()
      v
    Request-started
      |
      | ( putheader() )*  endheaders()
      v
    Request-sent
      |\_____________________________
      |                              | getresponse() raises
      | response = getresponse()     | ConnectionError
      v                              v
    Unread-response                Idle
    [Response-headers-read]
      |\____________________
      |                     |
      | response.read()     | putrequest()
      v                     v
    Idle                  Req-started-unread-response
                     ______/|
                   /        |
   response.read() |        | ( putheader() )*  endheaders()
                   v        v
       Request-started    Req-sent-unread-response
                            |
                            | response.read()
                            v
                          Request-sent

This diagram presents the following rules:
  -- a second request may not be started until {response-headers-read}
  -- a response [object] cannot be retrieved until {request-sent}
  -- there is no differentiation between an unread response body and a
     partially read response body

Note: this enforcement is applied by the HTTPConnection class. The
      HTTPResponse class does not enforce this state machine, which
      implies sophisticated clients may accelerate the request/response
      pipeline. Caution should be taken, though: accelerating the states
      beyond the above pattern may imply knowledge of the server's
      connection-close behavior for certain requests. For example, it
      is impossible to tell whether the server will close the connection
      UNTIL the response headers have been read; this means that further
      requests cannot be placed into the pipeline until it is known that
      the server will NOT be closing the connection.

Logical State                  __state            __response
-------------                  -------            ----------
Idle                           _CS_IDLE           None
Request-started                _CS_REQ_STARTED    None
Request-sent                   _CS_REQ_SENT       None
Unread-response                _CS_IDLE           <response_class>
Req-started-unread-response    _CS_REQ_STARTED    <response_class>
Req-sent-unread-response       _CS_REQ_SENT       <response_class>
'u'HTTP/1.1 client library

<intro stuff goes here>
<other stuff, too>

HTTPConnection goes through a number of "states", which define when a client
may legally make another request or fetch the response for a particular
request. This diagram details these state transitions:

    (null)
      |
      | HTTPConnection()
      v
    Idle
      |
      | putrequest()
      v
    Request-started
      |
      | ( putheader() )*  endheaders()
      v
    Request-sent
      |\_____________________________
      |                              | getresponse() raises
      | response = getresponse()     | ConnectionError
      v                              v
    Unread-response                Idle
    [Response-headers-read]
      |\____________________
      |                     |
      | response.read()     | putrequest()
      v                     v
    Idle                  Req-started-unread-response
                     ______/|
                   /        |
   response.read() |        | ( putheader() )*  endheaders()
                   v        v
       Request-started    Req-sent-unread-response
                            |
                            | response.read()
                            v
                          Request-sent

This diagram presents the following rules:
  -- a second request may not be started until {response-headers-read}
  -- a response [object] cannot be retrieved until {request-sent}
  -- there is no differentiation between an unread response body and a
     partially read response body

Note: this enforcement is applied by the HTTPConnection class. The
      HTTPResponse class does not enforce this state machine, which
      implies sophisticated clients may accelerate the request/response
      pipeline. Caution should be taken, though: accelerating the states
      beyond the above pattern may imply knowledge of the server's
      connection-close behavior for certain requests. For example, it
      is impossible to tell whether the server will close the connection
      UNTIL the response headers have been read; this means that further
      requests cannot be placed into the pipeline until it is known that
      the server will NOT be closing the connection.

Logical State                  __state            __response
-------------                  -------            ----------
Idle                           _CS_IDLE           None
Request-started                _CS_REQ_STARTED    None
Request-sent                   _CS_REQ_SENT       None
Unread-response                _CS_IDLE           <response_class>
Req-started-unread-response    _CS_REQ_STARTED    <response_class>
Req-sent-unread-response       _CS_REQ_SENT       <response_class>
'b'HTTPResponse'u'HTTPResponse'b'HTTPConnection'u'HTTPConnection'b'HTTPException'u'HTTPException'b'NotConnected'u'NotConnected'b'UnknownProtocol'u'UnknownProtocol'b'UnknownTransferEncoding'u'UnknownTransferEncoding'b'UnimplementedFileMode'u'UnimplementedFileMode'b'IncompleteRead'u'IncompleteRead'b'InvalidURL'u'InvalidURL'b'ImproperConnectionState'u'ImproperConnectionState'b'CannotSendRequest'u'CannotSendRequest'b'CannotSendHeader'u'CannotSendHeader'b'ResponseNotReady'u'ResponseNotReady'b'BadStatusLine'u'BadStatusLine'b'LineTooLong'u'LineTooLong'b'RemoteDisconnected'u'RemoteDisconnected'b'responses'u'responses'b'UNKNOWN'u'UNKNOWN'b'Idle'u'Idle'b'Request-started'u'Request-started'b'Request-sent'u'Request-sent'b'[^:\s][^:\r\n]*'b'\n(?![ \t])|\r(?![ \t\n])'b'[ - ]'u'[ - ]'b'[ -]'u'[ -]'b'PATCH'u'PATCH'b'POST'u'POST'b'PUT'u'PUT'b'Call data.encode("latin-1") but show a better error message.'u'Call data.encode("latin-1") but show a better error message.'b'%s (%.20r) is not valid Latin-1. Use %s.encode('utf-8') if you want to send it encoded in UTF-8.'u'%s (%.20r) is not valid Latin-1. Use %s.encode('utf-8') if you want to send it encoded in UTF-8.'b'Find all header lines matching a given header name.

        Look through the list of headers and find all lines matching a given
        header name (and their continuation lines).  A list of the lines is
        returned, without interpretation.  If the header does not occur, an
        empty list is returned.  If the header occurs multiple times, all
        occurrences are returned.  Case is not important in the header name.

        'u'Find all header lines matching a given header name.

        Look through the list of headers and find all lines matching a given
        header name (and their continuation lines).  A list of the lines is
        returned, without interpretation.  If the header does not occur, an
        empty list is returned.  If the header occurs multiple times, all
        occurrences are returned.  Case is not important in the header name.

        'b'Reads potential header lines into a list from a file pointer.

    Length of line is limited by _MAXLINE, and number of
    headers is limited by _MAXHEADERS.
    'u'Reads potential header lines into a list from a file pointer.

    Length of line is limited by _MAXLINE, and number of
    headers is limited by _MAXHEADERS.
    'b'header line'u'header line'b'got more than %d headers'u'got more than %d headers'b'Parses only RFC2822 headers from a file pointer.

    email Parser wants to see strings rather than bytes.
    But a TextIOWrapper around self.rfile would buffer too many bytes
    from the stream, bytes which we later need to read as bytes.
    So we read the correct bytes here, as bytes, for email Parser
    to parse.

    'u'Parses only RFC2822 headers from a file pointer.

    email Parser wants to see strings rather than bytes.
    But a TextIOWrapper around self.rfile would buffer too many bytes
    from the stream, bytes which we later need to read as bytes.
    So we read the correct bytes here, as bytes, for email Parser
    to parse.

    'b'status line'u'status line'b'reply:'u'reply:'b'Remote end closed connection without response'u'Remote end closed connection without response'b'HTTP/'u'HTTP/'b'headers:'u'headers:'b'HTTP/1.0'u'HTTP/1.0'b'HTTP/0.9'u'HTTP/0.9'b'HTTP/1.'u'HTTP/1.'b'header:'u'header:'b'transfer-encoding'u'transfer-encoding'b'chunked'u'chunked'b'content-length'u'content-length'b'connection'u'connection'b'keep-alive'u'keep-alive'b'proxy-connection'u'proxy-connection'b'Always returns True'u'Always returns True'b'True if the connection is closed.'u'True if the connection is closed.'b'Read up to len(b) bytes into bytearray b and return the number
        of bytes read.
        'u'Read up to len(b) bytes into bytearray b and return the number
        of bytes read.
        'b'chunk size'u'chunk size'b'trailer line'u'trailer line'b'Read the number of bytes requested, compensating for partial reads.

        Normally, we have a blocking socket, but a read() can be interrupted
        by a signal (resulting in a partial read).

        Note that we cannot distinguish between EOF and an interrupt when zero
        bytes have been read. IncompleteRead() will be raised in this
        situation.

        This function should be used when <amt> bytes "should" be present for
        reading. If the bytes are truly not available (due to EOF), then the
        IncompleteRead exception can be used to detect the problem.
        'u'Read the number of bytes requested, compensating for partial reads.

        Normally, we have a blocking socket, but a read() can be interrupted
        by a signal (resulting in a partial read).

        Note that we cannot distinguish between EOF and an interrupt when zero
        bytes have been read. IncompleteRead() will be raised in this
        situation.

        This function should be used when <amt> bytes "should" be present for
        reading. If the bytes are truly not available (due to EOF), then the
        IncompleteRead exception can be used to detect the problem.
        'b'Same as _safe_read, but for reading into a buffer.'u'Same as _safe_read, but for reading into a buffer.'b'Read with at most one underlying system call.  If at least one
        byte is buffered, return that instead.
        'u'Read with at most one underlying system call.  If at least one
        byte is buffered, return that instead.
        'b'Returns the value of the header matching *name*.

        If there are multiple matching headers, the values are
        combined into a single string separated by commas and spaces.

        If no matching header is found, returns *default* or None if
        the *default* is not specified.

        If the headers are unknown, raises http.client.ResponseNotReady.

        'u'Returns the value of the header matching *name*.

        If there are multiple matching headers, the values are
        combined into a single string separated by commas and spaces.

        If no matching header is found, returns *default* or None if
        the *default* is not specified.

        If the headers are unknown, raises http.client.ResponseNotReady.

        'b'Return list of (header, value) tuples.'u'Return list of (header, value) tuples.'b'Returns an instance of the class mimetools.Message containing
        meta-information associated with the URL.

        When the method is HTTP, these headers are those returned by
        the server at the head of the retrieved HTML page (including
        Content-Length and Content-Type).

        When the method is FTP, a Content-Length header will be
        present if (as is now usual) the server passed back a file
        length in response to the FTP retrieval request. A
        Content-Type header will be present if the MIME type can be
        guessed.

        When the method is local-file, returned headers will include
        a Date representing the file's last-modified time, a
        Content-Length giving file size, and a Content-Type
        containing a guess at the file's type. See also the
        description of the mimetools module.

        'u'Returns an instance of the class mimetools.Message containing
        meta-information associated with the URL.

        When the method is HTTP, these headers are those returned by
        the server at the head of the retrieved HTML page (including
        Content-Length and Content-Type).

        When the method is FTP, a Content-Length header will be
        present if (as is now usual) the server passed back a file
        length in response to the FTP retrieval request. A
        Content-Type header will be present if the MIME type can be
        guessed.

        When the method is local-file, returned headers will include
        a Date representing the file's last-modified time, a
        Content-Length giving file size, and a Content-Type
        containing a guess at the file's type. See also the
        description of the mimetools module.

        'b'Return the real URL of the page.

        In some cases, the HTTP server redirects a client to another
        URL. The urlopen() function handles this transparently, but in
        some cases the caller needs to know which URL the client was
        redirected to. The geturl() method can be used to get at this
        redirected URL.

        'u'Return the real URL of the page.

        In some cases, the HTTP server redirects a client to another
        URL. The urlopen() function handles this transparently, but in
        some cases the caller needs to know which URL the client was
        redirected to. The geturl() method can be used to get at this
        redirected URL.

        'b'Return the HTTP status code that was sent with the response,
        or None if the URL is not an HTTP URL.

        'u'Return the HTTP status code that was sent with the response,
        or None if the URL is not an HTTP URL.

        'b'HTTP/1.1'u'HTTP/1.1'b'Test whether a file-like object is a text or a binary stream.
        'u'Test whether a file-like object is a text or a binary stream.
        'b'Get the content-length based on the body.

        If the body is None, we set Content-Length: 0 for methods that expect
        a body (RFC 7230, Section 3.3.2). We also set the Content-Length for
        any method if the body is a str or bytes-like object and not a file.
        'u'Get the content-length based on the body.

        If the body is None, we set Content-Length: 0 for methods that expect
        a body (RFC 7230, Section 3.3.2). We also set the Content-Length for
        any method if the body is a str or bytes-like object and not a file.
        'b'Set up host and port for HTTP CONNECT tunnelling.

        In a connection that uses HTTP CONNECT tunneling, the host passed to the
        constructor is used as a proxy server that relays all communication to
        the endpoint passed to `set_tunnel`. This done by sending an HTTP
        CONNECT request to the proxy server when the connection is established.

        This method must be called before the HTTP connection has been
        established.

        The headers argument should be a mapping of extra HTTP headers to send
        with the CONNECT request.
        'u'Set up host and port for HTTP CONNECT tunnelling.

        In a connection that uses HTTP CONNECT tunneling, the host passed to the
        constructor is used as a proxy server that relays all communication to
        the endpoint passed to `set_tunnel`. This done by sending an HTTP
        CONNECT request to the proxy server when the connection is established.

        This method must be called before the HTTP connection has been
        established.

        The headers argument should be a mapping of extra HTTP headers to send
        with the CONNECT request.
        'b'Can't set up tunnel for established connection'u'Can't set up tunnel for established connection'b'nonnumeric port: '%s''u'nonnumeric port: '%s''b'CONNECT %s:%d HTTP/1.0
'b'Tunnel connection failed: 'u'Tunnel connection failed: 'b'Connect to the host and port specified in __init__.'u'Connect to the host and port specified in __init__.'b'Close the connection to the HTTP server.'u'Close the connection to the HTTP server.'b'Send `data' to the server.
        ``data`` can be a string object, a bytes object, an array object, a
        file-like object that supports a .read() method, or an iterable object.
        'u'Send `data' to the server.
        ``data`` can be a string object, a bytes object, an array object, a
        file-like object that supports a .read() method, or an iterable object.
        'b'send:'u'send:'b'sendIng a read()able'u'sendIng a read()able'b'encoding file using iso-8859-1'u'encoding file using iso-8859-1'b'data should be a bytes-like object or an iterable, got %r'u'data should be a bytes-like object or an iterable, got %r'b'Add a line of output to the current request buffer.

        Assumes that the line does *not* end with \r\n.
        'u'Add a line of output to the current request buffer.

        Assumes that the line does *not* end with \r\n.
        'b'Send the currently buffered request and clear the buffer.

        Appends an extra \r\n to the buffer.
        A message_body may be specified, to be appended to the request.
        'u'Send the currently buffered request and clear the buffer.

        Appends an extra \r\n to the buffer.
        A message_body may be specified, to be appended to the request.
        'b'message_body should be a bytes-like object or an iterable, got %r'u'message_body should be a bytes-like object or an iterable, got %r'b'Zero length chunk ignored'u'Zero length chunk ignored'b'0

'b'Send a request to the server.

        `method' specifies an HTTP request method, e.g. 'GET'.
        `url' specifies the object being requested, e.g. '/index.html'.
        `skip_host' if True does not add automatically a 'Host:' header
        `skip_accept_encoding' if True does not add automatically an
           'Accept-Encoding:' header
        'u'Send a request to the server.

        `method' specifies an HTTP request method, e.g. 'GET'.
        `url' specifies the object being requested, e.g. '/index.html'.
        `skip_host' if True does not add automatically a 'Host:' header
        `skip_accept_encoding' if True does not add automatically an
           'Accept-Encoding:' header
        'b'%s %s %s'u'%s %s %s'b'identity'u'identity'b'Validate a method name for putrequest.'u'Validate a method name for putrequest.'b'method can't contain control characters. 'u'method can't contain control characters. 'b' (found at least 'u' (found at least 'b'Validate a url for putrequest.'u'Validate a url for putrequest.'b'URL can't contain control characters. 'u'URL can't contain control characters. 'b'Validate a host so it doesn't contain control characters.'u'Validate a host so it doesn't contain control characters.'b'Send a request header line to the server.

        For example: h.putheader('Accept', 'text/html')
        'u'Send a request header line to the server.

        For example: h.putheader('Accept', 'text/html')
        'b'Invalid header name %r'u'Invalid header name %r'b'Invalid header value %r'u'Invalid header value %r'b'
	'b'Indicate that the last header line has been sent to the server.

        This method sends the request to the server.  The optional message_body
        argument can be used to pass a message body associated with the
        request.
        'u'Indicate that the last header line has been sent to the server.

        This method sends the request to the server.  The optional message_body
        argument can be used to pass a message body associated with the
        request.
        'b'Send a complete request to the server.'u'Send a complete request to the server.'b'host'u'host'b'skip_host'u'skip_host'b'accept-encoding'u'accept-encoding'b'skip_accept_encoding'u'skip_accept_encoding'b'Unable to determine size of %r'u'Unable to determine size of %r'b'Transfer-Encoding'u'Transfer-Encoding'b'Content-Length'u'Content-Length'b'body'b'Get the response from the server.

        If the HTTPConnection is in the correct state, returns an
        instance of HTTPResponse or of whatever object is returned by
        the response_class variable.

        If a request has not been sent or if a previous response has
        not be handled, ResponseNotReady is raised.  If the HTTP
        response indicates that the connection should be closed, then
        it will be closed before the response is returned.  When the
        connection is closed, the underlying socket is closed.
        'u'Get the response from the server.

        If the HTTPConnection is in the correct state, returns an
        instance of HTTPResponse or of whatever object is returned by
        the response_class variable.

        If a request has not been sent or if a previous response has
        not be handled, ResponseNotReady is raised.  If the HTTP
        response indicates that the connection should be closed, then
        it will be closed before the response is returned.  When the
        connection is closed, the underlying socket is closed.
        'b'This class allows communication via SSL.'u'This class allows communication via SSL.'b'key_file, cert_file and check_hostname are deprecated, use a custom context instead.'u'key_file, cert_file and check_hostname are deprecated, use a custom context instead.'b'check_hostname needs a SSL context with either CERT_OPTIONAL or CERT_REQUIRED'u'check_hostname needs a SSL context with either CERT_OPTIONAL or CERT_REQUIRED'b'Connect to a host on a given (SSL) port.'u'Connect to a host on a given (SSL) port.'b'HTTPSConnection'u'HTTPSConnection'b', %i more expected'u', %i more expected'b'%s(%i bytes read%s)'u'%s(%i bytes read%s)'b'got more than %d bytes when reading %s'u'got more than %d bytes when reading %s'u'Python39.lib.http.client'u'lib.http.client'
An XML-RPC client interface for Python.

The marshalling and response parser code can also be used to
implement XML-RPC servers.

Exported exceptions:

  Error          Base class for client errors
  ProtocolError  Indicates an HTTP protocol error
  ResponseError  Indicates a broken response package
  Fault          Indicates an XML-RPC fault package

Exported classes:

  ServerProxy    Represents a logical connection to an XML-RPC server

  MultiCall      Executor of boxcared xmlrpc requests
  DateTime       dateTime wrapper for an ISO 8601 string or time tuple or
                 localtime integer value to generate a "dateTime.iso8601"
                 XML-RPC value
  Binary         binary data wrapper

  Marshaller     Generate an XML-RPC params chunk from a Python data structure
  Unmarshaller   Unmarshal an XML-RPC response from incoming XML event message
  Transport      Handles an HTTP transaction to an XML-RPC server
  SafeTransport  Handles an HTTPS transaction to an XML-RPC server

Exported constants:

  (none)

Exported functions:

  getparser      Create instance of the fastest available parser & attach
                 to an unmarshalling object
  dumps          Convert an argument tuple or a Fault instance to an XML-RPC
                 request (or response, if the methodresponse option is used).
  loads          Convert an XML-RPC packet to unmarshalled data plus a method
                 name (None if not present).
MAXINTMININT32700PARSE_ERROR32600SERVER_ERROR32500APPLICATION_ERROR32400SYSTEM_ERROR32300TRANSPORT_ERRORNOT_WELLFORMED_ERROR32701UNSUPPORTED_ENCODING32702INVALID_ENCODING_CHARINVALID_XMLRPC32601METHOD_NOT_FOUND32602INVALID_METHOD_PARAMS32603INTERNAL_ERRORBase class for client errors.ProtocolErrorIndicates an HTTP protocol error.errcodeerrmsg<%s for %s: %s %s>ResponseErrorIndicates a broken response package.FaultIndicates an XML-RPC fault package.faultCodefaultString<%s %s: %r>Boolean_day00001_iso8601_format%Y%m%dT%H:%M:%S%4Y%4Y%m%dT%H:%M:%S_strftimestruct_time%04d%02d%02dT%02d:%02d:%02dDateTime wrapper for an ISO 8601 string or time tuple or
    localtime integer value to generate 'dateTime.iso8601' XML-RPC
    value.
    make_comparable<value><dateTime.iso8601></dateTime.iso8601></value>
_datetime_typeBinaryWrapper for binary data.expected bytes or bytearray, not %s<value><base64>
</base64></value>
_binaryWRAPPERSExpatParserMarshallerGenerate an XML-RPC params chunk from a Python data structure.

    Create a Marshaller instance for each set of parameters, and use
    the "dumps" method to convert your data (represented as a tuple)
    to an XML-RPC params chunk.  To write a fault response, pass a
    Fault instance instead.  You may prefer to use the "dumps" module
    function for this purpose.
    allow_nonedispatch__dump<fault>
</fault>
<params>
<param>
</param>
</params>
cannot marshal %s objects_arbitrary_instancedump_nilcannot marshal None unless allow_none is enabled<value><nil/></value>dump_bool<value><boolean></boolean></value>
dump_longint exceeds XML-RPC limits<value><int></int></value>
dump_intdump_double<value><double></double></value>
dump_unicode<value><string></string></value>
dump_bytesdump_arraycannot marshal recursive sequences<value><array><data>
</data></array></value>
dump_structcannot marshal recursive dictionaries<value><struct>
<member>
dictionary key must be string<name>%s</name>
</member>
</struct></value>
dump_datetimedump_instanceUnmarshallerUnmarshal an XML-RPC response, based on incoming XML event
    messages (start, data, end).  Call close() to get the resulting
    data structure.

    Note that this reader is fairly tolerant, and gladly accepts bogus
    XML-RPC data without complaining (but not bogus XML).
    use_datetimeuse_builtin_types_stack_marks_value_methodname_use_datetime_use_bytesfaultgetmethodnamestandaloneunknown tag %rend_dispatchend_nilend_booleanbad boolean valueend_inti1i2i4i8bigintegerend_doubleend_bigdecimalbigdecimalend_stringend_arrayend_structend_base64end_dateTimedateTime.iso8601end_valueend_paramsend_faultend_methodName_MultiCallMethodcall_list__call_list__nameMultiCallIteratorIterates over the results of a multicall. Exceptions are
    raised in response to xmlrpc faults.unexpected type in multicall resultMultiCallserver -> an object used to boxcar method calls

    server should be a ServerProxy object.

    Methods can be added to the MultiCall using normal
    method call syntax e.g.:

    multicall = MultiCall(server_proxy)
    multicall.add(2,3)
    multicall.get_address("Guido")

    To execute the multicall, call the MultiCall object e.g.:

    add_result, address = multicall()
    __server<%s at %#x>marshalled_listmulticallFastMarshallerFastParserFastUnmarshallergetparsergetparser() -> parser, unmarshaller

    Create an instance of the fastest available parser, and attach it
    to an unmarshalling object.  Return both objects.
    mkdatetimemkbytesmethodnamemethodresponsedata [,options] -> marshalled data

    Convert an argument tuple or a Fault instance to an XML-RPC
    request (or response, if the methodresponse option is used).

    In addition to the data object, the following options can be given
    as keyword arguments:

        methodname: the method name for a methodCall packet

        methodresponse: true to create a methodResponse packet.
        If this option is used with a tuple, the tuple must be
        a singleton (i.e. it can contain only one element).

        encoding: the packet encoding (default is UTF-8)

    All byte strings in the data structure are assumed to use the
    packet encoding.  Unicode strings are automatically converted,
    where necessary.
    argument must be tuple or Fault instanceresponse tuple must be a singletonxmlheader<?xml version='1.0'?>
<methodCall>
<methodName>"<methodCall>\n""<methodName>"</methodName>
</methodCall>
<methodResponse>
</methodResponse>
data -> unmarshalled data, method name

    Convert an XML-RPC packet to unmarshalled data plus a method
    name (None if not present).

    If the XML-RPC packet represents a fault condition, this function
    raises a Fault exception.
    gzip_encodedata -> gzip encoded data

    Encode data using the gzip content encoding as described in RFC 1952
    gzfgzip_decode20971520max_decodegzip encoded data -> unencoded data

    Decode data using the gzip content encoding as described in RFC 1952
    invalid datamax gzipped payload length exceededGzipDecodedResponsea file-like object to decode a response encoded with the gzip
    method, as described in RFC 1952.
    _Method__sendTransportHandles an HTTP transaction to an XML-RPC server.Python-xmlrpc/%suser_agentaccept_gzip_encodingencode_threshold_use_builtin_types_connection_extra_headersrequest_bodysingle_requestECONNABORTEDEPIPEsend_requesthttp_connrespparse_responseget_host_infox509_splituserunquote_to_bytesextra_headersmake_connectionchostContent-Typetext/xmlUser-Agentsend_headerssend_contentbody:SafeTransportHandles an HTTPS transaction to an XML-RPC server.your version of http.client doesn't support HTTPSServerProxyuri [,options] -> a logical connection to an XML-RPC server

    uri is the connection point on the server, given as
    scheme://host/target.

    The standard implementation always supports the "http" scheme.  If
    SSL socket support is available (Python 2.0), it also supports
    "https".

    If the target part and the slash preceding it are both omitted,
    "/RPC2" is assumed.

    The following options can be given as keyword arguments:

        transport: a transport factory
        encoding: the request encoding (default is UTF-8)

    All 8-bit strings passed to the server proxy are assumed to use
    the given encoding.
    httpsunsupported XML-RPC protocol__hosturlunsplit__handler/RPC2extra_kwargs__transport__encoding__verbose__allow_none__close__request<%s for %s%s>A workaround to get special attributes on the ServerProxy
           without interfering with the magic __getattr__
        Attribute %r not foundhttp://localhost:8000currentTimegetCurrentTimemultigetData# XML-RPC CLIENT LIBRARY# $Id$# an XML-RPC client interface for Python.# the marshalling and response parser code can also be used to# implement XML-RPC servers.# Notes:# this version is designed to work with Python 2.1 or newer.# History:# 1999-01-14 fl  Created# 1999-01-15 fl  Changed dateTime to use localtime# 1999-01-16 fl  Added Binary/base64 element, default to RPC2 service# 1999-01-19 fl  Fixed array data element (from Skip Montanaro)# 1999-01-21 fl  Fixed dateTime constructor, etc.# 1999-02-02 fl  Added fault handling, handle empty sequences, etc.# 1999-02-10 fl  Fixed problem with empty responses (from Skip Montanaro)# 1999-06-20 fl  Speed improvements, pluggable parsers/transports (0.9.8)# 2000-11-28 fl  Changed boolean to check the truth value of its argument# 2001-02-24 fl  Added encoding/Unicode/SafeTransport patches# 2001-02-26 fl  Added compare support to wrappers (0.9.9/1.0b1)# 2001-03-28 fl  Make sure response tuple is a singleton# 2001-03-29 fl  Don't require empty params element (from Nicholas Riley)# 2001-06-10 fl  Folded in _xmlrpclib accelerator support (1.0b2)# 2001-08-20 fl  Base xmlrpclib.Error on built-in Exception (from Paul Prescod)# 2001-09-03 fl  Allow Transport subclass to override getparser# 2001-09-10 fl  Lazy import of urllib, cgi, xmllib (20x import speedup)# 2001-10-01 fl  Remove containers from memo cache when done with them# 2001-10-01 fl  Use faster escape method (80% dumps speedup)# 2001-10-02 fl  More dumps microtuning# 2001-10-04 fl  Make sure import expat gets a parser (from Guido van Rossum)# 2001-10-10 sm  Allow long ints to be passed as ints if they don't overflow# 2001-10-17 sm  Test for int and long overflow (allows use on 64-bit systems)# 2001-11-12 fl  Use repr() to marshal doubles (from Paul Felix)# 2002-03-17 fl  Avoid buffered read when possible (from James Rucker)# 2002-04-07 fl  Added pythondoc comments# 2002-04-16 fl  Added __str__ methods to datetime/binary wrappers# 2002-05-15 fl  Added error constants (from Andrew Kuchling)# 2002-06-27 fl  Merged with Python CVS version# 2002-10-22 fl  Added basic authentication (based on code from Phillip Eby)# 2003-01-22 sm  Add support for the bool type# 2003-02-27 gvr Remove apply calls# 2003-04-24 sm  Use cStringIO if available# 2003-04-25 ak  Add support for nil# 2003-06-15 gn  Add support for time.struct_time# 2003-07-12 gp  Correct marshalling of Faults# 2003-10-31 mvl Add multicall support# 2004-08-20 mvl Bump minimum supported Python version to 2.1# 2014-12-02 ch/doko  Add workaround for gzip bomb vulnerability# Copyright (c) 1999-2002 by Secret Labs AB.# Copyright (c) 1999-2002 by Fredrik Lundh.# info@pythonware.com# The XML-RPC client interface is# Copyright (c) 1999-2002 by Secret Labs AB# Copyright (c) 1999-2002 by Fredrik Lundh#python can be built without zlib/gzip support# Internal stuff# used in User-Agent header sent# xmlrpc integer limits# Error constants (from Dan Libby's specification at# http://xmlrpc-epi.sourceforge.net/specs/rfc.fault_codes.php)# Ranges of errors# Specific errors# Base class for all kinds of client-side errors.# Indicates an HTTP-level protocol error.  This is raised by the HTTP# transport layer, if the server returns an error code other than 200# (OK).# @param url The target URL.# @param errcode The HTTP error code.# @param errmsg The HTTP error message.# @param headers The HTTP header dictionary.# Indicates a broken XML-RPC response package.  This exception is# raised by the unmarshalling layer, if the XML-RPC response is# malformed.# Indicates an XML-RPC fault response package.  This exception is# raised by the unmarshalling layer, if the XML-RPC response contains# a fault string.  This exception can also be used as a class, to# generate a fault XML-RPC message.# @param faultCode The XML-RPC fault code.# @param faultString The XML-RPC fault string.# Special values# Backwards compatibility# Wrapper for XML-RPC DateTime values.  This converts a time value to# the format used by XML-RPC.# <p># The value can be given as a datetime object, as a string in the# format "yyyymmddThh:mm:ss", as a 9-item time tuple (as returned by# time.localtime()), or an integer value (as returned by time.time()).# The wrapper uses time.localtime() to convert an integer to a time# tuple.# @param value The time, given as a datetime object, an ISO 8601 string,#              a time tuple, or an integer time value.# Issue #13305: different format codes across platforms# Mac OS X# Linux# Get date/time value.# @return Date/time value, as an ISO 8601 string.# decode xml element contents into a DateTime structure.# Wrapper for binary data.  This can be used to transport any kind# of binary data over XML-RPC, using BASE64 encoding.# @param data An 8-bit string containing arbitrary data.# Make a copy of the bytes!# Get buffer contents.# @return Buffer contents, as an 8-bit string.# XXX encoding?!# decode xml element contents into a Binary structure# XML parsers# fast expat parser for Python 2.0 and later.# XML-RPC marshalling and unmarshalling code# XML-RPC marshaller.# @param encoding Default encoding for 8-bit strings.  The default#     value is None (interpreted as UTF-8).# @see dumps# by the way, if you don't understand what's going on in here,# that's perfectly ok.# fault instance# parameter block# FIXME: the xml-rpc specification allows us to leave out# the entire <params> block if there are no parameters.# however, changing this may break older code (including# old versions of xmlrpclib.py), so this is better left as# is for now.  See @XMLRPC3 for more information. /F# check if this object can be marshalled as a structure# check if this class is a sub-class of a basic type,# because we don't know how to marshal these types# (e.g. a string sub-class)# XXX(twouters): using "_arbitrary_instance" as key as a quick-fix# for the p3yk merge, this should probably be fixed more neatly.# backward compatible# check for special wrappers# store instance attributes as a struct (really?)# XML-RPC unmarshaller.# @see loads# and again, if you don't understand what's going on in here,# return response tuple and target method# event handlers# FIXME: assert standalone == 1 ???# prepare to handle this element# call the appropriate end tag handler# unknown tag ?# accelerator support# dispatch data# element decoders# struct keys are always strings# map arrays to Python lists# map structs to Python dictionaries# if we stumble upon a value element with no internal# elements, treat it as a string element# no params## Multicall support# some lesser magic to store calls made to a MultiCall object# for batch execution# convenience functions# Create a parser object, and connect it to an unmarshalling instance.# This function picks the fastest available XML parser.# return A (parser, unmarshaller) tuple.# Convert a Python tuple or a Fault instance to an XML-RPC packet.# @def dumps(params, **options)# @param params A tuple or Fault instance.# @keyparam methodname If given, create a methodCall request for#     this method name.# @keyparam methodresponse If given, create a methodResponse packet.#     If used with a tuple, the tuple must be a singleton (that is,#     it must contain exactly one element).# @keyparam encoding The packet encoding.# @return A string containing marshalled data.# utf-8 is default# standard XML-RPC wrappings# a method call# a method response, or a fault structure# return as is# Convert an XML-RPC packet to a Python object.  If the XML-RPC packet# represents a fault condition, this function raises a Fault exception.# @param data An XML-RPC packet, given as an 8-bit string.# @return A tuple containing the unpacked data, and the method name#     (None if not present).# @see Fault# Encode a string using the gzip content encoding such as specified by the# Content-Encoding: gzip# in the HTTP header, as described in RFC 1952# @param data the unencoded data# @return the encoded data# Decode a string using the gzip content encoding such as specified by the# @param data The encoded data# @keyparam max_decode Maximum bytes to decode (20 MiB default), use negative#    values for unlimited decoding# @return the unencoded data# @raises ValueError if data is not correctly coded.# @raises ValueError if max gzipped payload length exceeded# no limit# Return a decoded file-like object for the gzip encoding# as described in RFC 1952.# @param response A stream supporting a read() method# @return a file-like object that the decoded data can be read() from#response doesn't support tell() and read(), required by#GzipFile# request dispatcher# some magic to bind an XML-RPC method to an RPC server.# supports "nested" methods (e.g. examples.getStateName)# Standard transport class for XML-RPC over HTTP.# You can create custom transports by subclassing this method, and# overriding selected methods.# client identifier (may be overridden)#if true, we'll request gzip encoding# if positive, encode request using gzip if it exceeds this threshold# note that many servers will get confused, so only use it if you know# that they can decode such a request#None = don't encode# Send a complete request, and parse the response.# Retry request if a cached connection has disconnected.# @param host Target host.# @param handler Target PRC handler.# @param request_body XML-RPC request body.# @param verbose Debugging flag.# @return Parsed response.#retry request once if cached connection has gone cold# issue XML-RPC request#All unexpected errors leave connection in# a strange state, so we clear it.#We got an error response.#Discard any response data and raise exception# Create parser.# @return A 2-tuple containing a parser and an unmarshaller.# get parser and unmarshaller# Get authorization info from host parameter# Host may be a string, or a (host, x509-dict) tuple; if a string,# it is checked for a "user:pw@host" format, and a "Basic# Authentication" header is added if appropriate.# @param host Host descriptor (URL or (URL, x509 info) tuple).# @return A 3-tuple containing (actual host, extra headers,#     x509 info).  The header and x509 fields may be None.# get rid of whitespace# Connect to server.# @return An HTTPConnection object#return an existing connection if possible.  This allows#HTTP/1.1 keep-alive.# create a HTTP connection object from a host descriptor# Clear any cached connection object.# Used in the event of socket errors.# Send HTTP request.# @param handler Target RPC handler (a path relative to host)# @param request_body The XML-RPC request body# @param debug Enable debugging if debug is true.# @return An HTTPConnection.# Send request headers.# This function provides a useful hook for subclassing# @param connection httpConnection.# @param headers list of key,value pairs for HTTP headers# Send request body.#optionally encode the request# Parse response.# @param file Stream.# @return Response tuple and target method.# read response data from httpresponse, and parse it# Check for new http response object, otherwise it is a file object.# Standard transport class for XML-RPC over HTTPS.# FIXME: mostly untested# create a HTTPS connection object from a host descriptor# host may be a string, or a (host, x509-dict) tuple# Standard server proxy.  This class establishes a virtual connection# to an XML-RPC server.# This class is available as ServerProxy and Server.  New code should# use ServerProxy, to avoid confusion.# @def ServerProxy(uri, **options)# @param uri The connection point on the server.# @keyparam transport A transport factory, compatible with the#    standard transport class.# @keyparam encoding The default encoding used for 8-bit strings#    (default is UTF-8).# @keyparam verbose Use a true value to enable debugging output.#    (printed to standard output).# @see Transport# establish a "logical" server connection# get the url# call a method on the remote server# magic method dispatcher# note: to call a remote object with a non-standard name, use# result getattr(server, "strange-python-name")(args)# compatibility# test code# simple test program (from the XML-RPC specification)# local server, available from Lib/xmlrpc/server.pyb'
An XML-RPC client interface for Python.

The marshalling and response parser code can also be used to
implement XML-RPC servers.

Exported exceptions:

  Error          Base class for client errors
  ProtocolError  Indicates an HTTP protocol error
  ResponseError  Indicates a broken response package
  Fault          Indicates an XML-RPC fault package

Exported classes:

  ServerProxy    Represents a logical connection to an XML-RPC server

  MultiCall      Executor of boxcared xmlrpc requests
  DateTime       dateTime wrapper for an ISO 8601 string or time tuple or
                 localtime integer value to generate a "dateTime.iso8601"
                 XML-RPC value
  Binary         binary data wrapper

  Marshaller     Generate an XML-RPC params chunk from a Python data structure
  Unmarshaller   Unmarshal an XML-RPC response from incoming XML event message
  Transport      Handles an HTTP transaction to an XML-RPC server
  SafeTransport  Handles an HTTPS transaction to an XML-RPC server

Exported constants:

  (none)

Exported functions:

  getparser      Create instance of the fastest available parser & attach
                 to an unmarshalling object
  dumps          Convert an argument tuple or a Fault instance to an XML-RPC
                 request (or response, if the methodresponse option is used).
  loads          Convert an XML-RPC packet to unmarshalled data plus a method
                 name (None if not present).
'u'
An XML-RPC client interface for Python.

The marshalling and response parser code can also be used to
implement XML-RPC servers.

Exported exceptions:

  Error          Base class for client errors
  ProtocolError  Indicates an HTTP protocol error
  ResponseError  Indicates a broken response package
  Fault          Indicates an XML-RPC fault package

Exported classes:

  ServerProxy    Represents a logical connection to an XML-RPC server

  MultiCall      Executor of boxcared xmlrpc requests
  DateTime       dateTime wrapper for an ISO 8601 string or time tuple or
                 localtime integer value to generate a "dateTime.iso8601"
                 XML-RPC value
  Binary         binary data wrapper

  Marshaller     Generate an XML-RPC params chunk from a Python data structure
  Unmarshaller   Unmarshal an XML-RPC response from incoming XML event message
  Transport      Handles an HTTP transaction to an XML-RPC server
  SafeTransport  Handles an HTTPS transaction to an XML-RPC server

Exported constants:

  (none)

Exported functions:

  getparser      Create instance of the fastest available parser & attach
                 to an unmarshalling object
  dumps          Convert an argument tuple or a Fault instance to an XML-RPC
                 request (or response, if the methodresponse option is used).
  loads          Convert an XML-RPC packet to unmarshalled data plus a method
                 name (None if not present).
'b'Base class for client errors.'u'Base class for client errors.'b'Indicates an HTTP protocol error.'u'Indicates an HTTP protocol error.'b'<%s for %s: %s %s>'u'<%s for %s: %s %s>'b'Indicates a broken response package.'u'Indicates a broken response package.'b'Indicates an XML-RPC fault package.'u'Indicates an XML-RPC fault package.'b'<%s %s: %r>'u'<%s %s: %r>'b'0001'u'0001'b'%Y%m%dT%H:%M:%S'u'%Y%m%dT%H:%M:%S'b'%4Y'u'%4Y'b'%4Y%m%dT%H:%M:%S'u'%4Y%m%dT%H:%M:%S'b'%04d%02d%02dT%02d:%02d:%02d'u'%04d%02d%02dT%02d:%02d:%02d'b'DateTime wrapper for an ISO 8601 string or time tuple or
    localtime integer value to generate 'dateTime.iso8601' XML-RPC
    value.
    'u'DateTime wrapper for an ISO 8601 string or time tuple or
    localtime integer value to generate 'dateTime.iso8601' XML-RPC
    value.
    'b'timetuple'u'timetuple'b'<value><dateTime.iso8601>'u'<value><dateTime.iso8601>'b'</dateTime.iso8601></value>
'u'</dateTime.iso8601></value>
'b'Wrapper for binary data.'u'Wrapper for binary data.'b'expected bytes or bytearray, not %s'u'expected bytes or bytearray, not %s'b'<value><base64>
'u'<value><base64>
'b'</base64></value>
'u'</base64></value>
'b'Generate an XML-RPC params chunk from a Python data structure.

    Create a Marshaller instance for each set of parameters, and use
    the "dumps" method to convert your data (represented as a tuple)
    to an XML-RPC params chunk.  To write a fault response, pass a
    Fault instance instead.  You may prefer to use the "dumps" module
    function for this purpose.
    'u'Generate an XML-RPC params chunk from a Python data structure.

    Create a Marshaller instance for each set of parameters, and use
    the "dumps" method to convert your data (represented as a tuple)
    to an XML-RPC params chunk.  To write a fault response, pass a
    Fault instance instead.  You may prefer to use the "dumps" module
    function for this purpose.
    'b'<fault>
'u'<fault>
'b'faultCode'u'faultCode'b'faultString'u'faultString'b'</fault>
'u'</fault>
'b'<params>
'u'<params>
'b'<param>
'u'<param>
'b'</param>
'u'</param>
'b'</params>
'u'</params>
'b'cannot marshal %s objects'u'cannot marshal %s objects'b'_arbitrary_instance'u'_arbitrary_instance'b'cannot marshal None unless allow_none is enabled'u'cannot marshal None unless allow_none is enabled'b'<value><nil/></value>'u'<value><nil/></value>'b'<value><boolean>'u'<value><boolean>'b'</boolean></value>
'u'</boolean></value>
'b'int exceeds XML-RPC limits'u'int exceeds XML-RPC limits'b'<value><int>'u'<value><int>'b'</int></value>
'u'</int></value>
'b'<value><double>'u'<value><double>'b'</double></value>
'u'</double></value>
'b'<value><string>'u'<value><string>'b'</string></value>
'u'</string></value>
'b'cannot marshal recursive sequences'u'cannot marshal recursive sequences'b'<value><array><data>
'u'<value><array><data>
'b'</data></array></value>
'u'</data></array></value>
'b'cannot marshal recursive dictionaries'u'cannot marshal recursive dictionaries'b'<value><struct>
'u'<value><struct>
'b'<member>
'u'<member>
'b'dictionary key must be string'u'dictionary key must be string'b'<name>%s</name>
'u'<name>%s</name>
'b'</member>
'u'</member>
'b'</struct></value>
'u'</struct></value>
'b'Unmarshal an XML-RPC response, based on incoming XML event
    messages (start, data, end).  Call close() to get the resulting
    data structure.

    Note that this reader is fairly tolerant, and gladly accepts bogus
    XML-RPC data without complaining (but not bogus XML).
    'u'Unmarshal an XML-RPC response, based on incoming XML event
    messages (start, data, end).  Call close() to get the resulting
    data structure.

    Note that this reader is fairly tolerant, and gladly accepts bogus
    XML-RPC data without complaining (but not bogus XML).
    'b'fault'u'fault'b'array'b'struct'b'unknown tag %r'u'unknown tag %r'b'nil'u'nil'b'bad boolean value'u'bad boolean value'b'boolean'u'boolean'b'i1'u'i1'b'i2'u'i2'b'i4'u'i4'b'i8'u'i8'b'biginteger'u'biginteger'b'float'u'float'b'bigdecimal'u'bigdecimal'b'string'u'string'b'dateTime.iso8601'u'dateTime.iso8601'b'methodName'u'methodName'b'Iterates over the results of a multicall. Exceptions are
    raised in response to xmlrpc faults.'u'Iterates over the results of a multicall. Exceptions are
    raised in response to xmlrpc faults.'b'unexpected type in multicall result'u'unexpected type in multicall result'b'server -> an object used to boxcar method calls

    server should be a ServerProxy object.

    Methods can be added to the MultiCall using normal
    method call syntax e.g.:

    multicall = MultiCall(server_proxy)
    multicall.add(2,3)
    multicall.get_address("Guido")

    To execute the multicall, call the MultiCall object e.g.:

    add_result, address = multicall()
    'u'server -> an object used to boxcar method calls

    server should be a ServerProxy object.

    Methods can be added to the MultiCall using normal
    method call syntax e.g.:

    multicall = MultiCall(server_proxy)
    multicall.add(2,3)
    multicall.get_address("Guido")

    To execute the multicall, call the MultiCall object e.g.:

    add_result, address = multicall()
    'b'<%s at %#x>'u'<%s at %#x>'b'getparser() -> parser, unmarshaller

    Create an instance of the fastest available parser, and attach it
    to an unmarshalling object.  Return both objects.
    'u'getparser() -> parser, unmarshaller

    Create an instance of the fastest available parser, and attach it
    to an unmarshalling object.  Return both objects.
    'b'data [,options] -> marshalled data

    Convert an argument tuple or a Fault instance to an XML-RPC
    request (or response, if the methodresponse option is used).

    In addition to the data object, the following options can be given
    as keyword arguments:

        methodname: the method name for a methodCall packet

        methodresponse: true to create a methodResponse packet.
        If this option is used with a tuple, the tuple must be
        a singleton (i.e. it can contain only one element).

        encoding: the packet encoding (default is UTF-8)

    All byte strings in the data structure are assumed to use the
    packet encoding.  Unicode strings are automatically converted,
    where necessary.
    'u'data [,options] -> marshalled data

    Convert an argument tuple or a Fault instance to an XML-RPC
    request (or response, if the methodresponse option is used).

    In addition to the data object, the following options can be given
    as keyword arguments:

        methodname: the method name for a methodCall packet

        methodresponse: true to create a methodResponse packet.
        If this option is used with a tuple, the tuple must be
        a singleton (i.e. it can contain only one element).

        encoding: the packet encoding (default is UTF-8)

    All byte strings in the data structure are assumed to use the
    packet encoding.  Unicode strings are automatically converted,
    where necessary.
    'b'argument must be tuple or Fault instance'u'argument must be tuple or Fault instance'b'response tuple must be a singleton'u'response tuple must be a singleton'b'<?xml version='1.0'?>
'u'<?xml version='1.0'?>
'b'<methodCall>
<methodName>'u'<methodCall>
<methodName>'b'</methodName>
'u'</methodName>
'b'</methodCall>
'u'</methodCall>
'b'<methodResponse>
'u'<methodResponse>
'b'</methodResponse>
'u'</methodResponse>
'b'data -> unmarshalled data, method name

    Convert an XML-RPC packet to unmarshalled data plus a method
    name (None if not present).

    If the XML-RPC packet represents a fault condition, this function
    raises a Fault exception.
    'u'data -> unmarshalled data, method name

    Convert an XML-RPC packet to unmarshalled data plus a method
    name (None if not present).

    If the XML-RPC packet represents a fault condition, this function
    raises a Fault exception.
    'b'data -> gzip encoded data

    Encode data using the gzip content encoding as described in RFC 1952
    'u'data -> gzip encoded data

    Encode data using the gzip content encoding as described in RFC 1952
    'b'gzip encoded data -> unencoded data

    Decode data using the gzip content encoding as described in RFC 1952
    'u'gzip encoded data -> unencoded data

    Decode data using the gzip content encoding as described in RFC 1952
    'b'invalid data'u'invalid data'b'max gzipped payload length exceeded'u'max gzipped payload length exceeded'b'a file-like object to decode a response encoded with the gzip
    method, as described in RFC 1952.
    'u'a file-like object to decode a response encoded with the gzip
    method, as described in RFC 1952.
    'b'Handles an HTTP transaction to an XML-RPC server.'u'Handles an HTTP transaction to an XML-RPC server.'b'Python-xmlrpc/%s'u'Python-xmlrpc/%s'b'Authorization'u'Authorization'b'Content-Type'u'Content-Type'b'text/xml'u'text/xml'b'User-Agent'u'User-Agent'b'getheader'u'getheader'b'body:'u'body:'b'Handles an HTTPS transaction to an XML-RPC server.'u'Handles an HTTPS transaction to an XML-RPC server.'b'your version of http.client doesn't support HTTPS'u'your version of http.client doesn't support HTTPS'b'uri [,options] -> a logical connection to an XML-RPC server

    uri is the connection point on the server, given as
    scheme://host/target.

    The standard implementation always supports the "http" scheme.  If
    SSL socket support is available (Python 2.0), it also supports
    "https".

    If the target part and the slash preceding it are both omitted,
    "/RPC2" is assumed.

    The following options can be given as keyword arguments:

        transport: a transport factory
        encoding: the request encoding (default is UTF-8)

    All 8-bit strings passed to the server proxy are assumed to use
    the given encoding.
    'u'uri [,options] -> a logical connection to an XML-RPC server

    uri is the connection point on the server, given as
    scheme://host/target.

    The standard implementation always supports the "http" scheme.  If
    SSL socket support is available (Python 2.0), it also supports
    "https".

    If the target part and the slash preceding it are both omitted,
    "/RPC2" is assumed.

    The following options can be given as keyword arguments:

        transport: a transport factory
        encoding: the request encoding (default is UTF-8)

    All 8-bit strings passed to the server proxy are assumed to use
    the given encoding.
    'b'https'u'https'b'unsupported XML-RPC protocol'u'unsupported XML-RPC protocol'b'/RPC2'u'/RPC2'b'<%s for %s%s>'u'<%s for %s%s>'b'A workaround to get special attributes on the ServerProxy
           without interfering with the magic __getattr__
        'u'A workaround to get special attributes on the ServerProxy
           without interfering with the magic __getattr__
        'b'transport'u'transport'b'Attribute %r not found'u'Attribute %r not found'b'http://localhost:8000'u'http://localhost:8000'u'Python39.lib.xmlrpc.client'u'lib.xmlrpc.client'A generic class to build line-oriented command interpreters.

Interpreters constructed with this class obey the following conventions:

1. End of file on input is processed as the command 'EOF'.
2. A command is parsed out of each line by collecting the prefix composed
   of characters in the identchars member.
3. A command `foo' is dispatched to a method 'do_foo()'; the do_ method
   is passed a single argument consisting of the remainder of the line.
4. Typing an empty line repeats the last command.  (Actually, it calls the
   method `emptyline', which may be overridden in a subclass.)
5. There is a predefined `help' method.  Given an argument `topic', it
   calls the command `help_topic'.  With no arguments, it lists all topics
   with defined help_ functions, broken into up to three topics; documented
   commands, miscellaneous help topics, and undocumented commands.
6. The command '?' is a synonym for `help'.  The command '!' is a synonym
   for `shell', if a do_shell method exists.
7. If completion is enabled, completing commands will be done automatically,
   and completing of commands args is done by calling complete_foo() with
   arguments text, line, begidx, endidx.  text is string we are matching
   against, all returned matches must begin with it.  line is the current
   input line (lstripped), begidx and endidx are the beginning and end
   indexes of the text being matched, which could be used to provide
   different completion depending upon which position the argument is in.

The `default' method may be overridden to intercept commands for which there
is no do_ method.

The `completedefault' method may be overridden to intercept completions for
commands that have no complete_ method.

The data member `self.ruler' sets the character used to draw separator lines
in the help messages.  If empty, no ruler line is drawn.  It defaults to "=".

If the value of `self.intro' is nonempty when the cmdloop method is called,
it is printed out on interpreter startup.  This value may be overridden
via an optional argument to the cmdloop() method.

The data members `self.doc_header', `self.misc_header', and
`self.undoc_header' set the headers used for the help function's
listings of documented functions, miscellaneous topics, and undocumented
functions respectively.
Cmd(Cmd) PROMPTIDENTCHARSA simple framework for writing line-oriented command interpreters.

    These are often useful for test harnesses, administrative tools, and
    prototypes that will later be wrapped in a more sophisticated interface.

    A Cmd instance or subclass instance is a line-oriented interpreter
    framework.  There is no good reason to instantiate Cmd itself; rather,
    it's useful as a superclass of an interpreter class you define yourself
    in order to inherit Cmd's methods and encapsulate action methods.

    identcharsrulerlastcmdintrodoc_leaderDocumented commands (type help <topic>):doc_headerMiscellaneous help topics:misc_headerUndocumented commands:undoc_header*** No help on %snohelpuse_rawinputtabcompletekeyInstantiate a line-oriented interpreter framework.

        The optional argument 'completekey' is the readline name of a
        completion key; it defaults to the Tab key. If completekey is
        not None and the readline module is available, command completion
        is done automatically. The optional arguments stdin and stdout
        specify alternate input and output file objects; if not specified,
        sys.stdin and sys.stdout are used.

        cmdqueuecmdloopRepeatedly issue a prompt, accept input, parse an initial prefix
        off the received input, and dispatch to action methods, passing them
        the remainder of the line as argument.

        preloopget_completerold_completerparse_and_bind: completeprecmdonecmdpostcmdpostloopHook method executed just before the command line is
        interpreted, but after the input prompt is generated and issued.

        Hook method executed just after a command dispatch is finished.Hook method executed once when the cmdloop() method is called.Hook method executed once when the cmdloop() method is about to
        return.

        parselineParse the line into a command name and a string containing
        the arguments.  Returns a tuple containing (command, args, line).
        'command' and 'args' may be None if the line couldn't be parsed.
        help do_shellshell Interpret the argument as though it had been typed in response
        to the prompt.

        This may be overridden, but should not normally need to be;
        see the precmd() and postcmd() methods for useful execution hooks.
        The return value is a flag indicating whether interpretation of
        commands by the interpreter should stop.

        emptylinedo_Called when an empty line is entered in response to the prompt.

        If this method is not overridden, it repeats the last nonempty
        command entered.

        Called on an input line when the command prefix is not recognized.

        If this method is not overridden, it prints an error message and
        returns.

        *** Unknown syntax: %s
completedefaultignoredMethod called to complete an input line when no command-specific
        complete_*() method is available.

        By default, it returns an empty list.

        completenamesdotextget_namesReturn the next possible completion for 'text'.

        If a command has not been entered, then complete against command list.
        Otherwise try to call complete_<command> to get list of completions.
        get_line_bufferoriglinestrippedget_begidxbegidxget_endidxendidxcompfunccomplete_completion_matchescomplete_helphelp_topicsdo_helpList available commands with "help" or detailed help with "help cmd".%s
cmds_doccmds_undocprevnameprint_topicscmdscmdlenmaxcolcolumnizedisplaywidthDisplay a list of strings as a compact set of columns.

        Each column is only as wide as necessary.
        Columns are separated by two spaces (one was not legible enough).
        <empty>
nonstringslist[i] not a string for i in %snrowsncolscolwidthstotwidthtexts# This method used to pull in base class attributes# at a time dir() didn't do it yet.# XXX check arg syntax# There can be duplicates if routines overridden# Try every row count from 1 upwardsb'A generic class to build line-oriented command interpreters.

Interpreters constructed with this class obey the following conventions:

1. End of file on input is processed as the command 'EOF'.
2. A command is parsed out of each line by collecting the prefix composed
   of characters in the identchars member.
3. A command `foo' is dispatched to a method 'do_foo()'; the do_ method
   is passed a single argument consisting of the remainder of the line.
4. Typing an empty line repeats the last command.  (Actually, it calls the
   method `emptyline', which may be overridden in a subclass.)
5. There is a predefined `help' method.  Given an argument `topic', it
   calls the command `help_topic'.  With no arguments, it lists all topics
   with defined help_ functions, broken into up to three topics; documented
   commands, miscellaneous help topics, and undocumented commands.
6. The command '?' is a synonym for `help'.  The command '!' is a synonym
   for `shell', if a do_shell method exists.
7. If completion is enabled, completing commands will be done automatically,
   and completing of commands args is done by calling complete_foo() with
   arguments text, line, begidx, endidx.  text is string we are matching
   against, all returned matches must begin with it.  line is the current
   input line (lstripped), begidx and endidx are the beginning and end
   indexes of the text being matched, which could be used to provide
   different completion depending upon which position the argument is in.

The `default' method may be overridden to intercept commands for which there
is no do_ method.

The `completedefault' method may be overridden to intercept completions for
commands that have no complete_ method.

The data member `self.ruler' sets the character used to draw separator lines
in the help messages.  If empty, no ruler line is drawn.  It defaults to "=".

If the value of `self.intro' is nonempty when the cmdloop method is called,
it is printed out on interpreter startup.  This value may be overridden
via an optional argument to the cmdloop() method.

The data members `self.doc_header', `self.misc_header', and
`self.undoc_header' set the headers used for the help function's
listings of documented functions, miscellaneous topics, and undocumented
functions respectively.
'u'A generic class to build line-oriented command interpreters.

Interpreters constructed with this class obey the following conventions:

1. End of file on input is processed as the command 'EOF'.
2. A command is parsed out of each line by collecting the prefix composed
   of characters in the identchars member.
3. A command `foo' is dispatched to a method 'do_foo()'; the do_ method
   is passed a single argument consisting of the remainder of the line.
4. Typing an empty line repeats the last command.  (Actually, it calls the
   method `emptyline', which may be overridden in a subclass.)
5. There is a predefined `help' method.  Given an argument `topic', it
   calls the command `help_topic'.  With no arguments, it lists all topics
   with defined help_ functions, broken into up to three topics; documented
   commands, miscellaneous help topics, and undocumented commands.
6. The command '?' is a synonym for `help'.  The command '!' is a synonym
   for `shell', if a do_shell method exists.
7. If completion is enabled, completing commands will be done automatically,
   and completing of commands args is done by calling complete_foo() with
   arguments text, line, begidx, endidx.  text is string we are matching
   against, all returned matches must begin with it.  line is the current
   input line (lstripped), begidx and endidx are the beginning and end
   indexes of the text being matched, which could be used to provide
   different completion depending upon which position the argument is in.

The `default' method may be overridden to intercept commands for which there
is no do_ method.

The `completedefault' method may be overridden to intercept completions for
commands that have no complete_ method.

The data member `self.ruler' sets the character used to draw separator lines
in the help messages.  If empty, no ruler line is drawn.  It defaults to "=".

If the value of `self.intro' is nonempty when the cmdloop method is called,
it is printed out on interpreter startup.  This value may be overridden
via an optional argument to the cmdloop() method.

The data members `self.doc_header', `self.misc_header', and
`self.undoc_header' set the headers used for the help function's
listings of documented functions, miscellaneous topics, and undocumented
functions respectively.
'b'Cmd'u'Cmd'b'(Cmd) 'u'(Cmd) 'b'A simple framework for writing line-oriented command interpreters.

    These are often useful for test harnesses, administrative tools, and
    prototypes that will later be wrapped in a more sophisticated interface.

    A Cmd instance or subclass instance is a line-oriented interpreter
    framework.  There is no good reason to instantiate Cmd itself; rather,
    it's useful as a superclass of an interpreter class you define yourself
    in order to inherit Cmd's methods and encapsulate action methods.

    'u'A simple framework for writing line-oriented command interpreters.

    These are often useful for test harnesses, administrative tools, and
    prototypes that will later be wrapped in a more sophisticated interface.

    A Cmd instance or subclass instance is a line-oriented interpreter
    framework.  There is no good reason to instantiate Cmd itself; rather,
    it's useful as a superclass of an interpreter class you define yourself
    in order to inherit Cmd's methods and encapsulate action methods.

    'b'Documented commands (type help <topic>):'u'Documented commands (type help <topic>):'b'Miscellaneous help topics:'u'Miscellaneous help topics:'b'Undocumented commands:'u'Undocumented commands:'b'*** No help on %s'u'*** No help on %s'b'tab'u'tab'b'Instantiate a line-oriented interpreter framework.

        The optional argument 'completekey' is the readline name of a
        completion key; it defaults to the Tab key. If completekey is
        not None and the readline module is available, command completion
        is done automatically. The optional arguments stdin and stdout
        specify alternate input and output file objects; if not specified,
        sys.stdin and sys.stdout are used.

        'u'Instantiate a line-oriented interpreter framework.

        The optional argument 'completekey' is the readline name of a
        completion key; it defaults to the Tab key. If completekey is
        not None and the readline module is available, command completion
        is done automatically. The optional arguments stdin and stdout
        specify alternate input and output file objects; if not specified,
        sys.stdin and sys.stdout are used.

        'b'Repeatedly issue a prompt, accept input, parse an initial prefix
        off the received input, and dispatch to action methods, passing them
        the remainder of the line as argument.

        'u'Repeatedly issue a prompt, accept input, parse an initial prefix
        off the received input, and dispatch to action methods, passing them
        the remainder of the line as argument.

        'b': complete'u': complete'b'EOF'u'EOF'b'Hook method executed just before the command line is
        interpreted, but after the input prompt is generated and issued.

        'u'Hook method executed just before the command line is
        interpreted, but after the input prompt is generated and issued.

        'b'Hook method executed just after a command dispatch is finished.'u'Hook method executed just after a command dispatch is finished.'b'Hook method executed once when the cmdloop() method is called.'u'Hook method executed once when the cmdloop() method is called.'b'Hook method executed once when the cmdloop() method is about to
        return.

        'u'Hook method executed once when the cmdloop() method is about to
        return.

        'b'Parse the line into a command name and a string containing
        the arguments.  Returns a tuple containing (command, args, line).
        'command' and 'args' may be None if the line couldn't be parsed.
        'u'Parse the line into a command name and a string containing
        the arguments.  Returns a tuple containing (command, args, line).
        'command' and 'args' may be None if the line couldn't be parsed.
        'b'help 'u'help 'b'do_shell'u'do_shell'b'shell 'u'shell 'b'Interpret the argument as though it had been typed in response
        to the prompt.

        This may be overridden, but should not normally need to be;
        see the precmd() and postcmd() methods for useful execution hooks.
        The return value is a flag indicating whether interpretation of
        commands by the interpreter should stop.

        'u'Interpret the argument as though it had been typed in response
        to the prompt.

        This may be overridden, but should not normally need to be;
        see the precmd() and postcmd() methods for useful execution hooks.
        The return value is a flag indicating whether interpretation of
        commands by the interpreter should stop.

        'b'do_'u'do_'b'Called when an empty line is entered in response to the prompt.

        If this method is not overridden, it repeats the last nonempty
        command entered.

        'u'Called when an empty line is entered in response to the prompt.

        If this method is not overridden, it repeats the last nonempty
        command entered.

        'b'Called on an input line when the command prefix is not recognized.

        If this method is not overridden, it prints an error message and
        returns.

        'u'Called on an input line when the command prefix is not recognized.

        If this method is not overridden, it prints an error message and
        returns.

        'b'*** Unknown syntax: %s
'u'*** Unknown syntax: %s
'b'Method called to complete an input line when no command-specific
        complete_*() method is available.

        By default, it returns an empty list.

        'u'Method called to complete an input line when no command-specific
        complete_*() method is available.

        By default, it returns an empty list.

        'b'Return the next possible completion for 'text'.

        If a command has not been entered, then complete against command list.
        Otherwise try to call complete_<command> to get list of completions.
        'u'Return the next possible completion for 'text'.

        If a command has not been entered, then complete against command list.
        Otherwise try to call complete_<command> to get list of completions.
        'b'complete_'u'complete_'b'help_'u'help_'b'List available commands with "help" or detailed help with "help cmd".'u'List available commands with "help" or detailed help with "help cmd".'b'%s
'u'%s
'b'Display a list of strings as a compact set of columns.

        Each column is only as wide as necessary.
        Columns are separated by two spaces (one was not legible enough).
        'u'Display a list of strings as a compact set of columns.

        Each column is only as wide as necessary.
        Columns are separated by two spaces (one was not legible enough).
        'b'<empty>
'u'<empty>
'b'list[i] not a string for i in %s'u'list[i] not a string for i in %s'u'Python.Python39.lib.cmd'u'Python39.lib.cmd'u'lib.cmd'Utilities needed to emulate Python's interactive interpreter.

codeopCommandCompilercompile_commandInteractiveInterpreterInteractiveConsoleBase class for InteractiveConsole.

    This class deals with parsing and interpreter state (the user's
    namespace); it doesn't deal with input buffering or prompting or
    input file naming (the filename is always passed in explicitly).

    Constructor.

        The optional 'locals' argument specifies the dictionary in
        which code will be executed; it defaults to a newly created
        dictionary with key "__name__" set to "__console__" and key
        "__doc__" set to None.

        __console__runsource<input>Compile and run some source in the interpreter.

        Arguments are as for compile_command().

        One of several things can happen:

        1) The input is incorrect; compile_command() raised an
        exception (SyntaxError or OverflowError).  A syntax traceback
        will be printed by calling the showsyntaxerror() method.

        2) The input is incomplete, and more input is required;
        compile_command() returned None.  Nothing happens.

        3) The input is complete; compile_command() returned a code
        object.  The code is executed by calling self.runcode() (which
        also handles run-time exceptions, except for SystemExit).

        The return value is True in case 2, False in the other cases (unless
        an exception is raised).  The return value can be used to
        decide whether to use sys.ps1 or sys.ps2 to prompt the next
        line.

        showsyntaxerrorruncodeExecute a code object.

        When an exception occurs, self.showtraceback() is called to
        display a traceback.  All exceptions are caught except
        SystemExit, which is reraised.

        A note about KeyboardInterrupt: this exception may occur
        elsewhere in this code, and may not always be caught.  The
        caller should be prepared to deal with it.

        showtracebackDisplay the syntax error that just occurred.

        This doesn't display a stack trace because there isn't one.

        If a filename is given, it is stuffed in the exception instead
        of what was there before (because Python's parser always uses
        "<string>" when reading from a string).

        The output is written by self.write(), below.

        dummy_filenameDisplay the exception that just occurred.

        We remove the first stack item because it is our own code.

        The output is written by self.write(), below.

        last_tbformat_exceptionWrite a string.

        The base implementation writes to sys.stderr; a subclass may
        replace this with a different implementation.

        Closely emulate the behavior of the interactive Python interpreter.

    This class builds on InteractiveInterpreter and adds prompting
    using the familiar sys.ps1 and sys.ps2, and input buffering.

    <console>Constructor.

        The optional locals argument will be passed to the
        InteractiveInterpreter base class.

        The optional filename argument should specify the (file)name
        of the input stream; it will show up in tracebacks.

        resetbufferReset the input buffer.exitmsgClosely emulate the interactive Python console.

        The optional banner argument specifies the banner to print
        before the first interaction; by default it prints a banner
        similar to the one printed by the real Python interpreter,
        followed by the current class name in parentheses (so as not
        to confuse this with the real interpreter -- since it's so
        close!).

        The optional exitmsg argument specifies the exit message
        printed when exiting. Pass the empty string to suppress
        printing an exit message. If exitmsg is not given or None,
        a default message is printed.

        ps1>>> ps2... Type "help", "copyright", "credits" or "license" for more information.cprtPython %s on %s
%s
(%s)
raw_input
KeyboardInterrupt
now exiting %s...
Push a line to the interpreter.

        The line should not have a trailing newline; it may have
        internal newlines.  The line is appended to a buffer and the
        interpreter's runsource() method is called with the
        concatenated contents of the buffer as source.  If this
        indicates that the command was executed or invalid, the buffer
        is reset; otherwise, the command is incomplete, and the buffer
        is left as it was after the line was appended.  The return
        value is 1 if more input is required, 0 if the line was dealt
        with in some way (this is the same as runsource()).

        Write a prompt and read a line.

        The returned line does not include the trailing newline.
        When the user enters the EOF key sequence, EOFError is raised.

        The base implementation uses the built-in function
        input(); a subclass may replace this with a different
        implementation.

        readfuncClosely emulate the interactive Python interpreter.

    This is a backwards compatible interface to the InteractiveConsole
    class.  When readfunc is not specified, it attempts to import the
    readline module to enable GNU readline if it is available.

    Arguments (all optional, all default to None):

    banner -- passed to InteractiveConsole.interact()
    readfunc -- if not None, replaces InteractiveConsole.raw_input()
    local -- passed to InteractiveInterpreter.__init__()
    exitmsg -- passed to InteractiveConsole.interact()

    -qdon't print version and copyright messages# Inspired by similar code by Jeff Epler and Fredrik Lundh.# Case 1# Case 2# Case 3# Work hard to stuff the correct filename in the exception# Not the format we expect; leave it alone# Stuff in the right filename# If someone has set sys.excepthook, we let that take precedence# over self.writeb'Utilities needed to emulate Python's interactive interpreter.

'u'Utilities needed to emulate Python's interactive interpreter.

'b'InteractiveInterpreter'u'InteractiveInterpreter'b'InteractiveConsole'u'InteractiveConsole'b'interact'u'interact'b'compile_command'u'compile_command'b'Base class for InteractiveConsole.

    This class deals with parsing and interpreter state (the user's
    namespace); it doesn't deal with input buffering or prompting or
    input file naming (the filename is always passed in explicitly).

    'u'Base class for InteractiveConsole.

    This class deals with parsing and interpreter state (the user's
    namespace); it doesn't deal with input buffering or prompting or
    input file naming (the filename is always passed in explicitly).

    'b'Constructor.

        The optional 'locals' argument specifies the dictionary in
        which code will be executed; it defaults to a newly created
        dictionary with key "__name__" set to "__console__" and key
        "__doc__" set to None.

        'u'Constructor.

        The optional 'locals' argument specifies the dictionary in
        which code will be executed; it defaults to a newly created
        dictionary with key "__name__" set to "__console__" and key
        "__doc__" set to None.

        'b'__console__'u'__console__'b'<input>'u'<input>'b'Compile and run some source in the interpreter.

        Arguments are as for compile_command().

        One of several things can happen:

        1) The input is incorrect; compile_command() raised an
        exception (SyntaxError or OverflowError).  A syntax traceback
        will be printed by calling the showsyntaxerror() method.

        2) The input is incomplete, and more input is required;
        compile_command() returned None.  Nothing happens.

        3) The input is complete; compile_command() returned a code
        object.  The code is executed by calling self.runcode() (which
        also handles run-time exceptions, except for SystemExit).

        The return value is True in case 2, False in the other cases (unless
        an exception is raised).  The return value can be used to
        decide whether to use sys.ps1 or sys.ps2 to prompt the next
        line.

        'u'Compile and run some source in the interpreter.

        Arguments are as for compile_command().

        One of several things can happen:

        1) The input is incorrect; compile_command() raised an
        exception (SyntaxError or OverflowError).  A syntax traceback
        will be printed by calling the showsyntaxerror() method.

        2) The input is incomplete, and more input is required;
        compile_command() returned None.  Nothing happens.

        3) The input is complete; compile_command() returned a code
        object.  The code is executed by calling self.runcode() (which
        also handles run-time exceptions, except for SystemExit).

        The return value is True in case 2, False in the other cases (unless
        an exception is raised).  The return value can be used to
        decide whether to use sys.ps1 or sys.ps2 to prompt the next
        line.

        'b'Execute a code object.

        When an exception occurs, self.showtraceback() is called to
        display a traceback.  All exceptions are caught except
        SystemExit, which is reraised.

        A note about KeyboardInterrupt: this exception may occur
        elsewhere in this code, and may not always be caught.  The
        caller should be prepared to deal with it.

        'u'Execute a code object.

        When an exception occurs, self.showtraceback() is called to
        display a traceback.  All exceptions are caught except
        SystemExit, which is reraised.

        A note about KeyboardInterrupt: this exception may occur
        elsewhere in this code, and may not always be caught.  The
        caller should be prepared to deal with it.

        'b'Display the syntax error that just occurred.

        This doesn't display a stack trace because there isn't one.

        If a filename is given, it is stuffed in the exception instead
        of what was there before (because Python's parser always uses
        "<string>" when reading from a string).

        The output is written by self.write(), below.

        'u'Display the syntax error that just occurred.

        This doesn't display a stack trace because there isn't one.

        If a filename is given, it is stuffed in the exception instead
        of what was there before (because Python's parser always uses
        "<string>" when reading from a string).

        The output is written by self.write(), below.

        'b'Display the exception that just occurred.

        We remove the first stack item because it is our own code.

        The output is written by self.write(), below.

        'u'Display the exception that just occurred.

        We remove the first stack item because it is our own code.

        The output is written by self.write(), below.

        'b'Write a string.

        The base implementation writes to sys.stderr; a subclass may
        replace this with a different implementation.

        'u'Write a string.

        The base implementation writes to sys.stderr; a subclass may
        replace this with a different implementation.

        'b'Closely emulate the behavior of the interactive Python interpreter.

    This class builds on InteractiveInterpreter and adds prompting
    using the familiar sys.ps1 and sys.ps2, and input buffering.

    'u'Closely emulate the behavior of the interactive Python interpreter.

    This class builds on InteractiveInterpreter and adds prompting
    using the familiar sys.ps1 and sys.ps2, and input buffering.

    'b'<console>'u'<console>'b'Constructor.

        The optional locals argument will be passed to the
        InteractiveInterpreter base class.

        The optional filename argument should specify the (file)name
        of the input stream; it will show up in tracebacks.

        'u'Constructor.

        The optional locals argument will be passed to the
        InteractiveInterpreter base class.

        The optional filename argument should specify the (file)name
        of the input stream; it will show up in tracebacks.

        'b'Reset the input buffer.'u'Reset the input buffer.'b'Closely emulate the interactive Python console.

        The optional banner argument specifies the banner to print
        before the first interaction; by default it prints a banner
        similar to the one printed by the real Python interpreter,
        followed by the current class name in parentheses (so as not
        to confuse this with the real interpreter -- since it's so
        close!).

        The optional exitmsg argument specifies the exit message
        printed when exiting. Pass the empty string to suppress
        printing an exit message. If exitmsg is not given or None,
        a default message is printed.

        'u'Closely emulate the interactive Python console.

        The optional banner argument specifies the banner to print
        before the first interaction; by default it prints a banner
        similar to the one printed by the real Python interpreter,
        followed by the current class name in parentheses (so as not
        to confuse this with the real interpreter -- since it's so
        close!).

        The optional exitmsg argument specifies the exit message
        printed when exiting. Pass the empty string to suppress
        printing an exit message. If exitmsg is not given or None,
        a default message is printed.

        'b'>>> 'u'>>> 'b'... 'u'... 'b'Type "help", "copyright", "credits" or "license" for more information.'u'Type "help", "copyright", "credits" or "license" for more information.'b'Python %s on %s
%s
(%s)
'u'Python %s on %s
%s
(%s)
'b'
KeyboardInterrupt
'u'
KeyboardInterrupt
'b'now exiting %s...
'u'now exiting %s...
'b'Push a line to the interpreter.

        The line should not have a trailing newline; it may have
        internal newlines.  The line is appended to a buffer and the
        interpreter's runsource() method is called with the
        concatenated contents of the buffer as source.  If this
        indicates that the command was executed or invalid, the buffer
        is reset; otherwise, the command is incomplete, and the buffer
        is left as it was after the line was appended.  The return
        value is 1 if more input is required, 0 if the line was dealt
        with in some way (this is the same as runsource()).

        'u'Push a line to the interpreter.

        The line should not have a trailing newline; it may have
        internal newlines.  The line is appended to a buffer and the
        interpreter's runsource() method is called with the
        concatenated contents of the buffer as source.  If this
        indicates that the command was executed or invalid, the buffer
        is reset; otherwise, the command is incomplete, and the buffer
        is left as it was after the line was appended.  The return
        value is 1 if more input is required, 0 if the line was dealt
        with in some way (this is the same as runsource()).

        'b'Write a prompt and read a line.

        The returned line does not include the trailing newline.
        When the user enters the EOF key sequence, EOFError is raised.

        The base implementation uses the built-in function
        input(); a subclass may replace this with a different
        implementation.

        'u'Write a prompt and read a line.

        The returned line does not include the trailing newline.
        When the user enters the EOF key sequence, EOFError is raised.

        The base implementation uses the built-in function
        input(); a subclass may replace this with a different
        implementation.

        'b'Closely emulate the interactive Python interpreter.

    This is a backwards compatible interface to the InteractiveConsole
    class.  When readfunc is not specified, it attempts to import the
    readline module to enable GNU readline if it is available.

    Arguments (all optional, all default to None):

    banner -- passed to InteractiveConsole.interact()
    readfunc -- if not None, replaces InteractiveConsole.raw_input()
    local -- passed to InteractiveInterpreter.__init__()
    exitmsg -- passed to InteractiveConsole.interact()

    'u'Closely emulate the interactive Python interpreter.

    This is a backwards compatible interface to the InteractiveConsole
    class.  When readfunc is not specified, it attempts to import the
    readline module to enable GNU readline if it is available.

    Arguments (all optional, all default to None):

    banner -- passed to InteractiveConsole.interact()
    readfunc -- if not None, replaces InteractiveConsole.raw_input()
    local -- passed to InteractiveInterpreter.__init__()
    exitmsg -- passed to InteractiveConsole.interact()

    'b'-q'u'-q'b'don't print version and copyright messages'u'don't print version and copyright messages'u'Python.Python39.lib.code'u'Python39.lib.code'u'lib.code'u'code' codecs -- Python Codec Registry, API and helpers.


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

whyFailed to load the builtin codecs: %sEncodedFileBOMBOM_BEBOM_LEBOM32_BEBOM32_LEBOM64_BEBOM64_LEBOM_UTF16BOM_UTF32CodecIncrementalEncoderIncrementalDecoderStreamReaderStreamWriterStreamReaderWriterStreamRecodergetencodergetdecodergetincrementalencodergetincrementaldecodergetreadergetwriteriterdecodestrict_errorsignore_errorsreplace_errorsxmlcharrefreplace_errorsbackslashreplace_errorsnamereplace_errors√ø√æ√æ√ø√ø√æ    √æ√øCodec details when looking up the codec registry_is_text_encodingstreamreaderstreamwriterincrementalencoderincrementaldecoder<%s.%s object for encoding %s at %#x> Defines the interface for stateless encoders/decoders.

        The .encode()/.decode() methods may use different error
        handling schemes by providing the errors argument. These
        string values are predefined:

         'strict' - raise a ValueError error (or a subclass)
         'ignore' - ignore the character and continue with the next
         'replace' - replace with a suitable replacement character;
                    Python will use the official U+FFFD REPLACEMENT
                    CHARACTER for the builtin Unicode codecs on
                    decoding and '?' on encoding.
         'surrogateescape' - replace with private code points U+DCnn.
         'xmlcharrefreplace' - Replace with the appropriate XML
                               character reference (only for encoding).
         'backslashreplace'  - Replace with backslashed escape sequences.
         'namereplace'       - Replace with \N{...} escape sequences
                               (only for encoding).

        The set of allowed values can be extended via register_error.

     Encodes the object input and returns a tuple (output
            object, length consumed).

            errors defines the error handling to apply. It defaults to
            'strict' handling.

            The method may not store state in the Codec instance. Use
            StreamWriter for codecs which have to keep state in order to
            make encoding efficient.

            The encoder must be able to handle zero length input and
            return an empty object of the output object type in this
            situation.

         Decodes the object input and returns a tuple (output
            object, length consumed).

            input must be an object which provides the bf_getreadbuf
            buffer slot. Python strings, buffer objects and memory
            mapped files are examples of objects providing this slot.

            errors defines the error handling to apply. It defaults to
            'strict' handling.

            The method may not store state in the Codec instance. Use
            StreamReader for codecs which have to keep state in order to
            make decoding efficient.

            The decoder must be able to handle zero length input and
            return an empty object of the output object type in this
            situation.

        
    An IncrementalEncoder encodes an input in multiple steps. The input can
    be passed piece by piece to the encode() method. The IncrementalEncoder
    remembers the state of the encoding process between calls to encode().
    
        Creates an IncrementalEncoder instance.

        The IncrementalEncoder may use different error handling schemes by
        providing the errors keyword argument. See the module docstring
        for a list of possible values.
        
        Encodes input and returns the resulting object.
        
        Resets the encoder to the initial state.
        
        Return the current state of the encoder.
        
        Set the current state of the encoder. state must have been
        returned by getstate().
        BufferedIncrementalEncoder
    This subclass of IncrementalEncoder can be used as the baseclass for an
    incremental encoder if the encoder must keep some of the output in a
    buffer between calls to encode().
    _buffer_encodeconsumed
    An IncrementalDecoder decodes an input in multiple steps. The input can
    be passed piece by piece to the decode() method. The IncrementalDecoder
    remembers the state of the decoding process between calls to decode().
    
        Create an IncrementalDecoder instance.

        The IncrementalDecoder may use different error handling schemes by
        providing the errors keyword argument. See the module docstring
        for a list of possible values.
        
        Decode input and returns the resulting object.
        
        Reset the decoder to the initial state.
        
        Return the current state of the decoder.

        This must be a (buffered_input, additional_state_info) tuple.
        buffered_input must be a bytes object containing bytes that
        were passed to decode() that have not yet been converted.
        additional_state_info must be a non-negative integer
        representing the state of the decoder WITHOUT yet having
        processed the contents of buffered_input.  In the initial state
        and after reset(), getstate() must return (b"", 0).
        
        Set the current state of the decoder.

        state must have been returned by getstate().  The effect of
        setstate((b"", 0)) must be equivalent to reset().
        BufferedIncrementalDecoder
    This subclass of IncrementalDecoder can be used as the baseclass for an
    incremental decoder if the decoder must be able to handle incomplete
    byte sequences.
    _buffer_decode Creates a StreamWriter instance.

            stream must be a file-like object open for writing.

            The StreamWriter may use different error handling
            schemes by providing the errors keyword argument. These
            parameters are predefined:

             'strict' - raise a ValueError (or a subclass)
             'ignore' - ignore the character and continue with the next
             'replace'- replace with a suitable replacement character
             'xmlcharrefreplace' - Replace with the appropriate XML
                                   character reference.
             'backslashreplace'  - Replace with backslashed escape
                                   sequences.
             'namereplace'       - Replace with \N{...} escape sequences.

            The set of allowed parameter values can be extended via
            register_error.
         Writes the object's contents encoded to self.stream.
         Writes the concatenated list of strings to the stream
            using .write().
         Resets the codec buffers used for keeping internal state.

            Calling this method should ensure that the data on the
            output is put into a clean state, that allows appending
            of new fresh data without having to rescan the whole
            stream to recover state.

         Inherit all other methods from the underlying stream.
        charbuffertype Creates a StreamReader instance.

            stream must be a file-like object open for reading.

            The StreamReader may use different error handling
            schemes by providing the errors keyword argument. These
            parameters are predefined:

             'strict' - raise a ValueError (or a subclass)
             'ignore' - ignore the character and continue with the next
             'replace'- replace with a suitable replacement character
             'backslashreplace' - Replace with backslashed escape sequences;

            The set of allowed parameter values can be extended via
            register_error.
        bytebuffer_empty_charbuffercharbufferlinebufferfirstline Decodes data from the stream self.stream and returns the
            resulting object.

            chars indicates the number of decoded code points or bytes to
            return. read() will never return more data than requested,
            but it might return less, if there is not enough available.

            size indicates the approximate maximum number of decoded
            bytes or code points to read for decoding. The decoder
            can modify this setting as appropriate. The default value
            -1 indicates to read and decode as much as possible.  size
            is intended to prevent having to decode huge files in one
            step.

            If firstline is true, and a UnicodeDecodeError happens
            after the first line terminator in the input only the first line
            will be returned, the rest of the input will be kept until the
            next call to read().

            The method should use a greedy read strategy, meaning that
            it should read as much data as is allowed within the
            definition of the encoding and the given size, e.g.  if
            optional encoding endings or state markers are available
            on the stream, these should be read too.
        newdatanewcharsdecodedbytes Read one line from the input stream and return the
            decoded data.

            size, if given, is passed as size argument to the
            read() method.

        72readsizeline0withendline0withoutend8000sizehint Read all lines available on the input stream
            and return them as a list.

            Line breaks are implemented using the codec's decoder
            method and are included in the list entries.

            sizehint, if given, is ignored since there is no efficient
            way to finding the true end-of-line.

         Resets the codec buffers used for keeping internal state.

            Note that no stream repositioning should take place.
            This method is primarily intended to be able to recover
            from decoding errors.

         Set the input stream's current position.

            Resets the codec buffers used for keeping state.
         Return the next decoded line from the input stream. StreamReaderWriter instances allow wrapping streams which
        work in both read and write modes.

        The design is such that one can use the factory functions
        returned by the codec.lookup() function to construct the
        instance.

    unknownReaderWriter Creates a StreamReaderWriter instance.

            stream must be a Stream-like object.

            Reader, Writer must be factory functions or classes
            providing the StreamReader, StreamWriter interface resp.

            Error handling is done in the same way as defined for the
            StreamWriter/Readers.

         StreamRecoder instances translate data from one encoding to another.

        They use the complete set of APIs returned by the
        codecs.lookup() function to implement their task.

        Data written to the StreamRecoder is first decoded into an
        intermediate format (depending on the "decode" codec) and then
        written to the underlying stream using an instance of the provided
        Writer class.

        In the other direction, data is read from the underlying stream using
        a Reader instance and then encoded and returned to the caller.

    data_encodingfile_encoding Creates a StreamRecoder instance which implements a two-way
            conversion: encode and decode work on the frontend (the
            data visible to .read() and .write()) while Reader and Writer
            work on the backend (the data in stream).

            You can use these objects to do transparent
            transcodings from e.g. latin-1 to utf-8 and back.

            stream must be a file-like object.

            encode and decode must adhere to the Codec interface; Reader and
            Writer must be factory functions or classes providing the
            StreamReader and StreamWriter interfaces resp.

            Error handling is done in the same way as defined for the
            StreamWriter/Readers.

        bytesencodedbytesdecodedbuffering Open an encoded file using the given mode and return
        a wrapped version providing transparent encoding/decoding.

        Note: The wrapped version will only accept the object format
        defined by the codecs, i.e. Unicode objects for most builtin
        codecs. Output is also codec dependent and will usually be
        Unicode as well.

        Underlying encoded files are always opened in binary mode.
        The default file mode is 'r', meaning to open the file in read mode.

        encoding specifies the encoding which is to be used for the
        file.

        errors may be given to define the error handling. It defaults
        to 'strict' which causes ValueErrors to be raised in case an
        encoding error occurs.

        buffering has the same meaning as for the builtin open() API.
        It defaults to -1 which means that the default buffer size will
        be used.

        The returned wrapped file object provides an extra attribute
        .encoding which allows querying the used encoding. This
        attribute is only available if an encoding was specified as
        parameter.

    srw Return a wrapped version of file which provides transparent
        encoding translation.

        Data written to the wrapped file is decoded according
        to the given data_encoding and then encoded to the underlying
        file using file_encoding. The intermediate data type
        will usually be Unicode but depends on the specified codecs.

        Bytes read from the file are decoded using file_encoding and then
        passed back to the caller encoded using data_encoding.

        If file_encoding is not given, it defaults to data_encoding.

        errors may be given to define the error handling. It defaults
        to 'strict' which causes ValueErrors to be raised in case an
        encoding error occurs.

        The returned wrapped file object provides two extra attributes
        .data_encoding and .file_encoding which reflect the given
        parameters of the same name. The attributes can be used for
        introspection by Python programs.

    data_infofile_infosr Lookup up the codec for the given encoding and return
        its encoder function.

        Raises a LookupError in case the encoding cannot be found.

     Lookup up the codec for the given encoding and return
        its decoder function.

        Raises a LookupError in case the encoding cannot be found.

     Lookup up the codec for the given encoding and return
        its IncrementalEncoder class or factory function.

        Raises a LookupError in case the encoding cannot be found
        or the codecs doesn't provide an incremental encoder.

     Lookup up the codec for the given encoding and return
        its IncrementalDecoder class or factory function.

        Raises a LookupError in case the encoding cannot be found
        or the codecs doesn't provide an incremental decoder.

     Lookup up the codec for the given encoding and return
        its StreamReader class or factory function.

        Raises a LookupError in case the encoding cannot be found.

     Lookup up the codec for the given encoding and return
        its StreamWriter class or factory function.

        Raises a LookupError in case the encoding cannot be found.

    
    Encoding iterator.

    Encodes the input strings from the iterator using an IncrementalEncoder.

    errors and kwargs are passed through to the IncrementalEncoder
    constructor.
    
    Decoding iterator.

    Decodes the input strings from the iterator using an IncrementalDecoder.

    errors and kwargs are passed through to the IncrementalDecoder
    constructor.
    make_identity_dictrng make_identity_dict(rng) -> dict

        Return a dictionary where elements of the rng sequence are
        mapped to themselves.

    make_encoding_mapdecoding_map Creates an encoding map from a decoding map.

        If a target mapping in the decoding map occurs multiple
        times, then that target is mapped to None (undefined mapping),
        causing an exception when encountered by the charmap codec
        during translation.

        One example where this happens is cp875.py which decodes
        multiple character to \u001a.

    namereplace_false### Registry and builtin stateless codec functions### Constants# Byte Order Mark (BOM = ZERO WIDTH NO-BREAK SPACE = U+FEFF)# and its possible byte string values# for UTF8/UTF16/UTF32 output and little/big endian machines# UTF-8# UTF-16, little endian# UTF-16, big endian# UTF-32, little endian# UTF-32, big endian# UTF-16, native endianness# UTF-32, native endianness# Old broken names (don't use in new code)### Codec base classes (defining the API)# Private API to allow Python 3.4 to blacklist the known non-Unicode# codecs in the standard library. A more general mechanism to# reliably distinguish test encodings from other codecs will hopefully# be defined for Python 3.5# See http://bugs.python.org/issue19619# Assume codecs are text encodings by default# unencoded input that is kept between calls to encode()# Overwrite this method in subclasses: It must encode input# and return an (output, length consumed) tuple# encode input (taking the buffer into account)# keep unencoded input until the next call# undecoded input that is kept between calls to decode()# Overwrite this method in subclasses: It must decode input# decode input (taking the buffer into account)# keep undecoded input until the next call# additional state info is always 0# ignore additional state info# The StreamWriter and StreamReader class provide generic working# interfaces which can be used to implement new encoding submodules# very easily. See encodings/utf_8.py for an example on how this is# done.#### If we have lines cached, first merge them back into characters# For compatibility with other read() methods that take a# single argument# read until we get the required number of characters (if available)# can the request be satisfied from the character buffer?# we need more data# decode bytes (those remaining from the last call included)# keep undecoded bytes until the next call# put new characters in the character buffer# there was no data available# Return everything we've got# Return the first chars characters# If we have lines cached from an earlier read, return# them unconditionally# revert to charbuffer mode; we might need more data# next time# If size is given, we call read() only once# If we're at a "\r" read one extra character (which might# be a "\n") to get a proper line ending. If the stream is# temporarily exhausted we return the wrong line ending.# More than one line result; the first line is a full line# to return# cache the remaining lines# only one remaining line, put it back into charbuffer# We really have a line end# Put the rest back together and keep it until the next call# we didn't get anything or this was our only try# Optional attributes set by the file wrappers below# these are needed to make "with StreamReaderWriter(...)" work properly# Seeks must be propagated to both the readers and writers# as they might need to reset their internal buffers.### Shortcuts# Force opening of the file in binary mode# Add attributes to simplify introspection### Helpers for codec lookup### Helpers for charmap-based codecs### error handlers# In --disable-unicode builds, these error handler are missing# Tell modulefinder that using codecs probably needs the encodings# package### Tests# Make stdout translate Latin-1 output into UTF-8 output# Have stdin translate Latin-1 input into UTF-8 inputb' codecs -- Python Codec Registry, API and helpers.


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

'u' codecs -- Python Codec Registry, API and helpers.


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

'b'Failed to load the builtin codecs: %s'u'Failed to load the builtin codecs: %s'b'register'u'register'b'lookup'u'lookup'b'EncodedFile'u'EncodedFile'b'BOM'u'BOM'b'BOM_BE'u'BOM_BE'b'BOM_LE'u'BOM_LE'b'BOM32_BE'u'BOM32_BE'b'BOM32_LE'u'BOM32_LE'b'BOM64_BE'u'BOM64_BE'b'BOM64_LE'u'BOM64_LE'b'BOM_UTF8'u'BOM_UTF8'b'BOM_UTF16'u'BOM_UTF16'b'BOM_UTF16_LE'u'BOM_UTF16_LE'b'BOM_UTF16_BE'u'BOM_UTF16_BE'b'BOM_UTF32'u'BOM_UTF32'b'BOM_UTF32_LE'u'BOM_UTF32_LE'b'BOM_UTF32_BE'u'BOM_UTF32_BE'b'CodecInfo'u'CodecInfo'b'Codec'u'Codec'b'IncrementalEncoder'u'IncrementalEncoder'b'IncrementalDecoder'u'IncrementalDecoder'b'StreamReader'u'StreamReader'b'StreamWriter'u'StreamWriter'b'StreamReaderWriter'u'StreamReaderWriter'b'StreamRecoder'u'StreamRecoder'b'getencoder'u'getencoder'b'getdecoder'u'getdecoder'b'getincrementalencoder'u'getincrementalencoder'b'getincrementaldecoder'u'getincrementaldecoder'b'getreader'u'getreader'b'getwriter'u'getwriter'b'iterencode'u'iterencode'b'iterdecode'u'iterdecode'b'strict_errors'u'strict_errors'b'ignore_errors'u'ignore_errors'b'replace_errors'u'replace_errors'b'xmlcharrefreplace_errors'u'xmlcharrefreplace_errors'b'backslashreplace_errors'u'backslashreplace_errors'b'namereplace_errors'u'namereplace_errors'b'register_error'u'register_error'b'lookup_error'u'lookup_error'b'√ø√æ'b'√æ√ø'b'√ø√æ  'b'  √æ√ø'b'Codec details when looking up the codec registry'u'Codec details when looking up the codec registry'b'<%s.%s object for encoding %s at %#x>'u'<%s.%s object for encoding %s at %#x>'b' Defines the interface for stateless encoders/decoders.

        The .encode()/.decode() methods may use different error
        handling schemes by providing the errors argument. These
        string values are predefined:

         'strict' - raise a ValueError error (or a subclass)
         'ignore' - ignore the character and continue with the next
         'replace' - replace with a suitable replacement character;
                    Python will use the official U+FFFD REPLACEMENT
                    CHARACTER for the builtin Unicode codecs on
                    decoding and '?' on encoding.
         'surrogateescape' - replace with private code points U+DCnn.
         'xmlcharrefreplace' - Replace with the appropriate XML
                               character reference (only for encoding).
         'backslashreplace'  - Replace with backslashed escape sequences.
         'namereplace'       - Replace with \N{...} escape sequences
                               (only for encoding).

        The set of allowed values can be extended via register_error.

    'u' Defines the interface for stateless encoders/decoders.

        The .encode()/.decode() methods may use different error
        handling schemes by providing the errors argument. These
        string values are predefined:

         'strict' - raise a ValueError error (or a subclass)
         'ignore' - ignore the character and continue with the next
         'replace' - replace with a suitable replacement character;
                    Python will use the official U+FFFD REPLACEMENT
                    CHARACTER for the builtin Unicode codecs on
                    decoding and '?' on encoding.
         'surrogateescape' - replace with private code points U+DCnn.
         'xmlcharrefreplace' - Replace with the appropriate XML
                               character reference (only for encoding).
         'backslashreplace'  - Replace with backslashed escape sequences.
         'namereplace'       - Replace with \N{...} escape sequences
                               (only for encoding).

        The set of allowed values can be extended via register_error.

    'b' Encodes the object input and returns a tuple (output
            object, length consumed).

            errors defines the error handling to apply. It defaults to
            'strict' handling.

            The method may not store state in the Codec instance. Use
            StreamWriter for codecs which have to keep state in order to
            make encoding efficient.

            The encoder must be able to handle zero length input and
            return an empty object of the output object type in this
            situation.

        'u' Encodes the object input and returns a tuple (output
            object, length consumed).

            errors defines the error handling to apply. It defaults to
            'strict' handling.

            The method may not store state in the Codec instance. Use
            StreamWriter for codecs which have to keep state in order to
            make encoding efficient.

            The encoder must be able to handle zero length input and
            return an empty object of the output object type in this
            situation.

        'b' Decodes the object input and returns a tuple (output
            object, length consumed).

            input must be an object which provides the bf_getreadbuf
            buffer slot. Python strings, buffer objects and memory
            mapped files are examples of objects providing this slot.

            errors defines the error handling to apply. It defaults to
            'strict' handling.

            The method may not store state in the Codec instance. Use
            StreamReader for codecs which have to keep state in order to
            make decoding efficient.

            The decoder must be able to handle zero length input and
            return an empty object of the output object type in this
            situation.

        'u' Decodes the object input and returns a tuple (output
            object, length consumed).

            input must be an object which provides the bf_getreadbuf
            buffer slot. Python strings, buffer objects and memory
            mapped files are examples of objects providing this slot.

            errors defines the error handling to apply. It defaults to
            'strict' handling.

            The method may not store state in the Codec instance. Use
            StreamReader for codecs which have to keep state in order to
            make decoding efficient.

            The decoder must be able to handle zero length input and
            return an empty object of the output object type in this
            situation.

        'b'
    An IncrementalEncoder encodes an input in multiple steps. The input can
    be passed piece by piece to the encode() method. The IncrementalEncoder
    remembers the state of the encoding process between calls to encode().
    'u'
    An IncrementalEncoder encodes an input in multiple steps. The input can
    be passed piece by piece to the encode() method. The IncrementalEncoder
    remembers the state of the encoding process between calls to encode().
    'b'
        Creates an IncrementalEncoder instance.

        The IncrementalEncoder may use different error handling schemes by
        providing the errors keyword argument. See the module docstring
        for a list of possible values.
        'u'
        Creates an IncrementalEncoder instance.

        The IncrementalEncoder may use different error handling schemes by
        providing the errors keyword argument. See the module docstring
        for a list of possible values.
        'b'
        Encodes input and returns the resulting object.
        'u'
        Encodes input and returns the resulting object.
        'b'
        Resets the encoder to the initial state.
        'u'
        Resets the encoder to the initial state.
        'b'
        Return the current state of the encoder.
        'u'
        Return the current state of the encoder.
        'b'
        Set the current state of the encoder. state must have been
        returned by getstate().
        'u'
        Set the current state of the encoder. state must have been
        returned by getstate().
        'b'
    This subclass of IncrementalEncoder can be used as the baseclass for an
    incremental encoder if the encoder must keep some of the output in a
    buffer between calls to encode().
    'u'
    This subclass of IncrementalEncoder can be used as the baseclass for an
    incremental encoder if the encoder must keep some of the output in a
    buffer between calls to encode().
    'b'
    An IncrementalDecoder decodes an input in multiple steps. The input can
    be passed piece by piece to the decode() method. The IncrementalDecoder
    remembers the state of the decoding process between calls to decode().
    'u'
    An IncrementalDecoder decodes an input in multiple steps. The input can
    be passed piece by piece to the decode() method. The IncrementalDecoder
    remembers the state of the decoding process between calls to decode().
    'b'
        Create an IncrementalDecoder instance.

        The IncrementalDecoder may use different error handling schemes by
        providing the errors keyword argument. See the module docstring
        for a list of possible values.
        'u'
        Create an IncrementalDecoder instance.

        The IncrementalDecoder may use different error handling schemes by
        providing the errors keyword argument. See the module docstring
        for a list of possible values.
        'b'
        Decode input and returns the resulting object.
        'u'
        Decode input and returns the resulting object.
        'b'
        Reset the decoder to the initial state.
        'u'
        Reset the decoder to the initial state.
        'b'
        Return the current state of the decoder.

        This must be a (buffered_input, additional_state_info) tuple.
        buffered_input must be a bytes object containing bytes that
        were passed to decode() that have not yet been converted.
        additional_state_info must be a non-negative integer
        representing the state of the decoder WITHOUT yet having
        processed the contents of buffered_input.  In the initial state
        and after reset(), getstate() must return (b"", 0).
        'u'
        Return the current state of the decoder.

        This must be a (buffered_input, additional_state_info) tuple.
        buffered_input must be a bytes object containing bytes that
        were passed to decode() that have not yet been converted.
        additional_state_info must be a non-negative integer
        representing the state of the decoder WITHOUT yet having
        processed the contents of buffered_input.  In the initial state
        and after reset(), getstate() must return (b"", 0).
        'b'
        Set the current state of the decoder.

        state must have been returned by getstate().  The effect of
        setstate((b"", 0)) must be equivalent to reset().
        'u'
        Set the current state of the decoder.

        state must have been returned by getstate().  The effect of
        setstate((b"", 0)) must be equivalent to reset().
        'b'
    This subclass of IncrementalDecoder can be used as the baseclass for an
    incremental decoder if the decoder must be able to handle incomplete
    byte sequences.
    'u'
    This subclass of IncrementalDecoder can be used as the baseclass for an
    incremental decoder if the decoder must be able to handle incomplete
    byte sequences.
    'b' Creates a StreamWriter instance.

            stream must be a file-like object open for writing.

            The StreamWriter may use different error handling
            schemes by providing the errors keyword argument. These
            parameters are predefined:

             'strict' - raise a ValueError (or a subclass)
             'ignore' - ignore the character and continue with the next
             'replace'- replace with a suitable replacement character
             'xmlcharrefreplace' - Replace with the appropriate XML
                                   character reference.
             'backslashreplace'  - Replace with backslashed escape
                                   sequences.
             'namereplace'       - Replace with \N{...} escape sequences.

            The set of allowed parameter values can be extended via
            register_error.
        'u' Creates a StreamWriter instance.

            stream must be a file-like object open for writing.

            The StreamWriter may use different error handling
            schemes by providing the errors keyword argument. These
            parameters are predefined:

             'strict' - raise a ValueError (or a subclass)
             'ignore' - ignore the character and continue with the next
             'replace'- replace with a suitable replacement character
             'xmlcharrefreplace' - Replace with the appropriate XML
                                   character reference.
             'backslashreplace'  - Replace with backslashed escape
                                   sequences.
             'namereplace'       - Replace with \N{...} escape sequences.

            The set of allowed parameter values can be extended via
            register_error.
        'b' Writes the object's contents encoded to self.stream.
        'u' Writes the object's contents encoded to self.stream.
        'b' Writes the concatenated list of strings to the stream
            using .write().
        'u' Writes the concatenated list of strings to the stream
            using .write().
        'b' Resets the codec buffers used for keeping internal state.

            Calling this method should ensure that the data on the
            output is put into a clean state, that allows appending
            of new fresh data without having to rescan the whole
            stream to recover state.

        'u' Resets the codec buffers used for keeping internal state.

            Calling this method should ensure that the data on the
            output is put into a clean state, that allows appending
            of new fresh data without having to rescan the whole
            stream to recover state.

        'b' Inherit all other methods from the underlying stream.
        'u' Inherit all other methods from the underlying stream.
        'b' Creates a StreamReader instance.

            stream must be a file-like object open for reading.

            The StreamReader may use different error handling
            schemes by providing the errors keyword argument. These
            parameters are predefined:

             'strict' - raise a ValueError (or a subclass)
             'ignore' - ignore the character and continue with the next
             'replace'- replace with a suitable replacement character
             'backslashreplace' - Replace with backslashed escape sequences;

            The set of allowed parameter values can be extended via
            register_error.
        'u' Creates a StreamReader instance.

            stream must be a file-like object open for reading.

            The StreamReader may use different error handling
            schemes by providing the errors keyword argument. These
            parameters are predefined:

             'strict' - raise a ValueError (or a subclass)
             'ignore' - ignore the character and continue with the next
             'replace'- replace with a suitable replacement character
             'backslashreplace' - Replace with backslashed escape sequences;

            The set of allowed parameter values can be extended via
            register_error.
        'b' Decodes data from the stream self.stream and returns the
            resulting object.

            chars indicates the number of decoded code points or bytes to
            return. read() will never return more data than requested,
            but it might return less, if there is not enough available.

            size indicates the approximate maximum number of decoded
            bytes or code points to read for decoding. The decoder
            can modify this setting as appropriate. The default value
            -1 indicates to read and decode as much as possible.  size
            is intended to prevent having to decode huge files in one
            step.

            If firstline is true, and a UnicodeDecodeError happens
            after the first line terminator in the input only the first line
            will be returned, the rest of the input will be kept until the
            next call to read().

            The method should use a greedy read strategy, meaning that
            it should read as much data as is allowed within the
            definition of the encoding and the given size, e.g.  if
            optional encoding endings or state markers are available
            on the stream, these should be read too.
        'u' Decodes data from the stream self.stream and returns the
            resulting object.

            chars indicates the number of decoded code points or bytes to
            return. read() will never return more data than requested,
            but it might return less, if there is not enough available.

            size indicates the approximate maximum number of decoded
            bytes or code points to read for decoding. The decoder
            can modify this setting as appropriate. The default value
            -1 indicates to read and decode as much as possible.  size
            is intended to prevent having to decode huge files in one
            step.

            If firstline is true, and a UnicodeDecodeError happens
            after the first line terminator in the input only the first line
            will be returned, the rest of the input will be kept until the
            next call to read().

            The method should use a greedy read strategy, meaning that
            it should read as much data as is allowed within the
            definition of the encoding and the given size, e.g.  if
            optional encoding endings or state markers are available
            on the stream, these should be read too.
        'b' Read one line from the input stream and return the
            decoded data.

            size, if given, is passed as size argument to the
            read() method.

        'u' Read one line from the input stream and return the
            decoded data.

            size, if given, is passed as size argument to the
            read() method.

        'b' Read all lines available on the input stream
            and return them as a list.

            Line breaks are implemented using the codec's decoder
            method and are included in the list entries.

            sizehint, if given, is ignored since there is no efficient
            way to finding the true end-of-line.

        'u' Read all lines available on the input stream
            and return them as a list.

            Line breaks are implemented using the codec's decoder
            method and are included in the list entries.

            sizehint, if given, is ignored since there is no efficient
            way to finding the true end-of-line.

        'b' Resets the codec buffers used for keeping internal state.

            Note that no stream repositioning should take place.
            This method is primarily intended to be able to recover
            from decoding errors.

        'u' Resets the codec buffers used for keeping internal state.

            Note that no stream repositioning should take place.
            This method is primarily intended to be able to recover
            from decoding errors.

        'b' Set the input stream's current position.

            Resets the codec buffers used for keeping state.
        'u' Set the input stream's current position.

            Resets the codec buffers used for keeping state.
        'b' Return the next decoded line from the input stream.'u' Return the next decoded line from the input stream.'b' StreamReaderWriter instances allow wrapping streams which
        work in both read and write modes.

        The design is such that one can use the factory functions
        returned by the codec.lookup() function to construct the
        instance.

    'u' StreamReaderWriter instances allow wrapping streams which
        work in both read and write modes.

        The design is such that one can use the factory functions
        returned by the codec.lookup() function to construct the
        instance.

    'b'unknown'u'unknown'b' Creates a StreamReaderWriter instance.

            stream must be a Stream-like object.

            Reader, Writer must be factory functions or classes
            providing the StreamReader, StreamWriter interface resp.

            Error handling is done in the same way as defined for the
            StreamWriter/Readers.

        'u' Creates a StreamReaderWriter instance.

            stream must be a Stream-like object.

            Reader, Writer must be factory functions or classes
            providing the StreamReader, StreamWriter interface resp.

            Error handling is done in the same way as defined for the
            StreamWriter/Readers.

        'b' StreamRecoder instances translate data from one encoding to another.

        They use the complete set of APIs returned by the
        codecs.lookup() function to implement their task.

        Data written to the StreamRecoder is first decoded into an
        intermediate format (depending on the "decode" codec) and then
        written to the underlying stream using an instance of the provided
        Writer class.

        In the other direction, data is read from the underlying stream using
        a Reader instance and then encoded and returned to the caller.

    'u' StreamRecoder instances translate data from one encoding to another.

        They use the complete set of APIs returned by the
        codecs.lookup() function to implement their task.

        Data written to the StreamRecoder is first decoded into an
        intermediate format (depending on the "decode" codec) and then
        written to the underlying stream using an instance of the provided
        Writer class.

        In the other direction, data is read from the underlying stream using
        a Reader instance and then encoded and returned to the caller.

    'b' Creates a StreamRecoder instance which implements a two-way
            conversion: encode and decode work on the frontend (the
            data visible to .read() and .write()) while Reader and Writer
            work on the backend (the data in stream).

            You can use these objects to do transparent
            transcodings from e.g. latin-1 to utf-8 and back.

            stream must be a file-like object.

            encode and decode must adhere to the Codec interface; Reader and
            Writer must be factory functions or classes providing the
            StreamReader and StreamWriter interfaces resp.

            Error handling is done in the same way as defined for the
            StreamWriter/Readers.

        'u' Creates a StreamRecoder instance which implements a two-way
            conversion: encode and decode work on the frontend (the
            data visible to .read() and .write()) while Reader and Writer
            work on the backend (the data in stream).

            You can use these objects to do transparent
            transcodings from e.g. latin-1 to utf-8 and back.

            stream must be a file-like object.

            encode and decode must adhere to the Codec interface; Reader and
            Writer must be factory functions or classes providing the
            StreamReader and StreamWriter interfaces resp.

            Error handling is done in the same way as defined for the
            StreamWriter/Readers.

        'b' Open an encoded file using the given mode and return
        a wrapped version providing transparent encoding/decoding.

        Note: The wrapped version will only accept the object format
        defined by the codecs, i.e. Unicode objects for most builtin
        codecs. Output is also codec dependent and will usually be
        Unicode as well.

        Underlying encoded files are always opened in binary mode.
        The default file mode is 'r', meaning to open the file in read mode.

        encoding specifies the encoding which is to be used for the
        file.

        errors may be given to define the error handling. It defaults
        to 'strict' which causes ValueErrors to be raised in case an
        encoding error occurs.

        buffering has the same meaning as for the builtin open() API.
        It defaults to -1 which means that the default buffer size will
        be used.

        The returned wrapped file object provides an extra attribute
        .encoding which allows querying the used encoding. This
        attribute is only available if an encoding was specified as
        parameter.

    'u' Open an encoded file using the given mode and return
        a wrapped version providing transparent encoding/decoding.

        Note: The wrapped version will only accept the object format
        defined by the codecs, i.e. Unicode objects for most builtin
        codecs. Output is also codec dependent and will usually be
        Unicode as well.

        Underlying encoded files are always opened in binary mode.
        The default file mode is 'r', meaning to open the file in read mode.

        encoding specifies the encoding which is to be used for the
        file.

        errors may be given to define the error handling. It defaults
        to 'strict' which causes ValueErrors to be raised in case an
        encoding error occurs.

        buffering has the same meaning as for the builtin open() API.
        It defaults to -1 which means that the default buffer size will
        be used.

        The returned wrapped file object provides an extra attribute
        .encoding which allows querying the used encoding. This
        attribute is only available if an encoding was specified as
        parameter.

    'b' Return a wrapped version of file which provides transparent
        encoding translation.

        Data written to the wrapped file is decoded according
        to the given data_encoding and then encoded to the underlying
        file using file_encoding. The intermediate data type
        will usually be Unicode but depends on the specified codecs.

        Bytes read from the file are decoded using file_encoding and then
        passed back to the caller encoded using data_encoding.

        If file_encoding is not given, it defaults to data_encoding.

        errors may be given to define the error handling. It defaults
        to 'strict' which causes ValueErrors to be raised in case an
        encoding error occurs.

        The returned wrapped file object provides two extra attributes
        .data_encoding and .file_encoding which reflect the given
        parameters of the same name. The attributes can be used for
        introspection by Python programs.

    'u' Return a wrapped version of file which provides transparent
        encoding translation.

        Data written to the wrapped file is decoded according
        to the given data_encoding and then encoded to the underlying
        file using file_encoding. The intermediate data type
        will usually be Unicode but depends on the specified codecs.

        Bytes read from the file are decoded using file_encoding and then
        passed back to the caller encoded using data_encoding.

        If file_encoding is not given, it defaults to data_encoding.

        errors may be given to define the error handling. It defaults
        to 'strict' which causes ValueErrors to be raised in case an
        encoding error occurs.

        The returned wrapped file object provides two extra attributes
        .data_encoding and .file_encoding which reflect the given
        parameters of the same name. The attributes can be used for
        introspection by Python programs.

    'b' Lookup up the codec for the given encoding and return
        its encoder function.

        Raises a LookupError in case the encoding cannot be found.

    'u' Lookup up the codec for the given encoding and return
        its encoder function.

        Raises a LookupError in case the encoding cannot be found.

    'b' Lookup up the codec for the given encoding and return
        its decoder function.

        Raises a LookupError in case the encoding cannot be found.

    'u' Lookup up the codec for the given encoding and return
        its decoder function.

        Raises a LookupError in case the encoding cannot be found.

    'b' Lookup up the codec for the given encoding and return
        its IncrementalEncoder class or factory function.

        Raises a LookupError in case the encoding cannot be found
        or the codecs doesn't provide an incremental encoder.

    'u' Lookup up the codec for the given encoding and return
        its IncrementalEncoder class or factory function.

        Raises a LookupError in case the encoding cannot be found
        or the codecs doesn't provide an incremental encoder.

    'b' Lookup up the codec for the given encoding and return
        its IncrementalDecoder class or factory function.

        Raises a LookupError in case the encoding cannot be found
        or the codecs doesn't provide an incremental decoder.

    'u' Lookup up the codec for the given encoding and return
        its IncrementalDecoder class or factory function.

        Raises a LookupError in case the encoding cannot be found
        or the codecs doesn't provide an incremental decoder.

    'b' Lookup up the codec for the given encoding and return
        its StreamReader class or factory function.

        Raises a LookupError in case the encoding cannot be found.

    'u' Lookup up the codec for the given encoding and return
        its StreamReader class or factory function.

        Raises a LookupError in case the encoding cannot be found.

    'b' Lookup up the codec for the given encoding and return
        its StreamWriter class or factory function.

        Raises a LookupError in case the encoding cannot be found.

    'u' Lookup up the codec for the given encoding and return
        its StreamWriter class or factory function.

        Raises a LookupError in case the encoding cannot be found.

    'b'
    Encoding iterator.

    Encodes the input strings from the iterator using an IncrementalEncoder.

    errors and kwargs are passed through to the IncrementalEncoder
    constructor.
    'u'
    Encoding iterator.

    Encodes the input strings from the iterator using an IncrementalEncoder.

    errors and kwargs are passed through to the IncrementalEncoder
    constructor.
    'b'
    Decoding iterator.

    Decodes the input strings from the iterator using an IncrementalDecoder.

    errors and kwargs are passed through to the IncrementalDecoder
    constructor.
    'u'
    Decoding iterator.

    Decodes the input strings from the iterator using an IncrementalDecoder.

    errors and kwargs are passed through to the IncrementalDecoder
    constructor.
    'b' make_identity_dict(rng) -> dict

        Return a dictionary where elements of the rng sequence are
        mapped to themselves.

    'u' make_identity_dict(rng) -> dict

        Return a dictionary where elements of the rng sequence are
        mapped to themselves.

    'b' Creates an encoding map from a decoding map.

        If a target mapping in the decoding map occurs multiple
        times, then that target is mapped to None (undefined mapping),
        causing an exception when encountered by the charmap codec
        during translation.

        One example where this happens is cp875.py which decodes
        multiple character to \u001a.

    'u' Creates an encoding map from a decoding map.

        If a target mapping in the decoding map occurs multiple
        times, then that target is mapped to None (undefined mapping),
        causing an exception when encountered by the charmap codec
        during translation.

        One example where this happens is cp875.py which decodes
        multiple character to \u001a.

    'b'namereplace'u'namereplace'u'Python.Python39.lib.codecs'u'Python39.lib.codecs'u'lib.codecs'u'codecs'Utilities to compile possibly incomplete Python source code.

This module provides two interfaces, broadly similar to the builtin
function compile(), which take program text, a filename and a 'mode'
and:

- Return code object if the command is complete and valid
- Return None if the command is incomplete
- Raise SyntaxError, ValueError or OverflowError if the command is a
  syntax error (OverflowError and ValueError can be produced by
  malformed literals).

Approach:

First, check if the source consists entirely of blank lines and
comments; if so, replace it with 'pass', because the built-in
parser doesn't always do the right thing for these.

Compile three times: as is, with \n, and with \n\n appended.  If it
compiles as is, it's complete.  If it compiles with one \n appended,
we expect more.  If it doesn't compile either way, we compare the
error we get when compiling with \n or \n\n appended.  If the errors
are the same, the code is broken.  But if the errors are different, we
expect more.  Not intuitive; not even guaranteed to hold in future
releases; but this matches the compiler's behavior from Python 1.4
through 2.2, at least.

Caveat:

It is possible (but not likely) that the parser stops parsing with a
successful outcome before reaching the end of the source; in this
case, trailing symbols may be ignored instead of causing an error.
For example, a backslash followed by two newlines may be followed by
arbitrary garbage.  This will be fixed once the API for the parser is
better.

The two interfaces are:

compile_command(source, filename, symbol):

    Compiles a single command in the manner described above.

CommandCompiler():

    Instances of this class have __call__ methods identical in
    signature to compile_command; the difference is that if the
    instance compiles program text containing a __future__ statement,
    the instance 'remembers' and compiles all subsequent program texts
    with the statement in force.

The module also provides another class:

Compile():

    Instances of this class act like the built-in function compile,
    but with 'memory' in the sense described above.
_featuresCompile0x200PyCF_DONT_IMPLY_DEDENT_maybe_compileerr1err2code1code2Compile a command and determine whether it is incomplete.

    Arguments:

    source -- the source string; may contain \n characters
    filename -- optional filename from which source was read; default
                "<input>"
    symbol -- optional grammar start symbol; "single" (default), "exec"
              or "eval"

    Return value / exceptions raised:

    - Return a code object if the command is complete and valid
    - Return None if the command is incomplete
    - Raise SyntaxError, ValueError or OverflowError if the command is a
      syntax error (OverflowError and ValueError can be produced by
      malformed literals).
    Instances of this class behave much like the built-in compile
    function, but if one is used to compile text containing a future
    statement, it "remembers" and compiles all subsequent program texts
    with the statement in force.codeobfeatureInstances of this class have __call__ methods identical in
    signature to compile_command; the difference is that if the
    instance compiles program text containing a __future__ statement,
    the instance 'remembers' and compiles all subsequent program texts
    with the statement in force.Compile a command and determine whether it is incomplete.

        Arguments:

        source -- the source string; may contain \n characters
        filename -- optional filename from which source was read;
                    default "<input>"
        symbol -- optional grammar start symbol; "single" (default) or
                  "eval"

        Return value / exceptions raised:

        - Return a code object if the command is complete and valid
        - Return None if the command is incomplete
        - Raise SyntaxError, ValueError or OverflowError if the command is a
          syntax error (OverflowError and ValueError can be produced by
          malformed literals).
        # Matches pythonrun.h# Check for source consisting of only blank lines and comments# Leave it alone# Replace it with a 'pass' statement# Catch syntax warnings after the first compile# to emit warnings (SyntaxWarning, DeprecationWarning) at most once.b'Utilities to compile possibly incomplete Python source code.

This module provides two interfaces, broadly similar to the builtin
function compile(), which take program text, a filename and a 'mode'
and:

- Return code object if the command is complete and valid
- Return None if the command is incomplete
- Raise SyntaxError, ValueError or OverflowError if the command is a
  syntax error (OverflowError and ValueError can be produced by
  malformed literals).

Approach:

First, check if the source consists entirely of blank lines and
comments; if so, replace it with 'pass', because the built-in
parser doesn't always do the right thing for these.

Compile three times: as is, with \n, and with \n\n appended.  If it
compiles as is, it's complete.  If it compiles with one \n appended,
we expect more.  If it doesn't compile either way, we compare the
error we get when compiling with \n or \n\n appended.  If the errors
are the same, the code is broken.  But if the errors are different, we
expect more.  Not intuitive; not even guaranteed to hold in future
releases; but this matches the compiler's behavior from Python 1.4
through 2.2, at least.

Caveat:

It is possible (but not likely) that the parser stops parsing with a
successful outcome before reaching the end of the source; in this
case, trailing symbols may be ignored instead of causing an error.
For example, a backslash followed by two newlines may be followed by
arbitrary garbage.  This will be fixed once the API for the parser is
better.

The two interfaces are:

compile_command(source, filename, symbol):

    Compiles a single command in the manner described above.

CommandCompiler():

    Instances of this class have __call__ methods identical in
    signature to compile_command; the difference is that if the
    instance compiles program text containing a __future__ statement,
    the instance 'remembers' and compiles all subsequent program texts
    with the statement in force.

The module also provides another class:

Compile():

    Instances of this class act like the built-in function compile,
    but with 'memory' in the sense described above.
'u'Utilities to compile possibly incomplete Python source code.

This module provides two interfaces, broadly similar to the builtin
function compile(), which take program text, a filename and a 'mode'
and:

- Return code object if the command is complete and valid
- Return None if the command is incomplete
- Raise SyntaxError, ValueError or OverflowError if the command is a
  syntax error (OverflowError and ValueError can be produced by
  malformed literals).

Approach:

First, check if the source consists entirely of blank lines and
comments; if so, replace it with 'pass', because the built-in
parser doesn't always do the right thing for these.

Compile three times: as is, with \n, and with \n\n appended.  If it
compiles as is, it's complete.  If it compiles with one \n appended,
we expect more.  If it doesn't compile either way, we compare the
error we get when compiling with \n or \n\n appended.  If the errors
are the same, the code is broken.  But if the errors are different, we
expect more.  Not intuitive; not even guaranteed to hold in future
releases; but this matches the compiler's behavior from Python 1.4
through 2.2, at least.

Caveat:

It is possible (but not likely) that the parser stops parsing with a
successful outcome before reaching the end of the source; in this
case, trailing symbols may be ignored instead of causing an error.
For example, a backslash followed by two newlines may be followed by
arbitrary garbage.  This will be fixed once the API for the parser is
better.

The two interfaces are:

compile_command(source, filename, symbol):

    Compiles a single command in the manner described above.

CommandCompiler():

    Instances of this class have __call__ methods identical in
    signature to compile_command; the difference is that if the
    instance compiles program text containing a __future__ statement,
    the instance 'remembers' and compiles all subsequent program texts
    with the statement in force.

The module also provides another class:

Compile():

    Instances of this class act like the built-in function compile,
    but with 'memory' in the sense described above.
'b'Compile'u'Compile'b'CommandCompiler'u'CommandCompiler'b'Compile a command and determine whether it is incomplete.

    Arguments:

    source -- the source string; may contain \n characters
    filename -- optional filename from which source was read; default
                "<input>"
    symbol -- optional grammar start symbol; "single" (default), "exec"
              or "eval"

    Return value / exceptions raised:

    - Return a code object if the command is complete and valid
    - Return None if the command is incomplete
    - Raise SyntaxError, ValueError or OverflowError if the command is a
      syntax error (OverflowError and ValueError can be produced by
      malformed literals).
    'u'Compile a command and determine whether it is incomplete.

    Arguments:

    source -- the source string; may contain \n characters
    filename -- optional filename from which source was read; default
                "<input>"
    symbol -- optional grammar start symbol; "single" (default), "exec"
              or "eval"

    Return value / exceptions raised:

    - Return a code object if the command is complete and valid
    - Return None if the command is incomplete
    - Raise SyntaxError, ValueError or OverflowError if the command is a
      syntax error (OverflowError and ValueError can be produced by
      malformed literals).
    'b'Instances of this class behave much like the built-in compile
    function, but if one is used to compile text containing a future
    statement, it "remembers" and compiles all subsequent program texts
    with the statement in force.'u'Instances of this class behave much like the built-in compile
    function, but if one is used to compile text containing a future
    statement, it "remembers" and compiles all subsequent program texts
    with the statement in force.'b'Instances of this class have __call__ methods identical in
    signature to compile_command; the difference is that if the
    instance compiles program text containing a __future__ statement,
    the instance 'remembers' and compiles all subsequent program texts
    with the statement in force.'u'Instances of this class have __call__ methods identical in
    signature to compile_command; the difference is that if the
    instance compiles program text containing a __future__ statement,
    the instance 'remembers' and compiles all subsequent program texts
    with the statement in force.'b'Compile a command and determine whether it is incomplete.

        Arguments:

        source -- the source string; may contain \n characters
        filename -- optional filename from which source was read;
                    default "<input>"
        symbol -- optional grammar start symbol; "single" (default) or
                  "eval"

        Return value / exceptions raised:

        - Return a code object if the command is complete and valid
        - Return None if the command is incomplete
        - Raise SyntaxError, ValueError or OverflowError if the command is a
          syntax error (OverflowError and ValueError can be produced by
          malformed literals).
        'u'Compile a command and determine whether it is incomplete.

        Arguments:

        source -- the source string; may contain \n characters
        filename -- optional filename from which source was read;
                    default "<input>"
        symbol -- optional grammar start symbol; "single" (default) or
                  "eval"

        Return value / exceptions raised:

        - Return a code object if the command is complete and valid
        - Return None if the command is incomplete
        - Raise SyntaxError, ValueError or OverflowError if the command is a
          syntax error (OverflowError and ValueError can be produced by
          malformed literals).
        'u'Python.Python39.lib.codeop'u'Python39.lib.codeop'u'lib.codeop'u'codeop'Compiles nodes from the parser into Python code.is_python_keywordidtrackingSymbolsVAR_LOAD_ALIASVAR_LOAD_PARAMETERVAR_LOAD_RESOLVEVAR_LOAD_UNDEFINEDEvalContextoptimizerOptimizergteqlteqnotinoperatorsoptimizeconstnew_funcCodeGeneratoreval_ctxvolatile_make_binopBinExprsandboxedintercepted_binopsenvironment.call_binop(context, _make_unopUnaryExprintercepted_unopsenvironment.call_unop(context, defer_initoptimizedGenerate the python source for a node tree.Can't compile non template nodescode_generator_classhas_safe_reprDoes the node have a safe representation?find_undeclaredNodeCheck if the names passed are accessed undeclared.  The return value
    is a set of all the undeclared names from the sequence of names found.
    UndeclaredNameVisitorVisitorExitundeclaredMacroRefMacroCallBlockaccesses_calleraccesses_kwargsaccesses_varargsHolds compile time information for us.require_output_checkrootlevelloop_frameblock_framesoft_frameCreate a copy of the current one.Return an inner frame.softReturn a soft frame.  A soft frame may not be modified as
        standalone thing as it shares the resources with the frame it
        was created of, but it's not a rootlevel frame any longer.

        This is only used to implement if-statements and conditional
        expressions.
        Exception used by the `UndeclaredNameVisitor` to signal a stop.DependencyFinderVisitorA visitor that collects filter and test calls.visit_Filtervisit_TestTestvisit_BlockBlockStop visiting at blocks.A visitor that checks if a name is accessed without being
    declared.  This is different from the frame visitor as it will
    not stop at closure frames.
    Stop visiting a blocks.CompilerExitRaised if the compiler encountered a situation where it just
    doesn't make sense to further process the code.  Any block that
    raises such an exception is not further processed.
    created_block_contextimport_aliasesblocksextends_so_farhas_known_extendscode_linenodebug_info_write_debug_info_new_lines_first_write_last_identifier_indentation_assign_stack_param_def_block_context_reference_stackFail with a :exc:`TemplateAssertionError`.temporary_identifierGet a new unique identifier.t_Enable buffering for the frame from that point onwards.writeline = []return_buffer_contentsforce_unescapedReturn the buffer contents of the frame.if context.eval_ctx.autoescape:return Markup(concat(outdentelse:return concat(Indent by one.Outdent by step.start_writeYield or write into the frame buffer.yield .append(end_writeEnd the writing process started by `start_write`.simple_writeSimple shortcut for start_write + write + end_write.blockvisitVisit a list of nodes as block in a frame.  If the current frame
        is no buffer a dummy ``if 0: yield None`` is written automatically.
        Write a string into the output stream.Combination of newline and write.Add one or more newlines before the next write.Writes a function call to the stream for the current node.
        A leading comma is added automatically.  The extra keyword
        arguments may not include python keywords otherwise a syntax
        error could occur.  The extra keyword arguments should be given
        as python dict.
        kwarg_workarounddyn_args, *dyn_kwargs, **dict({, **{}, **, **pull_dependenciesFind all filter and test names used in the template and
        assign them to variables in the compiled namespace. Checking
        that the names are registered with the environment is done when
        compiling the Filter and Test nodes. If the node is in an If or
        CondExpr node, the check is done at runtime instead.

        .. versionchanged:: 3.0
            Filters and tests in If and CondExpr nodes are checked at
            runtime instead of compile time.
        id_mapdependencytry: = environment.except KeyError:@internalcodedef (*unused):raise TemplateRuntimeError("No  named ' named ' found.")enter_frameundefsget_resolve_funcunknown load instruction = missingleave_framewith_python_scopechoose_asyncasync async_valuesync_valuemacro_bodyDump the function def of a macro or call block.analyze_nodemacro_refexplicit_callerskip_special_paramscallervarargsWhen defining macros or call blocks the special "caller" argument must be omitted or be given a default."When defining macros or call blocks the "'special "caller" argument must be omitted '"or be given a default."declare_parameter):push_parameter_definitions is missing: = undefined("parameter  was not provided", name=' was not provided",'" name="mark_parameter_storedpop_parameter_definitionsmacro_defDump the macro definition for the def created by macro_body.arg_tupleMacro(environment, macro, , (), "),"",", context.eval_ctx.autoescape)Return a human readable position for the node.line dump_local_contextdump_storesitems_kvwrite_commonsWrites a common preamble that is used by root and block functions.
        Primarily this sets up common local helpers and enforces a generator
        through a dead branch.
        resolve = context.resolve_or_missingundefined = environment.undefinedconcat = environment.concatcond_expr_undefined = Undefinedif 0: yield NonePushes all parameter targets from the given frame into a local
        stack that permits tracking of yet to be assigned parameters.  In
        particular this enables the optimization from `visit_Name` to skip
        undefined expressions for parameters in macros as macros can reference
        otherwise unbound parameters.
        dump_param_targetsPops the current parameter definitions set.Marks a parameter in the current parameter definitions as stored.
        This will skip the enforced undefined checks.
        push_context_referencepop_context_referenceget_context_ref.resolvederive_context.derived(parameter_is_undeclaredChecks if a given target is an undeclared parameter.push_assign_trackingPushes a new layer for assignment tracking.pop_assign_trackingPops the topmost level for assignment tracking and updates the
        context variables if necessary.
        public_names_loop_vars[] = _block_vars[context.vars[_loop_vars.update({_block_vars.update({context.vars.update({})context.exported_vars.add(names_strcontext.exported_vars.update((visit_Templateno root frame allowedexportedasync_exportedexported_namesfrom jinja2.runtime import , environment=environmentenvenvExtendshave_extendsblock  defined twiceImportedNameimportnameimpname = (context, missing=missing = TemplateReference(context)parent_template = Noneif parent_template is not None:yield from parent_template.root_render_func(context)async for event in parent_template.root_render_func(context):yield eventblock_ = context.super(, block__block_vars = {}: block_blocks_kv_strblocks = {{debug_kv_strdebug_info = Call a block and register it for the template.if parent_template is None:scopedif len(context.blocks[]) <= 1:raise TemplateRuntimeError("Required block  not found")yield from context.blocks[][0](for event in context.blocks["for event in"" context.blocks["visit_ExtendsCalls the extender.cannot use extend from a non top-level scoperaise TemplateRuntimeError("extended multiple times")parent_template = environment.get_template(for name, parent_block in parent_template.blocks.items():context.blocks.setdefault(name, []).append(parent_block)visit_IncludeIncludeHandles includes.ignore_missingget_or_select_templateConstget_templateselect_templatetemplate = environment.except TemplateNotFound:skip_event_yieldwith_contextfor event in template.root_render_func(template.new_context(context.get_all(), True, "for event in template.root_render_func(""template.new_context(context.get_all(), True,")):for event in (await template._get_default_module_async())._body_stream:"for event in (await template._get_default_module_async())""._body_stream:"yield from template._get_default_module()._body_stream_import_commonFromImportawait environment.get_template().make_module_async(context.get_all(), True, _get_default_module(context)Visit regular imports.context.exported_vars.discard(visit_FromImportVisit named imports.included_template = var_namesdiscarded_names = getattr(included_template, " ="" getattr(included_template, ", missing)the template {included_template.__name__!r} (imported on "the template {included_template.__name__!r}"" (imported on ") does not export the requested name ")"" does not export the requested name " = undefined(f, name=names_kvcontext.vars.update({{}})context.exported_vars.difference_update((test_frameelse_frameonlyextended_looploop_reffor_branchelse_loop_filter_func(fiter):auto_aiter(fiter)fiter(reciter, loop_render_func, depth=0):Can't assign to special loop variable in for-loop targetiteration_indicator = 1AsyncLoopContext(reciterauto_aiter(, undefined, loop_render_func, depth):, undefined):_loop_vars = {} = 0loop(, loop)storesif_frameelif_visit_Macromacro_framevisit_CallBlockcall_framecaller = forward_callervisit_FilterBlockFilterBlockfilter_framewith_framevisit_ExprStmtExprStmt_FinalizeInfoNamedTuple_default_finalizeThe default finalize function if the environment isn't
        configured with one. Or, if the environment has one, this is
        called on that function's output for constants.
        _finalize_make_finalizeBuild the finalize function to be used on constants and at
        runtime. Cached so it's only created once for all output nodes.

        Returns a ``namedtuple`` with the following attributes:

        ``const``
            A function to finalize constant data at compile time.

        ``src``
            Source code to output around nodes to be evaluated at
            runtime.
        finalizeenvironment.finalize(env_finalizecontext.eval_ctxeval_context_output_const_reprGiven a group of constant values converted from ``Output``
        child nodes, produce a string to write to the template module
        source.
        _output_child_to_constTry to optimize a child of an ``Output`` node by trying to
        convert it to constant, finalized data at compile time.

        If :exc:`Impossible` is raised, the node is not constant and
        will be evaluated at runtime. Any other exception will also be
        evaluated at runtime for easier debugging.
        as_constTemplateData_output_child_preOutput extra source code before visiting a child of an
        ``Output`` node.
        (escape if context.eval_ctx.autoescape else str)(escape(str(_output_child_postOutput extra source code after visiting a child of an
        ``Output`` node.
        visit_OutputOutputImpossible.extend((visit_AssignBlockAssignBlock = (Markup if context.eval_ctx.autoescape else identity)(concat(find_load(undefined(name=) if  is missing else visit_NSRefNSRefif not isinstance(, Namespace):raise TemplateRuntimeError("cannot assign attribute on non-namespace object")"raise TemplateRuntimeError"'("cannot assign attribute on non-namespace object")'visit_Constvisit_TemplateData(Markup if context.eval_ctx.autoescape else identity)(,)visit_Addvisit_Subvisit_Mulvisit_Divvisit_FloorDivvisit_Powvisit_Modvisit_Andvisit_Orvisit_Posvisit_Negnot visit_Notvisit_ConcatConcat(markup_join if context.eval_ctx.volatile else str_join)markup_joinstr_join((visit_OperandOperandvisit_GetattrGetattr(await auto_await(environment.getattr(visit_GetitemGetitemenvironment.getitem(_filter_test_commonis_filterNo (Markup(concat()) if context.eval_ctx.autoescape else concat("))"" if context.eval_ctx.autoescape else concat("Markup(concat(visit_CondExprCondExprwrite_expr2cond_expr_undefined("the inline if-expression on 'cond_expr_undefined("the inline if-expression on' evaluated to false and no else section was defined.")" evaluated to false and no else"' section was defined.")'environment.call(context, context.call(_loop_varsloop_kwargs_block_varsblock_kwargsvisit_KeywordKeywordvisit_MarkSafeMarkSafeMarkup(visit_MarkSafeIfAutoescapeMarkSafeIfAutoescapevisit_EnvironmentAttributeEnvironmentAttributeenvironment.visit_ExtensionAttributeExtensionAttributeenvironment.extensions[identifier].visit_ImportedNamevisit_InternalNameInternalNamevisit_ContextReferenceContextReferencevisit_DerivedContextReferenceDerivedContextReferencevisit_ScopeScopescope_framevisit_OverlayScopeOverlayScope.vars = visit_EvalContextModifierEvalContextModifiercontext.eval_ctx.visit_ScopedEvalContextModifierScopedEvalContextModifierold_ctx_namesaved_ctx = context.eval_ctx.save()revertcontext.eval_ctx.revert(# Only optimize if the frame is not volatile# the parent of this frame# in some dynamic inheritance situations the compiler needs to add# write tests around output statements.# inside some tags we are using a buffer rather than yield statements.# this for example affects {% filter %} or {% macro %}.  If a frame# is buffered this variable points to the name of the list used as# buffer.# the name of the block we're in, otherwise None.# a toplevel frame is the root + soft frames such as if conditions.# the root frame is basically just the outermost frame, so no if# conditions.  This information is used to optimize inheritance# situations.# variables set inside of loops and blocks should not affect outer frames,# but they still needs to be kept track of as part of the active context.# track whether the frame is being used in an if-statement or conditional# expression as it determines which errors should be raised during runtime# or compile time.# aliases for imports# a registry for all blocks.  Because blocks are moved out# into the global python scope they are registered here# the number of extends statements so far# some templates have a rootlevel extends.  In this case we# can safely assume that we're a child template and do some# more optimizations.# the current line number# registry of all filters and tests (global, not block local)# the debug information# the number of new lines before the next write()# the line number of the last written statement# true if nothing was written so far.# used by the `temporary_identifier` method to get new# unique, temporary identifier# the current indentation# Tracks toplevel assignments# Tracks parameter definition blocks# Tracks the current context.# -- Various compilation helpers# if any of the given keyword arguments is a python keyword# we have to make sure that no invalid call is created.# add check during runtime that dependencies used inside of executed# blocks are defined, as this step may be skipped during compile time# In older Jinja versions there was a bug that allowed caller# to retain the special behavior even if it was mentioned in# the argument list.  However thankfully this was only really# working if it was the last argument.  So we are explicitly# checking this now and error out if it is anywhere else in# the argument list.# macros are delayed, they never require output checks# always use the standard Undefined class for the implicit else of# conditional expressions# -- Statement Visitors# if we want a deferred initialization we cannot move the# environment into a local name# do we have an extends tag at all?  If not, we can save some# overhead by just not processing any inheritance code.# find all blocks# find all imports and import them# add the load name# generate the root render function.# process the root# make sure that the parent root is called.# at this point we now have the blocks collected and can visit them too.# It's important that we do not make this frame a child of the# toplevel template.  This would cause a variety of# interesting issues with identifier tracking.# if we know that we are a child template, there is no need to# check if we are one# if the number of extends statements in general is zero so# far, we don't have to add a check if something extended# the template before this one.# if we have a known extends we just add a template runtime# error into the generated code.  We could catch that at compile# time too, but i welcome it not to confuse users by throwing the# same error at different times just "because we can".# if we have a known extends already we don't need that code here# as we know that the template execution will end here.# if this extends statement was in the root level we can take# advantage of that information and simplify the generated code# in the top level from this point onwards# and now we have one more# try to figure out if we have an extended loop.  An extended loop# is necessary if the loop is in recursive mode if the special loop# variable is accessed in the body if the body is a scoped block.# if we don't have an recursive loop we have to find the shadowed# variables at that point.  Because loops can be nested but the loop# variable is a special one we have to enforce aliasing for it.# Use the same buffer for the else frame# make sure the loop variable is a special one and raise a template# assertion error if a loop tries to write to loop# if the node was recursive we have to return the buffer contents# and start the iteration code# at the end of the iteration, clear any assignments made in the# loop from the top level# Template data doesn't go through finalize.# If an extends is active, don't render outside a block.# A top-level extends is known to exist at compile time.# Evaluate constants at compile time if possible. Each item in# body will be either a list of static data or a node to be# evaluated at runtime.# If the finalize function requires runtime context,# constants can't be evaluated at compile time.# Unless it's basic template data that won't be# finalized anyway.# The node was not constant and needs to be evaluated at# runtime. Or another error was raised, which is easier# to debug at runtime.# A group of constant data to join and output.# A node to be evaluated at runtime.# This is a special case.  Since a set block always captures we# will disable output checks.  This way one can use set blocks# toplevel even in extended templates.# -- Expression Visitors# If we are looking up a variable we might have to deal with the# case where it's undefined.  We can skip that case if the load# instruction indicates a parameter which are always defined.# NSRefs can only be used to store values; since they use the normal# `foo.bar` notation they will be parsed as a normal attribute access# when used anywhere but in a `set` context# slices bypass the environment getitem method.# When inside an If or CondExpr frame, allow the filter to be# undefined at compile time and only raise an error if it's# actually called at runtime. See pull_dependencies.# Back to the visitor function to handle visiting the target of# the filter or test.# if the filter node is None we are inside a filter block# and want to write to the current buffer# -- Unused nodes for extensionsb'Compiles nodes from the parser into Python code.'u'Compiles nodes from the parser into Python code.'b'eq'u'eq'b'ne'u'ne'b'gt'u'gt'b'gteq'u'gteq'b'lt'u'lt'b'lteq'u'lteq'b'notin'u'notin'b'CodeGenerator'u'CodeGenerator'b'Frame'u'Frame'b'environment.call_binop(context, 'u'environment.call_binop(context, 'b'environment.call_unop(context, 'u'environment.call_unop(context, 'b'Generate the python source for a node tree.'u'Generate the python source for a node tree.'b'Can't compile non template nodes'u'Can't compile non template nodes'b'Does the node have a safe representation?'u'Does the node have a safe representation?'b'Check if the names passed are accessed undeclared.  The return value
    is a set of all the undeclared names from the sequence of names found.
    'u'Check if the names passed are accessed undeclared.  The return value
    is a set of all the undeclared names from the sequence of names found.
    'b'Holds compile time information for us.'u'Holds compile time information for us.'b'Create a copy of the current one.'u'Create a copy of the current one.'b'Return an inner frame.'u'Return an inner frame.'b'Return a soft frame.  A soft frame may not be modified as
        standalone thing as it shares the resources with the frame it
        was created of, but it's not a rootlevel frame any longer.

        This is only used to implement if-statements and conditional
        expressions.
        'u'Return a soft frame.  A soft frame may not be modified as
        standalone thing as it shares the resources with the frame it
        was created of, but it's not a rootlevel frame any longer.

        This is only used to implement if-statements and conditional
        expressions.
        'b'Exception used by the `UndeclaredNameVisitor` to signal a stop.'u'Exception used by the `UndeclaredNameVisitor` to signal a stop.'b'A visitor that collects filter and test calls.'u'A visitor that collects filter and test calls.'b'Stop visiting at blocks.'u'Stop visiting at blocks.'b'A visitor that checks if a name is accessed without being
    declared.  This is different from the frame visitor as it will
    not stop at closure frames.
    'u'A visitor that checks if a name is accessed without being
    declared.  This is different from the frame visitor as it will
    not stop at closure frames.
    'b'Stop visiting a blocks.'u'Stop visiting a blocks.'b'Raised if the compiler encountered a situation where it just
    doesn't make sense to further process the code.  Any block that
    raises such an exception is not further processed.
    'u'Raised if the compiler encountered a situation where it just
    doesn't make sense to further process the code.  Any block that
    raises such an exception is not further processed.
    'b'Fail with a :exc:`TemplateAssertionError`.'u'Fail with a :exc:`TemplateAssertionError`.'b'Get a new unique identifier.'u'Get a new unique identifier.'b't_'u't_'b'Enable buffering for the frame from that point onwards.'u'Enable buffering for the frame from that point onwards.'b' = []'u' = []'b'Return the buffer contents of the frame.'u'Return the buffer contents of the frame.'b'if context.eval_ctx.autoescape:'u'if context.eval_ctx.autoescape:'b'return Markup(concat('u'return Markup(concat('b'else:'u'else:'b'return concat('u'return concat('b'Indent by one.'u'Indent by one.'b'Outdent by step.'u'Outdent by step.'b'Yield or write into the frame buffer.'u'Yield or write into the frame buffer.'b'yield 'u'yield 'b'.append('u'.append('b'End the writing process started by `start_write`.'u'End the writing process started by `start_write`.'b'Simple shortcut for start_write + write + end_write.'u'Simple shortcut for start_write + write + end_write.'b'Visit a list of nodes as block in a frame.  If the current frame
        is no buffer a dummy ``if 0: yield None`` is written automatically.
        'u'Visit a list of nodes as block in a frame.  If the current frame
        is no buffer a dummy ``if 0: yield None`` is written automatically.
        'b'Write a string into the output stream.'u'Write a string into the output stream.'b'Combination of newline and write.'u'Combination of newline and write.'b'Add one or more newlines before the next write.'u'Add one or more newlines before the next write.'b'Writes a function call to the stream for the current node.
        A leading comma is added automatically.  The extra keyword
        arguments may not include python keywords otherwise a syntax
        error could occur.  The extra keyword arguments should be given
        as python dict.
        'u'Writes a function call to the stream for the current node.
        A leading comma is added automatically.  The extra keyword
        arguments may not include python keywords otherwise a syntax
        error could occur.  The extra keyword arguments should be given
        as python dict.
        'b', *'u', *'b', **dict({'u', **dict({'b', **{'u', **{'b'}, **'u'}, **'b', **'u', **'b'Find all filter and test names used in the template and
        assign them to variables in the compiled namespace. Checking
        that the names are registered with the environment is done when
        compiling the Filter and Test nodes. If the node is in an If or
        CondExpr node, the check is done at runtime instead.

        .. versionchanged:: 3.0
            Filters and tests in If and CondExpr nodes are checked at
            runtime instead of compile time.
        'u'Find all filter and test names used in the template and
        assign them to variables in the compiled namespace. Checking
        that the names are registered with the environment is done when
        compiling the Filter and Test nodes. If the node is in an If or
        CondExpr node, the check is done at runtime instead.

        .. versionchanged:: 3.0
            Filters and tests in If and CondExpr nodes are checked at
            runtime instead of compile time.
        'b'filters'u'filters'b'tests'u'tests'b'try:'u'try:'b' = environment.'u' = environment.'b'except KeyError:'u'except KeyError:'b'@internalcode'u'@internalcode'b'def 'u'def 'b'(*unused):'u'(*unused):'b'raise TemplateRuntimeError("No 'u'raise TemplateRuntimeError("No 'b' named 'u' named 'b' found.")'u' found.")'b'unknown load instruction'u'unknown load instruction'b' = missing'u' = missing'b'async 'u'async 'b'Dump the function def of a macro or call block.'u'Dump the function def of a macro or call block.'b'caller'u'caller'b'kwargs'u'kwargs'b'varargs'u'varargs'b'When defining macros or call blocks the special "caller" argument must be omitted or be given a default.'u'When defining macros or call blocks the special "caller" argument must be omitted or be given a default.'b'macro'u'macro'b'):'u'):'b' is missing:'u' is missing:'b' = undefined("parameter 'u' = undefined("parameter 'b' was not provided", name='u' was not provided", name='b'Dump the macro definition for the def created by macro_body.'u'Dump the macro definition for the def created by macro_body.'b'Macro(environment, macro, 'u'Macro(environment, macro, 'b', ('u', ('b'), 'u'), 'b', context.eval_ctx.autoescape)'u', context.eval_ctx.autoescape)'b'Return a human readable position for the node.'u'Return a human readable position for the node.'b'line 'u'line 'b'Writes a common preamble that is used by root and block functions.
        Primarily this sets up common local helpers and enforces a generator
        through a dead branch.
        'u'Writes a common preamble that is used by root and block functions.
        Primarily this sets up common local helpers and enforces a generator
        through a dead branch.
        'b'resolve = context.resolve_or_missing'u'resolve = context.resolve_or_missing'b'undefined = environment.undefined'u'undefined = environment.undefined'b'concat = environment.concat'u'concat = environment.concat'b'cond_expr_undefined = Undefined'u'cond_expr_undefined = Undefined'b'if 0: yield None'u'if 0: yield None'b'Pushes all parameter targets from the given frame into a local
        stack that permits tracking of yet to be assigned parameters.  In
        particular this enables the optimization from `visit_Name` to skip
        undefined expressions for parameters in macros as macros can reference
        otherwise unbound parameters.
        'u'Pushes all parameter targets from the given frame into a local
        stack that permits tracking of yet to be assigned parameters.  In
        particular this enables the optimization from `visit_Name` to skip
        undefined expressions for parameters in macros as macros can reference
        otherwise unbound parameters.
        'b'Pops the current parameter definitions set.'u'Pops the current parameter definitions set.'b'Marks a parameter in the current parameter definitions as stored.
        This will skip the enforced undefined checks.
        'u'Marks a parameter in the current parameter definitions as stored.
        This will skip the enforced undefined checks.
        'b'resolve'u'resolve'b'.resolve'u'.resolve'b'.derived('u'.derived('b'Checks if a given target is an undeclared parameter.'u'Checks if a given target is an undeclared parameter.'b'Pushes a new layer for assignment tracking.'u'Pushes a new layer for assignment tracking.'b'Pops the topmost level for assignment tracking and updates the
        context variables if necessary.
        'u'Pops the topmost level for assignment tracking and updates the
        context variables if necessary.
        'b'_loop_vars['u'_loop_vars['b'] = 'u'] = 'b'_block_vars['u'_block_vars['b'context.vars['u'context.vars['b'_loop_vars.update({'u'_loop_vars.update({'b'_block_vars.update({'u'_block_vars.update({'b'context.vars.update({'u'context.vars.update({'b'})'u'})'b'context.exported_vars.add('u'context.exported_vars.add('b'context.exported_vars.update(('u'context.exported_vars.update(('b'no root frame allowed'u'no root frame allowed'b'from jinja2.runtime import 'u'from jinja2.runtime import 'b', environment=environment'u', environment=environment'b'block 'u'block 'b' defined twice'u' defined twice'b'name = 'u'name = 'b'(context, missing=missing'u'(context, missing=missing'b' = TemplateReference(context)'u' = TemplateReference(context)'b'parent_template = None'u'parent_template = None'b'if parent_template is not None:'u'if parent_template is not None:'b'yield from parent_template.root_render_func(context)'u'yield from parent_template.root_render_func(context)'b'async for event in parent_template.root_render_func(context):'u'async for event in parent_template.root_render_func(context):'b'yield event'u'yield event'b'block_'u'block_'b'super'u'super'b' = context.super('u' = context.super('b', block_'u', block_'b'_block_vars = {}'u'_block_vars = {}'b': block_'u': block_'b'blocks = {{'u'blocks = {{'b'debug_info = 'u'debug_info = 'b'Call a block and register it for the template.'u'Call a block and register it for the template.'b'if parent_template is None:'u'if parent_template is None:'b'if len(context.blocks['u'if len(context.blocks['b']) <= 1:'u']) <= 1:'b'raise TemplateRuntimeError("Required block 'u'raise TemplateRuntimeError("Required block 'b' not found")'u' not found")'b'yield from context.blocks['u'yield from context.blocks['b'][0]('u'][0]('b'for event in context.blocks['u'for event in context.blocks['b'Calls the extender.'u'Calls the extender.'b'cannot use extend from a non top-level scope'u'cannot use extend from a non top-level scope'b'raise TemplateRuntimeError("extended multiple times")'u'raise TemplateRuntimeError("extended multiple times")'b'parent_template = environment.get_template('u'parent_template = environment.get_template('b'for name, parent_block in parent_template.blocks.items():'u'for name, parent_block in parent_template.blocks.items():'b'context.blocks.setdefault(name, []).append(parent_block)'u'context.blocks.setdefault(name, []).append(parent_block)'b'Handles includes.'u'Handles includes.'b'get_or_select_template'u'get_or_select_template'b'get_template'u'get_template'b'select_template'u'select_template'b'template = environment.'u'template = environment.'b'except TemplateNotFound:'u'except TemplateNotFound:'b'for event in template.root_render_func(template.new_context(context.get_all(), True, 'u'for event in template.root_render_func(template.new_context(context.get_all(), True, 'b')):'u')):'b'for event in (await template._get_default_module_async())._body_stream:'u'for event in (await template._get_default_module_async())._body_stream:'b'yield from template._get_default_module()._body_stream'u'yield from template._get_default_module()._body_stream'b'await 'u'await 'b'environment.get_template('u'environment.get_template('b').'u').'b'make_module'u'make_module'b'_async'u'_async'b'(context.get_all(), True, 'u'(context.get_all(), True, 'b'_get_default_module'u'_get_default_module'b'(context)'u'(context)'b'Visit regular imports.'u'Visit regular imports.'b'context.exported_vars.discard('u'context.exported_vars.discard('b'Visit named imports.'u'Visit named imports.'b'included_template = 'u'included_template = 'b' = getattr(included_template, 'u' = getattr(included_template, 'b', missing)'u', missing)'b'the template {included_template.__name__!r} (imported on 'u'the template {included_template.__name__!r} (imported on 'b') does not export the requested name 'u') does not export the requested name 'b' = undefined(f'u' = undefined(f'b', name='u', name='b'context.vars.update({{'u'context.vars.update({{'b'}})'u'}})'b'context.exported_vars.difference_update(('u'context.exported_vars.difference_update(('b'loop'u'loop'b'test'b'(fiter):'u'(fiter):'b'auto_aiter(fiter)'u'auto_aiter(fiter)'b'fiter'u'fiter'b'(reciter, loop_render_func, depth=0):'u'(reciter, loop_render_func, depth=0):'b'Can't assign to special loop variable in for-loop target'u'Can't assign to special loop variable in for-loop target'b' = 1'u' = 1'b'Async'u'Async'b'LoopContext('u'LoopContext('b'reciter'u'reciter'b'auto_aiter('u'auto_aiter('b', undefined, loop_render_func, depth):'u', undefined, loop_render_func, depth):'b', undefined):'u', undefined):'b'_loop_vars = {}'u'_loop_vars = {}'b' = 0'u' = 0'b'loop('u'loop('b', loop)'u', loop)'b'caller = 'u'caller = 'b'The default finalize function if the environment isn't
        configured with one. Or, if the environment has one, this is
        called on that function's output for constants.
        'u'The default finalize function if the environment isn't
        configured with one. Or, if the environment has one, this is
        called on that function's output for constants.
        'b'Build the finalize function to be used on constants and at
        runtime. Cached so it's only created once for all output nodes.

        Returns a ``namedtuple`` with the following attributes:

        ``const``
            A function to finalize constant data at compile time.

        ``src``
            Source code to output around nodes to be evaluated at
            runtime.
        'u'Build the finalize function to be used on constants and at
        runtime. Cached so it's only created once for all output nodes.

        Returns a ``namedtuple`` with the following attributes:

        ``const``
            A function to finalize constant data at compile time.

        ``src``
            Source code to output around nodes to be evaluated at
            runtime.
        'b'environment.finalize('u'environment.finalize('b'context.eval_ctx'u'context.eval_ctx'b'environment'u'environment'b'Given a group of constant values converted from ``Output``
        child nodes, produce a string to write to the template module
        source.
        'u'Given a group of constant values converted from ``Output``
        child nodes, produce a string to write to the template module
        source.
        'b'Try to optimize a child of an ``Output`` node by trying to
        convert it to constant, finalized data at compile time.

        If :exc:`Impossible` is raised, the node is not constant and
        will be evaluated at runtime. Any other exception will also be
        evaluated at runtime for easier debugging.
        'u'Try to optimize a child of an ``Output`` node by trying to
        convert it to constant, finalized data at compile time.

        If :exc:`Impossible` is raised, the node is not constant and
        will be evaluated at runtime. Any other exception will also be
        evaluated at runtime for easier debugging.
        'b'Output extra source code before visiting a child of an
        ``Output`` node.
        'u'Output extra source code before visiting a child of an
        ``Output`` node.
        'b'(escape if context.eval_ctx.autoescape else str)('u'(escape if context.eval_ctx.autoescape else str)('b'escape('u'escape('b'str('u'str('b'Output extra source code after visiting a child of an
        ``Output`` node.
        'u'Output extra source code after visiting a child of an
        ``Output`` node.
        'b'.extend(('u'.extend(('b' = (Markup if context.eval_ctx.autoescape else identity)('u' = (Markup if context.eval_ctx.autoescape else identity)('b'concat('u'concat('b'(undefined(name='u'(undefined(name='b') if 'u') if 'b' is missing else 'u' is missing else 'b'if not isinstance('u'if not isinstance('b', Namespace):'u', Namespace):'b'raise TemplateRuntimeError("cannot assign attribute on non-namespace object")'u'raise TemplateRuntimeError("cannot assign attribute on non-namespace object")'b'(Markup if context.eval_ctx.autoescape else identity)('u'(Markup if context.eval_ctx.autoescape else identity)('b',)'u',)'b'not 'u'not 'b'(markup_join if context.eval_ctx.volatile else str_join)'u'(markup_join if context.eval_ctx.volatile else str_join)'b'markup_join'u'markup_join'b'str_join'u'str_join'b'(('u'(('b'(await auto_await('u'(await auto_await('b'environment.getattr('u'environment.getattr('b'environment.getitem('u'environment.getitem('b'No 'u'No 'b'(Markup(concat('u'(Markup(concat('b')) if context.eval_ctx.autoescape else concat('u')) if context.eval_ctx.autoescape else concat('b'Markup(concat('u'Markup(concat('b'cond_expr_undefined("the inline if-expression on 'u'cond_expr_undefined("the inline if-expression on 'b' evaluated to false and no else section was defined.")'u' evaluated to false and no else section was defined.")'b'environment.call(context, 'u'environment.call(context, 'b'context.call('u'context.call('b'_loop_vars'u'_loop_vars'b'_block_vars'u'_block_vars'b'Markup('u'Markup('b'environment.'u'environment.'b'environment.extensions['u'environment.extensions['b'].'u'].'b'.vars = 'u'.vars = 'b'context.eval_ctx.'u'context.eval_ctx.'b' = context.eval_ctx.save()'u' = context.eval_ctx.save()'b'context.eval_ctx.revert('u'context.eval_ctx.revert('u'jinja2.compiler'u'compiler'remember_token365COOKIE_SAMESITEPlease log in to access this page.Please reauthenticate to access this page.get_id_user_id_remember_remember_seconds_freshSESSION_KEYSEXEMPT_METHODSUSE_SESSION_FOR_NEXT#: The default name of the "remember me" cookie (``remember_token``)#: The default time before the "remember me" cookie expires (365 days).#: Whether the "remember me" cookie requires Secure; defaults to ``False``#: Whether the "remember me" cookie uses HttpOnly or not; defaults to ``True``#: Whether the "remember me" cookie requires same origin; defaults to ``None``#: The default flash message to display when users need to log in.#: The default flash message category to display when users need to log in.#: The default flash message to display when users need to reauthenticate.#: The default flash message category to display when users need to#: reauthenticate.#: The default attribute to retreive the str id of the user#: Default name of the auth header (``Authorization``)#: A set of session keys that are populated by Flask-Login. Use this set to#: purge keys safely and accurately.#: A set of HTTP methods which are exempt from `login_required` and#: `fresh_login_required`. By default, this is just ``OPTIONS``.#: If true, the page the user is attempting to access is stored in the session#: rather than a url parameter when redirecting to the login view; defaults to#: ``False``.b'remember_token'u'remember_token'b'Please log in to access this page.'u'Please log in to access this page.'b'Please reauthenticate to access this page.'u'Please reauthenticate to access this page.'b'get_id'u'get_id'b'_user_id'u'_user_id'b'_remember'u'_remember'b'_remember_seconds'u'_remember_seconds'b'_id'u'_id'b'_fresh'u'_fresh'u'flask_login.config'Makes an attribute forward to the configWorks exactly like a dict but provides ways to fill it from files
    or special dictionaries.  There are two common patterns to populate the
    config.

    Either you can fill the config from a config file::

        app.config.from_pyfile('yourconfig.cfg')

    Or alternatively you can define the configuration options in the
    module that calls :meth:`from_object` or provide an import path to
    a module that should be loaded.  It is also possible to tell it to
    use the same module and with that provide the configuration values
    just before the call::

        DEBUG = True
        SECRET_KEY = 'development key'
        app.config.from_object(__name__)

    In both cases (loading from any Python file or loading from modules),
    only uppercase keys are added to the config.  This makes it possible to use
    lowercase values in the config file for temporary values that are not added
    to the config or to define the config keys in the same file that implements
    the application.

    Probably the most interesting way to load configurations is from an
    environment variable pointing to a file::

        app.config.from_envvar('YOURAPPLICATION_SETTINGS')

    In this case before launching the application you have to set this
    environment variable to the file you want to use.  On Linux and OS X
    use the export statement::

        export YOURAPPLICATION_SETTINGS='/path/to/config/file'

    On windows use `set` instead.

    :param root_path: path to which files are read relative from.  When the
                      config object is created by the application, this is
                      the application's :attr:`~flask.Flask.root_path`.
    :param defaults: an optional dictionary of default values
    from_envvarvariable_nameLoads a configuration from an environment variable pointing to
        a configuration file.  This is basically just a shortcut with nicer
        error messages for this line of code::

            app.config.from_pyfile(os.environ['YOURAPPLICATION_SETTINGS'])

        :param variable_name: name of the environment variable
        :param silent: set to ``True`` if you want silent failure for missing
                       files.
        :return: ``True`` if the file was loaded successfully.
        The environment variable  is not set and as such configuration could not be loaded. Set this variable and make it point to a configuration file" is not set"" and as such configuration could not be loaded. Set"" this variable and make it point to a configuration"" file"from_pyfilefrom_prefixed_envLoad any environment variables that start with ``FLASK_``,
        dropping the prefix from the env key for the config key. Values
        are passed through a loading function to attempt to convert them
        to more specific types than strings.

        Keys are loaded in :func:`sorted` order.

        The default loading function attempts to parse values as any
        valid JSON type, including dicts and lists.

        Specific items in nested dicts can be set by separating the
        keys with double underscores (``__``). If an intermediate key
        doesn't exist, it will be initialized to an empty dict.

        :param prefix: Load env vars that start with this prefix,
            separated with an underscore (``_``).
        :param loads: Pass each string value to this function and use
            the returned value as the config value. If any error is
            raised it is ignored and the value remains a string. The
            default is :func:`json.loads`.

        .. versionadded:: 2.1
        len_prefixUpdates the values in the config from a Python file.  This function
        behaves as if the file was imported as module with the
        :meth:`from_object` function.

        :param filename: the filename of the config.  This can either be an
                         absolute filename or a filename relative to the
                         root path.
        :param silent: set to ``True`` if you want silent failure for missing
                       files.
        :return: ``True`` if the file was loaded successfully.

        .. versionadded:: 0.7
           `silent` parameter.
        config_fileENOENTEISDIRENOTDIRUnable to load configuration file (from_objectUpdates the values from the given object.  An object can be of one
        of the following two types:

        -   a string: in this case the object with that name will be imported
        -   an actual object reference: that object is used directly

        Objects are usually either modules or classes. :meth:`from_object`
        loads only the uppercase attributes of the module/class. A ``dict``
        object will not work with :meth:`from_object` because the keys of a
        ``dict`` are not attributes of the ``dict`` class.

        Example of module-based configuration::

            app.config.from_object('yourapplication.default_config')
            from yourapplication import default_config
            app.config.from_object(default_config)

        Nothing is done to the object before loading. If the object is a
        class and has ``@property`` attributes, it needs to be
        instantiated before being passed to this method.

        You should not use this function to load the actual configuration but
        rather configuration defaults.  The actual config should be loaded
        with :meth:`from_pyfile` and ideally from a location not within the
        package because the package might be installed system wide.

        See :ref:`config-dev-prod` for an example of class-based configuration
        using :meth:`from_object`.

        :param obj: an import name or object
        Update the values in the config from a file that is loaded
        using the ``load`` parameter. The loaded data is passed to the
        :meth:`from_mapping` method.

        .. code-block:: python

            import json
            app.config.from_file("config.json", load=json.load)

            import tomllib
            app.config.from_file("config.toml", load=tomllib.load, text=False)

        :param filename: The path to the data file. This can be an
            absolute path or relative to the config root path.
        :param load: A callable that takes a file handle and returns a
            mapping of loaded data from the file.
        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``
            implements a ``read`` method.
        :param silent: Ignore the file if it doesn't exist.
        :param text: Open the file in text or binary mode.
        :return: ``True`` if the file was loaded successfully.

        .. versionchanged:: 2.3
            The ``text`` parameter was added.

        .. versionadded:: 2.0
        from_mappingUpdates the config like :meth:`update` ignoring items with
        non-upper keys.

        :return: Always returns ``True``.

        .. versionadded:: 0.11
        mappingsget_namespacelowercasetrim_namespaceReturns a dictionary containing a subset of configuration options
        that match the specified namespace/prefix. Example usage::

            app.config['IMAGE_STORE_TYPE'] = 'fs'
            app.config['IMAGE_STORE_PATH'] = '/var/app/images'
            app.config['IMAGE_STORE_BASE_URL'] = 'http://img.website.com'
            image_store_config = app.config.get_namespace('IMAGE_STORE_')

        The resulting dictionary `image_store_config` would look like::

            {
                'type': 'fs',
                'path': '/var/app/images',
                'base_url': 'http://img.website.com'
            }

        This is often useful when configuration options map directly to
        keyword arguments in functions or class constructors.

        :param namespace: a configuration namespace
        :param lowercase: a flag indicating if the keys of the resulting
                          dictionary should be lowercase
        :param trim_namespace: a flag indicating if the keys of the resulting
                          dictionary should not include the namespace

        .. versionadded:: 0.11
        # Keep the value as a string if loading failed.# Change to key.removeprefix(prefix) on Python >= 3.9.# A non-nested key, set directly.# Traverse nested dictionaries with keys separated by "__".# If an intermediate dict does not exist, create it.b'Makes an attribute forward to the config'u'Makes an attribute forward to the config'b'Works exactly like a dict but provides ways to fill it from files
    or special dictionaries.  There are two common patterns to populate the
    config.

    Either you can fill the config from a config file::

        app.config.from_pyfile('yourconfig.cfg')

    Or alternatively you can define the configuration options in the
    module that calls :meth:`from_object` or provide an import path to
    a module that should be loaded.  It is also possible to tell it to
    use the same module and with that provide the configuration values
    just before the call::

        DEBUG = True
        SECRET_KEY = 'development key'
        app.config.from_object(__name__)

    In both cases (loading from any Python file or loading from modules),
    only uppercase keys are added to the config.  This makes it possible to use
    lowercase values in the config file for temporary values that are not added
    to the config or to define the config keys in the same file that implements
    the application.

    Probably the most interesting way to load configurations is from an
    environment variable pointing to a file::

        app.config.from_envvar('YOURAPPLICATION_SETTINGS')

    In this case before launching the application you have to set this
    environment variable to the file you want to use.  On Linux and OS X
    use the export statement::

        export YOURAPPLICATION_SETTINGS='/path/to/config/file'

    On windows use `set` instead.

    :param root_path: path to which files are read relative from.  When the
                      config object is created by the application, this is
                      the application's :attr:`~flask.Flask.root_path`.
    :param defaults: an optional dictionary of default values
    'u'Works exactly like a dict but provides ways to fill it from files
    or special dictionaries.  There are two common patterns to populate the
    config.

    Either you can fill the config from a config file::

        app.config.from_pyfile('yourconfig.cfg')

    Or alternatively you can define the configuration options in the
    module that calls :meth:`from_object` or provide an import path to
    a module that should be loaded.  It is also possible to tell it to
    use the same module and with that provide the configuration values
    just before the call::

        DEBUG = True
        SECRET_KEY = 'development key'
        app.config.from_object(__name__)

    In both cases (loading from any Python file or loading from modules),
    only uppercase keys are added to the config.  This makes it possible to use
    lowercase values in the config file for temporary values that are not added
    to the config or to define the config keys in the same file that implements
    the application.

    Probably the most interesting way to load configurations is from an
    environment variable pointing to a file::

        app.config.from_envvar('YOURAPPLICATION_SETTINGS')

    In this case before launching the application you have to set this
    environment variable to the file you want to use.  On Linux and OS X
    use the export statement::

        export YOURAPPLICATION_SETTINGS='/path/to/config/file'

    On windows use `set` instead.

    :param root_path: path to which files are read relative from.  When the
                      config object is created by the application, this is
                      the application's :attr:`~flask.Flask.root_path`.
    :param defaults: an optional dictionary of default values
    'b'Loads a configuration from an environment variable pointing to
        a configuration file.  This is basically just a shortcut with nicer
        error messages for this line of code::

            app.config.from_pyfile(os.environ['YOURAPPLICATION_SETTINGS'])

        :param variable_name: name of the environment variable
        :param silent: set to ``True`` if you want silent failure for missing
                       files.
        :return: ``True`` if the file was loaded successfully.
        'u'Loads a configuration from an environment variable pointing to
        a configuration file.  This is basically just a shortcut with nicer
        error messages for this line of code::

            app.config.from_pyfile(os.environ['YOURAPPLICATION_SETTINGS'])

        :param variable_name: name of the environment variable
        :param silent: set to ``True`` if you want silent failure for missing
                       files.
        :return: ``True`` if the file was loaded successfully.
        'b'The environment variable 'u'The environment variable 'b' is not set and as such configuration could not be loaded. Set this variable and make it point to a configuration file'u' is not set and as such configuration could not be loaded. Set this variable and make it point to a configuration file'b'Load any environment variables that start with ``FLASK_``,
        dropping the prefix from the env key for the config key. Values
        are passed through a loading function to attempt to convert them
        to more specific types than strings.

        Keys are loaded in :func:`sorted` order.

        The default loading function attempts to parse values as any
        valid JSON type, including dicts and lists.

        Specific items in nested dicts can be set by separating the
        keys with double underscores (``__``). If an intermediate key
        doesn't exist, it will be initialized to an empty dict.

        :param prefix: Load env vars that start with this prefix,
            separated with an underscore (``_``).
        :param loads: Pass each string value to this function and use
            the returned value as the config value. If any error is
            raised it is ignored and the value remains a string. The
            default is :func:`json.loads`.

        .. versionadded:: 2.1
        'u'Load any environment variables that start with ``FLASK_``,
        dropping the prefix from the env key for the config key. Values
        are passed through a loading function to attempt to convert them
        to more specific types than strings.

        Keys are loaded in :func:`sorted` order.

        The default loading function attempts to parse values as any
        valid JSON type, including dicts and lists.

        Specific items in nested dicts can be set by separating the
        keys with double underscores (``__``). If an intermediate key
        doesn't exist, it will be initialized to an empty dict.

        :param prefix: Load env vars that start with this prefix,
            separated with an underscore (``_``).
        :param loads: Pass each string value to this function and use
            the returned value as the config value. If any error is
            raised it is ignored and the value remains a string. The
            default is :func:`json.loads`.

        .. versionadded:: 2.1
        'b'Updates the values in the config from a Python file.  This function
        behaves as if the file was imported as module with the
        :meth:`from_object` function.

        :param filename: the filename of the config.  This can either be an
                         absolute filename or a filename relative to the
                         root path.
        :param silent: set to ``True`` if you want silent failure for missing
                       files.
        :return: ``True`` if the file was loaded successfully.

        .. versionadded:: 0.7
           `silent` parameter.
        'u'Updates the values in the config from a Python file.  This function
        behaves as if the file was imported as module with the
        :meth:`from_object` function.

        :param filename: the filename of the config.  This can either be an
                         absolute filename or a filename relative to the
                         root path.
        :param silent: set to ``True`` if you want silent failure for missing
                       files.
        :return: ``True`` if the file was loaded successfully.

        .. versionadded:: 0.7
           `silent` parameter.
        'b'Unable to load configuration file ('u'Unable to load configuration file ('b'Updates the values from the given object.  An object can be of one
        of the following two types:

        -   a string: in this case the object with that name will be imported
        -   an actual object reference: that object is used directly

        Objects are usually either modules or classes. :meth:`from_object`
        loads only the uppercase attributes of the module/class. A ``dict``
        object will not work with :meth:`from_object` because the keys of a
        ``dict`` are not attributes of the ``dict`` class.

        Example of module-based configuration::

            app.config.from_object('yourapplication.default_config')
            from yourapplication import default_config
            app.config.from_object(default_config)

        Nothing is done to the object before loading. If the object is a
        class and has ``@property`` attributes, it needs to be
        instantiated before being passed to this method.

        You should not use this function to load the actual configuration but
        rather configuration defaults.  The actual config should be loaded
        with :meth:`from_pyfile` and ideally from a location not within the
        package because the package might be installed system wide.

        See :ref:`config-dev-prod` for an example of class-based configuration
        using :meth:`from_object`.

        :param obj: an import name or object
        'u'Updates the values from the given object.  An object can be of one
        of the following two types:

        -   a string: in this case the object with that name will be imported
        -   an actual object reference: that object is used directly

        Objects are usually either modules or classes. :meth:`from_object`
        loads only the uppercase attributes of the module/class. A ``dict``
        object will not work with :meth:`from_object` because the keys of a
        ``dict`` are not attributes of the ``dict`` class.

        Example of module-based configuration::

            app.config.from_object('yourapplication.default_config')
            from yourapplication import default_config
            app.config.from_object(default_config)

        Nothing is done to the object before loading. If the object is a
        class and has ``@property`` attributes, it needs to be
        instantiated before being passed to this method.

        You should not use this function to load the actual configuration but
        rather configuration defaults.  The actual config should be loaded
        with :meth:`from_pyfile` and ideally from a location not within the
        package because the package might be installed system wide.

        See :ref:`config-dev-prod` for an example of class-based configuration
        using :meth:`from_object`.

        :param obj: an import name or object
        'b'Update the values in the config from a file that is loaded
        using the ``load`` parameter. The loaded data is passed to the
        :meth:`from_mapping` method.

        .. code-block:: python

            import json
            app.config.from_file("config.json", load=json.load)

            import tomllib
            app.config.from_file("config.toml", load=tomllib.load, text=False)

        :param filename: The path to the data file. This can be an
            absolute path or relative to the config root path.
        :param load: A callable that takes a file handle and returns a
            mapping of loaded data from the file.
        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``
            implements a ``read`` method.
        :param silent: Ignore the file if it doesn't exist.
        :param text: Open the file in text or binary mode.
        :return: ``True`` if the file was loaded successfully.

        .. versionchanged:: 2.3
            The ``text`` parameter was added.

        .. versionadded:: 2.0
        'u'Update the values in the config from a file that is loaded
        using the ``load`` parameter. The loaded data is passed to the
        :meth:`from_mapping` method.

        .. code-block:: python

            import json
            app.config.from_file("config.json", load=json.load)

            import tomllib
            app.config.from_file("config.toml", load=tomllib.load, text=False)

        :param filename: The path to the data file. This can be an
            absolute path or relative to the config root path.
        :param load: A callable that takes a file handle and returns a
            mapping of loaded data from the file.
        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``
            implements a ``read`` method.
        :param silent: Ignore the file if it doesn't exist.
        :param text: Open the file in text or binary mode.
        :return: ``True`` if the file was loaded successfully.

        .. versionchanged:: 2.3
            The ``text`` parameter was added.

        .. versionadded:: 2.0
        'b'Updates the config like :meth:`update` ignoring items with
        non-upper keys.

        :return: Always returns ``True``.

        .. versionadded:: 0.11
        'u'Updates the config like :meth:`update` ignoring items with
        non-upper keys.

        :return: Always returns ``True``.

        .. versionadded:: 0.11
        'b'Returns a dictionary containing a subset of configuration options
        that match the specified namespace/prefix. Example usage::

            app.config['IMAGE_STORE_TYPE'] = 'fs'
            app.config['IMAGE_STORE_PATH'] = '/var/app/images'
            app.config['IMAGE_STORE_BASE_URL'] = 'http://img.website.com'
            image_store_config = app.config.get_namespace('IMAGE_STORE_')

        The resulting dictionary `image_store_config` would look like::

            {
                'type': 'fs',
                'path': '/var/app/images',
                'base_url': 'http://img.website.com'
            }

        This is often useful when configuration options map directly to
        keyword arguments in functions or class constructors.

        :param namespace: a configuration namespace
        :param lowercase: a flag indicating if the keys of the resulting
                          dictionary should be lowercase
        :param trim_namespace: a flag indicating if the keys of the resulting
                          dictionary should not include the namespace

        .. versionadded:: 0.11
        'u'Returns a dictionary containing a subset of configuration options
        that match the specified namespace/prefix. Example usage::

            app.config['IMAGE_STORE_TYPE'] = 'fs'
            app.config['IMAGE_STORE_PATH'] = '/var/app/images'
            app.config['IMAGE_STORE_BASE_URL'] = 'http://img.website.com'
            image_store_config = app.config.get_namespace('IMAGE_STORE_')

        The resulting dictionary `image_store_config` would look like::

            {
                'type': 'fs',
                'path': '/var/app/images',
                'base_url': 'http://img.website.com'
            }

        This is often useful when configuration options map directly to
        keyword arguments in functions or class constructors.

        :param namespace: a configuration namespace
        :param lowercase: a flag indicating if the keys of the resulting
                          dictionary should be lowercase
        :param trim_namespace: a flag indicating if the keys of the resulting
                          dictionary should not include the namespace

        .. versionadded:: 0.11
        'u'flask.config'Configuration file parser.

A configuration file consists of sections, lead by a "[section]" header,
and followed by "name: value" entries, with continuations and such in
the style of RFC 822.

Intrinsic defaults can be specified by passing them into the
ConfigParser constructor as a dictionary.

class:

ConfigParser -- responsible for parsing a list of
                    configuration files, and managing the parsed database.

    methods:

    __init__(defaults=None, dict_type=_default_dict, allow_no_value=False,
             delimiters=('=', ':'), comment_prefixes=('#', ';'),
             inline_comment_prefixes=None, strict=True,
             empty_lines_in_values=True, default_section='DEFAULT',
             interpolation=<unset>, converters=<unset>):
        Create the parser. When `defaults' is given, it is initialized into the
        dictionary or intrinsic defaults. The keys must be strings, the values
        must be appropriate for %()s string interpolation.

        When `dict_type' is given, it will be used to create the dictionary
        objects for the list of sections, for the options within a section, and
        for the default values.

        When `delimiters' is given, it will be used as the set of substrings
        that divide keys from values.

        When `comment_prefixes' is given, it will be used as the set of
        substrings that prefix comments in empty lines. Comments can be
        indented.

        When `inline_comment_prefixes' is given, it will be used as the set of
        substrings that prefix comments in non-empty lines.

        When `strict` is True, the parser won't allow for any section or option
        duplicates while reading from a single source (file, string or
        dictionary). Default is True.

        When `empty_lines_in_values' is False (default: True), each empty line
        marks the end of an option. Otherwise, internal empty lines of
        a multiline option are kept as part of the value.

        When `allow_no_value' is True (default: False), options without
        values are accepted; the value presented for these is None.

        When `default_section' is given, the name of the special section is
        named accordingly. By default it is called ``"DEFAULT"`` but this can
        be customized to point to any other valid section name. Its current
        value can be retrieved using the ``parser_instance.default_section``
        attribute and may be modified at runtime.

        When `interpolation` is given, it should be an Interpolation subclass
        instance. It will be used as the handler for option value
        pre-processing when using getters. RawConfigParser objects don't do
        any sort of interpolation, whereas ConfigParser uses an instance of
        BasicInterpolation. The library also provides a ``zc.buildbot``
        inspired ExtendedInterpolation implementation.

        When `converters` is given, it should be a dictionary where each key
        represents the name of a type converter and each value is a callable
        implementing the conversion from string to the desired datatype. Every
        converter gets its corresponding get*() method on the parser object and
        section proxies.

    sections()
        Return all the configuration section names, sans DEFAULT.

    has_section(section)
        Return whether the given section exists.

    has_option(section, option)
        Return whether the given option exists in the given section.

    options(section)
        Return list of configuration options for the named section.

    read(filenames, encoding=None)
        Read and parse the iterable of named configuration files, given by
        name.  A single filename is also allowed.  Non-existing files
        are ignored.  Return list of successfully read files.

    read_file(f, filename=None)
        Read and parse one configuration file, given as a file object.
        The filename defaults to f.name; it is only used in error
        messages (if f has no `name' attribute, the string `<???>' is used).

    read_string(string)
        Read configuration from a given string.

    read_dict(dictionary)
        Read configuration from a dictionary. Keys are section names,
        values are dictionaries with keys and values that should be present
        in the section. If the used dictionary type preserves order, sections
        and their keys will be added in order. Values are automatically
        converted to strings.

    get(section, option, raw=False, vars=None, fallback=_UNSET)
        Return a string value for the named option.  All % interpolations are
        expanded in the return values, based on the defaults passed into the
        constructor and the DEFAULT section.  Additional substitutions may be
        provided using the `vars' argument, which must be a dictionary whose
        contents override any pre-existing defaults. If `option' is a key in
        `vars', the value from `vars' is used.

    getint(section, options, raw=False, vars=None, fallback=_UNSET)
        Like get(), but convert value to an integer.

    getfloat(section, options, raw=False, vars=None, fallback=_UNSET)
        Like get(), but convert value to a float.

    getboolean(section, options, raw=False, vars=None, fallback=_UNSET)
        Like get(), but convert value to a boolean (currently case
        insensitively defined as 0, false, no, off for False, and 1, true,
        yes, on for True).  Returns False or True.

    items(section=_UNSET, raw=False, vars=None)
        If section is given, return a list of tuples with (name, value) for
        each option in the section. Otherwise, return a list of tuples with
        (section_name, section_proxy) for each section, including DEFAULTSECT.

    remove_section(section)
        Remove the given file section and all its options.

    remove_option(section, option)
        Remove the given option from the given section.

    set(section, option, value)
        Set the given option.

    write(fp, space_around_delimiters=True)
        Write the configuration state in .ini format. If
        `space_around_delimiters' is True (the default), delimiters
        between keys and values are surrounded by spaces.
_ChainMapNoSectionErrorDuplicateOptionErrorDuplicateSectionErrorNoOptionErrorInterpolationErrorInterpolationDepthErrorInterpolationMissingOptionErrorInterpolationSyntaxErrorParsingErrorMissingSectionHeaderErrorSafeConfigParserRawConfigParserInterpolationBasicInterpolationExtendedInterpolationLegacyInterpolationSectionProxyConverterMappingDEFAULTSECTMAX_INTERPOLATION_DEPTH_default_dictBase class for ConfigParser exceptions.Raised when no section matches a requested option.No section: %rRaised when a section is repeated in an input source.

    Possible repetitions that raise this exception are: multiple creation
    using the API or in strict parsers when a section is found more than once
    in a single input file, string or dictionary.
     already existsWhile reading from  [line {0:2d}]: section Section Raised by strict parsers when an option is repeated in an input source.

    Current implementation raises this exception only when an option is found
    more than once in a single file, string or dictionary.
     in section : option Option A requested option was not found.No option %r in section: %rBase class for interpolation-related exceptions.A string substitution required a setting which was not available.rawvalBad value substitution: option {!r} in section {!r} contains an interpolation key {!r} which is not a valid option name. Raw value: {!r}"Bad value substitution: option {!r} in section {!r} contains ""an interpolation key {!r} which is not a valid option name. ""Raw value: {!r}"Raised when the source text contains invalid syntax.

    Current implementation raises this exception when the source text into
    which substitutions are made does not conform to the required syntax.
    Raised when substitutions are nested too deeply.Recursion limit exceeded in value substitution: option {!r} in section {!r} contains an interpolation key which cannot be substituted in {} steps. Raw value: {!r}"Recursion limit exceeded in value substitution: option {!r} ""in section {!r} contains an interpolation key which ""cannot be substituted in {} steps. Raw value: {!r}"Raised when a configuration file does not follow legal syntax.Cannot specify both `filename' and `source'. Use `source'."Cannot specify both `filename' and `source'. ""Use `source'."Required argument `source' not given.Source contains parsing errors: %rDeprecated, use `source'.The 'filename' attribute will be removed in future versions.  Use 'source' instead."The 'filename' attribute will be removed in future versions.  ""Use 'source' instead."Deprecated, user `source'.
	[line %2d]: %sRaised when a key-value pair is found before any section header.File contains no section headers.
file: %r, line: %d
%r_UNSETDummy interpolation that passes the value through with no changes.before_getbefore_setbefore_readbefore_writeInterpolation as implemented in the classic ConfigParser.

    The option values can contain format strings which refer to other values in
    the same section, or values in the special default section.

    For example:

        something: %(dir)s/whatever

    would resolve the "%(dir)s" to the value of dir.  All reference
    expansions are done late, on demand. If a user needs to use a bare % in
    a configuration file, she can escape it by writing %%. Other % usage
    is considered a user error and raises `InterpolationSyntaxError'.%\(([^)]+)\)s_KEYCRE_interpolate_some%%tmp_valueinvalid interpolation syntax in %r at position %d"invalid interpolation syntax in %r at ""position %d"accumbad interpolation variable reference %roptionxform'%%' must be followed by '%%' or '(', found: %r"'%%' must be followed by '%%' or '(', ""found: %r"Advanced variant of interpolation, supports the syntax used by
    `zc.buildout'. Enables interpolation between sections.\$\{([^}]+)\}$$sectMore than one ':' found: %r'$' must be followed by '$' or '{', found: %r"'$' must be followed by '$' or '{', "Deprecated interpolation used in old versions of ConfigParser.
    Use BasicInterpolation or ExtendedInterpolation instead.%\(([^)]*)\)s|.%(_interpolation_replace%%(%s)sConfigParser that does not do interpolation.
        \[                                 # [
        (?P<header>[^]]+)                  # very permissive!
        \]                                 # ]
        _SECT_TMPL
        (?P<option>.*?)                    # very permissive!
        \s*(?P<vi>{delim})\s*              # any number of space/tab,
                                           # followed by any of the
                                           # allowed delimiters,
                                           # followed by any space/tab
        (?P<value>.*)$                     # everything up to eol
        _OPT_TMPL
        (?P<option>.*?)                    # very permissive!
        \s*(?:                             # any number of space/tab,
        (?P<vi>{delim})\s*                 # optionally followed by
                                           # any of the allowed
                                           # delimiters, followed by any
                                           # space/tab
        (?P<value>.*))?$                   # everything up to eol
        _OPT_NV_TMPL_DEFAULT_INTERPOLATIONSECTCRE=|:delimOPTCREOPTCRE_NV\SNONSPACECREnofalseBOOLEAN_STATESdict_typeallow_no_valuedelimiterscomment_prefixesinline_comment_prefixesempty_lines_in_valuesdefault_sectioninterpolation_sections_converters_proxies_delimiters_optcre_comment_prefixes_inline_comment_prefixes_strict_allow_no_value_empty_lines_in_values_interpolation_read_defaultsReturn a list of section names, excluding [DEFAULT]add_sectionCreate a new section in the configuration.

        Raise DuplicateSectionError if a section by the specified name
        already exists. Raise ValueError if name is DEFAULT.
        Invalid section name: %rhas_sectionIndicate whether the named section is present in the configuration.

        The DEFAULT section is not acknowledged.
        Return a list of option names for the given section name.filenamesRead and parse a filename or an iterable of filenames.

        Files that cannot be opened are silently ignored; this is
        designed so that you can specify an iterable of potential
        configuration file locations (e.g. current directory, user's
        home directory, systemwide directory), and all existing
        configuration files in the iterable will be read.  A single
        filename may also be given.

        Return list of successfully read files.
        read_ok_readread_fileLike read() but the argument must be a file-like object.

        The `f' argument must be iterable, returning one line at a time.
        Optional second argument is the `source' specifying the name of the
        file being read. If not given, it is taken from f.name. If `f' has no
        `name' attribute, `<???>' is used.
        <???>read_stringRead configuration from a given string.sfileread_dict<dict>Read configuration from a dictionary.

        Keys are section names, values are dictionaries with keys and values
        that should be present in the section. If the used dictionary type
        preserves order, sections and their keys will be added in order.

        All types held in the dictionary are converted to strings during
        reading, including section names, option names and keys.

        Optional second argument is the `source' specifying the name of the
        dictionary being read.
        elements_addedreadfpDeprecated, use read_file instead.This method will be removed in future versions.  Use 'parser.read_file()' instead."This method will be removed in future versions.  ""Use 'parser.read_file()' instead."Get an option value for a given section.

        If `vars' is provided, it must be a dictionary. The option is looked up
        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.
        If the key is not found and `fallback' is provided, it is used as
        a fallback value. `None' can be provided as a `fallback' value.

        If interpolation is enabled and the optional argument `raw' is False,
        all interpolations are expanded in the return values.

        Arguments `raw', `vars', and `fallback' are keyword only.

        The section DEFAULT is special.
        _unify_values_get_get_convgetfloat_convert_to_booleanReturn a list of (name, value) tuples for each option in a section.

        All % interpolations are expanded in the return values, based on the
        defaults passed into the constructor, unless the optional argument
        `raw' is true.  Additional substitutions may be provided using the
        `vars' argument, which must be a dictionary whose contents overrides
        any pre-existing defaults.

        The section DEFAULT is special.
        orig_keysvalue_getterRemove a section from the parser and return it as
        a (section_name, section_proxy) tuple. If no section is present, raise
        KeyError.

        The section DEFAULT is never returned because it cannot be removed.
        optionstrhas_optionCheck for the existence of a given option in a given section.
        If the specified `section' is None or an empty string, DEFAULT is
        assumed. If the specified `section' does not exist, returns False.Set an option.sectdictspace_around_delimitersWrite an .ini-format representation of the configuration state.

        If `space_around_delimiters' is True (the default), delimiters
        between keys and values are surrounded by spaces.

        Please note that comments in the original configuration file are not
        preserved when writing the configuration back.
         {} _write_sectionsection_namesection_itemsWrite a single section to the specified `fp'.[{}]
{}{}
remove_optionRemove an option.existedremove_sectionRemove a file section.Cannot remove the default section.fpnameParse a sectioned configuration file.

        Each section in a configuration file contains a header, indicated by
        a name in square brackets (`[]'), plus key/value options, indicated by
        `name' and `value' delimited with a specific substring (`=' or `:' by
        default).

        Values can span multiple lines, as long as they are indented deeper
        than the first line of the value. Depending on the parser's mode, blank
        lines may be treated as parts of multiline values or ignored.

        Configuration files may include comments, prefixed by specific
        characters (`#' and `;' by default). Comments may appear on their own
        in an otherwise empty line or may be entered in lines holding values or
        section names. Please note that comments get stripped off when reading configuration files.
        cursectsectnameoptnameindent_levelcomment_startinline_prefixesnext_prefixesfirst_nonspacecur_indent_levelmooptval_handle_error_join_multiline_valuesall_sectionsRead the defaults passed in the initializer.
        Note: values can be non-string.Create a sequence of lookups with 'vars' taking priority over
        the 'section' which takes priority over the DEFAULTSECT.

        sectiondictvardictReturn a boolean value translating from other types if necessary.
        Not a boolean: %s_validate_value_typesRaises a TypeError for non-string values.

        The only legal non-string value if we allow valueless
        options is None, so we need to check if the value is a
        string if:
        - we do not allow valueless options, or
        - we allow valueless options but the value is not None

        For compatibility reasons this method is not used in classic set()
        for RawConfigParsers. It is invoked in every case for mapping protocol
        access and in ConfigParser.set().
        section names must be stringsoption keys must be stringsoption values must be stringsConfigParser implementing interpolation.Set an option.  Extends RawConfigParser.set by validating type and
        interpolation syntax on the value.Create a new section in the configuration.  Extends
        RawConfigParser.add_section by validating if the section name is
        a string.Reads the defaults passed in the initializer, implicitly converting
        values to strings like the rest of the API.

        Does not perform interpolation for backwards compatibility.
        hold_interpolationConfigParser alias for backwards compatibility purposes.The SafeConfigParser class has been renamed to ConfigParser in Python 3.2. This alias will be removed in future versions. Use ConfigParser directly instead."The SafeConfigParser class has been renamed to ConfigParser ""in Python 3.2. This alias will be removed in future versions."" Use ConfigParser directly instead."A proxy for a single section from a parser.Creates a view on a section of the specified `name` in `parser`._impl<Section: {}>Get an option value.

        Unless `fallback` is provided, `None` will be returned if the option
        is not found.

        Enables reuse of get*() methods between the parser and section proxies.

    If a parser class implements a getter directly, the value for the given
    key will be ``None``. The presence of the converter name here enables
    section proxies to find and use the implementation on the parser class.
    ^get(?P<name>.+)$GETTERCREIncompatible key: {} (type: {})'Incompatible key: {} (type: {})'Incompatible key: cannot use "" as a name# exception classes# Exactly one of `source'/`filename' arguments has to be given.# `filename' kept for compatibility.# Used in parser getters to indicate the default behaviour when a specific# option is not found it to raise an exception. Created to enable `None' as# a valid fallback value.# escaped percent signs# valid syntax# p is no longer used# escaped dollar signs# Loop through this until it's done# Regular expressions for parsing section headers and options# Interpolation algorithm to be used if the user does not specify another# Compiled regular expression for matching sections# Compiled regular expression for matching options with typical separators# Compiled regular expression for matching options with optional values# delimited using typical separators# Compiled regular expression for matching leading whitespace in a line# Possible boolean values in the configuration.# self._sections will never have [DEFAULT] in it# getint, getfloat and getboolean provided directly for backwards compat# Update with the entry specific variables# To conform with the mapping protocol, overwrites existing values in# the section.# XXX this is not atomic if read_dict fails at any point. Then again,# no update method in configparser is atomic in this implementation.# the default section# XXX does it break when underlying container state changed?# None, or a dictionary# None, or an exception# strip inline comments# strip full line comments# add empty line to the value, but only if there was no# comment on the line# newlines added at join# empty line marks end of value# continuation line?# a section header or option header?# is it a section header?# So sections can't start with a continuation line# no section header in the file?# an option line?# This check is fine because the OPTCRE cannot# match if it would set optval to None# valueless option handling# a non-fatal parsing error occurred. set up the# exception but keep going. the exception will be# raised at the end of the file and will contain a# list of all bogus lines# if any parsing errors occurred, raise an exception# The parser object of the proxy is read-only.# The name of the section on a proxy is read-only.# If `_impl` is provided, it should be a getter method on the parser# object that provides the desired type conversion.# See class docstring.# don't raise since the entry was present in _data, silently# clean upb'Configuration file parser.

A configuration file consists of sections, lead by a "[section]" header,
and followed by "name: value" entries, with continuations and such in
the style of RFC 822.

Intrinsic defaults can be specified by passing them into the
ConfigParser constructor as a dictionary.

class:

ConfigParser -- responsible for parsing a list of
                    configuration files, and managing the parsed database.

    methods:

    __init__(defaults=None, dict_type=_default_dict, allow_no_value=False,
             delimiters=('=', ':'), comment_prefixes=('#', ';'),
             inline_comment_prefixes=None, strict=True,
             empty_lines_in_values=True, default_section='DEFAULT',
             interpolation=<unset>, converters=<unset>):
        Create the parser. When `defaults' is given, it is initialized into the
        dictionary or intrinsic defaults. The keys must be strings, the values
        must be appropriate for %()s string interpolation.

        When `dict_type' is given, it will be used to create the dictionary
        objects for the list of sections, for the options within a section, and
        for the default values.

        When `delimiters' is given, it will be used as the set of substrings
        that divide keys from values.

        When `comment_prefixes' is given, it will be used as the set of
        substrings that prefix comments in empty lines. Comments can be
        indented.

        When `inline_comment_prefixes' is given, it will be used as the set of
        substrings that prefix comments in non-empty lines.

        When `strict` is True, the parser won't allow for any section or option
        duplicates while reading from a single source (file, string or
        dictionary). Default is True.

        When `empty_lines_in_values' is False (default: True), each empty line
        marks the end of an option. Otherwise, internal empty lines of
        a multiline option are kept as part of the value.

        When `allow_no_value' is True (default: False), options without
        values are accepted; the value presented for these is None.

        When `default_section' is given, the name of the special section is
        named accordingly. By default it is called ``"DEFAULT"`` but this can
        be customized to point to any other valid section name. Its current
        value can be retrieved using the ``parser_instance.default_section``
        attribute and may be modified at runtime.

        When `interpolation` is given, it should be an Interpolation subclass
        instance. It will be used as the handler for option value
        pre-processing when using getters. RawConfigParser objects don't do
        any sort of interpolation, whereas ConfigParser uses an instance of
        BasicInterpolation. The library also provides a ``zc.buildbot``
        inspired ExtendedInterpolation implementation.

        When `converters` is given, it should be a dictionary where each key
        represents the name of a type converter and each value is a callable
        implementing the conversion from string to the desired datatype. Every
        converter gets its corresponding get*() method on the parser object and
        section proxies.

    sections()
        Return all the configuration section names, sans DEFAULT.

    has_section(section)
        Return whether the given section exists.

    has_option(section, option)
        Return whether the given option exists in the given section.

    options(section)
        Return list of configuration options for the named section.

    read(filenames, encoding=None)
        Read and parse the iterable of named configuration files, given by
        name.  A single filename is also allowed.  Non-existing files
        are ignored.  Return list of successfully read files.

    read_file(f, filename=None)
        Read and parse one configuration file, given as a file object.
        The filename defaults to f.name; it is only used in error
        messages (if f has no `name' attribute, the string `<???>' is used).

    read_string(string)
        Read configuration from a given string.

    read_dict(dictionary)
        Read configuration from a dictionary. Keys are section names,
        values are dictionaries with keys and values that should be present
        in the section. If the used dictionary type preserves order, sections
        and their keys will be added in order. Values are automatically
        converted to strings.

    get(section, option, raw=False, vars=None, fallback=_UNSET)
        Return a string value for the named option.  All % interpolations are
        expanded in the return values, based on the defaults passed into the
        constructor and the DEFAULT section.  Additional substitutions may be
        provided using the `vars' argument, which must be a dictionary whose
        contents override any pre-existing defaults. If `option' is a key in
        `vars', the value from `vars' is used.

    getint(section, options, raw=False, vars=None, fallback=_UNSET)
        Like get(), but convert value to an integer.

    getfloat(section, options, raw=False, vars=None, fallback=_UNSET)
        Like get(), but convert value to a float.

    getboolean(section, options, raw=False, vars=None, fallback=_UNSET)
        Like get(), but convert value to a boolean (currently case
        insensitively defined as 0, false, no, off for False, and 1, true,
        yes, on for True).  Returns False or True.

    items(section=_UNSET, raw=False, vars=None)
        If section is given, return a list of tuples with (name, value) for
        each option in the section. Otherwise, return a list of tuples with
        (section_name, section_proxy) for each section, including DEFAULTSECT.

    remove_section(section)
        Remove the given file section and all its options.

    remove_option(section, option)
        Remove the given option from the given section.

    set(section, option, value)
        Set the given option.

    write(fp, space_around_delimiters=True)
        Write the configuration state in .ini format. If
        `space_around_delimiters' is True (the default), delimiters
        between keys and values are surrounded by spaces.
'u'Configuration file parser.

A configuration file consists of sections, lead by a "[section]" header,
and followed by "name: value" entries, with continuations and such in
the style of RFC 822.

Intrinsic defaults can be specified by passing them into the
ConfigParser constructor as a dictionary.

class:

ConfigParser -- responsible for parsing a list of
                    configuration files, and managing the parsed database.

    methods:

    __init__(defaults=None, dict_type=_default_dict, allow_no_value=False,
             delimiters=('=', ':'), comment_prefixes=('#', ';'),
             inline_comment_prefixes=None, strict=True,
             empty_lines_in_values=True, default_section='DEFAULT',
             interpolation=<unset>, converters=<unset>):
        Create the parser. When `defaults' is given, it is initialized into the
        dictionary or intrinsic defaults. The keys must be strings, the values
        must be appropriate for %()s string interpolation.

        When `dict_type' is given, it will be used to create the dictionary
        objects for the list of sections, for the options within a section, and
        for the default values.

        When `delimiters' is given, it will be used as the set of substrings
        that divide keys from values.

        When `comment_prefixes' is given, it will be used as the set of
        substrings that prefix comments in empty lines. Comments can be
        indented.

        When `inline_comment_prefixes' is given, it will be used as the set of
        substrings that prefix comments in non-empty lines.

        When `strict` is True, the parser won't allow for any section or option
        duplicates while reading from a single source (file, string or
        dictionary). Default is True.

        When `empty_lines_in_values' is False (default: True), each empty line
        marks the end of an option. Otherwise, internal empty lines of
        a multiline option are kept as part of the value.

        When `allow_no_value' is True (default: False), options without
        values are accepted; the value presented for these is None.

        When `default_section' is given, the name of the special section is
        named accordingly. By default it is called ``"DEFAULT"`` but this can
        be customized to point to any other valid section name. Its current
        value can be retrieved using the ``parser_instance.default_section``
        attribute and may be modified at runtime.

        When `interpolation` is given, it should be an Interpolation subclass
        instance. It will be used as the handler for option value
        pre-processing when using getters. RawConfigParser objects don't do
        any sort of interpolation, whereas ConfigParser uses an instance of
        BasicInterpolation. The library also provides a ``zc.buildbot``
        inspired ExtendedInterpolation implementation.

        When `converters` is given, it should be a dictionary where each key
        represents the name of a type converter and each value is a callable
        implementing the conversion from string to the desired datatype. Every
        converter gets its corresponding get*() method on the parser object and
        section proxies.

    sections()
        Return all the configuration section names, sans DEFAULT.

    has_section(section)
        Return whether the given section exists.

    has_option(section, option)
        Return whether the given option exists in the given section.

    options(section)
        Return list of configuration options for the named section.

    read(filenames, encoding=None)
        Read and parse the iterable of named configuration files, given by
        name.  A single filename is also allowed.  Non-existing files
        are ignored.  Return list of successfully read files.

    read_file(f, filename=None)
        Read and parse one configuration file, given as a file object.
        The filename defaults to f.name; it is only used in error
        messages (if f has no `name' attribute, the string `<???>' is used).

    read_string(string)
        Read configuration from a given string.

    read_dict(dictionary)
        Read configuration from a dictionary. Keys are section names,
        values are dictionaries with keys and values that should be present
        in the section. If the used dictionary type preserves order, sections
        and their keys will be added in order. Values are automatically
        converted to strings.

    get(section, option, raw=False, vars=None, fallback=_UNSET)
        Return a string value for the named option.  All % interpolations are
        expanded in the return values, based on the defaults passed into the
        constructor and the DEFAULT section.  Additional substitutions may be
        provided using the `vars' argument, which must be a dictionary whose
        contents override any pre-existing defaults. If `option' is a key in
        `vars', the value from `vars' is used.

    getint(section, options, raw=False, vars=None, fallback=_UNSET)
        Like get(), but convert value to an integer.

    getfloat(section, options, raw=False, vars=None, fallback=_UNSET)
        Like get(), but convert value to a float.

    getboolean(section, options, raw=False, vars=None, fallback=_UNSET)
        Like get(), but convert value to a boolean (currently case
        insensitively defined as 0, false, no, off for False, and 1, true,
        yes, on for True).  Returns False or True.

    items(section=_UNSET, raw=False, vars=None)
        If section is given, return a list of tuples with (name, value) for
        each option in the section. Otherwise, return a list of tuples with
        (section_name, section_proxy) for each section, including DEFAULTSECT.

    remove_section(section)
        Remove the given file section and all its options.

    remove_option(section, option)
        Remove the given option from the given section.

    set(section, option, value)
        Set the given option.

    write(fp, space_around_delimiters=True)
        Write the configuration state in .ini format. If
        `space_around_delimiters' is True (the default), delimiters
        between keys and values are surrounded by spaces.
'b'NoSectionError'u'NoSectionError'b'DuplicateOptionError'u'DuplicateOptionError'b'DuplicateSectionError'u'DuplicateSectionError'b'NoOptionError'u'NoOptionError'b'InterpolationError'u'InterpolationError'b'InterpolationDepthError'u'InterpolationDepthError'b'InterpolationMissingOptionError'u'InterpolationMissingOptionError'b'InterpolationSyntaxError'u'InterpolationSyntaxError'b'ParsingError'u'ParsingError'b'MissingSectionHeaderError'u'MissingSectionHeaderError'b'SafeConfigParser'u'SafeConfigParser'b'RawConfigParser'u'RawConfigParser'b'Interpolation'u'Interpolation'b'BasicInterpolation'u'BasicInterpolation'b'ExtendedInterpolation'u'ExtendedInterpolation'b'LegacyInterpolation'u'LegacyInterpolation'b'SectionProxy'u'SectionProxy'b'ConverterMapping'u'ConverterMapping'b'DEFAULTSECT'u'DEFAULTSECT'b'MAX_INTERPOLATION_DEPTH'u'MAX_INTERPOLATION_DEPTH'b'DEFAULT'u'DEFAULT'b'Base class for ConfigParser exceptions.'u'Base class for ConfigParser exceptions.'b'Raised when no section matches a requested option.'u'Raised when no section matches a requested option.'b'No section: %r'u'No section: %r'b'Raised when a section is repeated in an input source.

    Possible repetitions that raise this exception are: multiple creation
    using the API or in strict parsers when a section is found more than once
    in a single input file, string or dictionary.
    'u'Raised when a section is repeated in an input source.

    Possible repetitions that raise this exception are: multiple creation
    using the API or in strict parsers when a section is found more than once
    in a single input file, string or dictionary.
    'b' already exists'u' already exists'b'While reading from 'u'While reading from 'b' [line {0:2d}]'u' [line {0:2d}]'b': section 'u': section 'b'Section 'u'Section 'b'Raised by strict parsers when an option is repeated in an input source.

    Current implementation raises this exception only when an option is found
    more than once in a single file, string or dictionary.
    'u'Raised by strict parsers when an option is repeated in an input source.

    Current implementation raises this exception only when an option is found
    more than once in a single file, string or dictionary.
    'b' in section 'u' in section 'b': option 'u': option 'b'Option 'u'Option 'b'A requested option was not found.'u'A requested option was not found.'b'No option %r in section: %r'u'No option %r in section: %r'b'Base class for interpolation-related exceptions.'u'Base class for interpolation-related exceptions.'b'A string substitution required a setting which was not available.'u'A string substitution required a setting which was not available.'b'Bad value substitution: option {!r} in section {!r} contains an interpolation key {!r} which is not a valid option name. Raw value: {!r}'u'Bad value substitution: option {!r} in section {!r} contains an interpolation key {!r} which is not a valid option name. Raw value: {!r}'b'Raised when the source text contains invalid syntax.

    Current implementation raises this exception when the source text into
    which substitutions are made does not conform to the required syntax.
    'u'Raised when the source text contains invalid syntax.

    Current implementation raises this exception when the source text into
    which substitutions are made does not conform to the required syntax.
    'b'Raised when substitutions are nested too deeply.'u'Raised when substitutions are nested too deeply.'b'Recursion limit exceeded in value substitution: option {!r} in section {!r} contains an interpolation key which cannot be substituted in {} steps. Raw value: {!r}'u'Recursion limit exceeded in value substitution: option {!r} in section {!r} contains an interpolation key which cannot be substituted in {} steps. Raw value: {!r}'b'Raised when a configuration file does not follow legal syntax.'u'Raised when a configuration file does not follow legal syntax.'b'Cannot specify both `filename' and `source'. Use `source'.'u'Cannot specify both `filename' and `source'. Use `source'.'b'Required argument `source' not given.'u'Required argument `source' not given.'b'Source contains parsing errors: %r'u'Source contains parsing errors: %r'b'Deprecated, use `source'.'u'Deprecated, use `source'.'b'The 'filename' attribute will be removed in future versions.  Use 'source' instead.'u'The 'filename' attribute will be removed in future versions.  Use 'source' instead.'b'Deprecated, user `source'.'u'Deprecated, user `source'.'b'
	[line %2d]: %s'u'
	[line %2d]: %s'b'Raised when a key-value pair is found before any section header.'u'Raised when a key-value pair is found before any section header.'b'File contains no section headers.
file: %r, line: %d
%r'u'File contains no section headers.
file: %r, line: %d
%r'b'Dummy interpolation that passes the value through with no changes.'u'Dummy interpolation that passes the value through with no changes.'b'Interpolation as implemented in the classic ConfigParser.

    The option values can contain format strings which refer to other values in
    the same section, or values in the special default section.

    For example:

        something: %(dir)s/whatever

    would resolve the "%(dir)s" to the value of dir.  All reference
    expansions are done late, on demand. If a user needs to use a bare % in
    a configuration file, she can escape it by writing %%. Other % usage
    is considered a user error and raises `InterpolationSyntaxError'.'u'Interpolation as implemented in the classic ConfigParser.

    The option values can contain format strings which refer to other values in
    the same section, or values in the special default section.

    For example:

        something: %(dir)s/whatever

    would resolve the "%(dir)s" to the value of dir.  All reference
    expansions are done late, on demand. If a user needs to use a bare % in
    a configuration file, she can escape it by writing %%. Other % usage
    is considered a user error and raises `InterpolationSyntaxError'.'b'%\(([^)]+)\)s'u'%\(([^)]+)\)s'b'%%'u'%%'b'invalid interpolation syntax in %r at position %d'u'invalid interpolation syntax in %r at position %d'b'bad interpolation variable reference %r'u'bad interpolation variable reference %r'b''%%' must be followed by '%%' or '(', found: %r'u''%%' must be followed by '%%' or '(', found: %r'b'Advanced variant of interpolation, supports the syntax used by
    `zc.buildout'. Enables interpolation between sections.'u'Advanced variant of interpolation, supports the syntax used by
    `zc.buildout'. Enables interpolation between sections.'b'\$\{([^}]+)\}'u'\$\{([^}]+)\}'b'$$'u'$$'b'More than one ':' found: %r'u'More than one ':' found: %r'b''$' must be followed by '$' or '{', found: %r'u''$' must be followed by '$' or '{', found: %r'b'Deprecated interpolation used in old versions of ConfigParser.
    Use BasicInterpolation or ExtendedInterpolation instead.'u'Deprecated interpolation used in old versions of ConfigParser.
    Use BasicInterpolation or ExtendedInterpolation instead.'b'%\(([^)]*)\)s|.'u'%\(([^)]*)\)s|.'b'%('u'%('b'%%(%s)s'u'%%(%s)s'b'ConfigParser that does not do interpolation.'u'ConfigParser that does not do interpolation.'b'
        \[                                 # [
        (?P<header>[^]]+)                  # very permissive!
        \]                                 # ]
        'u'
        \[                                 # [
        (?P<header>[^]]+)                  # very permissive!
        \]                                 # ]
        'b'
        (?P<option>.*?)                    # very permissive!
        \s*(?P<vi>{delim})\s*              # any number of space/tab,
                                           # followed by any of the
                                           # allowed delimiters,
                                           # followed by any space/tab
        (?P<value>.*)$                     # everything up to eol
        'u'
        (?P<option>.*?)                    # very permissive!
        \s*(?P<vi>{delim})\s*              # any number of space/tab,
                                           # followed by any of the
                                           # allowed delimiters,
                                           # followed by any space/tab
        (?P<value>.*)$                     # everything up to eol
        'b'
        (?P<option>.*?)                    # very permissive!
        \s*(?:                             # any number of space/tab,
        (?P<vi>{delim})\s*                 # optionally followed by
                                           # any of the allowed
                                           # delimiters, followed by any
                                           # space/tab
        (?P<value>.*))?$                   # everything up to eol
        'u'
        (?P<option>.*?)                    # very permissive!
        \s*(?:                             # any number of space/tab,
        (?P<vi>{delim})\s*                 # optionally followed by
                                           # any of the allowed
                                           # delimiters, followed by any
                                           # space/tab
        (?P<value>.*))?$                   # everything up to eol
        'b'=|:'u'=|:'b'\S'u'\S'b'no'u'no'b'false'u'false'b'Return a list of section names, excluding [DEFAULT]'u'Return a list of section names, excluding [DEFAULT]'b'Create a new section in the configuration.

        Raise DuplicateSectionError if a section by the specified name
        already exists. Raise ValueError if name is DEFAULT.
        'u'Create a new section in the configuration.

        Raise DuplicateSectionError if a section by the specified name
        already exists. Raise ValueError if name is DEFAULT.
        'b'Invalid section name: %r'u'Invalid section name: %r'b'Indicate whether the named section is present in the configuration.

        The DEFAULT section is not acknowledged.
        'u'Indicate whether the named section is present in the configuration.

        The DEFAULT section is not acknowledged.
        'b'Return a list of option names for the given section name.'u'Return a list of option names for the given section name.'b'Read and parse a filename or an iterable of filenames.

        Files that cannot be opened are silently ignored; this is
        designed so that you can specify an iterable of potential
        configuration file locations (e.g. current directory, user's
        home directory, systemwide directory), and all existing
        configuration files in the iterable will be read.  A single
        filename may also be given.

        Return list of successfully read files.
        'u'Read and parse a filename or an iterable of filenames.

        Files that cannot be opened are silently ignored; this is
        designed so that you can specify an iterable of potential
        configuration file locations (e.g. current directory, user's
        home directory, systemwide directory), and all existing
        configuration files in the iterable will be read.  A single
        filename may also be given.

        Return list of successfully read files.
        'b'Like read() but the argument must be a file-like object.

        The `f' argument must be iterable, returning one line at a time.
        Optional second argument is the `source' specifying the name of the
        file being read. If not given, it is taken from f.name. If `f' has no
        `name' attribute, `<???>' is used.
        'u'Like read() but the argument must be a file-like object.

        The `f' argument must be iterable, returning one line at a time.
        Optional second argument is the `source' specifying the name of the
        file being read. If not given, it is taken from f.name. If `f' has no
        `name' attribute, `<???>' is used.
        'b'<???>'u'<???>'b'Read configuration from a given string.'u'Read configuration from a given string.'b'<dict>'u'<dict>'b'Read configuration from a dictionary.

        Keys are section names, values are dictionaries with keys and values
        that should be present in the section. If the used dictionary type
        preserves order, sections and their keys will be added in order.

        All types held in the dictionary are converted to strings during
        reading, including section names, option names and keys.

        Optional second argument is the `source' specifying the name of the
        dictionary being read.
        'u'Read configuration from a dictionary.

        Keys are section names, values are dictionaries with keys and values
        that should be present in the section. If the used dictionary type
        preserves order, sections and their keys will be added in order.

        All types held in the dictionary are converted to strings during
        reading, including section names, option names and keys.

        Optional second argument is the `source' specifying the name of the
        dictionary being read.
        'b'Deprecated, use read_file instead.'u'Deprecated, use read_file instead.'b'This method will be removed in future versions.  Use 'parser.read_file()' instead.'u'This method will be removed in future versions.  Use 'parser.read_file()' instead.'b'Get an option value for a given section.

        If `vars' is provided, it must be a dictionary. The option is looked up
        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.
        If the key is not found and `fallback' is provided, it is used as
        a fallback value. `None' can be provided as a `fallback' value.

        If interpolation is enabled and the optional argument `raw' is False,
        all interpolations are expanded in the return values.

        Arguments `raw', `vars', and `fallback' are keyword only.

        The section DEFAULT is special.
        'u'Get an option value for a given section.

        If `vars' is provided, it must be a dictionary. The option is looked up
        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.
        If the key is not found and `fallback' is provided, it is used as
        a fallback value. `None' can be provided as a `fallback' value.

        If interpolation is enabled and the optional argument `raw' is False,
        all interpolations are expanded in the return values.

        Arguments `raw', `vars', and `fallback' are keyword only.

        The section DEFAULT is special.
        'b'Return a list of (name, value) tuples for each option in a section.

        All % interpolations are expanded in the return values, based on the
        defaults passed into the constructor, unless the optional argument
        `raw' is true.  Additional substitutions may be provided using the
        `vars' argument, which must be a dictionary whose contents overrides
        any pre-existing defaults.

        The section DEFAULT is special.
        'u'Return a list of (name, value) tuples for each option in a section.

        All % interpolations are expanded in the return values, based on the
        defaults passed into the constructor, unless the optional argument
        `raw' is true.  Additional substitutions may be provided using the
        `vars' argument, which must be a dictionary whose contents overrides
        any pre-existing defaults.

        The section DEFAULT is special.
        'b'Remove a section from the parser and return it as
        a (section_name, section_proxy) tuple. If no section is present, raise
        KeyError.

        The section DEFAULT is never returned because it cannot be removed.
        'u'Remove a section from the parser and return it as
        a (section_name, section_proxy) tuple. If no section is present, raise
        KeyError.

        The section DEFAULT is never returned because it cannot be removed.
        'b'Check for the existence of a given option in a given section.
        If the specified `section' is None or an empty string, DEFAULT is
        assumed. If the specified `section' does not exist, returns False.'u'Check for the existence of a given option in a given section.
        If the specified `section' is None or an empty string, DEFAULT is
        assumed. If the specified `section' does not exist, returns False.'b'Set an option.'u'Set an option.'b'Write an .ini-format representation of the configuration state.

        If `space_around_delimiters' is True (the default), delimiters
        between keys and values are surrounded by spaces.

        Please note that comments in the original configuration file are not
        preserved when writing the configuration back.
        'u'Write an .ini-format representation of the configuration state.

        If `space_around_delimiters' is True (the default), delimiters
        between keys and values are surrounded by spaces.

        Please note that comments in the original configuration file are not
        preserved when writing the configuration back.
        'b' {} 'u' {} 'b'Write a single section to the specified `fp'.'u'Write a single section to the specified `fp'.'b'[{}]
'u'[{}]
'b'{}{}
'u'{}{}
'b'Remove an option.'u'Remove an option.'b'Remove a file section.'u'Remove a file section.'b'Cannot remove the default section.'u'Cannot remove the default section.'b'Parse a sectioned configuration file.

        Each section in a configuration file contains a header, indicated by
        a name in square brackets (`[]'), plus key/value options, indicated by
        `name' and `value' delimited with a specific substring (`=' or `:' by
        default).

        Values can span multiple lines, as long as they are indented deeper
        than the first line of the value. Depending on the parser's mode, blank
        lines may be treated as parts of multiline values or ignored.

        Configuration files may include comments, prefixed by specific
        characters (`#' and `;' by default). Comments may appear on their own
        in an otherwise empty line or may be entered in lines holding values or
        section names. Please note that comments get stripped off when reading configuration files.
        'u'Parse a sectioned configuration file.

        Each section in a configuration file contains a header, indicated by
        a name in square brackets (`[]'), plus key/value options, indicated by
        `name' and `value' delimited with a specific substring (`=' or `:' by
        default).

        Values can span multiple lines, as long as they are indented deeper
        than the first line of the value. Depending on the parser's mode, blank
        lines may be treated as parts of multiline values or ignored.

        Configuration files may include comments, prefixed by specific
        characters (`#' and `;' by default). Comments may appear on their own
        in an otherwise empty line or may be entered in lines holding values or
        section names. Please note that comments get stripped off when reading configuration files.
        'b'Read the defaults passed in the initializer.
        Note: values can be non-string.'u'Read the defaults passed in the initializer.
        Note: values can be non-string.'b'Create a sequence of lookups with 'vars' taking priority over
        the 'section' which takes priority over the DEFAULTSECT.

        'u'Create a sequence of lookups with 'vars' taking priority over
        the 'section' which takes priority over the DEFAULTSECT.

        'b'Return a boolean value translating from other types if necessary.
        'u'Return a boolean value translating from other types if necessary.
        'b'Not a boolean: %s'u'Not a boolean: %s'b'Raises a TypeError for non-string values.

        The only legal non-string value if we allow valueless
        options is None, so we need to check if the value is a
        string if:
        - we do not allow valueless options, or
        - we allow valueless options but the value is not None

        For compatibility reasons this method is not used in classic set()
        for RawConfigParsers. It is invoked in every case for mapping protocol
        access and in ConfigParser.set().
        'u'Raises a TypeError for non-string values.

        The only legal non-string value if we allow valueless
        options is None, so we need to check if the value is a
        string if:
        - we do not allow valueless options, or
        - we allow valueless options but the value is not None

        For compatibility reasons this method is not used in classic set()
        for RawConfigParsers. It is invoked in every case for mapping protocol
        access and in ConfigParser.set().
        'b'section names must be strings'u'section names must be strings'b'option keys must be strings'u'option keys must be strings'b'option values must be strings'u'option values must be strings'b'ConfigParser implementing interpolation.'u'ConfigParser implementing interpolation.'b'Set an option.  Extends RawConfigParser.set by validating type and
        interpolation syntax on the value.'u'Set an option.  Extends RawConfigParser.set by validating type and
        interpolation syntax on the value.'b'Create a new section in the configuration.  Extends
        RawConfigParser.add_section by validating if the section name is
        a string.'u'Create a new section in the configuration.  Extends
        RawConfigParser.add_section by validating if the section name is
        a string.'b'Reads the defaults passed in the initializer, implicitly converting
        values to strings like the rest of the API.

        Does not perform interpolation for backwards compatibility.
        'u'Reads the defaults passed in the initializer, implicitly converting
        values to strings like the rest of the API.

        Does not perform interpolation for backwards compatibility.
        'b'ConfigParser alias for backwards compatibility purposes.'u'ConfigParser alias for backwards compatibility purposes.'b'The SafeConfigParser class has been renamed to ConfigParser in Python 3.2. This alias will be removed in future versions. Use ConfigParser directly instead.'u'The SafeConfigParser class has been renamed to ConfigParser in Python 3.2. This alias will be removed in future versions. Use ConfigParser directly instead.'b'A proxy for a single section from a parser.'u'A proxy for a single section from a parser.'b'Creates a view on a section of the specified `name` in `parser`.'u'Creates a view on a section of the specified `name` in `parser`.'b'<Section: {}>'u'<Section: {}>'b'Get an option value.

        Unless `fallback` is provided, `None` will be returned if the option
        is not found.

        'u'Get an option value.

        Unless `fallback` is provided, `None` will be returned if the option
        is not found.

        'b'Enables reuse of get*() methods between the parser and section proxies.

    If a parser class implements a getter directly, the value for the given
    key will be ``None``. The presence of the converter name here enables
    section proxies to find and use the implementation on the parser class.
    'u'Enables reuse of get*() methods between the parser and section proxies.

    If a parser class implements a getter directly, the value for the given
    key will be ``None``. The presence of the converter name here enables
    section proxies to find and use the implementation on the parser class.
    'b'^get(?P<name>.+)$'u'^get(?P<name>.+)$'b'Incompatible key: {} (type: {})'u'Incompatible key: {} (type: {})'b'Incompatible key: cannot use "" as a name'u'Incompatible key: cannot use "" as a name'u'Python.Python39.lib.configparser'u'Python39.lib.configparser'u'lib.configparser'ListenerPipereductionForkingPickler_ForkingPicklerBUFSIZE20.020.CONNECTION_TIMEOUT_mmap_counterdefault_familyfamiliesAF_PIPE_init_timeout_check_timeoutarbitrary_address
    Return an arbitrary free address for the given family
    localhostabstract_sockets_supported listener-mktemplistener-get_temp_dir\\.\pipe\pyc-%d-%d-unrecognized family_validate_family
    Checks if the family is valid for the current environment.
    Family %s is not recognized.address_type
    Return the types of the address

    This can be 'AF_INET', 'AF_UNIX', or 'AF_PIPE'
    is_abstract_socket_namespaceaddress type of %r unrecognized_ConnectionBaseinvalid handleat least one of `readable` and `writable` must be True_readable_writable_closehandle is closed_check_readableconnection is write-only_check_writableconnection is read-only_bad_message_lengthbad message lengthTrue if the connection is closedTrue if the connection is readableTrue if the connection is writableFile descriptor or handle of the connectionClose the connectionsend_bytesSend the bytes data from a bytes-like objectoffset is negativebuffer length < offsetsize is negativebuffer length < offset + size_send_bytesSend a (picklable) objectrecv_bytesmaxlength
        Receive bytes data as a bytes object.
        negative maxlength_recv_bytesrecv_bytes_into
        Receive bytes data into a writeable bytes-like object.
        Return the number of bytes read.
        bytesizenegative offsetoffset too largerecvReceive a (picklable) objectWhether there is any input available to be read_pollPipeConnection
        Connection class based on a Windows named pipe.
        Overlapped I/O is used, so the handles must have been created
        with FILE_FLAG_OVERLAPPED.
        _got_empty_message_CloseHandleoverlappedovwaitresnwrittenbsizenread_get_more_datashouldn't get here; expected KeyboardInterruptrbytes
    Connection class based on an arbitrary file descriptor (Unix only), or
    a socket handle (Windows).
    closesocket_sendremaining_recvgot end of file during message0x7fffffff!ipre_header!Q
    Returns a listener object.

    This is a wrapper for a bound socket which is 'listening' for
    connections, or for a Windows named pipe.
    authkeyPipeListener_listenerSocketListenerauthkey should be a byte string_authkey
        Accept a connection on the bound socket or named pipe of `self`.

        Returns a `Connection` object.
        listener is closeddeliver_challengeanswer_challenge
        Close the bound socket or named pipe of `self`.
        listener_addresslast_accepted_last_accepted
    Returns a connection to the address of a `Listener`
    PipeClientSocketClientduplex
        Returns pair of connection objects at either end of a pipe
        socketpairc1c2fd1openmodeobsizeibsizeh1h2
    Representation of a socket which is bound to an address and listening
    getsockname_familyFinalizeexitpriority
    Return a connection object connected to the socket given by `address`
    
        Representation of a named pipe
        _new_handle_handle_queuesub_debuglistener created with address=%r_finalize_pipe_listenerclosing listener with address=%r
        Return a connection object connected to the pipe given by `address`
        MESSAGE_LENGTH#CHALLENGE#CHALLENGE#WELCOME#WELCOME#FAILURE#FAILUREhmacAuthkey must be bytes, not {0!s}urandomdigest received was wrongmessage = %rdigest sent was rejectedConnectionWrapper_conn_dumps_loads_xml_dumps_xml_loadsXmlListenerXmlClient_exhaustive_waithandlesreadyShould not get here_ready_errorsobject_list
        Wait till an object in object_list is ready/readable.

        Returns list of those objects in object_list which are ready/readable.
        waithandle_to_objov_listready_objectsready_handlesselectorsPollSelector_WaitSelectorSelectSelectorEVENT_READreduce_connectionresource_sharerDupSocketdsrebuild_connectionreduce_pipe_connectionDupHandledhrebuild_pipe_connectionDupFddf# A higher level module for using sockets (or Windows named pipes)# multiprocessing/connection.py# A very generous timeout when it comes to local connections...# Prefer abstract sockets if possible to avoid problems with the address# size.  When coding portable applications, some implementations have# sun_path as short as 92 bytes in the sockaddr_un struct.# double check# Connection classes# XXX should we use util.Finalize instead of a __del__?# HACK for byte-indexing of non-bytewise buffers (e.g. array.array)# Get bytesize of arbitrary buffer# Message can fit in dest# For wire compatibility with 3.7 and lower# The payload is large so Nagle's algorithm won't be triggered# and we'd better avoid the cost of concatenation.# Issue #20540: concatenate before sending, to avoid delays due# to Nagle's algorithm on a TCP socket.# Also note we want to avoid sending a 0-length buffer separately,# to avoid "broken pipe" errors if the other end closed the pipe.# Public functions# default security descriptor: the handle cannot be inherited# Definitions for connections based on sockets# SO_REUSEADDR has different semantics on Windows (issue #2550).# Linux abstract socket namespaces do not need to be explicitly unlinked# Definitions for connections based on named pipes# ERROR_NO_DATA can occur if a client has already connected,# written data and then disconnected -- see Issue 14725.# Authentication stuff# reject large message# Support for using xmlrpclib for serialization# Wait# Return ALL handles which are currently signalled.  (Only# returning the first signalled might create starvation issues.)# start an overlapped read of length zero# If o.fileno() is an overlapped pipe handle and# err == 0 then there is a zero length message# in the pipe, but it HAS NOT been consumed...# ... except on Windows 8 and later, where# the message HAS been consumed.# request that overlapped reads stop# wait for all overlapped reads to stop# If o.fileno() is an overlapped pipe handle then# a zero length message HAS been consumed.# poll/select have the advantage of not requiring any extra file# descriptor, contrarily to epoll/kqueue (also, they require a single# syscall).# Make connection and socket objects sharable if possibleb'Client'u'Client'b'Listener'u'Listener'b'Pipe'u'Pipe'b'AF_INET'u'AF_INET'b'AF_PIPE'u'AF_PIPE'b'
    Return an arbitrary free address for the given family
    'u'
    Return an arbitrary free address for the given family
    'b'localhost'u'localhost'b' listener-'u' listener-'b'listener-'u'listener-'b'\\.\pipe\pyc-%d-%d-'u'\\.\pipe\pyc-%d-%d-'b'unrecognized family'u'unrecognized family'b'
    Checks if the family is valid for the current environment.
    'u'
    Checks if the family is valid for the current environment.
    'b'Family %s is not recognized.'u'Family %s is not recognized.'b'
    Return the types of the address

    This can be 'AF_INET', 'AF_UNIX', or 'AF_PIPE'
    'u'
    Return the types of the address

    This can be 'AF_INET', 'AF_UNIX', or 'AF_PIPE'
    'b'address type of %r unrecognized'u'address type of %r unrecognized'b'invalid handle'u'invalid handle'b'at least one of `readable` and `writable` must be True'u'at least one of `readable` and `writable` must be True'b'handle is closed'u'handle is closed'b'connection is write-only'u'connection is write-only'b'connection is read-only'u'connection is read-only'b'bad message length'u'bad message length'b'True if the connection is closed'u'True if the connection is closed'b'True if the connection is readable'u'True if the connection is readable'b'True if the connection is writable'u'True if the connection is writable'b'File descriptor or handle of the connection'u'File descriptor or handle of the connection'b'Close the connection'u'Close the connection'b'Send the bytes data from a bytes-like object'u'Send the bytes data from a bytes-like object'b'offset is negative'u'offset is negative'b'buffer length < offset'u'buffer length < offset'b'size is negative'u'size is negative'b'buffer length < offset + size'u'buffer length < offset + size'b'Send a (picklable) object'u'Send a (picklable) object'b'
        Receive bytes data as a bytes object.
        'u'
        Receive bytes data as a bytes object.
        'b'negative maxlength'u'negative maxlength'b'
        Receive bytes data into a writeable bytes-like object.
        Return the number of bytes read.
        'u'
        Receive bytes data into a writeable bytes-like object.
        Return the number of bytes read.
        'b'negative offset'u'negative offset'b'offset too large'u'offset too large'b'Receive a (picklable) object'u'Receive a (picklable) object'b'Whether there is any input available to be read'u'Whether there is any input available to be read'b'
        Connection class based on a Windows named pipe.
        Overlapped I/O is used, so the handles must have been created
        with FILE_FLAG_OVERLAPPED.
        'u'
        Connection class based on a Windows named pipe.
        Overlapped I/O is used, so the handles must have been created
        with FILE_FLAG_OVERLAPPED.
        'b'shouldn't get here; expected KeyboardInterrupt'u'shouldn't get here; expected KeyboardInterrupt'b'
    Connection class based on an arbitrary file descriptor (Unix only), or
    a socket handle (Windows).
    'u'
    Connection class based on an arbitrary file descriptor (Unix only), or
    a socket handle (Windows).
    'b'got end of file during message'u'got end of file during message'b'!i'u'!i'b'!Q'u'!Q'b'
    Returns a listener object.

    This is a wrapper for a bound socket which is 'listening' for
    connections, or for a Windows named pipe.
    'u'
    Returns a listener object.

    This is a wrapper for a bound socket which is 'listening' for
    connections, or for a Windows named pipe.
    'b'authkey should be a byte string'u'authkey should be a byte string'b'
        Accept a connection on the bound socket or named pipe of `self`.

        Returns a `Connection` object.
        'u'
        Accept a connection on the bound socket or named pipe of `self`.

        Returns a `Connection` object.
        'b'listener is closed'u'listener is closed'b'
        Close the bound socket or named pipe of `self`.
        'u'
        Close the bound socket or named pipe of `self`.
        'b'
    Returns a connection to the address of a `Listener`
    'u'
    Returns a connection to the address of a `Listener`
    'b'
        Returns pair of connection objects at either end of a pipe
        'u'
        Returns pair of connection objects at either end of a pipe
        'b'
    Representation of a socket which is bound to an address and listening
    'u'
    Representation of a socket which is bound to an address and listening
    'b'
    Return a connection object connected to the socket given by `address`
    'u'
    Return a connection object connected to the socket given by `address`
    'b'
        Representation of a named pipe
        'u'
        Representation of a named pipe
        'b'listener created with address=%r'u'listener created with address=%r'b'closing listener with address=%r'u'closing listener with address=%r'b'
        Return a connection object connected to the pipe given by `address`
        'u'
        Return a connection object connected to the pipe given by `address`
        'b'#CHALLENGE#'b'#WELCOME#'b'#FAILURE#'b'Authkey must be bytes, not {0!s}'u'Authkey must be bytes, not {0!s}'b'md5'u'md5'b'digest received was wrong'u'digest received was wrong'b'message = %r'u'message = %r'b'digest sent was rejected'u'digest sent was rejected'b'poll'u'poll'b'recv_bytes'u'recv_bytes'b'send_bytes'u'send_bytes'b'Should not get here'u'Should not get here'b'
        Wait till an object in object_list is ready/readable.

        Returns list of those objects in object_list which are ready/readable.
        'u'
        Wait till an object in object_list is ready/readable.

        Returns list of those objects in object_list which are ready/readable.
        'b'_got_empty_message'u'_got_empty_message'b'PollSelector'u'PollSelector'u'Python39.lib.multiprocessing.connection'u'lib.multiprocessing.connection'debug_reprhelperwerkzeug.debug.console.streamHTMLStringOwerkzeug.debug.console.ipy_ipyA StringO version that HTML escapes on write.ThreadedStreamThread-local wrapper for sys.stdout for the interactive console.fetch_displayhookread only attribute _ConsoleLoader_storageco_constsget_source_by_code_InteractiveConsoleoriginal_compilesource_to_eval<debugger>render_traceback_htmlAn interactive console.old_sys_stdout# stream._write bypasses escaping as debug_repr is# already generating HTML for us.# add the threaded stream as display hook# register code objects of wrapped functions too.b'werkzeug.debug.console.stream'u'werkzeug.debug.console.stream'b'werkzeug.debug.console.ipy'u'werkzeug.debug.console.ipy'b'A StringO version that HTML escapes on write.'u'A StringO version that HTML escapes on write.'b'Thread-local wrapper for sys.stdout for the interactive console.'u'Thread-local wrapper for sys.stdout for the interactive console.'b'read only attribute 'u'read only attribute 'b'<debugger>'u'<debugger>'b'An interactive console.'u'An interactive console.'u'werkzeug.debug.console'u'debug.console'u'console'LOG_THRESHOLD_FOR_CONNLOST_WRITESACCEPT_RETRY_DELAYSSL_HANDSHAKE_TIMEOUTFALLBACK# After the connection is lost, log warnings after this many write()s.# Seconds to wait before retrying accept().# Number of stack entries to capture in debug mode.# The larger the number, the slower the operation in debug mode# (see extract_stack() in format_helpers.py).# Number of seconds to wait for SSL handshake to complete# The default timeout matches that of Nginx.# Used in sendfile fallback code.  We use fallback for platforms# that don't support sendfile, or for TLS connections.# The enum should be here to break circular dependencies between# base_events and sslprotou'Python39.lib.asyncio.constants'u'lib.asyncio.constants'u'asyncio.constants'u'constants'NOOFFYESONSnwNWswSWNEseSENSEWnsewNSEWCENTERNONEbothBOTHLEFTTOPRIGHTbottomBOTTOMraisedsunkenSUNKENflatFLATridgeRIDGEgrooveGROOVEsolidSOLIDhorizontalHORIZONTALverticalVERTICALnumericNUMERICCHARWORDbaselineBASELINEinsideINSIDEoutsideOUTSIDEselSELsel.firstSEL_FIRSTsel.lastSEL_LASTENDINSERTCURRENTANCHORALLnormalDISABLEDactiveACTIVEhiddenHIDDENCASCADECHECKBUTTONCOMMANDRADIOBUTTONSEPARATORSINGLEbrowseBROWSEmultipleMULTIPLEextendedEXTENDEDdotboxDOTBOXunderlineUNDERLINEpieslicePIESLICEchordCHORDARCFIRSTLASTbuttBUTTprojectingPROJECTINGROUNDbevelBEVELmiterMITERMOVETOSCROLLunitsUNITSpagesPAGES# Symbolic constants for Tk# Booleans# -anchor and -sticky# -fill# -side# -relief# -orient# -tabs# -wrap# -align# -bordermode# Special tags, marks and insert positions# e.g. Canvas.delete(ALL)# Text widget and button states# Canvas state# Menu item types# Selection modes for list boxes# Activestyle for list boxes# NONE='none' is also valid# Various canvas styles# Arguments to xview/yviewb'nw'u'nw'b'sw'u'sw'b'se'u'se'b'ns'u'ns'b'ew'u'ew'b'nsew'u'nsew'b'center'u'center'b'both'u'both'b'left'b'top'u'top'b'right'b'bottom'u'bottom'b'raised'u'raised'b'sunken'u'sunken'b'flat'u'flat'b'ridge'u'ridge'b'groove'u'groove'b'solid'u'solid'b'horizontal'u'horizontal'b'vertical'u'vertical'b'numeric'u'numeric'b'word'u'word'b'baseline'u'baseline'b'inside'u'inside'b'outside'u'outside'b'sel'u'sel'b'sel.first'u'sel.first'b'sel.last'u'sel.last'b'normal'u'normal'b'disabled'u'disabled'b'active'u'active'b'hidden'u'hidden'b'browse'u'browse'b'multiple'u'multiple'b'extended'u'extended'b'dotbox'u'dotbox'b'underline'u'underline'b'pieslice'u'pieslice'b'chord'u'chord'b'first'u'first'b'butt'u'butt'b'projecting'u'projecting'b'round'u'round'b'bevel'u'bevel'b'miter'u'miter'b'units'u'units'b'pages'u'pages'u'Python39.lib.tkinter.constants'u'lib.tkinter.constants'a ac accumsan ad adipiscing aenean aliquam aliquet amet ante aptent arcu at
auctor augue bibendum blandit class commodo condimentum congue consectetuer
consequat conubia convallis cras cubilia cum curabitur curae cursus dapibus
diam dictum dictumst dignissim dis dolor donec dui duis egestas eget eleifend
elementum elit enim erat eros est et etiam eu euismod facilisi facilisis fames
faucibus felis fermentum feugiat fringilla fusce gravida habitant habitasse hac
hendrerit hymenaeos iaculis id imperdiet in inceptos integer interdum ipsum
justo lacinia lacus laoreet lectus leo libero ligula litora lobortis lorem
luctus maecenas magna magnis malesuada massa mattis mauris metus mi molestie
mollis montes morbi mus nam nascetur natoque nec neque netus nibh nisi nisl non
nonummy nostra nulla nullam nunc odio orci ornare parturient pede pellentesque
penatibus per pharetra phasellus placerat platea porta porttitor posuere
potenti praesent pretium primis proin pulvinar purus quam quis quisque rhoncus
ridiculus risus rutrum sagittis sapien scelerisque sed sem semper senectus sit
sociis sociosqu sodales sollicitudin suscipit suspendisse taciti tellus tempor
tempus tincidunt torquent tortor tristique turpis ullamcorper ultrices
ultricies urna ut varius vehicula vel velit venenatis vestibulum vitae vivamus
viverra volutpat vulputateLOREM_IPSUM_WORDS#: list of lorem ipsum words used by the lipsum() helper functionb'a ac accumsan ad adipiscing aenean aliquam aliquet amet ante aptent arcu at
auctor augue bibendum blandit class commodo condimentum congue consectetuer
consequat conubia convallis cras cubilia cum curabitur curae cursus dapibus
diam dictum dictumst dignissim dis dolor donec dui duis egestas eget eleifend
elementum elit enim erat eros est et etiam eu euismod facilisi facilisis fames
faucibus felis fermentum feugiat fringilla fusce gravida habitant habitasse hac
hendrerit hymenaeos iaculis id imperdiet in inceptos integer interdum ipsum
justo lacinia lacus laoreet lectus leo libero ligula litora lobortis lorem
luctus maecenas magna magnis malesuada massa mattis mauris metus mi molestie
mollis montes morbi mus nam nascetur natoque nec neque netus nibh nisi nisl non
nonummy nostra nulla nullam nunc odio orci ornare parturient pede pellentesque
penatibus per pharetra phasellus placerat platea porta porttitor posuere
potenti praesent pretium primis proin pulvinar purus quam quis quisque rhoncus
ridiculus risus rutrum sagittis sapien scelerisque sed sem semper senectus sit
sociis sociosqu sodales sollicitudin suscipit suspendisse taciti tellus tempor
tempus tincidunt torquent tortor tristique turpis ullamcorper ultrices
ultricies urna ut varius vehicula vel velit venenatis vestibulum vitae vivamus
viverra volutpat vulputate'u'a ac accumsan ad adipiscing aenean aliquam aliquet amet ante aptent arcu at
auctor augue bibendum blandit class commodo condimentum congue consectetuer
consequat conubia convallis cras cubilia cum curabitur curae cursus dapibus
diam dictum dictumst dignissim dis dolor donec dui duis egestas eget eleifend
elementum elit enim erat eros est et etiam eu euismod facilisi facilisis fames
faucibus felis fermentum feugiat fringilla fusce gravida habitant habitasse hac
hendrerit hymenaeos iaculis id imperdiet in inceptos integer interdum ipsum
justo lacinia lacus laoreet lectus leo libero ligula litora lobortis lorem
luctus maecenas magna magnis malesuada massa mattis mauris metus mi molestie
mollis montes morbi mus nam nascetur natoque nec neque netus nibh nisi nisl non
nonummy nostra nulla nullam nunc odio orci ornare parturient pede pellentesque
penatibus per pharetra phasellus placerat platea porta porttitor posuere
potenti praesent pretium primis proin pulvinar purus quam quis quisque rhoncus
ridiculus risus rutrum sagittis sapien scelerisque sed sem semper senectus sit
sociis sociosqu sodales sollicitudin suscipit suspendisse taciti tellus tempor
tempus tincidunt torquent tortor tristique turpis ullamcorper ultrices
ultricies urna ut varius vehicula vel velit venenatis vestibulum vitae vivamus
viverra volutpat vulputate'u'jinja2.constants'BaseContextparent_processactive_childrencpu_countReturns the number of CPUs in the systemcannot determine number of cpusReturns a manager associated with a running server process

        The managers methods such as `Lock()`, `Condition()` and `Queue()`
        can be used to create shared objects.
        managersSyncManagerget_contextReturns two connection object connected by a pipeReturns a non-recursive lock objectReturns a recursive lock objectReturns a condition objectSemaphoreReturns a semaphore objectBoundedSemaphoreReturns a bounded semaphore objectReturns an event objectBarrierpartiesReturns a barrier objectReturns a queue objectJoinableQueueSimpleQueuePoolprocessesinitializerinitargsmaxtasksperchildReturns a process pool objectpoolRawValuetypecode_or_typeReturns a shared objectsharedctypesRawArraysize_or_initializerReturns a shared arrayValueReturns a synchronized shared objectReturns a synchronized shared arrayfreeze_supportCheck whether this is a fake forked process in a frozen executable.
        If so then run code specified by commandline and exit.
        get_loggerReturn package logger -- if it does not already exist then
        it is created.
        log_to_stderrTurn on logging and add a handler which prints to stderrallow_connection_picklingInstall support for sending connections and sockets
        between processes
        Sets the path to a python.exe or pythonw.exe binary used to run
        child processes instead of sys.executable when using the 'spawn'
        start method.  Useful for people embedding Python.
        set_forkserver_preloadSet list of module names to try to load in forkserver process.
        This is really just a hint.
        forkserver_concrete_contextscannot find context for %r_check_availableget_start_methodset_start_methodcannot set start method of concrete contextreducerControls how objects will be reduced to a form that can be
        shared with other processes.BaseProcess_start_method_Popenprocess_obj_actual_contextcontext has already been setget_all_start_methodsHAVE_SEND_HANDLEForkProcesspopen_forkSpawnProcesspopen_spawn_posixForkServerProcesspopen_forkserverForkContextSpawnContextForkServerContextforkserver start method not availablepopen_spawn_win32_force_start_method_tlsget_spawning_popenspawning_popenset_spawning_popenpopenassert_spawning%s objects should only be shared between processes through inheritance'%s objects should only be shared between processes'' through inheritance'# Base type for contexts. Bound methods of an instance of this type are included in __all__ of __init__.py# This is undocumented.  In previous versions of multiprocessing# its only effect was to make socket objects inheritable on Windows.# Type of default context -- underlying context can be set at most once# Context types for fixed start method# bpo-33725: running arbitrary code after fork() is no longer reliable# on macOS since macOS 10.14 (Mojave). Use spawn by default instead.# Force the start method# Check that the current thread is spawning a child processb'Returns the number of CPUs in the system'u'Returns the number of CPUs in the system'b'cannot determine number of cpus'u'cannot determine number of cpus'b'Returns a manager associated with a running server process

        The managers methods such as `Lock()`, `Condition()` and `Queue()`
        can be used to create shared objects.
        'u'Returns a manager associated with a running server process

        The managers methods such as `Lock()`, `Condition()` and `Queue()`
        can be used to create shared objects.
        'b'Returns two connection object connected by a pipe'u'Returns two connection object connected by a pipe'b'Returns a non-recursive lock object'u'Returns a non-recursive lock object'b'Returns a recursive lock object'u'Returns a recursive lock object'b'Returns a condition object'u'Returns a condition object'b'Returns a semaphore object'u'Returns a semaphore object'b'Returns a bounded semaphore object'u'Returns a bounded semaphore object'b'Returns an event object'u'Returns an event object'b'Returns a barrier object'u'Returns a barrier object'b'Returns a queue object'u'Returns a queue object'b'Returns a process pool object'u'Returns a process pool object'b'Returns a shared object'u'Returns a shared object'b'Returns a shared array'u'Returns a shared array'b'Returns a synchronized shared object'u'Returns a synchronized shared object'b'Returns a synchronized shared array'u'Returns a synchronized shared array'b'Check whether this is a fake forked process in a frozen executable.
        If so then run code specified by commandline and exit.
        'u'Check whether this is a fake forked process in a frozen executable.
        If so then run code specified by commandline and exit.
        'b'Return package logger -- if it does not already exist then
        it is created.
        'u'Return package logger -- if it does not already exist then
        it is created.
        'b'Turn on logging and add a handler which prints to stderr'u'Turn on logging and add a handler which prints to stderr'b'Install support for sending connections and sockets
        between processes
        'u'Install support for sending connections and sockets
        between processes
        'b'Sets the path to a python.exe or pythonw.exe binary used to run
        child processes instead of sys.executable when using the 'spawn'
        start method.  Useful for people embedding Python.
        'u'Sets the path to a python.exe or pythonw.exe binary used to run
        child processes instead of sys.executable when using the 'spawn'
        start method.  Useful for people embedding Python.
        'b'Set list of module names to try to load in forkserver process.
        This is really just a hint.
        'u'Set list of module names to try to load in forkserver process.
        This is really just a hint.
        'b'cannot find context for %r'u'cannot find context for %r'b'cannot set start method of concrete context'u'cannot set start method of concrete context'b'Controls how objects will be reduced to a form that can be
        shared with other processes.'u'Controls how objects will be reduced to a form that can be
        shared with other processes.'b'reduction'u'reduction'b'context has already been set'u'context has already been set'b'spawn'u'spawn'b'fork'u'fork'b'forkserver'u'forkserver'b'forkserver start method not available'u'forkserver start method not available'b'spawning_popen'u'spawning_popen'b'%s objects should only be shared between processes through inheritance'u'%s objects should only be shared between processes through inheritance'u'Python39.lib.multiprocessing.context'u'lib.multiprocessing.context'Utilities for with-statement contexts.  See PEP 343.asynccontextmanagerAbstractContextManagerAbstractAsyncContextManagerAsyncExitStackContextDecoratorredirect_stdoutredirect_stderrAn abstract base class for context managers.Return `self` upon entering the runtime context.Raise any exception triggered within the runtime context.An abstract base class for asynchronous context managers.__aenter____aexit__A base class or mixin that enables context managers to work as decorators._recreate_cmReturn a recreated instance of self.

        Allows an otherwise one-shot context manager like
        _GeneratorContextManager to support use as
        a decorator via implicit recreation.

        This is a private interface just for _GeneratorContextManager.
        See issue #11647 for details.
        _GeneratorContextManagerBaseShared functionality for @contextmanager and @asynccontextmanager._GeneratorContextManagerHelper for @contextmanager decorator.generator didn't yieldgenerator didn't stopgenerator didn't stop after throw()_AsyncGeneratorContextManagerHelper for @asynccontextmanager decorator.generator didn't stop after athrow()@contextmanager decorator.

    Typical usage:

        @contextmanager
        def some_generator(<arguments>):
            <setup>
            try:
                yield <value>
            finally:
                <cleanup>

    This makes this:

        with some_generator(<arguments>) as <variable>:
            <body>

    equivalent to this:

        <setup>
        try:
            <variable> = <value>
            <body>
        finally:
            <cleanup>
    @asynccontextmanager decorator.

    Typical usage:

        @asynccontextmanager
        async def some_async_generator(<arguments>):
            <setup>
            try:
                yield <value>
            finally:
                <cleanup>

    This makes this:

        async with some_async_generator(<arguments>) as <variable>:
            <body>

    equivalent to this:

        <setup>
        try:
            <variable> = <value>
            <body>
        finally:
            <cleanup>
    Context to automatically close something at the end of a block.

    Code like this:

        with closing(<module>.open(<arguments>)) as f:
            <block>

    is equivalent to this:

        f = <module>.open(<arguments>)
        try:
            <block>
        finally:
            f.close()

    thing_RedirectStreamnew_target_new_target_old_targetsexctypeexcinstexctbContext manager for temporarily redirecting stdout to another file.

        # How to send help() to stderr
        with redirect_stdout(sys.stderr):
            help(dir)

        # How to write help() to a file
        with open('help.txt', 'w') as f:
            with redirect_stdout(f):
                help(pow)
    Context manager for temporarily redirecting stderr to another file.Context manager to suppress specified exceptions

    After the exception is suppressed, execution proceeds with the next
    statement following the with statement.

         with suppress(FileNotFoundError):
             os.remove(somefile)
         # Execution still resumes here if the file was already removed
    _exceptions_BaseExitStackA base class for ExitStack and AsyncExitStack._create_exit_wrappercm_exit_create_cb_wrapper_exit_wrapper_exit_callbackspop_allPreserve the context stack by transferring it to a new instance.new_stackRegisters a callback with the standard __exit__ method signature.

        Can suppress exceptions the same way __exit__ method can.
        Also accepts any object with an __exit__ method (registering a call
        to the method instead of the object itself).
        _cb_typeexit_method_push_cm_exit_push_exit_callbackEnters the supplied context manager.

        If successful, also pushes its __exit__ method as a callback and
        returns the result of the __enter__ method.
        _cm_typeRegisters an arbitrary callback and arguments.

        Cannot suppress exceptions.
        __wrapped__Helper to correctly register callbacks to __exit__ methods.is_syncContext manager for dynamic management of a stack of exit callbacks.

    For example:
        with ExitStack() as stack:
            files = [stack.enter_context(open(fname)) for fname in filenames]
            # All opened files will automatically be closed at the end of
            # the with statement, even if attempts to open files later
            # in the list raise an exception.
    received_excframe_exc_fix_exception_contextnew_excold_excexc_contextsuppressed_excpending_raisenew_exc_detailsfixed_ctxImmediately unwind the context stack.Async context manager for dynamic management of a stack of exit
    callbacks.

    For example:
        async with AsyncExitStack() as stack:
            connections = [await stack.enter_async_context(get_connection())
                for i in range(5)]
            # All opened connections will automatically be released at the
            # end of the async with statement, even if attempts to open a
            # connection later in the list raise an exception.
    _create_async_exit_wrapper_create_async_cb_wrapperenter_async_contextEnters the supplied async context manager.

        If successful, also pushes its __aexit__ method as a callback and
        returns the result of the __aenter__ method.
        _push_async_cm_exitpush_async_exitRegisters a coroutine function with the standard __aexit__ method
        signature.

        Can suppress exceptions the same way __aexit__ method can.
        Also accepts any object with an __aexit__ method (registering a call
        to the method instead of the object itself).
        push_async_callbackRegisters an arbitrary coroutine function and arguments.

        Cannot suppress exceptions.
        Helper to correctly register coroutine function to __aexit__
        method.cb_suppressContext manager that does no additional processing.

    Used as a stand-in for a normal context manager, when a particular
    block of code is only sometimes used with a normal context manager:

    cm = optional_cm if condition else nullcontext()
    with cm:
        # Perform operation, using optional_cm if condition is True
    enter_resultexcinfo# Issue 19330: ensure context manager instances have good docstrings# Unfortunately, this still doesn't provide good help output when# inspecting the created context manager instances, since pydoc# currently bypasses the instance docstring and shows the docstring# for the class instead.# See http://bugs.python.org/issue19404 for more details.# _GCMB instances are one-shot context managers, so the# CM must be recreated each time a decorated function is# called# do not keep args and kwds alive unnecessarily# they are only needed for recreation, which is not possible anymore# Need to force instantiation so we can reliably# tell if we get the same exception back# Suppress StopIteration *unless* it's the same exception that# was passed to throw().  This prevents a StopIteration# raised inside the "with" statement from being suppressed.# Don't re-raise the passed in exception. (issue27122)# Avoid suppressing if a StopIteration exception# was passed to throw() and later wrapped into a RuntimeError# (see PEP 479 for sync generators; async generators also# have this behavior). But do this only if the exception wrapped# by the RuntimeError is actually Stop(Async)Iteration (see# issue29692).# only re-raise if it's *not* the exception that was# passed to throw(), because __exit__() must not raise# an exception unless __exit__() itself failed.  But throw()# has to raise the exception to signal propagation, so this# fixes the impedance mismatch between the throw() protocol# and the __exit__() protocol.# Avoid suppressing if a Stop(Async)Iteration exception# was passed to athrow() and later wrapped into a RuntimeError# by the RuntimeError is actully Stop(Async)Iteration (see# We use a list of old targets to make this CM re-entrant# Unlike isinstance and issubclass, CPython exception handling# currently only looks at the concrete type hierarchy (ignoring# the instance and subclass checking hooks). While Guido considers# that a bug rather than a feature, it's a fairly hard one to fix# due to various internal implementation details. suppress provides# the simpler issubclass based semantics, rather than trying to# exactly reproduce the limitations of the CPython interpreter.# See http://bugs.python.org/issue12029 for more details# We use an unbound method rather than a bound method to follow# the standard lookup behaviour for special methods.# Not a context manager, so assume it's a callable.# Allow use as a decorator.# We look up the special methods on the type to match the with# statement.# We changed the signature, so using @wraps is not appropriate, but# setting __wrapped__ may still help with introspection.# Allow use as a decorator# Inspired by discussions on http://bugs.python.org/issue13585# We manipulate the exception state so it behaves as though# we were actually nesting multiple with statements# Context may not be correct, so find the end of the chain# Context is already set correctly (see issue 20317)# Change the end of the chain to point to the exception# we expect it to reference# Callbacks are invoked in LIFO order to match the behaviour of# nested context managers# simulate the stack of exceptions by setting the context# bare "raise exc_details[1]" replaces our carefully# set-up context# Inspired by discussions on https://bugs.python.org/issue29302# Not an async context manager, so assume it's a coroutine functionb'Utilities for with-statement contexts.  See PEP 343.'u'Utilities for with-statement contexts.  See PEP 343.'b'asynccontextmanager'u'asynccontextmanager'b'contextmanager'u'contextmanager'b'closing'u'closing'b'nullcontext'u'nullcontext'b'AbstractContextManager'u'AbstractContextManager'b'AbstractAsyncContextManager'u'AbstractAsyncContextManager'b'AsyncExitStack'u'AsyncExitStack'b'ContextDecorator'u'ContextDecorator'b'ExitStack'u'ExitStack'b'redirect_stdout'u'redirect_stdout'b'redirect_stderr'u'redirect_stderr'b'suppress'u'suppress'b'An abstract base class for context managers.'u'An abstract base class for context managers.'b'Return `self` upon entering the runtime context.'u'Return `self` upon entering the runtime context.'b'Raise any exception triggered within the runtime context.'u'Raise any exception triggered within the runtime context.'b'__enter__'u'__enter__'b'__exit__'u'__exit__'b'An abstract base class for asynchronous context managers.'u'An abstract base class for asynchronous context managers.'b'__aenter__'u'__aenter__'b'__aexit__'u'__aexit__'b'A base class or mixin that enables context managers to work as decorators.'u'A base class or mixin that enables context managers to work as decorators.'b'Return a recreated instance of self.

        Allows an otherwise one-shot context manager like
        _GeneratorContextManager to support use as
        a decorator via implicit recreation.

        This is a private interface just for _GeneratorContextManager.
        See issue #11647 for details.
        'u'Return a recreated instance of self.

        Allows an otherwise one-shot context manager like
        _GeneratorContextManager to support use as
        a decorator via implicit recreation.

        This is a private interface just for _GeneratorContextManager.
        See issue #11647 for details.
        'b'Shared functionality for @contextmanager and @asynccontextmanager.'u'Shared functionality for @contextmanager and @asynccontextmanager.'b'Helper for @contextmanager decorator.'u'Helper for @contextmanager decorator.'b'generator didn't yield'u'generator didn't yield'b'generator didn't stop'u'generator didn't stop'b'generator didn't stop after throw()'u'generator didn't stop after throw()'b'Helper for @asynccontextmanager decorator.'u'Helper for @asynccontextmanager decorator.'b'generator didn't stop after athrow()'u'generator didn't stop after athrow()'b'@contextmanager decorator.

    Typical usage:

        @contextmanager
        def some_generator(<arguments>):
            <setup>
            try:
                yield <value>
            finally:
                <cleanup>

    This makes this:

        with some_generator(<arguments>) as <variable>:
            <body>

    equivalent to this:

        <setup>
        try:
            <variable> = <value>
            <body>
        finally:
            <cleanup>
    'u'@contextmanager decorator.

    Typical usage:

        @contextmanager
        def some_generator(<arguments>):
            <setup>
            try:
                yield <value>
            finally:
                <cleanup>

    This makes this:

        with some_generator(<arguments>) as <variable>:
            <body>

    equivalent to this:

        <setup>
        try:
            <variable> = <value>
            <body>
        finally:
            <cleanup>
    'b'@asynccontextmanager decorator.

    Typical usage:

        @asynccontextmanager
        async def some_async_generator(<arguments>):
            <setup>
            try:
                yield <value>
            finally:
                <cleanup>

    This makes this:

        async with some_async_generator(<arguments>) as <variable>:
            <body>

    equivalent to this:

        <setup>
        try:
            <variable> = <value>
            <body>
        finally:
            <cleanup>
    'u'@asynccontextmanager decorator.

    Typical usage:

        @asynccontextmanager
        async def some_async_generator(<arguments>):
            <setup>
            try:
                yield <value>
            finally:
                <cleanup>

    This makes this:

        async with some_async_generator(<arguments>) as <variable>:
            <body>

    equivalent to this:

        <setup>
        try:
            <variable> = <value>
            <body>
        finally:
            <cleanup>
    'b'Context to automatically close something at the end of a block.

    Code like this:

        with closing(<module>.open(<arguments>)) as f:
            <block>

    is equivalent to this:

        f = <module>.open(<arguments>)
        try:
            <block>
        finally:
            f.close()

    'u'Context to automatically close something at the end of a block.

    Code like this:

        with closing(<module>.open(<arguments>)) as f:
            <block>

    is equivalent to this:

        f = <module>.open(<arguments>)
        try:
            <block>
        finally:
            f.close()

    'b'Context manager for temporarily redirecting stdout to another file.

        # How to send help() to stderr
        with redirect_stdout(sys.stderr):
            help(dir)

        # How to write help() to a file
        with open('help.txt', 'w') as f:
            with redirect_stdout(f):
                help(pow)
    'u'Context manager for temporarily redirecting stdout to another file.

        # How to send help() to stderr
        with redirect_stdout(sys.stderr):
            help(dir)

        # How to write help() to a file
        with open('help.txt', 'w') as f:
            with redirect_stdout(f):
                help(pow)
    'b'Context manager for temporarily redirecting stderr to another file.'u'Context manager for temporarily redirecting stderr to another file.'b'Context manager to suppress specified exceptions

    After the exception is suppressed, execution proceeds with the next
    statement following the with statement.

         with suppress(FileNotFoundError):
             os.remove(somefile)
         # Execution still resumes here if the file was already removed
    'u'Context manager to suppress specified exceptions

    After the exception is suppressed, execution proceeds with the next
    statement following the with statement.

         with suppress(FileNotFoundError):
             os.remove(somefile)
         # Execution still resumes here if the file was already removed
    'b'A base class for ExitStack and AsyncExitStack.'u'A base class for ExitStack and AsyncExitStack.'b'Preserve the context stack by transferring it to a new instance.'u'Preserve the context stack by transferring it to a new instance.'b'Registers a callback with the standard __exit__ method signature.

        Can suppress exceptions the same way __exit__ method can.
        Also accepts any object with an __exit__ method (registering a call
        to the method instead of the object itself).
        'u'Registers a callback with the standard __exit__ method signature.

        Can suppress exceptions the same way __exit__ method can.
        Also accepts any object with an __exit__ method (registering a call
        to the method instead of the object itself).
        'b'Enters the supplied context manager.

        If successful, also pushes its __exit__ method as a callback and
        returns the result of the __enter__ method.
        'u'Enters the supplied context manager.

        If successful, also pushes its __exit__ method as a callback and
        returns the result of the __enter__ method.
        'b'Registers an arbitrary callback and arguments.

        Cannot suppress exceptions.
        'u'Registers an arbitrary callback and arguments.

        Cannot suppress exceptions.
        'b'Helper to correctly register callbacks to __exit__ methods.'u'Helper to correctly register callbacks to __exit__ methods.'b'Context manager for dynamic management of a stack of exit callbacks.

    For example:
        with ExitStack() as stack:
            files = [stack.enter_context(open(fname)) for fname in filenames]
            # All opened files will automatically be closed at the end of
            # the with statement, even if attempts to open files later
            # in the list raise an exception.
    'u'Context manager for dynamic management of a stack of exit callbacks.

    For example:
        with ExitStack() as stack:
            files = [stack.enter_context(open(fname)) for fname in filenames]
            # All opened files will automatically be closed at the end of
            # the with statement, even if attempts to open files later
            # in the list raise an exception.
    'b'Immediately unwind the context stack.'u'Immediately unwind the context stack.'b'Async context manager for dynamic management of a stack of exit
    callbacks.

    For example:
        async with AsyncExitStack() as stack:
            connections = [await stack.enter_async_context(get_connection())
                for i in range(5)]
            # All opened connections will automatically be released at the
            # end of the async with statement, even if attempts to open a
            # connection later in the list raise an exception.
    'u'Async context manager for dynamic management of a stack of exit
    callbacks.

    For example:
        async with AsyncExitStack() as stack:
            connections = [await stack.enter_async_context(get_connection())
                for i in range(5)]
            # All opened connections will automatically be released at the
            # end of the async with statement, even if attempts to open a
            # connection later in the list raise an exception.
    'b'Enters the supplied async context manager.

        If successful, also pushes its __aexit__ method as a callback and
        returns the result of the __aenter__ method.
        'u'Enters the supplied async context manager.

        If successful, also pushes its __aexit__ method as a callback and
        returns the result of the __aenter__ method.
        'b'Registers a coroutine function with the standard __aexit__ method
        signature.

        Can suppress exceptions the same way __aexit__ method can.
        Also accepts any object with an __aexit__ method (registering a call
        to the method instead of the object itself).
        'u'Registers a coroutine function with the standard __aexit__ method
        signature.

        Can suppress exceptions the same way __aexit__ method can.
        Also accepts any object with an __aexit__ method (registering a call
        to the method instead of the object itself).
        'b'Registers an arbitrary coroutine function and arguments.

        Cannot suppress exceptions.
        'u'Registers an arbitrary coroutine function and arguments.

        Cannot suppress exceptions.
        'b'Helper to correctly register coroutine function to __aexit__
        method.'u'Helper to correctly register coroutine function to __aexit__
        method.'b'Context manager that does no additional processing.

    Used as a stand-in for a normal context manager, when a particular
    block of code is only sometimes used with a normal context manager:

    cm = optional_cm if condition else nullcontext()
    with cm:
        # Perform operation, using optional_cm if condition is True
    'u'Context manager that does no additional processing.

    Used as a stand-in for a normal context manager, when a particular
    block of code is only sometimes used with a normal context manager:

    cm = optional_cm if condition else nullcontext()
    with cm:
        # Perform operation, using optional_cm if condition is True
    'u'Python.Python39.lib.contextlib'u'Python39.lib.contextlib'u'lib.contextlib'u'contextlib'b'ContextVar'u'ContextVar'b'Token'u'Token'b'copy_context'u'copy_context'u'Python.Python39.lib.contextvars'u'Python39.lib.contextvars'u'lib.contextvars'u'contextvars'Validation error.  If a rule converter raises this exception the rule
    does not match the current URL and the next URL is tried.
    Base class for all converters.

    .. versionchanged:: 2.3
        ``part_isolating`` defaults to ``False`` if ``regex`` contains a ``/``.
    [^/]+weightpart_isolatingto_pythonto_urlPassing bytes as a URL value is deprecated and will not be supported in Werkzeug 3.0."Passing bytes as a URL value is deprecated and will not be supported"" in Werkzeug 3.0."!$&'()*+,/:;=@This converter is the default converter and accepts any string but
    only one path segment.  Thus the string can not include a slash.

    This is the default validator.

    Example::

        Rule('/pages/<page>'),
        Rule('/<string(length=2):lang_code>')

    :param map: the :class:`Map`.
    :param minlength: the minimum length of the string.  Must be greater
                      or equal 1.
    :param maxlength: the maximum length of the string.
    :param length: the exact length of the string.
    minlengthlength_regexmaxlength_value[^/]Matches one of the items provided.  Items can either be Python
    identifiers or strings::

        Rule('/<any(about, help, imprint, class, "foo,bar"):page_name>')

    :param map: the :class:`Map`.
    :param items: this function accepts the possible items as positional
                  arguments.

    .. versionchanged:: 2.2
        Value is validated when building a URL.
    (?:valid_values' is not one of Like the default :class:`UnicodeConverter`, but it also matches
    slashes.  This is useful for wikis and similar applications::

        Rule('/<path:wikipage>')
        Rule('/<path:wikipage>/edit')

    :param map: the :class:`Map`.
    [^/].*?NumberConverterBaseclass for `IntegerConverter` and `FloatConverter`.

    :internal:
    num_convertfixed_digitssignedsigned_regex-?This converter only accepts integer values::

        Rule("/page/<int:page>")

    By default it only accepts unsigned, positive values. The ``signed``
    parameter will enable signed, negative values. ::

        Rule("/page/<int(signed=True):page>")

    :param map: The :class:`Map`.
    :param fixed_digits: The number of fixed digits in the URL. If you
        set this to ``4`` for example, the rule will only match if the
        URL looks like ``/0001/``. The default is variable length.
    :param min: The minimal value.
    :param max: The maximal value.
    :param signed: Allow signed (negative) values.

    .. versionadded:: 0.15
        The ``signed`` parameter.
    \d+This converter only accepts floating point values::

        Rule("/probability/<float:probability>")

    By default it only accepts unsigned, positive values. The ``signed``
    parameter will enable signed, negative values. ::

        Rule("/offset/<float(signed=True):offset>")

    :param map: The :class:`Map`.
    :param min: The minimal value.
    :param max: The maximal value.
    :param signed: Allow signed (negative) values.

    .. versionadded:: 0.15
        The ``signed`` parameter.
    \d+\.\d+This converter only accepts UUID strings::

        Rule('/object/<uuid:identifier>')

    .. versionadded:: 0.10

    :param map: the :class:`Map`.
    [A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}r"[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-"r"[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}"DEFAULT_CONVERTERS# If the converter isn't inheriting its regex, disable part_isolating by default# if the regex contains a / character.# safe = https://url.spec.whatwg.org/#url-path-segment-string#: the default converter mapping for the map.b'Validation error.  If a rule converter raises this exception the rule
    does not match the current URL and the next URL is tried.
    'u'Validation error.  If a rule converter raises this exception the rule
    does not match the current URL and the next URL is tried.
    'b'Base class for all converters.

    .. versionchanged:: 2.3
        ``part_isolating`` defaults to ``False`` if ``regex`` contains a ``/``.
    'u'Base class for all converters.

    .. versionchanged:: 2.3
        ``part_isolating`` defaults to ``False`` if ``regex`` contains a ``/``.
    'b'[^/]+'u'[^/]+'b'regex'u'regex'b'part_isolating'u'part_isolating'b'Passing bytes as a URL value is deprecated and will not be supported in Werkzeug 3.0.'u'Passing bytes as a URL value is deprecated and will not be supported in Werkzeug 3.0.'b'!$&'()*+,/:;=@'u'!$&'()*+,/:;=@'b'This converter is the default converter and accepts any string but
    only one path segment.  Thus the string can not include a slash.

    This is the default validator.

    Example::

        Rule('/pages/<page>'),
        Rule('/<string(length=2):lang_code>')

    :param map: the :class:`Map`.
    :param minlength: the minimum length of the string.  Must be greater
                      or equal 1.
    :param maxlength: the maximum length of the string.
    :param length: the exact length of the string.
    'u'This converter is the default converter and accepts any string but
    only one path segment.  Thus the string can not include a slash.

    This is the default validator.

    Example::

        Rule('/pages/<page>'),
        Rule('/<string(length=2):lang_code>')

    :param map: the :class:`Map`.
    :param minlength: the minimum length of the string.  Must be greater
                      or equal 1.
    :param maxlength: the maximum length of the string.
    :param length: the exact length of the string.
    'b'[^/]'u'[^/]'b'Matches one of the items provided.  Items can either be Python
    identifiers or strings::

        Rule('/<any(about, help, imprint, class, "foo,bar"):page_name>')

    :param map: the :class:`Map`.
    :param items: this function accepts the possible items as positional
                  arguments.

    .. versionchanged:: 2.2
        Value is validated when building a URL.
    'u'Matches one of the items provided.  Items can either be Python
    identifiers or strings::

        Rule('/<any(about, help, imprint, class, "foo,bar"):page_name>')

    :param map: the :class:`Map`.
    :param items: this function accepts the possible items as positional
                  arguments.

    .. versionchanged:: 2.2
        Value is validated when building a URL.
    'b'(?:'u'(?:'b'' is not one of 'u'' is not one of 'b'Like the default :class:`UnicodeConverter`, but it also matches
    slashes.  This is useful for wikis and similar applications::

        Rule('/<path:wikipage>')
        Rule('/<path:wikipage>/edit')

    :param map: the :class:`Map`.
    'u'Like the default :class:`UnicodeConverter`, but it also matches
    slashes.  This is useful for wikis and similar applications::

        Rule('/<path:wikipage>')
        Rule('/<path:wikipage>/edit')

    :param map: the :class:`Map`.
    'b'[^/].*?'u'[^/].*?'b'Baseclass for `IntegerConverter` and `FloatConverter`.

    :internal:
    'u'Baseclass for `IntegerConverter` and `FloatConverter`.

    :internal:
    'b'-?'u'-?'b'This converter only accepts integer values::

        Rule("/page/<int:page>")

    By default it only accepts unsigned, positive values. The ``signed``
    parameter will enable signed, negative values. ::

        Rule("/page/<int(signed=True):page>")

    :param map: The :class:`Map`.
    :param fixed_digits: The number of fixed digits in the URL. If you
        set this to ``4`` for example, the rule will only match if the
        URL looks like ``/0001/``. The default is variable length.
    :param min: The minimal value.
    :param max: The maximal value.
    :param signed: Allow signed (negative) values.

    .. versionadded:: 0.15
        The ``signed`` parameter.
    'u'This converter only accepts integer values::

        Rule("/page/<int:page>")

    By default it only accepts unsigned, positive values. The ``signed``
    parameter will enable signed, negative values. ::

        Rule("/page/<int(signed=True):page>")

    :param map: The :class:`Map`.
    :param fixed_digits: The number of fixed digits in the URL. If you
        set this to ``4`` for example, the rule will only match if the
        URL looks like ``/0001/``. The default is variable length.
    :param min: The minimal value.
    :param max: The maximal value.
    :param signed: Allow signed (negative) values.

    .. versionadded:: 0.15
        The ``signed`` parameter.
    'b'\d+'u'\d+'b'This converter only accepts floating point values::

        Rule("/probability/<float:probability>")

    By default it only accepts unsigned, positive values. The ``signed``
    parameter will enable signed, negative values. ::

        Rule("/offset/<float(signed=True):offset>")

    :param map: The :class:`Map`.
    :param min: The minimal value.
    :param max: The maximal value.
    :param signed: Allow signed (negative) values.

    .. versionadded:: 0.15
        The ``signed`` parameter.
    'u'This converter only accepts floating point values::

        Rule("/probability/<float:probability>")

    By default it only accepts unsigned, positive values. The ``signed``
    parameter will enable signed, negative values. ::

        Rule("/offset/<float(signed=True):offset>")

    :param map: The :class:`Map`.
    :param min: The minimal value.
    :param max: The maximal value.
    :param signed: Allow signed (negative) values.

    .. versionadded:: 0.15
        The ``signed`` parameter.
    'b'\d+\.\d+'u'\d+\.\d+'b'This converter only accepts UUID strings::

        Rule('/object/<uuid:identifier>')

    .. versionadded:: 0.10

    :param map: the :class:`Map`.
    'u'This converter only accepts UUID strings::

        Rule('/object/<uuid:identifier>')

    .. versionadded:: 0.10

    :param map: the :class:`Map`.
    'b'[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}'u'[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}'b'uuid'u'uuid'u'werkzeug.routing.converters'u'routing.converters'u'converters'Generic (shallow and deep) copying operations.

Interface summary:

        import copy

        x = copy.copy(y)        # make a shallow copy of y
        x = copy.deepcopy(y)    # make a deep copy of y

For module specific errors, copy.Error is raised.

The difference between shallow and deep copying is only relevant for
compound objects (objects that contain other objects, like lists or
class instances).

- A shallow copy constructs a new compound object and then (to the
  extent possible) inserts *the same objects* into it that the
  original contains.

- A deep copy constructs a new compound object and then, recursively,
  inserts *copies* into it of the objects found in the original.

Two problems often exist with deep copy operations that don't exist
with shallow copy operations:

 a) recursive objects (compound objects that, directly or indirectly,
    contain a reference to themselves) may cause a recursive loop

 b) because deep copy copies *everything* it may copy too much, e.g.
    administrative data structures that should be shared even between
    copies

Python's deep copy operation avoids these problems by:

 a) keeping a table of objects already copied during the current
    copying pass

 b) letting user-defined classes override the copying operation or the
    set of components copied

This version does not copy types like module, class, function, method,
nor stack trace, stack frame, nor file, socket, window, nor array, nor
any similar types.

Classes can use the same interfaces to control copying that they use
to control pickling: they can define methods called __getinitargs__(),
__getstate__() and __setstate__().  See the documentation for module
"pickle" for information on these methods.
org.python.corePyStringMapdeepcopyShallow copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    _copy_dispatchcopier_copy_immutablereductorun(shallow)copyable object of type %s_reconstruct_nilDeep copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    _deepcopy_dispatch_deepcopy_atomicun(deep)copyable object of type %s_keep_alive_deepcopy_list_deepcopy_tuple_deepcopy_dict_deepcopy_methodKeeps a reference to the object x in the memo.

    Because we remember objects by their id, we have
    to assure that possibly temporary objects are kept
    alive by referencing them.
    We store a reference at the id of the memo, which should
    normally not be used unless someone tries to deepcopy
    the memo itself...
    listiterdictiterdeepslotstate# backward compatibility# treat it as a regular class:# If is its own copy, don't memoize.# Make sure x lives at least as long as d# We're not going to put the tuple in the memo, but it's still important we# check for it, in case the tuple contains recursive mutable structures.# Copy instance methods# aha, this is the first one :-)b'Generic (shallow and deep) copying operations.

Interface summary:

        import copy

        x = copy.copy(y)        # make a shallow copy of y
        x = copy.deepcopy(y)    # make a deep copy of y

For module specific errors, copy.Error is raised.

The difference between shallow and deep copying is only relevant for
compound objects (objects that contain other objects, like lists or
class instances).

- A shallow copy constructs a new compound object and then (to the
  extent possible) inserts *the same objects* into it that the
  original contains.

- A deep copy constructs a new compound object and then, recursively,
  inserts *copies* into it of the objects found in the original.

Two problems often exist with deep copy operations that don't exist
with shallow copy operations:

 a) recursive objects (compound objects that, directly or indirectly,
    contain a reference to themselves) may cause a recursive loop

 b) because deep copy copies *everything* it may copy too much, e.g.
    administrative data structures that should be shared even between
    copies

Python's deep copy operation avoids these problems by:

 a) keeping a table of objects already copied during the current
    copying pass

 b) letting user-defined classes override the copying operation or the
    set of components copied

This version does not copy types like module, class, function, method,
nor stack trace, stack frame, nor file, socket, window, nor array, nor
any similar types.

Classes can use the same interfaces to control copying that they use
to control pickling: they can define methods called __getinitargs__(),
__getstate__() and __setstate__().  See the documentation for module
"pickle" for information on these methods.
'u'Generic (shallow and deep) copying operations.

Interface summary:

        import copy

        x = copy.copy(y)        # make a shallow copy of y
        x = copy.deepcopy(y)    # make a deep copy of y

For module specific errors, copy.Error is raised.

The difference between shallow and deep copying is only relevant for
compound objects (objects that contain other objects, like lists or
class instances).

- A shallow copy constructs a new compound object and then (to the
  extent possible) inserts *the same objects* into it that the
  original contains.

- A deep copy constructs a new compound object and then, recursively,
  inserts *copies* into it of the objects found in the original.

Two problems often exist with deep copy operations that don't exist
with shallow copy operations:

 a) recursive objects (compound objects that, directly or indirectly,
    contain a reference to themselves) may cause a recursive loop

 b) because deep copy copies *everything* it may copy too much, e.g.
    administrative data structures that should be shared even between
    copies

Python's deep copy operation avoids these problems by:

 a) keeping a table of objects already copied during the current
    copying pass

 b) letting user-defined classes override the copying operation or the
    set of components copied

This version does not copy types like module, class, function, method,
nor stack trace, stack frame, nor file, socket, window, nor array, nor
any similar types.

Classes can use the same interfaces to control copying that they use
to control pickling: they can define methods called __getinitargs__(),
__getstate__() and __setstate__().  See the documentation for module
"pickle" for information on these methods.
'b'deepcopy'u'deepcopy'b'Shallow copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    'u'Shallow copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    'b'__copy__'u'__copy__'b'__reduce_ex__'u'__reduce_ex__'b'__reduce__'u'__reduce__'b'un(shallow)copyable object of type %s'u'un(shallow)copyable object of type %s'b'CodeType'u'CodeType'b'Deep copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    'u'Deep copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    'b'__deepcopy__'u'__deepcopy__'b'un(deep)copyable object of type %s'u'un(deep)copyable object of type %s'b'Keeps a reference to the object x in the memo.

    Because we remember objects by their id, we have
    to assure that possibly temporary objects are kept
    alive by referencing them.
    We store a reference at the id of the memo, which should
    normally not be used unless someone tries to deepcopy
    the memo itself...
    'u'Keeps a reference to the object x in the memo.

    Because we remember objects by their id, we have
    to assure that possibly temporary objects are kept
    alive by referencing them.
    We store a reference at the id of the memo, which should
    normally not be used unless someone tries to deepcopy
    the memo itself...
    'b'__setstate__'u'__setstate__'u'Python.Python39.lib.copy'u'Python39.lib.copy'u'lib.copy'Helper to provide extensibility for pickle.

This is only useful to add pickle support for extension types defined in
C, not for instances of user-defined classes.
constructoradd_extensionremove_extensionclear_extension_cacheob_typepickle_functionconstructor_obreduction functions must be callableconstructors must be callablepickle_complex_reconstructor_HEAPTYPE_new_type_reduce_excannot pickle  object object: a class that defines __slots__ without defining __getstate__ cannot be pickled with protocol " object: ""a class that defines __slots__ without ""defining __getstate__ cannot be pickled ""with protocol "__newobj____newobj_ex__Used by pickle protocol 4, instead of __newobj__ to allow classes with
    keyword-only arguments to be pickled correctly.
    _slotnamesReturn a list of slot names for a given class.

    This needs to find slots defined by the class and its bases, so we
    can't simply return the __slots__ attribute.  We must walk down
    the Method Resolution Order and concatenate the __slots__ of each
    class found there.  (This assumes classes don't modify their
    __slots__ attribute to misrepresent their slots after the class is
    defined.)
    __slotnames__slots_%s%s_extension_registry_inverted_registry_extension_cacheRegister an extension code.code out of rangekey %s is already registered with code %scode %s is already in use for key %sUnregister an extension code.  For testing only.key %s is not registered with code %s# The constructor_ob function is a vestige of safe for unpickling.# There is no reason for the caller to pass it anymore.# Example: provide pickling support for complex numbers.# Support for pickling new-style objects# Python code for object.__reduce_ex__ for protocols 0 and 1# not really reachable# Helper for __reduce_ex__ protocol 2# Get the value from a cache in the class if possible# Not cached -- calculate the value# This class has no slots# Slots found -- gather slot names from all base classes# if class has a single slot, it can be given as a string# special descriptors# mangled names# Cache the outcome in the class if at all possible# But don't die if we can't# A registry of extension codes.  This is an ad-hoc compression# mechanism.  Whenever a global reference to <module>, <name> is about# to be pickled, the (<module>, <name>) tuple is looked up here to see# if it is a registered extension code for it.  Extension codes are# universal, so that the meaning of a pickle does not depend on# context.  (There are also some codes reserved for local use that# don't have this restriction.)  Codes are positive ints; 0 is# reserved.# key -> code# code -> key# code -> object# Don't ever rebind those names:  pickling grabs a reference to them when# it's initialized, and won't see a rebinding.# Redundant registrations are benign# Standard extension code assignments# Reserved ranges# First  Last Count  Purpose#     1   127   127  Reserved for Python standard library#   128   191    64  Reserved for Zope#   192   239    48  Reserved for 3rd parties#   240   255    16  Reserved for private use (will never be assigned)#   256   Inf   Inf  Reserved for future assignment# Extension codes are assigned by the Python Software Foundation.b'Helper to provide extensibility for pickle.

This is only useful to add pickle support for extension types defined in
C, not for instances of user-defined classes.
'u'Helper to provide extensibility for pickle.

This is only useful to add pickle support for extension types defined in
C, not for instances of user-defined classes.
'b'constructor'u'constructor'b'add_extension'u'add_extension'b'remove_extension'u'remove_extension'b'clear_extension_cache'u'clear_extension_cache'b'reduction functions must be callable'u'reduction functions must be callable'b'constructors must be callable'u'constructors must be callable'b'__flags__'u'__flags__'b'cannot pickle 'u'cannot pickle 'b' object'u' object'b' object: a class that defines __slots__ without defining __getstate__ cannot be pickled with protocol 'u' object: a class that defines __slots__ without defining __getstate__ cannot be pickled with protocol 'b'Used by pickle protocol 4, instead of __newobj__ to allow classes with
    keyword-only arguments to be pickled correctly.
    'u'Used by pickle protocol 4, instead of __newobj__ to allow classes with
    keyword-only arguments to be pickled correctly.
    'b'Return a list of slot names for a given class.

    This needs to find slots defined by the class and its bases, so we
    can't simply return the __slots__ attribute.  We must walk down
    the Method Resolution Order and concatenate the __slots__ of each
    class found there.  (This assumes classes don't modify their
    __slots__ attribute to misrepresent their slots after the class is
    defined.)
    'u'Return a list of slot names for a given class.

    This needs to find slots defined by the class and its bases, so we
    can't simply return the __slots__ attribute.  We must walk down
    the Method Resolution Order and concatenate the __slots__ of each
    class found there.  (This assumes classes don't modify their
    __slots__ attribute to misrepresent their slots after the class is
    defined.)
    'b'__slotnames__'u'__slotnames__'b'_%s%s'u'_%s%s'b'Register an extension code.'u'Register an extension code.'b'code out of range'u'code out of range'b'key %s is already registered with code %s'u'key %s is already registered with code %s'b'code %s is already in use for key %s'u'code %s is already in use for key %s'b'Unregister an extension code.  For testing only.'u'Unregister an extension code.  For testing only.'b'key %s is not registered with code %s'u'key %s is not registered with code %s'u'Python.Python39.lib.copyreg'u'Python39.lib.copyreg'u'lib.copyreg'Exitjoin_optionspop_contextpush_context_flag_needs_valuesplit_opt_detect_program_name_expand_argsmake_default_short_helpmake_strPacifyFlushWrappershell_completionCompletionItem_complete_visible_commandsincompleteList all the subcommands of a group that start with the
    incomplete value and aren't hidden.

    :param ctx: Invocation context for the group.
    :param incomplete: Value being completed. May be empty.
    _check_multicommandbase_commandcmd_nameIt is not possible to add multi commands as children to another multi command that is in chain mode."It is not possible to add multi commands as children to"" another multi command that is in chain mode."hintFound a multi command as subcommand to a multi command that is in chain mode. This is not supported."Found a multi command as subcommand to a multi command"" that is in chain mode. This is not supported.". Command  is set to chain and " is set to chain and" was added as a subcommand but it in itself is a multi command. (" was added as a subcommand but it in itself is a"" multi command. (" is a  within a chained " within a chained "" named"batchbatch_sizeaugment_usage_errorsContext manager that attaches extra information to exceptions.iter_params_for_processinginvocation_orderdeclaration_orderGiven a sequence of parameters in the order as should be considered
    for processing and an iterable of parameters that exist, this returns
    a list in the correct order as they should be processed.
    sort_keyThis is an :class:`~enum.Enum` that indicates the source of a
    parameter's value.

    Use :meth:`click.Context.get_parameter_source` to get the
    source for a parameter by name.

    .. versionchanged:: 8.0
        Use :class:`~enum.Enum` and drop the ``validate`` method.

    .. versionchanged:: 8.0
        Added the ``PROMPT`` value.
    COMMANDLINEThe value was provided by the command line args.ENVIRONMENTThe value was provided with an environment variable.Used the default specified by the parameter.Used a default provided by :attr:`Context.default_map`.Used a prompt to confirm a default or provide a value.The context is a special internal object that holds state relevant
    for the script execution at every single level.  It's normally invisible
    to commands unless they opt-in to getting access to it.

    The context is useful as it can pass internal objects around and can
    control special execution features such as reading data from
    environment variables.

    A context can be used as context manager in which case it will call
    :meth:`close` on teardown.

    :param command: the command class for this context.
    :param parent: the parent context.
    :param info_name: the info name for this invocation.  Generally this
                      is the most descriptive name for the script or
                      command.  For the toplevel script it is usually
                      the name of the script, for commands below it it's
                      the name of the script.
    :param obj: an arbitrary object of user data.
    :param auto_envvar_prefix: the prefix to use for automatic environment
                               variables.  If this is `None` then reading
                               from environment variables is disabled.  This
                               does not affect manually set environment
                               variables which are always read.
    :param default_map: a dictionary (like object) with default values
                        for parameters.
    :param terminal_width: the width of the terminal.  The default is
                           inherit from parent context.  If no context
                           defines the terminal width then auto
                           detection will be applied.
    :param max_content_width: the maximum width for content rendered by
                              Click (this currently only affects help
                              pages).  This defaults to 80 characters if
                              not overridden.  In other words: even if the
                              terminal is larger than that, Click will not
                              format things wider than 80 characters by
                              default.  In addition to that, formatters might
                              add some safety mapping on the right.
    :param resilient_parsing: if this flag is enabled then Click will
                              parse without any interactivity or callback
                              invocation.  Default values will also be
                              ignored.  This is useful for implementing
                              things such as completion support.
    :param allow_extra_args: if this is set to `True` then extra arguments
                             at the end will not raise an error and will be
                             kept on the context.  The default is to inherit
                             from the command.
    :param allow_interspersed_args: if this is set to `False` then options
                                    and arguments cannot be mixed.  The
                                    default is to inherit from the command.
    :param ignore_unknown_options: instructs click to ignore options it does
                                   not know and keeps them for later
                                   processing.
    :param help_option_names: optionally a list of strings that define how
                              the default help parameter is named.  The
                              default is ``['--help']``.
    :param token_normalize_func: an optional function that is used to
                                 normalize tokens (options, choices,
                                 etc.).  This for instance can be used to
                                 implement case insensitive behavior.
    :param color: controls if the terminal supports ANSI colors or not.  The
                  default is autodetection.  This is only needed if ANSI
                  codes are used in texts that Click prints which is by
                  default not the case.  This for instance would affect
                  help output.
    :param show_default: Show the default value for commands. If this
        value is not set, it defaults to the value from the parent
        context. ``Command.show_default`` overrides this default for the
        specific command.

    .. versionchanged:: 8.1
        The ``show_default`` parameter is overridden by
        ``Command.show_default``, instead of the other way around.

    .. versionchanged:: 8.0
        The ``show_default`` parameter defaults to the value from the
        parent context.

    .. versionchanged:: 7.1
       Added the ``show_default`` parameter.

    .. versionchanged:: 4.0
        Added the ``color``, ``ignore_unknown_options``, and
        ``max_content_width`` parameters.

    .. versionchanged:: 3.0
        Added the ``allow_extra_args`` and ``allow_interspersed_args``
        parameters.

    .. versionchanged:: 2.0
        Added the ``resilient_parsing``, ``help_option_names``, and
        ``token_normalize_func`` parameters.
    default_mapterminal_widthmax_content_widthallow_extra_argsallow_interspersed_argsignore_unknown_optionshelp_option_namestoken_normalize_funcshow_defaultprotected_args_opt_prefixesinvoked_subcommand--help_close_callbacks_depth_parameter_source_exit_stackto_info_dictGather information that could be useful for a tool generating
        user-facing documentation. This traverses the entire CLI
        structure.

        .. code-block:: python

            with Context(cli) as ctx:
                info = ctx.to_info_dict()

        .. versionadded:: 8.0
        scopeThis helper method can be used with the context object to promote
        it to the current thread local (see :func:`get_current_context`).
        The default behavior of this is to invoke the cleanup functions which
        can be disabled by setting `cleanup` to `False`.  The cleanup
        functions are typically used for things such as closing file handles.

        If the cleanup is intended the context object can also be directly
        used as a context manager.

        Example usage::

            with ctx.scope():
                assert get_current_context() is ctx

        This is equivalent::

            with ctx:
                assert get_current_context() is ctx

        .. versionadded:: 5.0

        :param cleanup: controls if the cleanup functions should be run or
                        not.  The default is to run these functions.  In
                        some situations the context only wants to be
                        temporarily pushed in which case this can be disabled.
                        Nested pushes automatically defer the cleanup.
        This is a dictionary which is shared with all the contexts
        that are nested.  It exists so that click utilities can store some
        state here if they need to.  It is however the responsibility of
        that code to manage this dictionary well.

        The keys are supposed to be unique dotted strings.  For instance
        module paths are a good choice for it.  What is stored in there is
        irrelevant for the operation of click.  However what is important is
        that code that places data here adheres to the general semantics of
        the system.

        Example usage::

            LANG_KEY = f'{__name__}.lang'

            def set_language(value):
                ctx = get_current_context()
                ctx.meta[LANG_KEY] = value

            def get_language():
                return get_current_context().meta.get(LANG_KEY, 'en_US')

        .. versionadded:: 5.0
        make_formatterCreates the :class:`~click.HelpFormatter` for the help and
        usage output.

        To quickly customize the formatter class used without overriding
        this method, set the :attr:`formatter_class` attribute.

        .. versionchanged:: 8.0
            Added the :attr:`formatter_class` attribute.
        context_managerRegister a resource as if it were used in a ``with``
        statement. The resource will be cleaned up when the context is
        popped.

        Uses :meth:`contextlib.ExitStack.enter_context`. It calls the
        resource's ``__enter__()`` method and returns the result. When
        the context is popped, it closes the stack, which calls the
        resource's ``__exit__()`` method.

        To register a cleanup function for something that isn't a
        context manager, use :meth:`call_on_close`. Or use something
        from :mod:`contextlib` to turn it into a context manager first.

        .. code-block:: python

            @click.group()
            @click.option("--name")
            @click.pass_context
            def cli(ctx):
                ctx.obj = ctx.with_resource(connect_db(name))

        :param context_manager: The context manager to enter.
        :return: Whatever ``context_manager.__enter__()`` returns.

        .. versionadded:: 8.0
        call_on_closeRegister a function to be called when the context tears down.

        This can be used to close resources opened during the script
        execution. Resources that support Python's context manager
        protocol which would be used in a ``with`` statement should be
        registered with :meth:`with_resource` instead.

        :param f: The function to execute on teardown.
        Invoke all close callbacks registered with
        :meth:`call_on_close`, and exit all context managers entered
        with :meth:`with_resource`.
        command_pathThe computed command path.  This is used for the ``usage``
        information on the help page.  It's automatically created by
        combining the info names of the chain of contexts to the root.
        parent_command_pathget_paramsget_usage_piecesfind_rootFinds the outermost context.find_objectobject_typeFinds the closest object of a given type.Like :meth:`find_object` but sets the innermost object to a
        new instance of `object_type` if it does not exist.
        lookup_defaultte.Literal[True]te.Literal[False]Get the default for a parameter from :attr:`default_map`.

        :param name: Name of the parameter.
        :param call: If the default is a callable, call it. Disable to
            return the callable instead.

        .. versionchanged:: 8.0
            Added the ``call`` parameter.
        Aborts the execution of the program with a specific error
        message.

        :param message: the error message to fail with.
        Aborts the script.Exits the application with a given exit code.get_usageHelper method to get formatted usage string for the current
        context and command.
        get_helpHelper method to get formatted help page for the current
        context and command.
        _make_sub_contextCreate a new context of the same type as this context, but
        for a new command.

        :meta private:
        t.Callable[..., V]__selfInvokes a command callback in exactly the way it expects.  There
        are two ways to invoke this method:

        1.  the first argument can be a callback and all other arguments and
            keyword arguments are forwarded directly to the function.
        2.  the first argument is a click command object.  In that case all
            arguments are forwarded as well but proper click parameters
            (options and click arguments) must be keyword arguments and Click
            will fill in defaults.

        Note that before Click 3.2 keyword arguments were not properly filled
        in against the intention of this code and no context was created.  For
        more information about this change and why it was done in a bugfix
        release see :ref:`upgrade-to-3.2`.

        .. versionchanged:: 8.0
            All ``kwargs`` are tracked in :attr:`params` so they will be
            passed if :meth:`forward` is called at multiple levels.
        other_cmdThe given command does not have a callback that can be invoked.type_cast_valueforward__cmdSimilar to :meth:`invoke` but fills in default keyword
        arguments from the current context if the other command expects
        it.  This cannot invoke callbacks directly, only other commands.

        .. versionchanged:: 8.0
            All ``kwargs`` are tracked in :attr:`params` so they will be
            passed if ``forward`` is called at multiple levels.
        Callback is not a command.set_parameter_sourceSet the source of a parameter. This indicates the location
        from which the value of the parameter was obtained.

        :param name: The name of the parameter.
        :param source: A member of :class:`~click.core.ParameterSource`.
        Get the source of a parameter. This indicates the location
        from which the value of the parameter was obtained.

        This can be useful for determining when a user specified a value
        on the command line that is the same as the default value. It
        will be :attr:`~click.core.ParameterSource.DEFAULT` only if the
        value was actually taken from the default.

        :param name: The name of the parameter.
        :rtype: ParameterSource

        .. versionchanged:: 8.0
            Returns ``None`` if the parameter was not provided from any
            source.
        The base command implements the minimal API contract of commands.
    Most code will never use this as it does not implement a lot of useful
    functionality but it can act as the direct subclass of alternative
    parsing methods that do not depend on the Click parser.

    For instance, this can be used to bridge Click and other systems like
    argparse or docopt.

    Because base commands do not implement a lot of the API that other
    parts of Click take for granted, they are not supported for all
    operations.  For instance, they cannot be used with the decorators
    usually and they have no built-in callback system.

    .. versionchanged:: 2.0
       Added the `context_settings` parameter.

    :param name: the name of the command to use unless a group overrides it.
    :param context_settings: an optional dictionary with defaults that are
                             passed to the context object.
    context_classGather information that could be useful for a tool generating
        user-facing documentation. This traverses the entire structure
        below this command.

        Use :meth:`click.Context.to_info_dict` to traverse the entire
        CLI structure.

        :param ctx: A :class:`Context` representing this command.

        .. versionadded:: 8.0
        Base commands cannot get usageBase commands cannot get helpThis function when given an info name and arguments will kick
        off the parsing and create a new :class:`Context`.  It does not
        invoke the actual command callback though.

        To quickly customize the context class used without overriding
        this method, set the :attr:`context_class` attribute.

        :param info_name: the info name for this invocation.  Generally this
                          is the most descriptive name for the script or
                          command.  For the toplevel script it's usually
                          the name of the script, for commands below it's
                          the name of the command.
        :param args: the arguments to parse as list of strings.
        :param parent: the parent context if available.
        :param extra: extra keyword arguments forwarded to the context
                      constructor.

        .. versionchanged:: 8.0
            Added the :attr:`context_class` attribute.
        Given a context and a list of arguments this creates the parser
        and parses the arguments, then modifies the context as necessary.
        This is automatically invoked by :meth:`make_context`.
        Base commands do not know how to parse arguments.Given a context, this invokes the command.  The default
        implementation is raising a not implemented error.
        Base commands are not invocable by defaultshell_completeReturn a list of completions for the incomplete value. Looks
        at the names of chained multi-commands.

        Any command could be part of a chained multi-command, so sibling
        commands are valid at any point during command completion. Other
        command classes will return more completions.

        :param ctx: Invocation context for this command.
        :param incomplete: Value being completed. May be empty.

        .. versionadded:: 8.0
        click.shell_completionget_short_help_strprog_namecomplete_varstandalone_modewindows_expand_argsThis is the way to invoke a script with all the bells and
        whistles as a command line application.  This will always terminate
        the application after a call.  If this is not wanted, ``SystemExit``
        needs to be caught.

        This method is also available by directly calling the instance of
        a :class:`Command`.

        :param args: the arguments that should be used for parsing.  If not
                     provided, ``sys.argv[1:]`` is used.
        :param prog_name: the program name that should be used.  By default
                          the program name is constructed by taking the file
                          name from ``sys.argv[0]``.
        :param complete_var: the environment variable that controls the
                             bash completion support.  The default is
                             ``"_<prog_name>_COMPLETE"`` with prog_name in
                             uppercase.
        :param standalone_mode: the default behavior is to invoke the script
                                in standalone mode.  Click will then
                                handle exceptions and convert them into
                                error messages and the function will never
                                return but shut down the interpreter.  If
                                this is set to `False` they will be
                                propagated to the caller and the return
                                value of this function is the return value
                                of :meth:`invoke`.
        :param windows_expand_args: Expand glob patterns, user dir, and
            env vars in command line args on Windows.
        :param extra: extra keyword arguments are forwarded to the context
                      constructor.  See :class:`Context` for more information.

        .. versionchanged:: 8.0.1
            Added the ``windows_expand_args`` parameter to allow
            disabling command line arg expansion on Windows.

        .. versionchanged:: 8.0
            When taking arguments from ``sys.argv`` on Windows, glob
            patterns, user dir, and env vars are expanded.

        .. versionchanged:: 3.0
           Added the ``standalone_mode`` parameter.
        _main_shell_completionshowAborted!ctx_argsCheck if the shell is asking for tab completion, process
        that, then exit early. Called from :meth:`main` before the
        program is invoked.

        :param prog_name: Name of the executable in the shell.
        :param complete_var: Name of the environment variable that holds
            the completion instruction. Defaults to
            ``_{PROG_NAME}_COMPLETE``.

        .. versionchanged:: 8.2.0
            Dots (``.``) in ``prog_name`` are replaced with underscores (``_``).
        complete_name_COMPLETEinstructionAlias for :meth:`main`.Commands are the basic building block of command line interfaces in
    Click.  A basic command handles command line parsing and might dispatch
    more parsing to commands nested below it.

    :param name: the name of the command to use unless a group overrides it.
    :param context_settings: an optional dictionary with defaults that are
                             passed to the context object.
    :param callback: the callback to invoke.  This is optional.
    :param params: the parameters to register with this command.  This can
                   be either :class:`Option` or :class:`Argument` objects.
    :param help: the help string to use for this command.
    :param epilog: like the help string but it's printed at the end of the
                   help page after everything else.
    :param short_help: the short help to use for this command.  This is
                       shown on the command listing of the parent command.
    :param add_help_option: by default each command registers a ``--help``
                            option.  This can be disabled by this parameter.
    :param no_args_is_help: this controls what happens if no arguments are
                            provided.  This option is disabled by default.
                            If enabled this will add ``--help`` as argument
                            if no arguments are passed
    :param hidden: hide this command from help outputs.

    :param deprecated: issues a message indicating that
                             the command is deprecated.

    .. versionchanged:: 8.1
        ``help``, ``epilog``, and ``short_help`` are stored unprocessed,
        all formatting is done when outputting help text, not at init,
        and is done even if not using the ``@command`` decorator.

    .. versionchanged:: 8.0
        Added a ``repr`` showing the command name.

    .. versionchanged:: 7.1
        Added the ``no_args_is_help`` parameter.

    .. versionchanged:: 2.0
        Added the ``context_settings`` parameter.
    [OPTIONS]options_metavaradd_help_optioninfo_dictFormats the usage line into a string and returns it.

        Calls :meth:`format_usage` internally.
        get_help_optionWrites the usage line into the formatter.

        This is a low-level method called by :meth:`get_usage`.
        collect_usage_pieceswrite_usageReturns all the pieces that go into the usage line and returns
        it as a list of strings.
        get_help_option_namesReturns the names for the help option.secondary_optsReturns the help option object.help_optionsshow_helpShow this message and exit.make_parserCreates the underlying option parser for this command.add_to_parserFormats the help into a string and returns it.

        Calls :meth:`format_help` internally.
        Gets short help for the command or makes it by shortening the
        long help string.
        (Deprecated) {text}Writes the help into the formatter if it exists.

        This is a low-level method called by :meth:`get_help`.

        This calls the following methods:

        -   :meth:`format_usage`
        -   :meth:`format_help_text`
        -   :meth:`format_options`
        -   :meth:`format_epilog`
        format_help_textformat_optionsformat_epilogWrites the help text to the formatter if it exists.write_paragraphindentationwrite_textWrites all the options into the formatter if they exist.get_help_recordOptionswrite_dlWrites the epilog into the formatter if it exists.param_orderGot unexpected extra argument ({args})Got unexpected extra arguments ({args})Given a context, this invokes the attached callback (if it exists)
        in the right way.
        DeprecationWarning: The command {name!r} is deprecated.Return a list of completions for the incomplete value. Looks
        at the names of options and chained multi-commands.

        :param ctx: Invocation context for this command.
        :param incomplete: Value being completed. May be empty.

        .. versionadded:: 8.0
        A multi command is the basic implementation of a command that
    dispatches to subcommands.  The most common version is the
    :class:`Group`.

    :param invoke_without_command: this controls how the multi command itself
                                   is invoked.  By default it's only invoked
                                   if a subcommand is provided.
    :param no_args_is_help: this controls what happens if no arguments are
                            provided.  This option is enabled by default if
                            `invoke_without_command` is disabled or disabled
                            if it's enabled.  If enabled this will add
                            ``--help`` as argument if no arguments are
                            passed.
    :param subcommand_metavar: the string that is used in the documentation
                               to indicate the subcommand place.
    :param chain: if this is set to `True` chaining of multiple subcommands
                  is enabled.  This restricts the form of commands in that
                  they cannot have optional arguments but it allows
                  multiple commands to be chained together.
    :param result_callback: The result callback to attach to this multi
        command. This can be set or changed later with the
        :meth:`result_callback` decorator.
    :param attrs: Other command arguments described in :class:`Command`.
    invoke_without_commandsubcommand_metavarresult_callbackCOMMAND1 [ARGS]... [COMMAND2 [ARGS]...]...COMMAND [ARGS]..._result_callbackMulti commands in chain mode cannot have optional arguments."Multi commands in chain mode cannot have"" optional arguments."sub_ctxformat_commandsAdds a result callback to the command.  By default if a
        result callback is already registered this will chain them but
        this can be disabled with the `replace` parameter.  The result
        callback is invoked with the return value of the subcommand
        (or the list of return values from all subcommands if chaining
        is enabled) as well as the parameters as they would be passed
        to the main callback.

        Example::

            @click.group()
            @click.option('-i', '--input', default=23)
            def cli(input):
                return 42

            @cli.result_callback()
            def process_result(result, input):
                return result + input

        :param replace: if set to `True` an already existing result
                        callback will be removed.

        .. versionchanged:: 8.0
            Renamed from ``resultcallback``.

        .. versionadded:: 3.0
        old_callbackExtra format methods for multi methods that adds all the commands
        after the options.
        subcommandCommands_process_resultMissing command.resolve_commandoriginal_cmd_nameNo such command {name!r}.Given a context and a command name, this returns a
        :class:`Command` object if it exists or returns `None`.
        Returns a list of subcommand names in the order they should
        appear.
        Return a list of completions for the incomplete value. Looks
        at the names of options, subcommands, and chained
        multi-commands.

        :param ctx: Invocation context for this command.
        :param incomplete: Value being completed. May be empty.

        .. versionadded:: 8.0
        A group allows a command to have subcommands attached. This is
    the most common way to implement nesting in Click.

    :param name: The name of the group command.
    :param commands: A dict mapping names to :class:`Command` objects.
        Can also be a list of :class:`Command`, which will use
        :attr:`Command.name` to create the dict.
    :param attrs: Other command arguments described in
        :class:`MultiCommand`, :class:`Command`, and
        :class:`BaseCommand`.

    .. versionchanged:: 8.0
        The ``commands`` argument can be a list of command objects.
    command_classgroup_classRegisters another :class:`Command` with this group.  If the name
        is not provided, the name of the command is used.
        Command has no name.__funcA shortcut decorator for declaring and attaching a command to
        the group. This takes the same arguments as :func:`command` and
        immediately registers the created command with this group by
        calling :meth:`add_command`.

        To customize the command class used, set the
        :attr:`command_class` attribute.

        .. versionchanged:: 8.1
            This decorator can be applied without parentheses.

        .. versionchanged:: 8.0
            Added the :attr:`command_class` attribute.
        Use 'command(**kwargs)(callable)' to provide arguments.A shortcut decorator for declaring and attaching a group to
        the group. This takes the same arguments as :func:`group` and
        immediately registers the created group with this group by
        calling :meth:`add_command`.

        To customize the group class used, set the :attr:`group_class`
        attribute.

        .. versionchanged:: 8.1
            This decorator can be applied without parentheses.

        .. versionchanged:: 8.0
            Added the :attr:`group_class` attribute.
        Use 'group(**kwargs)(callable)' to provide arguments.A command collection is a multi command that merges multiple multi
    commands together into one.  This is a straightforward implementation
    that accepts a list of different multi commands as sources and
    provides all the commands for each of them.

    See :class:`MultiCommand` and :class:`Command` for the description of
    ``name`` and ``attrs``.
    add_sourcemulti_cmdAdds a new multi command to the chain dispatcher._check_iterCheck if the value is iterable but not a string. Raises a type
    error, or return an iterator over the value.
    A parameter to a command comes in two versions: they are either
    :class:`Option`\s or :class:`Argument`\s.  Other subclasses are currently
    not supported by design as some of the internals for parsing are
    intentionally not finalized.

    Some settings are supported by both options and arguments.

    :param param_decls: the parameter declarations for this option or
                        argument.  This is a list of flags or argument
                        names.
    :param type: the type that should be used.  Either a :class:`ParamType`
                 or a Python type.  The latter is converted into the former
                 automatically if supported.
    :param required: controls if this is optional or not.
    :param default: the default value if omitted.  This can also be a callable,
                    in which case it's invoked when the default is needed
                    without any arguments.
    :param callback: A function to further process or validate the value
        after type conversion. It is called as ``f(ctx, param, value)``
        and must return the value. It is called for all sources,
        including prompts.
    :param nargs: the number of arguments to match.  If not ``1`` the return
                  value is a tuple instead of single value.  The default for
                  nargs is ``1`` (except if the type is a tuple, then it's
                  the arity of the tuple). If ``nargs=-1``, all remaining
                  parameters are collected.
    :param metavar: how the value is represented in the help page.
    :param expose_value: if this is `True` then the value is passed onwards
                         to the command callback and stored on the context,
                         otherwise it's skipped.
    :param is_eager: eager values are processed before non eager ones.  This
                     should not be set for arguments or it will inverse the
                     order of processing.
    :param envvar: a string or list of strings that are environment variables
                   that should be checked.
    :param shell_complete: A function that returns custom shell
        completions. Used instead of the param's type completion if
        given. Takes ``ctx, param, incomplete`` and must return a list
        of :class:`~click.shell_completion.CompletionItem` or a list of
        strings.

    .. versionchanged:: 8.0
        ``process_value`` validates required parameters and bounded
        ``nargs``, and invokes the parameter callback before returning
        the value. This allows the callback to validate prompts.
        ``full_process_value`` is removed.

    .. versionchanged:: 8.0
        ``autocompletion`` is renamed to ``shell_complete`` and has new
        semantics described above. The old name is deprecated and will
        be removed in 8.1, until then it will be wrapped to match the
        new requirements.

    .. versionchanged:: 8.0
        For ``multiple=True, nargs>1``, the default must be a list of
        tuples.

    .. versionchanged:: 8.0
        Setting a default is no longer required for ``nargs>1``, it will
        default to ``None``. ``multiple=True`` or ``nargs=-1`` will
        default to ``()``.

    .. versionchanged:: 7.1
        Empty environment variables are ignored rather than taking the
        empty string value. This makes it possible for scripts to clear
        variables if they can't unset them.

    .. versionchanged:: 2.0
        Changed signature for parameter callback to also be passed the
        parameter. The old callback format will still work, but it will
        raise a warning to give you a chance to migrate the code easier.
    parameterparam_type_nameparam_decls_parse_declsconvert_typeis_compositearity_custom_shell_complete'nargs' must be  (or None) for type " (or None) for"" type ", but it was check_default'default' must be a list when 'multiple' is true.'default' must be a list of lists when 'multiple' is true and 'nargs' != 1."'default' must be a list of lists when 'multiple' is"" true and 'nargs' != 1."'default' must be a list when 'nargs' != 1.item lengthsubject'default'  must match nargs=Gather information that could be useful for a tool generating
        user-facing documentation.

        Use :meth:`click.Context.to_info_dict` to traverse the entire
        CLI structure.

        .. versionadded:: 8.0
        declshuman_readable_nameReturns the human readable name of this parameter.  This is the
        same as the name for options, but the metavar for arguments.
        make_metavarGet the default for the parameter. Tries
        :meth:`Context.lookup_default` first, then the local default.

        :param ctx: Current context.
        :param call: If the default is a callable, call it. Disable to
            return the callable instead.

        .. versionchanged:: 8.0.2
            Type casting is no longer performed when getting a default.

        .. versionchanged:: 8.0.1
            Type casting can fail in resilient parsing mode. Invalid
            defaults will not prevent showing help text.

        .. versionchanged:: 8.0
            Looks at ``ctx.default_map`` first.

        .. versionchanged:: 8.0
            Added the ``call`` parameter.
        consume_valuevalue_from_envvarConvert and validate a value against the option's
        :attr:`type`, :attr:`multiple`, and :attr:`nargs`.
        check_iterValue must be an iterable.Takes {nargs} values but 1 was given.Takes {nargs} values but {len} were given.value_is_missingprocess_valueresolve_envvar_valueget_error_hintGet a stringified version of the param for use in error messages to
        indicate which param caused the error.
        hint_list / Return a list of completions for the incomplete value. If a
        ``shell_complete`` function was given during init, it is used.
        Otherwise, the :attr:`type`
        :meth:`~click.types.ParamType.shell_complete` function is used.

        :param ctx: Invocation context for this command.
        :param incomplete: Value being completed. May be empty.

        .. versionadded:: 8.0
        Options are usually optional values on the command line and
    have some extra features that arguments don't have.

    All other parameters are passed onwards to the parameter constructor.

    :param show_default: Show the default value for this option in its
        help text. Values are not shown by default, unless
        :attr:`Context.show_default` is ``True``. If this value is a
        string, it shows that string in parentheses instead of the
        actual value. This is particularly useful for dynamic options.
        For single option boolean flags, the default remains hidden if
        its value is ``False``.
    :param show_envvar: Controls if an environment variable should be
        shown on the help page. Normally, environment variables are not
        shown.
    :param prompt: If set to ``True`` or a non empty string then the
        user will be prompted for input. If set to ``True`` the prompt
        will be the option name capitalized.
    :param confirmation_prompt: Prompt a second time to confirm the
        value if it was prompted for. Can be set to a string instead of
        ``True`` to customize the message.
    :param prompt_required: If set to ``False``, the user will be
        prompted for input only when the option was specified as a flag
        without a value.
    :param hide_input: If this is ``True`` then the input on the prompt
        will be hidden from the user. This is useful for password input.
    :param is_flag: forces this option to act as a flag.  The default is
                    auto detection.
    :param flag_value: which value should be used for this flag if it's
                       enabled.  This is set to a boolean automatically if
                       the option string contains a slash to mark two options.
    :param multiple: if this is set to `True` then the argument is accepted
                     multiple times and recorded.  This is similar to ``nargs``
                     in how it works but supports arbitrary number of
                     arguments.
    :param count: this flag makes an option increment an integer.
    :param allow_from_autoenv: if this is enabled then the value of this
                               parameter will be pulled from an environment
                               variable in case a prefix is defined on the
                               context.
    :param help: the help string.
    :param hidden: hide this option from help outputs.
    :param attrs: Other command arguments described in :class:`Parameter`.

    .. versionchanged:: 8.1.0
        Help text indentation is cleaned here instead of only in the
        ``@option`` decorator.

    .. versionchanged:: 8.1.0
        The ``show_default`` parameter overrides
        ``Context.show_default``.

    .. versionchanged:: 8.1.0
        The default of a single option boolean flag is not shown if the
        default value is ``False``.

    .. versionchanged:: 8.0.1
        ``type`` is detected from ``flag_value`` if given.
    confirmation_promptprompt_requiredhide_inputflag_valueallow_from_autoenvshow_choicesshow_envvardefault_is_missing'name' is required with 'prompt=True'.prompt_textBoolParamTypeis_bool_flagnargs=-1 is not supported for options.'prompt' is not valid for non-boolean flag.Secondary flag is not valid for non-boolean flag.'prompt' with 'hide_input' is not valid for boolean flag.'count' is not valid with 'multiple'.'count' is not valid with 'is_flag'.possible_namesdeclName '' defined twicesplit_charBoolean option  cannot use the same flag for true/false." cannot use the"" same flag for true/false."Could not determine name for optionNo options defined but a name was passed (). Did you mean to declare an argument instead? Did you mean to pass '--")."" Did you mean to declare an argument instead? Did"" you mean to pass '--"'?_constadd_optionany_prefix_is_slash_write_optsany_slashesvar_strenv var: {var}resilientdefault_valueshow_default_is_strdefault_string(dynamic)default: {default}_NumberRangeBase_describe_rangerange_strextra_str  [prompt_for_valueThis is an alternative flow that can be activated in the full
        value processing if a value does not exist.  It will prompt the
        user until a valid value exists and then returns the processed
        value as result.
        value_procvalue_depthArguments are positional parameters to a command.  They generally
    provide fewer features than options but can have infinite ``nargs``
    and are required by default.

    All parameters are passed onwards to the constructor of :class:`Parameter`.
    __init__() got an unexpected keyword argument 'multiple'.'default' is not supported for nargs=-1.Could not determine name for argumentArguments take exactly one parameter declaration, got "Arguments take exactly one parameter declaration, got"#: The formatter class to create with :meth:`make_formatter`.#: .. versionadded:: 8.0#: the parent context or `None` if none exists.#: the :class:`Command` for this context.#: the descriptive information name#: Map of parameter names to their parsed values. Parameters#: with ``expose_value=False`` are not stored.#: the leftover arguments.#: protected arguments.  These are arguments that are prepended#: to `args` when certain parsing scenarios are encountered but#: must be never propagated to another arguments.  This is used#: to implement nested parsing.#: the collected prefixes of the command's options.#: the user object stored.#: A dictionary (-like object) with defaults for parameters.#: This flag indicates if a subcommand is going to be executed. A#: group callback can use this information to figure out if it's#: being executed directly or because the execution flow passes#: onwards to a subcommand. By default it's None, but it can be#: the name of the subcommand to execute.#: If chaining is enabled this will be set to ``'*'`` in case#: any commands are executed.  It is however not possible to#: figure out which ones.  If you require this knowledge you#: should use a :func:`result_callback`.#: The width of the terminal (None is autodetection).#: The maximum width of formatted content (None implies a sensible#: default which is 80 for most things).#: Indicates if the context allows extra args or if it should#: fail on parsing.#: .. versionadded:: 3.0#: Indicates if the context allows mixing of arguments and#: options or not.#: Instructs click to ignore options that a command does not#: understand and will store it on the context for later#: processing.  This is primarily useful for situations where you#: want to call into external programs.  Generally this pattern is#: strongly discouraged because it's not possibly to losslessly#: forward all arguments.#: .. versionadded:: 4.0#: The names for the help options.#: An optional normalization function for tokens.  This is#: options, choices, commands etc.#: Indicates if resilient parsing is enabled.  In that case Click#: will do its best to not cause any failures and default values#: will be ignored. Useful for completion.# If there is no envvar prefix yet, but the parent has one and# the command on this level has a name, we can expand the envvar# prefix automatically.#: Controls if styling output is wanted or not.#: Show option default values when formatting help text.# In case the context is reused, create a new exit stack.# noqa: B902# Track all kwargs as params, so that forward() will pass# them on in subsequent calls.# Can only forward to other commands, not direct callbacks.#: The context class to create with :meth:`make_context`.#: the default for the :attr:`Context.allow_extra_args` flag.#: the default for the :attr:`Context.allow_interspersed_args` flag.#: the default for the :attr:`Context.ignore_unknown_options` flag.#: the name the command thinks it has.  Upon registering a command#: on a :class:`Group` the group will default the command name#: with this information.  You should instead use the#: :class:`Context`\'s :attr:`~Context.info_name` attribute.#: an optional dictionary with defaults passed to the context.# Process shell completion requests and exit early.# it's not safe to `ctx.exit(rv)` here!# note that `rv` may actually contain data like "1" which# has obvious effects# more subtle case: `rv=[None, None]` can come out of# chained commands which all returned `None` -- so it's not# even always obvious that `rv` indicates success/failure# by its truthiness/falsiness# in non-standalone mode, return the exit code# note that this is only reached if `self.invoke` above raises# an Exit explicitly -- thus bypassing the check there which# would return its result# the results of non-standalone execution may therefore be# somewhat ambiguous: if there are codepaths which lead to# `ctx.exit(1)` and to `return 1`, the caller won't be able to# tell the difference between the two#: the callback to execute when the command fires.  This might be#: `None` in which case nothing happens.#: the list of parameters for this command in the order they#: should show up in the help page and execute.  Eager parameters#: will automatically be handled before non eager ones.# truncate the help text to the first form feed# The result callback that is stored. This can be set or# overridden with the :func:`result_callback` decorator.# What is this, the tool lied about a command.  Ignore it# allow for 3 times the default spacing# No subcommand was invoked, so the result callback is# invoked with the group return value for regular# groups, or an empty list for chained groups.# Fetch args back out# If we're not in chain mode, we only allow the invocation of a# single command but we also inform the current context about the# name of the command to invoke.# Make sure the context is entered so we do not clean up# resources until the result processor has worked.# In chain mode we create the contexts step by step, but after the# base command has been invoked.  Because at that point we do not# know the subcommands yet, the invoked subcommand attribute is# set to ``*`` to inform the command that subcommands are executed# but nothing else.# Otherwise we make every single context and invoke them in a# chain.  In that case the return value to the result processor# is the list of all invoked subcommand's results.# Get the command# If we can't find the command but there is a normalization# function available, we try with that one.# If we don't find the command we want to show an error message# to the user that it was not provided.  However, there is# something else we should do: if the first argument looks like# an option we want to kick off parsing again for arguments to# resolve things like --help which now should go to the main# place.#: If set, this is used by the group's :meth:`command` decorator#: as the default :class:`Command` class. This is useful to make all#: subcommands use a custom command class.#: If set, this is used by the group's :meth:`group` decorator#: as the default :class:`Group` class. This is useful to make all#: subgroups use a custom group class.#: If set to the special value :class:`type` (literally#: ``group_class = type``), this group's class will be used as the#: default class. This makes a custom group class continue to make#: custom groups.# Literal[type] isn't valid, so use Type[type]#: The registered subcommands by their exported names.#: The list of registered multi commands.# Default nargs to what the type tells us if we have that# information available.# Skip no default or callable default.# Only check the first value against nargs.# Can be None for multiple with empty default.# This should only happen when passing in args manually,# the parser should construct an iterable when parsing# the command line.# t.Tuple[t.Any, ...]# nargs > 1# If prompt is enabled but not required, then the option can be# used as a flag to indicate using prompt or flag_value.# Implicitly a flag because flag_value was set.# Not a flag, but when used as a flag it shows a prompt.# Implicitly a flag because flag options were given.# Not a flag, and prompt is not enabled, can be used as a# flag if flag_value is set.# Re-guess the type from the flag value instead of the# default.# Counting# group long options first# Temporarily enable resilient parsing to avoid type casting# failing for the default. Might be possible to extend this to# help formatting in general.# For boolean flags that have distinct True/False opts,# use the opt without prefix instead of the value.# skip count with default range type# If we're a non boolean flag our default is more complex because# we need to look at all flags in the same group to figure out# if we're the default one in which case we return the flag# value as default.# Calculate the default before prompting anything to be stable.# If this is a prompt for a flag we need to handle this# differently.# The parser will emit a sentinel value if the option can be# given as a flag without a value. This is different from None# to distinguish from the flag not being given at all.# The value wasn't set, or used the param's default, prompt if# prompting is enabled.b'Command'u'Command'b'List all the subcommands of a group that start with the
    incomplete value and aren't hidden.

    :param ctx: Invocation context for the group.
    :param incomplete: Value being completed. May be empty.
    'u'List all the subcommands of a group that start with the
    incomplete value and aren't hidden.

    :param ctx: Invocation context for the group.
    :param incomplete: Value being completed. May be empty.
    'b'MultiCommand'u'MultiCommand'b'It is not possible to add multi commands as children to another multi command that is in chain mode.'u'It is not possible to add multi commands as children to another multi command that is in chain mode.'b'Found a multi command as subcommand to a multi command that is in chain mode. This is not supported.'u'Found a multi command as subcommand to a multi command that is in chain mode. This is not supported.'b'. Command 'u'. Command 'b' is set to chain and 'u' is set to chain and 'b' was added as a subcommand but it in itself is a multi command. ('u' was added as a subcommand but it in itself is a multi command. ('b' is a 'u' is a 'b' within a chained 'u' within a chained 'b'Parameter'u'Parameter'b'Context manager that attaches extra information to exceptions.'u'Context manager that attaches extra information to exceptions.'b'Given a sequence of parameters in the order as should be considered
    for processing and an iterable of parameters that exist, this returns
    a list in the correct order as they should be processed.
    'u'Given a sequence of parameters in the order as should be considered
    for processing and an iterable of parameters that exist, this returns
    a list in the correct order as they should be processed.
    'b'This is an :class:`~enum.Enum` that indicates the source of a
    parameter's value.

    Use :meth:`click.Context.get_parameter_source` to get the
    source for a parameter by name.

    .. versionchanged:: 8.0
        Use :class:`~enum.Enum` and drop the ``validate`` method.

    .. versionchanged:: 8.0
        Added the ``PROMPT`` value.
    'u'This is an :class:`~enum.Enum` that indicates the source of a
    parameter's value.

    Use :meth:`click.Context.get_parameter_source` to get the
    source for a parameter by name.

    .. versionchanged:: 8.0
        Use :class:`~enum.Enum` and drop the ``validate`` method.

    .. versionchanged:: 8.0
        Added the ``PROMPT`` value.
    'b'The value was provided by the command line args.'u'The value was provided by the command line args.'b'The value was provided with an environment variable.'u'The value was provided with an environment variable.'b'Used the default specified by the parameter.'u'Used the default specified by the parameter.'b'Used a default provided by :attr:`Context.default_map`.'u'Used a default provided by :attr:`Context.default_map`.'b'Used a prompt to confirm a default or provide a value.'u'Used a prompt to confirm a default or provide a value.'b'The context is a special internal object that holds state relevant
    for the script execution at every single level.  It's normally invisible
    to commands unless they opt-in to getting access to it.

    The context is useful as it can pass internal objects around and can
    control special execution features such as reading data from
    environment variables.

    A context can be used as context manager in which case it will call
    :meth:`close` on teardown.

    :param command: the command class for this context.
    :param parent: the parent context.
    :param info_name: the info name for this invocation.  Generally this
                      is the most descriptive name for the script or
                      command.  For the toplevel script it is usually
                      the name of the script, for commands below it it's
                      the name of the script.
    :param obj: an arbitrary object of user data.
    :param auto_envvar_prefix: the prefix to use for automatic environment
                               variables.  If this is `None` then reading
                               from environment variables is disabled.  This
                               does not affect manually set environment
                               variables which are always read.
    :param default_map: a dictionary (like object) with default values
                        for parameters.
    :param terminal_width: the width of the terminal.  The default is
                           inherit from parent context.  If no context
                           defines the terminal width then auto
                           detection will be applied.
    :param max_content_width: the maximum width for content rendered by
                              Click (this currently only affects help
                              pages).  This defaults to 80 characters if
                              not overridden.  In other words: even if the
                              terminal is larger than that, Click will not
                              format things wider than 80 characters by
                              default.  In addition to that, formatters might
                              add some safety mapping on the right.
    :param resilient_parsing: if this flag is enabled then Click will
                              parse without any interactivity or callback
                              invocation.  Default values will also be
                              ignored.  This is useful for implementing
                              things such as completion support.
    :param allow_extra_args: if this is set to `True` then extra arguments
                             at the end will not raise an error and will be
                             kept on the context.  The default is to inherit
                             from the command.
    :param allow_interspersed_args: if this is set to `False` then options
                                    and arguments cannot be mixed.  The
                                    default is to inherit from the command.
    :param ignore_unknown_options: instructs click to ignore options it does
                                   not know and keeps them for later
                                   processing.
    :param help_option_names: optionally a list of strings that define how
                              the default help parameter is named.  The
                              default is ``['--help']``.
    :param token_normalize_func: an optional function that is used to
                                 normalize tokens (options, choices,
                                 etc.).  This for instance can be used to
                                 implement case insensitive behavior.
    :param color: controls if the terminal supports ANSI colors or not.  The
                  default is autodetection.  This is only needed if ANSI
                  codes are used in texts that Click prints which is by
                  default not the case.  This for instance would affect
                  help output.
    :param show_default: Show the default value for commands. If this
        value is not set, it defaults to the value from the parent
        context. ``Command.show_default`` overrides this default for the
        specific command.

    .. versionchanged:: 8.1
        The ``show_default`` parameter is overridden by
        ``Command.show_default``, instead of the other way around.

    .. versionchanged:: 8.0
        The ``show_default`` parameter defaults to the value from the
        parent context.

    .. versionchanged:: 7.1
       Added the ``show_default`` parameter.

    .. versionchanged:: 4.0
        Added the ``color``, ``ignore_unknown_options``, and
        ``max_content_width`` parameters.

    .. versionchanged:: 3.0
        Added the ``allow_extra_args`` and ``allow_interspersed_args``
        parameters.

    .. versionchanged:: 2.0
        Added the ``resilient_parsing``, ``help_option_names``, and
        ``token_normalize_func`` parameters.
    'u'The context is a special internal object that holds state relevant
    for the script execution at every single level.  It's normally invisible
    to commands unless they opt-in to getting access to it.

    The context is useful as it can pass internal objects around and can
    control special execution features such as reading data from
    environment variables.

    A context can be used as context manager in which case it will call
    :meth:`close` on teardown.

    :param command: the command class for this context.
    :param parent: the parent context.
    :param info_name: the info name for this invocation.  Generally this
                      is the most descriptive name for the script or
                      command.  For the toplevel script it is usually
                      the name of the script, for commands below it it's
                      the name of the script.
    :param obj: an arbitrary object of user data.
    :param auto_envvar_prefix: the prefix to use for automatic environment
                               variables.  If this is `None` then reading
                               from environment variables is disabled.  This
                               does not affect manually set environment
                               variables which are always read.
    :param default_map: a dictionary (like object) with default values
                        for parameters.
    :param terminal_width: the width of the terminal.  The default is
                           inherit from parent context.  If no context
                           defines the terminal width then auto
                           detection will be applied.
    :param max_content_width: the maximum width for content rendered by
                              Click (this currently only affects help
                              pages).  This defaults to 80 characters if
                              not overridden.  In other words: even if the
                              terminal is larger than that, Click will not
                              format things wider than 80 characters by
                              default.  In addition to that, formatters might
                              add some safety mapping on the right.
    :param resilient_parsing: if this flag is enabled then Click will
                              parse without any interactivity or callback
                              invocation.  Default values will also be
                              ignored.  This is useful for implementing
                              things such as completion support.
    :param allow_extra_args: if this is set to `True` then extra arguments
                             at the end will not raise an error and will be
                             kept on the context.  The default is to inherit
                             from the command.
    :param allow_interspersed_args: if this is set to `False` then options
                                    and arguments cannot be mixed.  The
                                    default is to inherit from the command.
    :param ignore_unknown_options: instructs click to ignore options it does
                                   not know and keeps them for later
                                   processing.
    :param help_option_names: optionally a list of strings that define how
                              the default help parameter is named.  The
                              default is ``['--help']``.
    :param token_normalize_func: an optional function that is used to
                                 normalize tokens (options, choices,
                                 etc.).  This for instance can be used to
                                 implement case insensitive behavior.
    :param color: controls if the terminal supports ANSI colors or not.  The
                  default is autodetection.  This is only needed if ANSI
                  codes are used in texts that Click prints which is by
                  default not the case.  This for instance would affect
                  help output.
    :param show_default: Show the default value for commands. If this
        value is not set, it defaults to the value from the parent
        context. ``Command.show_default`` overrides this default for the
        specific command.

    .. versionchanged:: 8.1
        The ``show_default`` parameter is overridden by
        ``Command.show_default``, instead of the other way around.

    .. versionchanged:: 8.0
        The ``show_default`` parameter defaults to the value from the
        parent context.

    .. versionchanged:: 7.1
       Added the ``show_default`` parameter.

    .. versionchanged:: 4.0
        Added the ``color``, ``ignore_unknown_options``, and
        ``max_content_width`` parameters.

    .. versionchanged:: 3.0
        Added the ``allow_extra_args`` and ``allow_interspersed_args``
        parameters.

    .. versionchanged:: 2.0
        Added the ``resilient_parsing``, ``help_option_names``, and
        ``token_normalize_func`` parameters.
    'b'--help'u'--help'b'Gather information that could be useful for a tool generating
        user-facing documentation. This traverses the entire CLI
        structure.

        .. code-block:: python

            with Context(cli) as ctx:
                info = ctx.to_info_dict()

        .. versionadded:: 8.0
        'u'Gather information that could be useful for a tool generating
        user-facing documentation. This traverses the entire CLI
        structure.

        .. code-block:: python

            with Context(cli) as ctx:
                info = ctx.to_info_dict()

        .. versionadded:: 8.0
        'b'info_name'u'info_name'b'allow_extra_args'u'allow_extra_args'b'allow_interspersed_args'u'allow_interspersed_args'b'ignore_unknown_options'u'ignore_unknown_options'b'This helper method can be used with the context object to promote
        it to the current thread local (see :func:`get_current_context`).
        The default behavior of this is to invoke the cleanup functions which
        can be disabled by setting `cleanup` to `False`.  The cleanup
        functions are typically used for things such as closing file handles.

        If the cleanup is intended the context object can also be directly
        used as a context manager.

        Example usage::

            with ctx.scope():
                assert get_current_context() is ctx

        This is equivalent::

            with ctx:
                assert get_current_context() is ctx

        .. versionadded:: 5.0

        :param cleanup: controls if the cleanup functions should be run or
                        not.  The default is to run these functions.  In
                        some situations the context only wants to be
                        temporarily pushed in which case this can be disabled.
                        Nested pushes automatically defer the cleanup.
        'u'This helper method can be used with the context object to promote
        it to the current thread local (see :func:`get_current_context`).
        The default behavior of this is to invoke the cleanup functions which
        can be disabled by setting `cleanup` to `False`.  The cleanup
        functions are typically used for things such as closing file handles.

        If the cleanup is intended the context object can also be directly
        used as a context manager.

        Example usage::

            with ctx.scope():
                assert get_current_context() is ctx

        This is equivalent::

            with ctx:
                assert get_current_context() is ctx

        .. versionadded:: 5.0

        :param cleanup: controls if the cleanup functions should be run or
                        not.  The default is to run these functions.  In
                        some situations the context only wants to be
                        temporarily pushed in which case this can be disabled.
                        Nested pushes automatically defer the cleanup.
        'b'This is a dictionary which is shared with all the contexts
        that are nested.  It exists so that click utilities can store some
        state here if they need to.  It is however the responsibility of
        that code to manage this dictionary well.

        The keys are supposed to be unique dotted strings.  For instance
        module paths are a good choice for it.  What is stored in there is
        irrelevant for the operation of click.  However what is important is
        that code that places data here adheres to the general semantics of
        the system.

        Example usage::

            LANG_KEY = f'{__name__}.lang'

            def set_language(value):
                ctx = get_current_context()
                ctx.meta[LANG_KEY] = value

            def get_language():
                return get_current_context().meta.get(LANG_KEY, 'en_US')

        .. versionadded:: 5.0
        'u'This is a dictionary which is shared with all the contexts
        that are nested.  It exists so that click utilities can store some
        state here if they need to.  It is however the responsibility of
        that code to manage this dictionary well.

        The keys are supposed to be unique dotted strings.  For instance
        module paths are a good choice for it.  What is stored in there is
        irrelevant for the operation of click.  However what is important is
        that code that places data here adheres to the general semantics of
        the system.

        Example usage::

            LANG_KEY = f'{__name__}.lang'

            def set_language(value):
                ctx = get_current_context()
                ctx.meta[LANG_KEY] = value

            def get_language():
                return get_current_context().meta.get(LANG_KEY, 'en_US')

        .. versionadded:: 5.0
        'b'Creates the :class:`~click.HelpFormatter` for the help and
        usage output.

        To quickly customize the formatter class used without overriding
        this method, set the :attr:`formatter_class` attribute.

        .. versionchanged:: 8.0
            Added the :attr:`formatter_class` attribute.
        'u'Creates the :class:`~click.HelpFormatter` for the help and
        usage output.

        To quickly customize the formatter class used without overriding
        this method, set the :attr:`formatter_class` attribute.

        .. versionchanged:: 8.0
            Added the :attr:`formatter_class` attribute.
        'b'Register a resource as if it were used in a ``with``
        statement. The resource will be cleaned up when the context is
        popped.

        Uses :meth:`contextlib.ExitStack.enter_context`. It calls the
        resource's ``__enter__()`` method and returns the result. When
        the context is popped, it closes the stack, which calls the
        resource's ``__exit__()`` method.

        To register a cleanup function for something that isn't a
        context manager, use :meth:`call_on_close`. Or use something
        from :mod:`contextlib` to turn it into a context manager first.

        .. code-block:: python

            @click.group()
            @click.option("--name")
            @click.pass_context
            def cli(ctx):
                ctx.obj = ctx.with_resource(connect_db(name))

        :param context_manager: The context manager to enter.
        :return: Whatever ``context_manager.__enter__()`` returns.

        .. versionadded:: 8.0
        'u'Register a resource as if it were used in a ``with``
        statement. The resource will be cleaned up when the context is
        popped.

        Uses :meth:`contextlib.ExitStack.enter_context`. It calls the
        resource's ``__enter__()`` method and returns the result. When
        the context is popped, it closes the stack, which calls the
        resource's ``__exit__()`` method.

        To register a cleanup function for something that isn't a
        context manager, use :meth:`call_on_close`. Or use something
        from :mod:`contextlib` to turn it into a context manager first.

        .. code-block:: python

            @click.group()
            @click.option("--name")
            @click.pass_context
            def cli(ctx):
                ctx.obj = ctx.with_resource(connect_db(name))

        :param context_manager: The context manager to enter.
        :return: Whatever ``context_manager.__enter__()`` returns.

        .. versionadded:: 8.0
        'b'Register a function to be called when the context tears down.

        This can be used to close resources opened during the script
        execution. Resources that support Python's context manager
        protocol which would be used in a ``with`` statement should be
        registered with :meth:`with_resource` instead.

        :param f: The function to execute on teardown.
        'u'Register a function to be called when the context tears down.

        This can be used to close resources opened during the script
        execution. Resources that support Python's context manager
        protocol which would be used in a ``with`` statement should be
        registered with :meth:`with_resource` instead.

        :param f: The function to execute on teardown.
        'b'Invoke all close callbacks registered with
        :meth:`call_on_close`, and exit all context managers entered
        with :meth:`with_resource`.
        'u'Invoke all close callbacks registered with
        :meth:`call_on_close`, and exit all context managers entered
        with :meth:`with_resource`.
        'b'The computed command path.  This is used for the ``usage``
        information on the help page.  It's automatically created by
        combining the info names of the chain of contexts to the root.
        'u'The computed command path.  This is used for the ``usage``
        information on the help page.  It's automatically created by
        combining the info names of the chain of contexts to the root.
        'b'Finds the outermost context.'u'Finds the outermost context.'b'Finds the closest object of a given type.'u'Finds the closest object of a given type.'b'Like :meth:`find_object` but sets the innermost object to a
        new instance of `object_type` if it does not exist.
        'u'Like :meth:`find_object` but sets the innermost object to a
        new instance of `object_type` if it does not exist.
        'b'te.Literal[True]'u'te.Literal[True]'b'te.Literal[False]'u'te.Literal[False]'b'Get the default for a parameter from :attr:`default_map`.

        :param name: Name of the parameter.
        :param call: If the default is a callable, call it. Disable to
            return the callable instead.

        .. versionchanged:: 8.0
            Added the ``call`` parameter.
        'u'Get the default for a parameter from :attr:`default_map`.

        :param name: Name of the parameter.
        :param call: If the default is a callable, call it. Disable to
            return the callable instead.

        .. versionchanged:: 8.0
            Added the ``call`` parameter.
        'b'Aborts the execution of the program with a specific error
        message.

        :param message: the error message to fail with.
        'u'Aborts the execution of the program with a specific error
        message.

        :param message: the error message to fail with.
        'b'Aborts the script.'u'Aborts the script.'b'Exits the application with a given exit code.'u'Exits the application with a given exit code.'b'Helper method to get formatted usage string for the current
        context and command.
        'u'Helper method to get formatted usage string for the current
        context and command.
        'b'Helper method to get formatted help page for the current
        context and command.
        'u'Helper method to get formatted help page for the current
        context and command.
        'b'Create a new context of the same type as this context, but
        for a new command.

        :meta private:
        'u'Create a new context of the same type as this context, but
        for a new command.

        :meta private:
        'b't.Callable[..., V]'u't.Callable[..., V]'b'Invokes a command callback in exactly the way it expects.  There
        are two ways to invoke this method:

        1.  the first argument can be a callback and all other arguments and
            keyword arguments are forwarded directly to the function.
        2.  the first argument is a click command object.  In that case all
            arguments are forwarded as well but proper click parameters
            (options and click arguments) must be keyword arguments and Click
            will fill in defaults.

        Note that before Click 3.2 keyword arguments were not properly filled
        in against the intention of this code and no context was created.  For
        more information about this change and why it was done in a bugfix
        release see :ref:`upgrade-to-3.2`.

        .. versionchanged:: 8.0
            All ``kwargs`` are tracked in :attr:`params` so they will be
            passed if :meth:`forward` is called at multiple levels.
        'u'Invokes a command callback in exactly the way it expects.  There
        are two ways to invoke this method:

        1.  the first argument can be a callback and all other arguments and
            keyword arguments are forwarded directly to the function.
        2.  the first argument is a click command object.  In that case all
            arguments are forwarded as well but proper click parameters
            (options and click arguments) must be keyword arguments and Click
            will fill in defaults.

        Note that before Click 3.2 keyword arguments were not properly filled
        in against the intention of this code and no context was created.  For
        more information about this change and why it was done in a bugfix
        release see :ref:`upgrade-to-3.2`.

        .. versionchanged:: 8.0
            All ``kwargs`` are tracked in :attr:`params` so they will be
            passed if :meth:`forward` is called at multiple levels.
        'b'The given command does not have a callback that can be invoked.'u'The given command does not have a callback that can be invoked.'b'Similar to :meth:`invoke` but fills in default keyword
        arguments from the current context if the other command expects
        it.  This cannot invoke callbacks directly, only other commands.

        .. versionchanged:: 8.0
            All ``kwargs`` are tracked in :attr:`params` so they will be
            passed if ``forward`` is called at multiple levels.
        'u'Similar to :meth:`invoke` but fills in default keyword
        arguments from the current context if the other command expects
        it.  This cannot invoke callbacks directly, only other commands.

        .. versionchanged:: 8.0
            All ``kwargs`` are tracked in :attr:`params` so they will be
            passed if ``forward`` is called at multiple levels.
        'b'Callback is not a command.'u'Callback is not a command.'b'Set the source of a parameter. This indicates the location
        from which the value of the parameter was obtained.

        :param name: The name of the parameter.
        :param source: A member of :class:`~click.core.ParameterSource`.
        'u'Set the source of a parameter. This indicates the location
        from which the value of the parameter was obtained.

        :param name: The name of the parameter.
        :param source: A member of :class:`~click.core.ParameterSource`.
        'b'Get the source of a parameter. This indicates the location
        from which the value of the parameter was obtained.

        This can be useful for determining when a user specified a value
        on the command line that is the same as the default value. It
        will be :attr:`~click.core.ParameterSource.DEFAULT` only if the
        value was actually taken from the default.

        :param name: The name of the parameter.
        :rtype: ParameterSource

        .. versionchanged:: 8.0
            Returns ``None`` if the parameter was not provided from any
            source.
        'u'Get the source of a parameter. This indicates the location
        from which the value of the parameter was obtained.

        This can be useful for determining when a user specified a value
        on the command line that is the same as the default value. It
        will be :attr:`~click.core.ParameterSource.DEFAULT` only if the
        value was actually taken from the default.

        :param name: The name of the parameter.
        :rtype: ParameterSource

        .. versionchanged:: 8.0
            Returns ``None`` if the parameter was not provided from any
            source.
        'b'The base command implements the minimal API contract of commands.
    Most code will never use this as it does not implement a lot of useful
    functionality but it can act as the direct subclass of alternative
    parsing methods that do not depend on the Click parser.

    For instance, this can be used to bridge Click and other systems like
    argparse or docopt.

    Because base commands do not implement a lot of the API that other
    parts of Click take for granted, they are not supported for all
    operations.  For instance, they cannot be used with the decorators
    usually and they have no built-in callback system.

    .. versionchanged:: 2.0
       Added the `context_settings` parameter.

    :param name: the name of the command to use unless a group overrides it.
    :param context_settings: an optional dictionary with defaults that are
                             passed to the context object.
    'u'The base command implements the minimal API contract of commands.
    Most code will never use this as it does not implement a lot of useful
    functionality but it can act as the direct subclass of alternative
    parsing methods that do not depend on the Click parser.

    For instance, this can be used to bridge Click and other systems like
    argparse or docopt.

    Because base commands do not implement a lot of the API that other
    parts of Click take for granted, they are not supported for all
    operations.  For instance, they cannot be used with the decorators
    usually and they have no built-in callback system.

    .. versionchanged:: 2.0
       Added the `context_settings` parameter.

    :param name: the name of the command to use unless a group overrides it.
    :param context_settings: an optional dictionary with defaults that are
                             passed to the context object.
    'b'Gather information that could be useful for a tool generating
        user-facing documentation. This traverses the entire structure
        below this command.

        Use :meth:`click.Context.to_info_dict` to traverse the entire
        CLI structure.

        :param ctx: A :class:`Context` representing this command.

        .. versionadded:: 8.0
        'u'Gather information that could be useful for a tool generating
        user-facing documentation. This traverses the entire structure
        below this command.

        Use :meth:`click.Context.to_info_dict` to traverse the entire
        CLI structure.

        :param ctx: A :class:`Context` representing this command.

        .. versionadded:: 8.0
        'b'Base commands cannot get usage'u'Base commands cannot get usage'b'Base commands cannot get help'u'Base commands cannot get help'b'This function when given an info name and arguments will kick
        off the parsing and create a new :class:`Context`.  It does not
        invoke the actual command callback though.

        To quickly customize the context class used without overriding
        this method, set the :attr:`context_class` attribute.

        :param info_name: the info name for this invocation.  Generally this
                          is the most descriptive name for the script or
                          command.  For the toplevel script it's usually
                          the name of the script, for commands below it's
                          the name of the command.
        :param args: the arguments to parse as list of strings.
        :param parent: the parent context if available.
        :param extra: extra keyword arguments forwarded to the context
                      constructor.

        .. versionchanged:: 8.0
            Added the :attr:`context_class` attribute.
        'u'This function when given an info name and arguments will kick
        off the parsing and create a new :class:`Context`.  It does not
        invoke the actual command callback though.

        To quickly customize the context class used without overriding
        this method, set the :attr:`context_class` attribute.

        :param info_name: the info name for this invocation.  Generally this
                          is the most descriptive name for the script or
                          command.  For the toplevel script it's usually
                          the name of the script, for commands below it's
                          the name of the command.
        :param args: the arguments to parse as list of strings.
        :param parent: the parent context if available.
        :param extra: extra keyword arguments forwarded to the context
                      constructor.

        .. versionchanged:: 8.0
            Added the :attr:`context_class` attribute.
        'b'Given a context and a list of arguments this creates the parser
        and parses the arguments, then modifies the context as necessary.
        This is automatically invoked by :meth:`make_context`.
        'u'Given a context and a list of arguments this creates the parser
        and parses the arguments, then modifies the context as necessary.
        This is automatically invoked by :meth:`make_context`.
        'b'Base commands do not know how to parse arguments.'u'Base commands do not know how to parse arguments.'b'Given a context, this invokes the command.  The default
        implementation is raising a not implemented error.
        'u'Given a context, this invokes the command.  The default
        implementation is raising a not implemented error.
        'b'Base commands are not invocable by default'u'Base commands are not invocable by default'b'CompletionItem'u'CompletionItem'b'Return a list of completions for the incomplete value. Looks
        at the names of chained multi-commands.

        Any command could be part of a chained multi-command, so sibling
        commands are valid at any point during command completion. Other
        command classes will return more completions.

        :param ctx: Invocation context for this command.
        :param incomplete: Value being completed. May be empty.

        .. versionadded:: 8.0
        'u'Return a list of completions for the incomplete value. Looks
        at the names of chained multi-commands.

        Any command could be part of a chained multi-command, so sibling
        commands are valid at any point during command completion. Other
        command classes will return more completions.

        :param ctx: Invocation context for this command.
        :param incomplete: Value being completed. May be empty.

        .. versionadded:: 8.0
        'b'This is the way to invoke a script with all the bells and
        whistles as a command line application.  This will always terminate
        the application after a call.  If this is not wanted, ``SystemExit``
        needs to be caught.

        This method is also available by directly calling the instance of
        a :class:`Command`.

        :param args: the arguments that should be used for parsing.  If not
                     provided, ``sys.argv[1:]`` is used.
        :param prog_name: the program name that should be used.  By default
                          the program name is constructed by taking the file
                          name from ``sys.argv[0]``.
        :param complete_var: the environment variable that controls the
                             bash completion support.  The default is
                             ``"_<prog_name>_COMPLETE"`` with prog_name in
                             uppercase.
        :param standalone_mode: the default behavior is to invoke the script
                                in standalone mode.  Click will then
                                handle exceptions and convert them into
                                error messages and the function will never
                                return but shut down the interpreter.  If
                                this is set to `False` they will be
                                propagated to the caller and the return
                                value of this function is the return value
                                of :meth:`invoke`.
        :param windows_expand_args: Expand glob patterns, user dir, and
            env vars in command line args on Windows.
        :param extra: extra keyword arguments are forwarded to the context
                      constructor.  See :class:`Context` for more information.

        .. versionchanged:: 8.0.1
            Added the ``windows_expand_args`` parameter to allow
            disabling command line arg expansion on Windows.

        .. versionchanged:: 8.0
            When taking arguments from ``sys.argv`` on Windows, glob
            patterns, user dir, and env vars are expanded.

        .. versionchanged:: 3.0
           Added the ``standalone_mode`` parameter.
        'u'This is the way to invoke a script with all the bells and
        whistles as a command line application.  This will always terminate
        the application after a call.  If this is not wanted, ``SystemExit``
        needs to be caught.

        This method is also available by directly calling the instance of
        a :class:`Command`.

        :param args: the arguments that should be used for parsing.  If not
                     provided, ``sys.argv[1:]`` is used.
        :param prog_name: the program name that should be used.  By default
                          the program name is constructed by taking the file
                          name from ``sys.argv[0]``.
        :param complete_var: the environment variable that controls the
                             bash completion support.  The default is
                             ``"_<prog_name>_COMPLETE"`` with prog_name in
                             uppercase.
        :param standalone_mode: the default behavior is to invoke the script
                                in standalone mode.  Click will then
                                handle exceptions and convert them into
                                error messages and the function will never
                                return but shut down the interpreter.  If
                                this is set to `False` they will be
                                propagated to the caller and the return
                                value of this function is the return value
                                of :meth:`invoke`.
        :param windows_expand_args: Expand glob patterns, user dir, and
            env vars in command line args on Windows.
        :param extra: extra keyword arguments are forwarded to the context
                      constructor.  See :class:`Context` for more information.

        .. versionchanged:: 8.0.1
            Added the ``windows_expand_args`` parameter to allow
            disabling command line arg expansion on Windows.

        .. versionchanged:: 8.0
            When taking arguments from ``sys.argv`` on Windows, glob
            patterns, user dir, and env vars are expanded.

        .. versionchanged:: 3.0
           Added the ``standalone_mode`` parameter.
        'b'Aborted!'u'Aborted!'b'Check if the shell is asking for tab completion, process
        that, then exit early. Called from :meth:`main` before the
        program is invoked.

        :param prog_name: Name of the executable in the shell.
        :param complete_var: Name of the environment variable that holds
            the completion instruction. Defaults to
            ``_{PROG_NAME}_COMPLETE``.

        .. versionchanged:: 8.2.0
            Dots (``.``) in ``prog_name`` are replaced with underscores (``_``).
        'u'Check if the shell is asking for tab completion, process
        that, then exit early. Called from :meth:`main` before the
        program is invoked.

        :param prog_name: Name of the executable in the shell.
        :param complete_var: Name of the environment variable that holds
            the completion instruction. Defaults to
            ``_{PROG_NAME}_COMPLETE``.

        .. versionchanged:: 8.2.0
            Dots (``.``) in ``prog_name`` are replaced with underscores (``_``).
        'b'_COMPLETE'u'_COMPLETE'b'Alias for :meth:`main`.'u'Alias for :meth:`main`.'b'Commands are the basic building block of command line interfaces in
    Click.  A basic command handles command line parsing and might dispatch
    more parsing to commands nested below it.

    :param name: the name of the command to use unless a group overrides it.
    :param context_settings: an optional dictionary with defaults that are
                             passed to the context object.
    :param callback: the callback to invoke.  This is optional.
    :param params: the parameters to register with this command.  This can
                   be either :class:`Option` or :class:`Argument` objects.
    :param help: the help string to use for this command.
    :param epilog: like the help string but it's printed at the end of the
                   help page after everything else.
    :param short_help: the short help to use for this command.  This is
                       shown on the command listing of the parent command.
    :param add_help_option: by default each command registers a ``--help``
                            option.  This can be disabled by this parameter.
    :param no_args_is_help: this controls what happens if no arguments are
                            provided.  This option is disabled by default.
                            If enabled this will add ``--help`` as argument
                            if no arguments are passed
    :param hidden: hide this command from help outputs.

    :param deprecated: issues a message indicating that
                             the command is deprecated.

    .. versionchanged:: 8.1
        ``help``, ``epilog``, and ``short_help`` are stored unprocessed,
        all formatting is done when outputting help text, not at init,
        and is done even if not using the ``@command`` decorator.

    .. versionchanged:: 8.0
        Added a ``repr`` showing the command name.

    .. versionchanged:: 7.1
        Added the ``no_args_is_help`` parameter.

    .. versionchanged:: 2.0
        Added the ``context_settings`` parameter.
    'u'Commands are the basic building block of command line interfaces in
    Click.  A basic command handles command line parsing and might dispatch
    more parsing to commands nested below it.

    :param name: the name of the command to use unless a group overrides it.
    :param context_settings: an optional dictionary with defaults that are
                             passed to the context object.
    :param callback: the callback to invoke.  This is optional.
    :param params: the parameters to register with this command.  This can
                   be either :class:`Option` or :class:`Argument` objects.
    :param help: the help string to use for this command.
    :param epilog: like the help string but it's printed at the end of the
                   help page after everything else.
    :param short_help: the short help to use for this command.  This is
                       shown on the command listing of the parent command.
    :param add_help_option: by default each command registers a ``--help``
                            option.  This can be disabled by this parameter.
    :param no_args_is_help: this controls what happens if no arguments are
                            provided.  This option is disabled by default.
                            If enabled this will add ``--help`` as argument
                            if no arguments are passed
    :param hidden: hide this command from help outputs.

    :param deprecated: issues a message indicating that
                             the command is deprecated.

    .. versionchanged:: 8.1
        ``help``, ``epilog``, and ``short_help`` are stored unprocessed,
        all formatting is done when outputting help text, not at init,
        and is done even if not using the ``@command`` decorator.

    .. versionchanged:: 8.0
        Added a ``repr`` showing the command name.

    .. versionchanged:: 7.1
        Added the ``no_args_is_help`` parameter.

    .. versionchanged:: 2.0
        Added the ``context_settings`` parameter.
    'b'[OPTIONS]'u'[OPTIONS]'b'Formats the usage line into a string and returns it.

        Calls :meth:`format_usage` internally.
        'u'Formats the usage line into a string and returns it.

        Calls :meth:`format_usage` internally.
        'b'Writes the usage line into the formatter.

        This is a low-level method called by :meth:`get_usage`.
        'u'Writes the usage line into the formatter.

        This is a low-level method called by :meth:`get_usage`.
        'b'Returns all the pieces that go into the usage line and returns
        it as a list of strings.
        'u'Returns all the pieces that go into the usage line and returns
        it as a list of strings.
        'b'Returns the names for the help option.'u'Returns the names for the help option.'b'Option'u'Option'b'Returns the help option object.'u'Returns the help option object.'b'Show this message and exit.'u'Show this message and exit.'b'Creates the underlying option parser for this command.'u'Creates the underlying option parser for this command.'b'Formats the help into a string and returns it.

        Calls :meth:`format_help` internally.
        'u'Formats the help into a string and returns it.

        Calls :meth:`format_help` internally.
        'b'Gets short help for the command or makes it by shortening the
        long help string.
        'u'Gets short help for the command or makes it by shortening the
        long help string.
        'b'(Deprecated) {text}'u'(Deprecated) {text}'b'Writes the help into the formatter if it exists.

        This is a low-level method called by :meth:`get_help`.

        This calls the following methods:

        -   :meth:`format_usage`
        -   :meth:`format_help_text`
        -   :meth:`format_options`
        -   :meth:`format_epilog`
        'u'Writes the help into the formatter if it exists.

        This is a low-level method called by :meth:`get_help`.

        This calls the following methods:

        -   :meth:`format_usage`
        -   :meth:`format_help_text`
        -   :meth:`format_options`
        -   :meth:`format_epilog`
        'b'Writes the help text to the formatter if it exists.'u'Writes the help text to the formatter if it exists.'b''u''b'Writes all the options into the formatter if they exist.'u'Writes all the options into the formatter if they exist.'b'Options'u'Options'b'Writes the epilog into the formatter if it exists.'u'Writes the epilog into the formatter if it exists.'b'Got unexpected extra argument ({args})'u'Got unexpected extra argument ({args})'b'Got unexpected extra arguments ({args})'u'Got unexpected extra arguments ({args})'b'Given a context, this invokes the attached callback (if it exists)
        in the right way.
        'u'Given a context, this invokes the attached callback (if it exists)
        in the right way.
        'b'DeprecationWarning: The command {name!r} is deprecated.'u'DeprecationWarning: The command {name!r} is deprecated.'b'Return a list of completions for the incomplete value. Looks
        at the names of options and chained multi-commands.

        :param ctx: Invocation context for this command.
        :param incomplete: Value being completed. May be empty.

        .. versionadded:: 8.0
        'u'Return a list of completions for the incomplete value. Looks
        at the names of options and chained multi-commands.

        :param ctx: Invocation context for this command.
        :param incomplete: Value being completed. May be empty.

        .. versionadded:: 8.0
        'b'A multi command is the basic implementation of a command that
    dispatches to subcommands.  The most common version is the
    :class:`Group`.

    :param invoke_without_command: this controls how the multi command itself
                                   is invoked.  By default it's only invoked
                                   if a subcommand is provided.
    :param no_args_is_help: this controls what happens if no arguments are
                            provided.  This option is enabled by default if
                            `invoke_without_command` is disabled or disabled
                            if it's enabled.  If enabled this will add
                            ``--help`` as argument if no arguments are
                            passed.
    :param subcommand_metavar: the string that is used in the documentation
                               to indicate the subcommand place.
    :param chain: if this is set to `True` chaining of multiple subcommands
                  is enabled.  This restricts the form of commands in that
                  they cannot have optional arguments but it allows
                  multiple commands to be chained together.
    :param result_callback: The result callback to attach to this multi
        command. This can be set or changed later with the
        :meth:`result_callback` decorator.
    :param attrs: Other command arguments described in :class:`Command`.
    'u'A multi command is the basic implementation of a command that
    dispatches to subcommands.  The most common version is the
    :class:`Group`.

    :param invoke_without_command: this controls how the multi command itself
                                   is invoked.  By default it's only invoked
                                   if a subcommand is provided.
    :param no_args_is_help: this controls what happens if no arguments are
                            provided.  This option is enabled by default if
                            `invoke_without_command` is disabled or disabled
                            if it's enabled.  If enabled this will add
                            ``--help`` as argument if no arguments are
                            passed.
    :param subcommand_metavar: the string that is used in the documentation
                               to indicate the subcommand place.
    :param chain: if this is set to `True` chaining of multiple subcommands
                  is enabled.  This restricts the form of commands in that
                  they cannot have optional arguments but it allows
                  multiple commands to be chained together.
    :param result_callback: The result callback to attach to this multi
        command. This can be set or changed later with the
        :meth:`result_callback` decorator.
    :param attrs: Other command arguments described in :class:`Command`.
    'b'COMMAND1 [ARGS]... [COMMAND2 [ARGS]...]...'u'COMMAND1 [ARGS]... [COMMAND2 [ARGS]...]...'b'COMMAND [ARGS]...'u'COMMAND [ARGS]...'b'Multi commands in chain mode cannot have optional arguments.'u'Multi commands in chain mode cannot have optional arguments.'b'Adds a result callback to the command.  By default if a
        result callback is already registered this will chain them but
        this can be disabled with the `replace` parameter.  The result
        callback is invoked with the return value of the subcommand
        (or the list of return values from all subcommands if chaining
        is enabled) as well as the parameters as they would be passed
        to the main callback.

        Example::

            @click.group()
            @click.option('-i', '--input', default=23)
            def cli(input):
                return 42

            @cli.result_callback()
            def process_result(result, input):
                return result + input

        :param replace: if set to `True` an already existing result
                        callback will be removed.

        .. versionchanged:: 8.0
            Renamed from ``resultcallback``.

        .. versionadded:: 3.0
        'u'Adds a result callback to the command.  By default if a
        result callback is already registered this will chain them but
        this can be disabled with the `replace` parameter.  The result
        callback is invoked with the return value of the subcommand
        (or the list of return values from all subcommands if chaining
        is enabled) as well as the parameters as they would be passed
        to the main callback.

        Example::

            @click.group()
            @click.option('-i', '--input', default=23)
            def cli(input):
                return 42

            @cli.result_callback()
            def process_result(result, input):
                return result + input

        :param replace: if set to `True` an already existing result
                        callback will be removed.

        .. versionchanged:: 8.0
            Renamed from ``resultcallback``.

        .. versionadded:: 3.0
        'b'Extra format methods for multi methods that adds all the commands
        after the options.
        'u'Extra format methods for multi methods that adds all the commands
        after the options.
        'b'Commands'u'Commands'b'Missing command.'u'Missing command.'b'No such command {name!r}.'u'No such command {name!r}.'b'Given a context and a command name, this returns a
        :class:`Command` object if it exists or returns `None`.
        'u'Given a context and a command name, this returns a
        :class:`Command` object if it exists or returns `None`.
        'b'Returns a list of subcommand names in the order they should
        appear.
        'u'Returns a list of subcommand names in the order they should
        appear.
        'b'Return a list of completions for the incomplete value. Looks
        at the names of options, subcommands, and chained
        multi-commands.

        :param ctx: Invocation context for this command.
        :param incomplete: Value being completed. May be empty.

        .. versionadded:: 8.0
        'u'Return a list of completions for the incomplete value. Looks
        at the names of options, subcommands, and chained
        multi-commands.

        :param ctx: Invocation context for this command.
        :param incomplete: Value being completed. May be empty.

        .. versionadded:: 8.0
        'b'A group allows a command to have subcommands attached. This is
    the most common way to implement nesting in Click.

    :param name: The name of the group command.
    :param commands: A dict mapping names to :class:`Command` objects.
        Can also be a list of :class:`Command`, which will use
        :attr:`Command.name` to create the dict.
    :param attrs: Other command arguments described in
        :class:`MultiCommand`, :class:`Command`, and
        :class:`BaseCommand`.

    .. versionchanged:: 8.0
        The ``commands`` argument can be a list of command objects.
    'u'A group allows a command to have subcommands attached. This is
    the most common way to implement nesting in Click.

    :param name: The name of the group command.
    :param commands: A dict mapping names to :class:`Command` objects.
        Can also be a list of :class:`Command`, which will use
        :attr:`Command.name` to create the dict.
    :param attrs: Other command arguments described in
        :class:`MultiCommand`, :class:`Command`, and
        :class:`BaseCommand`.

    .. versionchanged:: 8.0
        The ``commands`` argument can be a list of command objects.
    'b'Group'u'Group'b'Registers another :class:`Command` with this group.  If the name
        is not provided, the name of the command is used.
        'u'Registers another :class:`Command` with this group.  If the name
        is not provided, the name of the command is used.
        'b'Command has no name.'u'Command has no name.'b'A shortcut decorator for declaring and attaching a command to
        the group. This takes the same arguments as :func:`command` and
        immediately registers the created command with this group by
        calling :meth:`add_command`.

        To customize the command class used, set the
        :attr:`command_class` attribute.

        .. versionchanged:: 8.1
            This decorator can be applied without parentheses.

        .. versionchanged:: 8.0
            Added the :attr:`command_class` attribute.
        'u'A shortcut decorator for declaring and attaching a command to
        the group. This takes the same arguments as :func:`command` and
        immediately registers the created command with this group by
        calling :meth:`add_command`.

        To customize the command class used, set the
        :attr:`command_class` attribute.

        .. versionchanged:: 8.1
            This decorator can be applied without parentheses.

        .. versionchanged:: 8.0
            Added the :attr:`command_class` attribute.
        'b'Use 'command(**kwargs)(callable)' to provide arguments.'u'Use 'command(**kwargs)(callable)' to provide arguments.'b'A shortcut decorator for declaring and attaching a group to
        the group. This takes the same arguments as :func:`group` and
        immediately registers the created group with this group by
        calling :meth:`add_command`.

        To customize the group class used, set the :attr:`group_class`
        attribute.

        .. versionchanged:: 8.1
            This decorator can be applied without parentheses.

        .. versionchanged:: 8.0
            Added the :attr:`group_class` attribute.
        'u'A shortcut decorator for declaring and attaching a group to
        the group. This takes the same arguments as :func:`group` and
        immediately registers the created group with this group by
        calling :meth:`add_command`.

        To customize the group class used, set the :attr:`group_class`
        attribute.

        .. versionchanged:: 8.1
            This decorator can be applied without parentheses.

        .. versionchanged:: 8.0
            Added the :attr:`group_class` attribute.
        'b'Use 'group(**kwargs)(callable)' to provide arguments.'u'Use 'group(**kwargs)(callable)' to provide arguments.'b'A command collection is a multi command that merges multiple multi
    commands together into one.  This is a straightforward implementation
    that accepts a list of different multi commands as sources and
    provides all the commands for each of them.

    See :class:`MultiCommand` and :class:`Command` for the description of
    ``name`` and ``attrs``.
    'u'A command collection is a multi command that merges multiple multi
    commands together into one.  This is a straightforward implementation
    that accepts a list of different multi commands as sources and
    provides all the commands for each of them.

    See :class:`MultiCommand` and :class:`Command` for the description of
    ``name`` and ``attrs``.
    'b'Adds a new multi command to the chain dispatcher.'u'Adds a new multi command to the chain dispatcher.'b'Check if the value is iterable but not a string. Raises a type
    error, or return an iterator over the value.
    'u'Check if the value is iterable but not a string. Raises a type
    error, or return an iterator over the value.
    'b'A parameter to a command comes in two versions: they are either
    :class:`Option`\s or :class:`Argument`\s.  Other subclasses are currently
    not supported by design as some of the internals for parsing are
    intentionally not finalized.

    Some settings are supported by both options and arguments.

    :param param_decls: the parameter declarations for this option or
                        argument.  This is a list of flags or argument
                        names.
    :param type: the type that should be used.  Either a :class:`ParamType`
                 or a Python type.  The latter is converted into the former
                 automatically if supported.
    :param required: controls if this is optional or not.
    :param default: the default value if omitted.  This can also be a callable,
                    in which case it's invoked when the default is needed
                    without any arguments.
    :param callback: A function to further process or validate the value
        after type conversion. It is called as ``f(ctx, param, value)``
        and must return the value. It is called for all sources,
        including prompts.
    :param nargs: the number of arguments to match.  If not ``1`` the return
                  value is a tuple instead of single value.  The default for
                  nargs is ``1`` (except if the type is a tuple, then it's
                  the arity of the tuple). If ``nargs=-1``, all remaining
                  parameters are collected.
    :param metavar: how the value is represented in the help page.
    :param expose_value: if this is `True` then the value is passed onwards
                         to the command callback and stored on the context,
                         otherwise it's skipped.
    :param is_eager: eager values are processed before non eager ones.  This
                     should not be set for arguments or it will inverse the
                     order of processing.
    :param envvar: a string or list of strings that are environment variables
                   that should be checked.
    :param shell_complete: A function that returns custom shell
        completions. Used instead of the param's type completion if
        given. Takes ``ctx, param, incomplete`` and must return a list
        of :class:`~click.shell_completion.CompletionItem` or a list of
        strings.

    .. versionchanged:: 8.0
        ``process_value`` validates required parameters and bounded
        ``nargs``, and invokes the parameter callback before returning
        the value. This allows the callback to validate prompts.
        ``full_process_value`` is removed.

    .. versionchanged:: 8.0
        ``autocompletion`` is renamed to ``shell_complete`` and has new
        semantics described above. The old name is deprecated and will
        be removed in 8.1, until then it will be wrapped to match the
        new requirements.

    .. versionchanged:: 8.0
        For ``multiple=True, nargs>1``, the default must be a list of
        tuples.

    .. versionchanged:: 8.0
        Setting a default is no longer required for ``nargs>1``, it will
        default to ``None``. ``multiple=True`` or ``nargs=-1`` will
        default to ``()``.

    .. versionchanged:: 7.1
        Empty environment variables are ignored rather than taking the
        empty string value. This makes it possible for scripts to clear
        variables if they can't unset them.

    .. versionchanged:: 2.0
        Changed signature for parameter callback to also be passed the
        parameter. The old callback format will still work, but it will
        raise a warning to give you a chance to migrate the code easier.
    'u'A parameter to a command comes in two versions: they are either
    :class:`Option`\s or :class:`Argument`\s.  Other subclasses are currently
    not supported by design as some of the internals for parsing are
    intentionally not finalized.

    Some settings are supported by both options and arguments.

    :param param_decls: the parameter declarations for this option or
                        argument.  This is a list of flags or argument
                        names.
    :param type: the type that should be used.  Either a :class:`ParamType`
                 or a Python type.  The latter is converted into the former
                 automatically if supported.
    :param required: controls if this is optional or not.
    :param default: the default value if omitted.  This can also be a callable,
                    in which case it's invoked when the default is needed
                    without any arguments.
    :param callback: A function to further process or validate the value
        after type conversion. It is called as ``f(ctx, param, value)``
        and must return the value. It is called for all sources,
        including prompts.
    :param nargs: the number of arguments to match.  If not ``1`` the return
                  value is a tuple instead of single value.  The default for
                  nargs is ``1`` (except if the type is a tuple, then it's
                  the arity of the tuple). If ``nargs=-1``, all remaining
                  parameters are collected.
    :param metavar: how the value is represented in the help page.
    :param expose_value: if this is `True` then the value is passed onwards
                         to the command callback and stored on the context,
                         otherwise it's skipped.
    :param is_eager: eager values are processed before non eager ones.  This
                     should not be set for arguments or it will inverse the
                     order of processing.
    :param envvar: a string or list of strings that are environment variables
                   that should be checked.
    :param shell_complete: A function that returns custom shell
        completions. Used instead of the param's type completion if
        given. Takes ``ctx, param, incomplete`` and must return a list
        of :class:`~click.shell_completion.CompletionItem` or a list of
        strings.

    .. versionchanged:: 8.0
        ``process_value`` validates required parameters and bounded
        ``nargs``, and invokes the parameter callback before returning
        the value. This allows the callback to validate prompts.
        ``full_process_value`` is removed.

    .. versionchanged:: 8.0
        ``autocompletion`` is renamed to ``shell_complete`` and has new
        semantics described above. The old name is deprecated and will
        be removed in 8.1, until then it will be wrapped to match the
        new requirements.

    .. versionchanged:: 8.0
        For ``multiple=True, nargs>1``, the default must be a list of
        tuples.

    .. versionchanged:: 8.0
        Setting a default is no longer required for ``nargs>1``, it will
        default to ``None``. ``multiple=True`` or ``nargs=-1`` will
        default to ``()``.

    .. versionchanged:: 7.1
        Empty environment variables are ignored rather than taking the
        empty string value. This makes it possible for scripts to clear
        variables if they can't unset them.

    .. versionchanged:: 2.0
        Changed signature for parameter callback to also be passed the
        parameter. The old callback format will still work, but it will
        raise a warning to give you a chance to migrate the code easier.
    'b'parameter'u'parameter'b''nargs' must be 'u''nargs' must be 'b' (or None) for type 'u' (or None) for type 'b', but it was 'u', but it was 'b''default' must be a list when 'multiple' is true.'u''default' must be a list when 'multiple' is true.'b''default' must be a list of lists when 'multiple' is true and 'nargs' != 1.'u''default' must be a list of lists when 'multiple' is true and 'nargs' != 1.'b''default' must be a list when 'nargs' != 1.'u''default' must be a list when 'nargs' != 1.'b'item length'u'item length'b'length'u'length'b''default' 'u''default' 'b' must match nargs='u' must match nargs='b'Gather information that could be useful for a tool generating
        user-facing documentation.

        Use :meth:`click.Context.to_info_dict` to traverse the entire
        CLI structure.

        .. versionadded:: 8.0
        'u'Gather information that could be useful for a tool generating
        user-facing documentation.

        Use :meth:`click.Context.to_info_dict` to traverse the entire
        CLI structure.

        .. versionadded:: 8.0
        'b'param_type_name'u'param_type_name'b'opts'u'opts'b'secondary_opts'u'secondary_opts'b'envvar'u'envvar'b'Returns the human readable name of this parameter.  This is the
        same as the name for options, but the metavar for arguments.
        'u'Returns the human readable name of this parameter.  This is the
        same as the name for options, but the metavar for arguments.
        'b'Get the default for the parameter. Tries
        :meth:`Context.lookup_default` first, then the local default.

        :param ctx: Current context.
        :param call: If the default is a callable, call it. Disable to
            return the callable instead.

        .. versionchanged:: 8.0.2
            Type casting is no longer performed when getting a default.

        .. versionchanged:: 8.0.1
            Type casting can fail in resilient parsing mode. Invalid
            defaults will not prevent showing help text.

        .. versionchanged:: 8.0
            Looks at ``ctx.default_map`` first.

        .. versionchanged:: 8.0
            Added the ``call`` parameter.
        'u'Get the default for the parameter. Tries
        :meth:`Context.lookup_default` first, then the local default.

        :param ctx: Current context.
        :param call: If the default is a callable, call it. Disable to
            return the callable instead.

        .. versionchanged:: 8.0.2
            Type casting is no longer performed when getting a default.

        .. versionchanged:: 8.0.1
            Type casting can fail in resilient parsing mode. Invalid
            defaults will not prevent showing help text.

        .. versionchanged:: 8.0
            Looks at ``ctx.default_map`` first.

        .. versionchanged:: 8.0
            Added the ``call`` parameter.
        'b'Convert and validate a value against the option's
        :attr:`type`, :attr:`multiple`, and :attr:`nargs`.
        'u'Convert and validate a value against the option's
        :attr:`type`, :attr:`multiple`, and :attr:`nargs`.
        'b'Value must be an iterable.'u'Value must be an iterable.'b'Takes {nargs} values but 1 was given.'u'Takes {nargs} values but 1 was given.'b'Takes {nargs} values but {len} were given.'u'Takes {nargs} values but {len} were given.'b'Get a stringified version of the param for use in error messages to
        indicate which param caused the error.
        'u'Get a stringified version of the param for use in error messages to
        indicate which param caused the error.
        'b' / 'u' / 'b'Return a list of completions for the incomplete value. If a
        ``shell_complete`` function was given during init, it is used.
        Otherwise, the :attr:`type`
        :meth:`~click.types.ParamType.shell_complete` function is used.

        :param ctx: Invocation context for this command.
        :param incomplete: Value being completed. May be empty.

        .. versionadded:: 8.0
        'u'Return a list of completions for the incomplete value. If a
        ``shell_complete`` function was given during init, it is used.
        Otherwise, the :attr:`type`
        :meth:`~click.types.ParamType.shell_complete` function is used.

        :param ctx: Invocation context for this command.
        :param incomplete: Value being completed. May be empty.

        .. versionadded:: 8.0
        'b'Options are usually optional values on the command line and
    have some extra features that arguments don't have.

    All other parameters are passed onwards to the parameter constructor.

    :param show_default: Show the default value for this option in its
        help text. Values are not shown by default, unless
        :attr:`Context.show_default` is ``True``. If this value is a
        string, it shows that string in parentheses instead of the
        actual value. This is particularly useful for dynamic options.
        For single option boolean flags, the default remains hidden if
        its value is ``False``.
    :param show_envvar: Controls if an environment variable should be
        shown on the help page. Normally, environment variables are not
        shown.
    :param prompt: If set to ``True`` or a non empty string then the
        user will be prompted for input. If set to ``True`` the prompt
        will be the option name capitalized.
    :param confirmation_prompt: Prompt a second time to confirm the
        value if it was prompted for. Can be set to a string instead of
        ``True`` to customize the message.
    :param prompt_required: If set to ``False``, the user will be
        prompted for input only when the option was specified as a flag
        without a value.
    :param hide_input: If this is ``True`` then the input on the prompt
        will be hidden from the user. This is useful for password input.
    :param is_flag: forces this option to act as a flag.  The default is
                    auto detection.
    :param flag_value: which value should be used for this flag if it's
                       enabled.  This is set to a boolean automatically if
                       the option string contains a slash to mark two options.
    :param multiple: if this is set to `True` then the argument is accepted
                     multiple times and recorded.  This is similar to ``nargs``
                     in how it works but supports arbitrary number of
                     arguments.
    :param count: this flag makes an option increment an integer.
    :param allow_from_autoenv: if this is enabled then the value of this
                               parameter will be pulled from an environment
                               variable in case a prefix is defined on the
                               context.
    :param help: the help string.
    :param hidden: hide this option from help outputs.
    :param attrs: Other command arguments described in :class:`Parameter`.

    .. versionchanged:: 8.1.0
        Help text indentation is cleaned here instead of only in the
        ``@option`` decorator.

    .. versionchanged:: 8.1.0
        The ``show_default`` parameter overrides
        ``Context.show_default``.

    .. versionchanged:: 8.1.0
        The default of a single option boolean flag is not shown if the
        default value is ``False``.

    .. versionchanged:: 8.0.1
        ``type`` is detected from ``flag_value`` if given.
    'u'Options are usually optional values on the command line and
    have some extra features that arguments don't have.

    All other parameters are passed onwards to the parameter constructor.

    :param show_default: Show the default value for this option in its
        help text. Values are not shown by default, unless
        :attr:`Context.show_default` is ``True``. If this value is a
        string, it shows that string in parentheses instead of the
        actual value. This is particularly useful for dynamic options.
        For single option boolean flags, the default remains hidden if
        its value is ``False``.
    :param show_envvar: Controls if an environment variable should be
        shown on the help page. Normally, environment variables are not
        shown.
    :param prompt: If set to ``True`` or a non empty string then the
        user will be prompted for input. If set to ``True`` the prompt
        will be the option name capitalized.
    :param confirmation_prompt: Prompt a second time to confirm the
        value if it was prompted for. Can be set to a string instead of
        ``True`` to customize the message.
    :param prompt_required: If set to ``False``, the user will be
        prompted for input only when the option was specified as a flag
        without a value.
    :param hide_input: If this is ``True`` then the input on the prompt
        will be hidden from the user. This is useful for password input.
    :param is_flag: forces this option to act as a flag.  The default is
                    auto detection.
    :param flag_value: which value should be used for this flag if it's
                       enabled.  This is set to a boolean automatically if
                       the option string contains a slash to mark two options.
    :param multiple: if this is set to `True` then the argument is accepted
                     multiple times and recorded.  This is similar to ``nargs``
                     in how it works but supports arbitrary number of
                     arguments.
    :param count: this flag makes an option increment an integer.
    :param allow_from_autoenv: if this is enabled then the value of this
                               parameter will be pulled from an environment
                               variable in case a prefix is defined on the
                               context.
    :param help: the help string.
    :param hidden: hide this option from help outputs.
    :param attrs: Other command arguments described in :class:`Parameter`.

    .. versionchanged:: 8.1.0
        Help text indentation is cleaned here instead of only in the
        ``@option`` decorator.

    .. versionchanged:: 8.1.0
        The ``show_default`` parameter overrides
        ``Context.show_default``.

    .. versionchanged:: 8.1.0
        The default of a single option boolean flag is not shown if the
        default value is ``False``.

    .. versionchanged:: 8.0.1
        ``type`` is detected from ``flag_value`` if given.
    'b''name' is required with 'prompt=True'.'u''name' is required with 'prompt=True'.'b'nargs=-1 is not supported for options.'u'nargs=-1 is not supported for options.'b''prompt' is not valid for non-boolean flag.'u''prompt' is not valid for non-boolean flag.'b'Secondary flag is not valid for non-boolean flag.'u'Secondary flag is not valid for non-boolean flag.'b''prompt' with 'hide_input' is not valid for boolean flag.'u''prompt' with 'hide_input' is not valid for boolean flag.'b''count' is not valid with 'multiple'.'u''count' is not valid with 'multiple'.'b''count' is not valid with 'is_flag'.'u''count' is not valid with 'is_flag'.'b'Name ''u'Name ''b'' defined twice'u'' defined twice'b'Boolean option 'u'Boolean option 'b' cannot use the same flag for true/false.'u' cannot use the same flag for true/false.'b'Could not determine name for option'u'Could not determine name for option'b'No options defined but a name was passed ('u'No options defined but a name was passed ('b'). Did you mean to declare an argument instead? Did you mean to pass '--'u'). Did you mean to declare an argument instead? Did you mean to pass '--'b''?'u''?'b'_const'u'_const'b'env var: {var}'u'env var: {var}'b'(dynamic)'u'(dynamic)'b'default: {default}'u'default: {default}'b'  ['u'  ['b'This is an alternative flow that can be activated in the full
        value processing if a value does not exist.  It will prompt the
        user until a valid value exists and then returns the processed
        value as result.
        'u'This is an alternative flow that can be activated in the full
        value processing if a value does not exist.  It will prompt the
        user until a valid value exists and then returns the processed
        value as result.
        'b'Arguments are positional parameters to a command.  They generally
    provide fewer features than options but can have infinite ``nargs``
    and are required by default.

    All parameters are passed onwards to the constructor of :class:`Parameter`.
    'u'Arguments are positional parameters to a command.  They generally
    provide fewer features than options but can have infinite ``nargs``
    and are required by default.

    All parameters are passed onwards to the constructor of :class:`Parameter`.
    'b'argument'u'argument'b'__init__() got an unexpected keyword argument 'multiple'.'u'__init__() got an unexpected keyword argument 'multiple'.'b''default' is not supported for nargs=-1.'u''default' is not supported for nargs=-1.'b'Could not determine name for argument'u'Could not determine name for argument'b'Arguments take exactly one parameter declaration, got 'u'Arguments take exactly one parameter declaration, got 'u'click.core'u'core'PYTHONASYNCIODEBUG_DEBUGCoroWrapperisgeneratorextract_stackcoro_repr, created at f_lasti was never yielded from
Coroutine object created at (most recent call last, truncated to '\nCoroutine object created at ''(most recent call last, truncated to ' last lines):
Decorator to mark coroutines.

    If the coroutine is not yielded from before it is destroyed,
    an error message is logged.
    "@coroutine" decorator is deprecated since Python 3.8, use "async def" insteadisgeneratorfunctionawait_methReturn True if func is a decorated coroutine function.CoroutineTypeGeneratorType_COROUTINE_TYPES_iscoroutine_typecacheReturn True if obj is a coroutine object.is_corowrapper_format_callbackcoro_name without __name__>cr_runningcoro_codecr_code runningcoro_frame<empty co_filename>_get_function_source done, defined at  running, defined at  running at # If you set _DEBUG to true, @coroutine will wrap the resulting# generator objects in a CoroWrapper instance (defined below).  That# instance will log a message when the generator is never iterated# over, which may happen when you forget to use "await" or "yield from"# with a coroutine call.# Note that the value of the _DEBUG flag is taken# when the decorator is used, so to be of any use it must be set# before you define your coroutines.  A downside of using this feature# is that tracebacks show entries for the CoroWrapper.__next__ method# when _DEBUG is true.# Wrapper for coroutine object in _DEBUG mode.# Used to unwrap @coroutine decorator# Be careful accessing self.gen.frame -- self.gen might not exist.# In Python 3.5 that's all we need to do for coroutines# defined with "async def".# If 'res' is an awaitable, run it.# Python < 3.5 does not implement __qualname__# on generator objects, so we set it manually.# We use getattr as some callables (such as# functools.partial may lack __qualname__).# For iscoroutinefunction().# A marker for iscoroutinefunction.# Prioritize native coroutine check to speed-up# asyncio.iscoroutine.# Just in case we don't want to cache more than 100# positive types.  That shouldn't ever happen, unless# someone stressing the system on purpose.# Coroutines compiled with Cython sometimes don't have# proper __qualname__ or __name__.  While that is a bug# in Cython, asyncio shouldn't crash with an AttributeError# in its __repr__ functions.# Stop masking Cython bugs, expose them in a friendly way.# Built-in types might not have __qualname__ or __name__.# If Cython's coroutine has a fake code object without proper# co_filename -- expose that.b'coroutine'u'coroutine'b'iscoroutinefunction'u'iscoroutinefunction'b'iscoroutine'u'iscoroutine'b'PYTHONASYNCIODEBUG'u'PYTHONASYNCIODEBUG'b', created at 'u', created at 'b'gen'u'gen'b' was never yielded from'u' was never yielded from'b'_source_traceback'u'_source_traceback'b'
Coroutine object created at (most recent call last, truncated to 'u'
Coroutine object created at (most recent call last, truncated to 'b' last lines):
'u' last lines):
'b'Decorator to mark coroutines.

    If the coroutine is not yielded from before it is destroyed,
    an error message is logged.
    'u'Decorator to mark coroutines.

    If the coroutine is not yielded from before it is destroyed,
    an error message is logged.
    'b'"@coroutine" decorator is deprecated since Python 3.8, use "async def" instead'u'"@coroutine" decorator is deprecated since Python 3.8, use "async def" instead'b'Return True if func is a decorated coroutine function.'u'Return True if func is a decorated coroutine function.'b'Return True if obj is a coroutine object.'u'Return True if obj is a coroutine object.'b' without __name__>'u' without __name__>'b'cr_code'u'cr_code'b'gi_code'u'gi_code'b' running'u' running'b'<empty co_filename>'u'<empty co_filename>'b' done, defined at 'u' done, defined at 'b' running, defined at 'u' running, defined at 'b' running at 'u' running at 'u'Python39.lib.asyncio.coroutines'u'lib.asyncio.coroutines'u'asyncio.coroutines'u'coroutines'csp_propertyReturn a new property object for a content security policy header.
    Useful if you want to add support for a csp extension in a
    subclass.
    _del_valueSubclass of a dict that stores values for a Content Security Policy
    header. It has accessors for all the level 3 policies.

    Because the csp directives in the HTTP header use dashes the
    python descriptors use underscores for that.

    To get a header of the :class:`ContentSecuirtyPolicy` object again
    you can convert the object into a string or call the
    :meth:`to_header` method.  If you plan to subclass it and add your
    own items have a look at the sourcecode for that class.

    .. versionadded:: 1.0.0
       Support for Content Security Policy headers was added.

    base-uribase_urichild-srcchild_srcconnect-srcconnect_srcdefault-srcdefault_srcfont-srcfont_srcform-actionform_actionframe-ancestorsframe_ancestorsframe-srcframe_srcimg-srcimg_srcmanifest-srcmanifest_srcmedia-srcmedia_srcnavigate-tonavigate_toobject-srcobject_srcprefetch-srcprefetch_srcplugin-typesplugin_typesreport-toreport_toreport-urireport_urisandboxscript-srcscript_srcscript-src-attrscript_src_attrscript-src-elemscript_src_elemstyle-srcstyle_srcstyle-src-attrstyle_src_attrstyle-src-elemstyle_src_elemworker-srcworker_srcdump_csp_headerb'Return a new property object for a content security policy header.
    Useful if you want to add support for a csp extension in a
    subclass.
    'u'Return a new property object for a content security policy header.
    Useful if you want to add support for a csp extension in a
    subclass.
    'b'Subclass of a dict that stores values for a Content Security Policy
    header. It has accessors for all the level 3 policies.

    Because the csp directives in the HTTP header use dashes the
    python descriptors use underscores for that.

    To get a header of the :class:`ContentSecuirtyPolicy` object again
    you can convert the object into a string or call the
    :meth:`to_header` method.  If you plan to subclass it and add your
    own items have a look at the sourcecode for that class.

    .. versionadded:: 1.0.0
       Support for Content Security Policy headers was added.

    'u'Subclass of a dict that stores values for a Content Security Policy
    header. It has accessors for all the level 3 policies.

    Because the csp directives in the HTTP header use dashes the
    python descriptors use underscores for that.

    To get a header of the :class:`ContentSecuirtyPolicy` object again
    you can convert the object into a string or call the
    :meth:`to_header` method.  If you plan to subclass it and add your
    own items have a look at the sourcecode for that class.

    .. versionadded:: 1.0.0
       Support for Content Security Policy headers was added.

    'b'base-uri'u'base-uri'b'child-src'u'child-src'b'connect-src'u'connect-src'b'default-src'u'default-src'b'font-src'u'font-src'b'form-action'u'form-action'b'frame-ancestors'u'frame-ancestors'b'frame-src'u'frame-src'b'img-src'u'img-src'b'manifest-src'u'manifest-src'b'media-src'u'media-src'b'navigate-to'u'navigate-to'b'object-src'u'object-src'b'prefetch-src'u'prefetch-src'b'plugin-types'u'plugin-types'b'report-to'u'report-to'b'report-uri'u'report-uri'b'sandbox'u'sandbox'b'script-src'u'script-src'b'script-src-attr'u'script-src-attr'b'script-src-elem'u'script-src-elem'b'style-src'u'style-src'b'style-src-attr'u'style-src-attr'b'style-src-elem'u'style-src-elem'b'worker-src'u'worker-src'u'werkzeug.datastructures.csp'u'datastructures.csp'u'csp'
csv.py - read/write/investigate CSV files
_Dialectexcelexcel_tabSnifferDictReaderDictWriterunix_dialectDescribe a CSV dialect.

    This must be subclassed (see csv.excel).  Valid attributes are:
    delimiter, quotechar, escapechar, doublequote, skipinitialspace,
    lineterminator, quoting.

    _valid_validateDescribe the usual properties of Excel-generated CSV files.Describe the usual properties of Excel-generated TAB-delimited files.excel-tabDescribe the usual properties of Unix-generated CSV files.fieldnamesrestkeyrestvaldialect_fieldnamesline_numlflrextrasactionextrasaction (%s) must be 'raise' or 'ignore'writeheaderwriterow_dict_to_listrowdictwrong_fieldsdict contains fields not in fieldnames: writerowsrowdicts
    "Sniffs" the format of a CSV file (i.e. delimiter, quotechar)
    Returns a Dialect object.
    preferredsniffsample
        Returns a dialect (or None) corresponding to the sample
        _guess_quote_and_delimiter_guess_delimiterCould not determine delimitersniffed
        Looks for text enclosed between two identical quotes
        (the probable quotechar) which are preceded and followed
        by the same character (the probable delimiter).
        For example:
                         ,'some text',
        The quote with the most wins, same with the delimiter.
        If there is no quotechar the delimiter can't be determined
        this way.
        restr(?P<delim>[^\w\n"\'])(?P<space> ?)(?P<quote>["\']).*?(?P=quote)(?P=delim)(?:^|\n)(?P<quote>["\']).*?(?P=quote)(?P<delim>[^\w\n"\'])(?P<space> ?)(?P<delim>[^\w\n"\'])(?P<space> ?)(?P<quote>["\']).*?(?P=quote)(?:$|\n)(?:^|\n)(?P<quote>["\']).*?(?P=quote)(?:$|\n)MULTILINEquotesdelimsspacesgroupindex((%(delim)s)|^)\W*%(quote)s[^%(delim)s\n]*%(quote)s[^%(delim)s\n]*%(quote)s\W*((%(delim)s)|$)dq_regexp
        The delimiter /should/ occur the same number of times on
        each row. However, due to malformed data, it may not. We don't want
        an all or nothing approach, so we allow for small variations in this
        number.
          1) build a table of the frequency of each character on every line.
          2) build a table of frequencies of this frequency (meta-frequency?),
             e.g.  'x occurred 5 times in 10 rows, 6 times in 1000 rows,
             7 times in 2 rows'
          3) use the mode of the meta-frequency to determine the /expected/
             frequency for that character
          4) find out how often the character actually meets that goal
          5) the character that best meets its goal is the delimiter
        For performance reasons, the data is evaluated in chunks, so it can
        try and evaluate the smallest portion of the data possible, evaluating
        additional chunks as necessary.
        chunkLengthiterationcharFrequencymodesmetaFrequencyfreqmodeListtotalconsistency0.9threshold%c has_headerrdrcolumnTypesthisTypehasHeadercolType# placeholders# We do this for compatibility with py2.3# list of keys for the dict# key to catch long rows# default value for short rows# Used only for its side effect.# unlike the basic reader, we prefer not to return blanks,# because we will typically wind up with a dict full of None# values# for writing short dicts# Guard Sniffer's type checking against builds that exclude complex()# in case there is more than one possible delimiter# escapechar = ''# _csv.reader won't accept a quotechar of ''# ,".*?",#  ".*?",# ,".*?"#  ".*?" (no delim, no space)# (quotechar, doublequote, delimiter, skipinitialspace)# most likely a file with a single column# there is *no* delimiter, it's a single column of quoted data# if we see an extra quote between delimiters, we've got a# double quoted format# 7-bit ASCII# build frequency tables# must count even if frequency is 0# value is the mode# get the mode of the frequencies# adjust the mode - subtract the sum of all# other frequencies# build a list of possible delimiters# (rows of consistent data) / (number of rows) = 100%# minimum consistency threshold# analyze another chunkLength lines# if there's more than one, fall back to a 'preferred' list# nothing else indicates a preference, pick the character that# dominates(?)# Creates a dictionary of types of data in each column. If any# column is of a single type (say, integers), *except* for the first# row, then the first row is presumed to be labels. If the type# can't be determined, it is assumed to be a string in which case# the length of the string is the determining factor: if all of the# rows except for the first are the same length, it's a header.# Finally, a 'vote' is taken at the end for each column, adding or# subtracting from the likelihood of the first row being a header.# assume first row is header# arbitrary number of rows to check, to keep it sane# skip rows that have irregular number of columns# fallback to length of string# add new column type# type is inconsistent, remove column from# consideration# finally, compare results against first row and "vote"# on whether it's a header# it's a length# attempt typecastb'
csv.py - read/write/investigate CSV files
'u'
csv.py - read/write/investigate CSV files
'b'QUOTE_MINIMAL'u'QUOTE_MINIMAL'b'QUOTE_ALL'u'QUOTE_ALL'b'QUOTE_NONNUMERIC'u'QUOTE_NONNUMERIC'b'QUOTE_NONE'u'QUOTE_NONE'b'Dialect'u'Dialect'b'excel'u'excel'b'excel_tab'u'excel_tab'b'field_size_limit'u'field_size_limit'b'reader'u'reader'b'writer'u'writer'b'register_dialect'u'register_dialect'b'get_dialect'u'get_dialect'b'list_dialects'u'list_dialects'b'Sniffer'u'Sniffer'b'unregister_dialect'u'unregister_dialect'b'DictReader'u'DictReader'b'DictWriter'u'DictWriter'b'unix_dialect'u'unix_dialect'b'Describe a CSV dialect.

    This must be subclassed (see csv.excel).  Valid attributes are:
    delimiter, quotechar, escapechar, doublequote, skipinitialspace,
    lineterminator, quoting.

    'u'Describe a CSV dialect.

    This must be subclassed (see csv.excel).  Valid attributes are:
    delimiter, quotechar, escapechar, doublequote, skipinitialspace,
    lineterminator, quoting.

    'b'Describe the usual properties of Excel-generated CSV files.'u'Describe the usual properties of Excel-generated CSV files.'b'Describe the usual properties of Excel-generated TAB-delimited files.'u'Describe the usual properties of Excel-generated TAB-delimited files.'b'excel-tab'u'excel-tab'b'Describe the usual properties of Unix-generated CSV files.'u'Describe the usual properties of Unix-generated CSV files.'b'extrasaction (%s) must be 'raise' or 'ignore''u'extrasaction (%s) must be 'raise' or 'ignore''b'dict contains fields not in fieldnames: 'u'dict contains fields not in fieldnames: 'b'
    "Sniffs" the format of a CSV file (i.e. delimiter, quotechar)
    Returns a Dialect object.
    'u'
    "Sniffs" the format of a CSV file (i.e. delimiter, quotechar)
    Returns a Dialect object.
    'b'
        Returns a dialect (or None) corresponding to the sample
        'u'
        Returns a dialect (or None) corresponding to the sample
        'b'Could not determine delimiter'u'Could not determine delimiter'b'sniffed'u'sniffed'b'
        Looks for text enclosed between two identical quotes
        (the probable quotechar) which are preceded and followed
        by the same character (the probable delimiter).
        For example:
                         ,'some text',
        The quote with the most wins, same with the delimiter.
        If there is no quotechar the delimiter can't be determined
        this way.
        'u'
        Looks for text enclosed between two identical quotes
        (the probable quotechar) which are preceded and followed
        by the same character (the probable delimiter).
        For example:
                         ,'some text',
        The quote with the most wins, same with the delimiter.
        If there is no quotechar the delimiter can't be determined
        this way.
        'b'(?P<delim>[^\w\n"\'])(?P<space> ?)(?P<quote>["\']).*?(?P=quote)(?P=delim)'u'(?P<delim>[^\w\n"\'])(?P<space> ?)(?P<quote>["\']).*?(?P=quote)(?P=delim)'b'(?:^|\n)(?P<quote>["\']).*?(?P=quote)(?P<delim>[^\w\n"\'])(?P<space> ?)'u'(?:^|\n)(?P<quote>["\']).*?(?P=quote)(?P<delim>[^\w\n"\'])(?P<space> ?)'b'(?P<delim>[^\w\n"\'])(?P<space> ?)(?P<quote>["\']).*?(?P=quote)(?:$|\n)'u'(?P<delim>[^\w\n"\'])(?P<space> ?)(?P<quote>["\']).*?(?P=quote)(?:$|\n)'b'(?:^|\n)(?P<quote>["\']).*?(?P=quote)(?:$|\n)'u'(?:^|\n)(?P<quote>["\']).*?(?P=quote)(?:$|\n)'b'delim'u'delim'b'space'u'space'b'((%(delim)s)|^)\W*%(quote)s[^%(delim)s\n]*%(quote)s[^%(delim)s\n]*%(quote)s\W*((%(delim)s)|$)'u'((%(delim)s)|^)\W*%(quote)s[^%(delim)s\n]*%(quote)s[^%(delim)s\n]*%(quote)s\W*((%(delim)s)|$)'b'
        The delimiter /should/ occur the same number of times on
        each row. However, due to malformed data, it may not. We don't want
        an all or nothing approach, so we allow for small variations in this
        number.
          1) build a table of the frequency of each character on every line.
          2) build a table of frequencies of this frequency (meta-frequency?),
             e.g.  'x occurred 5 times in 10 rows, 6 times in 1000 rows,
             7 times in 2 rows'
          3) use the mode of the meta-frequency to determine the /expected/
             frequency for that character
          4) find out how often the character actually meets that goal
          5) the character that best meets its goal is the delimiter
        For performance reasons, the data is evaluated in chunks, so it can
        try and evaluate the smallest portion of the data possible, evaluating
        additional chunks as necessary.
        'u'
        The delimiter /should/ occur the same number of times on
        each row. However, due to malformed data, it may not. We don't want
        an all or nothing approach, so we allow for small variations in this
        number.
          1) build a table of the frequency of each character on every line.
          2) build a table of frequencies of this frequency (meta-frequency?),
             e.g.  'x occurred 5 times in 10 rows, 6 times in 1000 rows,
             7 times in 2 rows'
          3) use the mode of the meta-frequency to determine the /expected/
             frequency for that character
          4) find out how often the character actually meets that goal
          5) the character that best meets its goal is the delimiter
        For performance reasons, the data is evaluated in chunks, so it can
        try and evaluate the smallest portion of the data possible, evaluating
        additional chunks as necessary.
        'b'%c 'u'%c 'u'Python.Python39.lib.csv'u'Python39.lib.csv'u'lib.csv'u'csv'SessionMixinA plain object. Used as a namespace for storing data during an
    application context.

    Creating an app context automatically creates this object, which is
    made available as the :data:`g` proxy.

    .. describe:: 'key' in g

        Check whether an attribute is present.

        .. versionadded:: 0.10

    .. describe:: iter(g)

        Return an iterator over the attribute names.

        .. versionadded:: 0.10
    Get an attribute by name, or a default value. Like
        :meth:`dict.get`.

        :param name: Name of attribute to get.
        :param default: Value to return if the attribute is not present.

        .. versionadded:: 0.10
        Get and remove an attribute by name. Like :meth:`dict.pop`.

        :param name: Name of attribute to pop.
        :param default: Value to return if the attribute is not present,
            instead of raising a ``KeyError``.

        .. versionadded:: 0.11
        Get the value of an attribute if it is present, otherwise
        set and return a default value. Like :meth:`dict.setdefault`.

        :param name: Name of attribute to get.
        :param default: Value to set and return if the attribute is not
            present.

        .. versionadded:: 0.11
        <flask.g of ''>Executes a function after this request.  This is useful to modify
    response objects.  The function is passed the response object and has
    to return the same or a new one.

    Example::

        @app.route('/')
        def index():
            @after_this_request
            def add_header(response):
                response.headers['X-Foo'] = 'Parachute'
                return response
            return 'Hello World!'

    This is more useful if a function other than the view function wants to
    modify a response.  For instance think of a decorator that wants to add
    some headers without converting the return value into a response object.

    .. versionadded:: 0.9
    'after_this_request' can only be used when a request context is active, such as in a view function."'after_this_request' can only be used when a request"" context is active, such as in a view function."A helper function that decorates a function to retain the current
    request context.  This is useful when working with greenlets.  The moment
    the function is decorated a copy of the request context is created and
    then pushed when the function is called.  The current session is also
    included in the copied request context.

    Example::

        import gevent
        from flask import copy_current_request_context

        @app.route('/')
        def index():
            @copy_current_request_context
            def do_some_work():
                # do some work here, it can access flask.request or
                # flask.session like you would otherwise in the view function.
                ...
            gevent.spawn(do_some_work)
            return 'Regular response'

    .. versionadded:: 0.10
    'copy_current_request_context' can only be used when a request context is active, such as in a view function."'copy_current_request_context' can only be used when a"" request context is active, such as in a view function."If you have code that wants to test if a request context is there or
    not this function can be used.  For instance, you may want to take advantage
    of request information if the request object is available, but fail
    silently if it is unavailable.

    ::

        class User(db.Model):

            def __init__(self, username, remote_addr=None):
                self.username = username
                if remote_addr is None and has_request_context():
                    remote_addr = request.remote_addr
                self.remote_addr = remote_addr

    Alternatively you can also just test any of the context bound objects
    (such as :class:`request` or :class:`g`) for truthness::

        class User(db.Model):

            def __init__(self, username, remote_addr=None):
                self.username = username
                if remote_addr is None and request:
                    remote_addr = request.remote_addr
                self.remote_addr = remote_addr

    .. versionadded:: 0.7
    Works like :func:`has_request_context` but for the application
    context.  You can also just do a boolean check on the
    :data:`current_app` object instead.

    .. versionadded:: 0.9
    The app context contains application-specific information. An app
    context is created and pushed at the beginning of each request if
    one is not already active. An app context is also pushed when
    running CLI commands.
    _cv_tokensBinds the app context to the current context.Pops the app context.Popped wrong app context. ( instead of The request context contains per-request information. The Flask
    app creates and pushes it at the beginning of the request, then pops
    it at the end of the request. It will create the URL adapter and
    request object for the WSGI environment provided.

    Do not attempt to use this class directly, instead use
    :meth:`~flask.Flask.test_request_context` and
    :meth:`~flask.Flask.request_context` to create this object.

    When the request context is popped, it will evaluate all the
    functions registered on the application for teardown execution
    (:meth:`~flask.Flask.teardown_request`).

    The request context is automatically popped at the end of the
    request. When using the interactive debugger, the context will be
    restored so ``request`` is still accessible. Similarly, the test
    client can preserve the context after the request ends. However,
    teardown functions may already have closed some resources such as
    database connections.
    json_moduleflashesCreates a copy of this request context with the same request object.
        This can be used to move a request context to a different greenlet.
        Because the actual request object is the same this cannot be used to
        move a request context to a different thread unless access to the
        request object is locked.

        .. versionadded:: 0.10

        .. versionchanged:: 1.1
           The current session object is used instead of reloading the original
           data. This prevents `flask.session` pointing to an out-of-date object.
        match_requestCan be overridden by a subclass to hook into the matching
        of the request.
        return_ruleopen_sessionmake_null_sessionPops the request context and unbinds it by doing that.  This will
        also trigger the execution of functions registered by the
        :meth:`~flask.Flask.teardown_request` decorator.

        .. versionchanged:: 0.9
           Added the `exc` argument.
        clear_requestrequest_closePopped wrong request context. (" ["] of # a singleton sentinel value for parameter defaults# Define attr methods to let mypy know this is a namespace object# that has arbitrary attributes.# Functions that should be executed after the request on the response# object.  These will be called before the regular "after_request"# functions.# Before we push the request context we have to ensure that there# is an application context.# Open the session at the moment that the request context is available.# This allows a custom open_session method to use the request context.# Only open a new session if this is the first time the request was# pushed, otherwise stream_with_context loses the session.# Match the request URL after loading the session, so that the# session is available in custom URL converters.# get rid of circular dependencies at the end of the request# so that we don't require the GC to be active.b'A plain object. Used as a namespace for storing data during an
    application context.

    Creating an app context automatically creates this object, which is
    made available as the :data:`g` proxy.

    .. describe:: 'key' in g

        Check whether an attribute is present.

        .. versionadded:: 0.10

    .. describe:: iter(g)

        Return an iterator over the attribute names.

        .. versionadded:: 0.10
    'u'A plain object. Used as a namespace for storing data during an
    application context.

    Creating an app context automatically creates this object, which is
    made available as the :data:`g` proxy.

    .. describe:: 'key' in g

        Check whether an attribute is present.

        .. versionadded:: 0.10

    .. describe:: iter(g)

        Return an iterator over the attribute names.

        .. versionadded:: 0.10
    'b'Get an attribute by name, or a default value. Like
        :meth:`dict.get`.

        :param name: Name of attribute to get.
        :param default: Value to return if the attribute is not present.

        .. versionadded:: 0.10
        'u'Get an attribute by name, or a default value. Like
        :meth:`dict.get`.

        :param name: Name of attribute to get.
        :param default: Value to return if the attribute is not present.

        .. versionadded:: 0.10
        'b'Get and remove an attribute by name. Like :meth:`dict.pop`.

        :param name: Name of attribute to pop.
        :param default: Value to return if the attribute is not present,
            instead of raising a ``KeyError``.

        .. versionadded:: 0.11
        'u'Get and remove an attribute by name. Like :meth:`dict.pop`.

        :param name: Name of attribute to pop.
        :param default: Value to return if the attribute is not present,
            instead of raising a ``KeyError``.

        .. versionadded:: 0.11
        'b'Get the value of an attribute if it is present, otherwise
        set and return a default value. Like :meth:`dict.setdefault`.

        :param name: Name of attribute to get.
        :param default: Value to set and return if the attribute is not
            present.

        .. versionadded:: 0.11
        'u'Get the value of an attribute if it is present, otherwise
        set and return a default value. Like :meth:`dict.setdefault`.

        :param name: Name of attribute to get.
        :param default: Value to set and return if the attribute is not
            present.

        .. versionadded:: 0.11
        'b'<flask.g of ''u'<flask.g of ''b''>'u''>'b'Executes a function after this request.  This is useful to modify
    response objects.  The function is passed the response object and has
    to return the same or a new one.

    Example::

        @app.route('/')
        def index():
            @after_this_request
            def add_header(response):
                response.headers['X-Foo'] = 'Parachute'
                return response
            return 'Hello World!'

    This is more useful if a function other than the view function wants to
    modify a response.  For instance think of a decorator that wants to add
    some headers without converting the return value into a response object.

    .. versionadded:: 0.9
    'u'Executes a function after this request.  This is useful to modify
    response objects.  The function is passed the response object and has
    to return the same or a new one.

    Example::

        @app.route('/')
        def index():
            @after_this_request
            def add_header(response):
                response.headers['X-Foo'] = 'Parachute'
                return response
            return 'Hello World!'

    This is more useful if a function other than the view function wants to
    modify a response.  For instance think of a decorator that wants to add
    some headers without converting the return value into a response object.

    .. versionadded:: 0.9
    'b''after_this_request' can only be used when a request context is active, such as in a view function.'u''after_this_request' can only be used when a request context is active, such as in a view function.'b'A helper function that decorates a function to retain the current
    request context.  This is useful when working with greenlets.  The moment
    the function is decorated a copy of the request context is created and
    then pushed when the function is called.  The current session is also
    included in the copied request context.

    Example::

        import gevent
        from flask import copy_current_request_context

        @app.route('/')
        def index():
            @copy_current_request_context
            def do_some_work():
                # do some work here, it can access flask.request or
                # flask.session like you would otherwise in the view function.
                ...
            gevent.spawn(do_some_work)
            return 'Regular response'

    .. versionadded:: 0.10
    'u'A helper function that decorates a function to retain the current
    request context.  This is useful when working with greenlets.  The moment
    the function is decorated a copy of the request context is created and
    then pushed when the function is called.  The current session is also
    included in the copied request context.

    Example::

        import gevent
        from flask import copy_current_request_context

        @app.route('/')
        def index():
            @copy_current_request_context
            def do_some_work():
                # do some work here, it can access flask.request or
                # flask.session like you would otherwise in the view function.
                ...
            gevent.spawn(do_some_work)
            return 'Regular response'

    .. versionadded:: 0.10
    'b''copy_current_request_context' can only be used when a request context is active, such as in a view function.'u''copy_current_request_context' can only be used when a request context is active, such as in a view function.'b'If you have code that wants to test if a request context is there or
    not this function can be used.  For instance, you may want to take advantage
    of request information if the request object is available, but fail
    silently if it is unavailable.

    ::

        class User(db.Model):

            def __init__(self, username, remote_addr=None):
                self.username = username
                if remote_addr is None and has_request_context():
                    remote_addr = request.remote_addr
                self.remote_addr = remote_addr

    Alternatively you can also just test any of the context bound objects
    (such as :class:`request` or :class:`g`) for truthness::

        class User(db.Model):

            def __init__(self, username, remote_addr=None):
                self.username = username
                if remote_addr is None and request:
                    remote_addr = request.remote_addr
                self.remote_addr = remote_addr

    .. versionadded:: 0.7
    'u'If you have code that wants to test if a request context is there or
    not this function can be used.  For instance, you may want to take advantage
    of request information if the request object is available, but fail
    silently if it is unavailable.

    ::

        class User(db.Model):

            def __init__(self, username, remote_addr=None):
                self.username = username
                if remote_addr is None and has_request_context():
                    remote_addr = request.remote_addr
                self.remote_addr = remote_addr

    Alternatively you can also just test any of the context bound objects
    (such as :class:`request` or :class:`g`) for truthness::

        class User(db.Model):

            def __init__(self, username, remote_addr=None):
                self.username = username
                if remote_addr is None and request:
                    remote_addr = request.remote_addr
                self.remote_addr = remote_addr

    .. versionadded:: 0.7
    'b'Works like :func:`has_request_context` but for the application
    context.  You can also just do a boolean check on the
    :data:`current_app` object instead.

    .. versionadded:: 0.9
    'u'Works like :func:`has_request_context` but for the application
    context.  You can also just do a boolean check on the
    :data:`current_app` object instead.

    .. versionadded:: 0.9
    'b'The app context contains application-specific information. An app
    context is created and pushed at the beginning of each request if
    one is not already active. An app context is also pushed when
    running CLI commands.
    'u'The app context contains application-specific information. An app
    context is created and pushed at the beginning of each request if
    one is not already active. An app context is also pushed when
    running CLI commands.
    'b'Binds the app context to the current context.'u'Binds the app context to the current context.'b'Pops the app context.'u'Pops the app context.'b'Popped wrong app context. ('u'Popped wrong app context. ('b' instead of 'u' instead of 'b'The request context contains per-request information. The Flask
    app creates and pushes it at the beginning of the request, then pops
    it at the end of the request. It will create the URL adapter and
    request object for the WSGI environment provided.

    Do not attempt to use this class directly, instead use
    :meth:`~flask.Flask.test_request_context` and
    :meth:`~flask.Flask.request_context` to create this object.

    When the request context is popped, it will evaluate all the
    functions registered on the application for teardown execution
    (:meth:`~flask.Flask.teardown_request`).

    The request context is automatically popped at the end of the
    request. When using the interactive debugger, the context will be
    restored so ``request`` is still accessible. Similarly, the test
    client can preserve the context after the request ends. However,
    teardown functions may already have closed some resources such as
    database connections.
    'u'The request context contains per-request information. The Flask
    app creates and pushes it at the beginning of the request, then pops
    it at the end of the request. It will create the URL adapter and
    request object for the WSGI environment provided.

    Do not attempt to use this class directly, instead use
    :meth:`~flask.Flask.test_request_context` and
    :meth:`~flask.Flask.request_context` to create this object.

    When the request context is popped, it will evaluate all the
    functions registered on the application for teardown execution
    (:meth:`~flask.Flask.teardown_request`).

    The request context is automatically popped at the end of the
    request. When using the interactive debugger, the context will be
    restored so ``request`` is still accessible. Similarly, the test
    client can preserve the context after the request ends. However,
    teardown functions may already have closed some resources such as
    database connections.
    'b'Creates a copy of this request context with the same request object.
        This can be used to move a request context to a different greenlet.
        Because the actual request object is the same this cannot be used to
        move a request context to a different thread unless access to the
        request object is locked.

        .. versionadded:: 0.10

        .. versionchanged:: 1.1
           The current session object is used instead of reloading the original
           data. This prevents `flask.session` pointing to an out-of-date object.
        'u'Creates a copy of this request context with the same request object.
        This can be used to move a request context to a different greenlet.
        Because the actual request object is the same this cannot be used to
        move a request context to a different thread unless access to the
        request object is locked.

        .. versionadded:: 0.10

        .. versionchanged:: 1.1
           The current session object is used instead of reloading the original
           data. This prevents `flask.session` pointing to an out-of-date object.
        'b'Can be overridden by a subclass to hook into the matching
        of the request.
        'u'Can be overridden by a subclass to hook into the matching
        of the request.
        'b'Pops the request context and unbinds it by doing that.  This will
        also trigger the execution of functions registered by the
        :meth:`~flask.Flask.teardown_request` decorator.

        .. versionchanged:: 0.9
           Added the `exc` argument.
        'u'Pops the request context and unbinds it by doing that.  This will
        also trigger the execution of functions registered by the
        :meth:`~flask.Flask.teardown_request` decorator.

        .. versionchanged:: 0.9
           Added the `exc` argument.
        'b'Popped wrong request context. ('u'Popped wrong request context. ('b'] of 'u'] of 'u'flask.ctx'dataclassFieldFrozenInstanceErrorInitVarasdictastuplemake_dataclassis_dataclass_HAS_DEFAULT_FACTORY_CLASS<factory>_HAS_DEFAULT_FACTORY_MISSING_TYPEMappingProxyType_EMPTY_METADATA_FIELD_BASE_FIELD_FIELD_CLASSVAR_FIELD_INITVAR__dataclass_fields___FIELDS__dataclass_params___PARAMS__post_init___POST_INIT_NAME^(?:\s*(\w+)\s*\.)?\s*(\w+)_MODULE_IDENTIFIER_REdataclasses.InitVar[_field_typeField(name='Field(''name=',type=',''type=',default='default=',default_factory='default_factory=',init='init=',repr='repr=',hash='hash=',compare='compare=',metadata='metadata=',_field_type='_field_type='')'__set_name___DataclassParamsorderunsafe_hash_DataclassParams(init='_DataclassParams(',eq='eq=',order='order=',unsafe_hash='unsafe_hash=',frozen='frozen='Return an object to identify dataclass fields.

    default is the default value of the field.  default_factory is a
    0-argument function called to initialize a field's value.  If init
    is True, the field will be a parameter to the class's __init__()
    function.  If repr is True, the field will be included in the
    object's repr().  If hash is True, the field will be included in
    the object's hash().  If compare is True, the field will be used
    in comparison functions.  metadata, if specified, must be a
    mapping which is stored but not otherwise examined by dataclass.

    It is an error to specify both default and default_factory.
    cannot specify both default and default_factory_tuple_struser_functionrepr_running_create_fnreturn_typeBUILTINSreturn_annotation_return_type->_return_type def :
txtlocal_varsdef __create_fn__():

 return __create_fn___field_assignBUILTINS.object.__setattr__(_field_init_dflt_default_name() if '() ''if ' is _HAS_DEFAULT_FACTORY else ' is _HAS_DEFAULT_FACTORY ''else '_init_param=_dflt_=_HAS_DEFAULT_FACTORY:_type__init_fnhas_post_initseen_defaultnon-default argument  follows default argument'follows default argument'body_linesparams_str_repr_fnreturn self.__class__.__qualname__ + f"(={{self.!r}})"_frozen_get_del_attrfields_strif type(self) is cls or name in  raise FrozenInstanceError(f"cannot assign to field {name!r}")super(cls, self).__setattr__(name, value) raise FrozenInstanceError(f"cannot delete field {name!r}")super(cls, self).__delattr__(name)_cmp_fnself_tupleother_tupleif other.__class__ is self.__class__: return return NotImplemented_hash_fnreturn hash(_is_classvara_typeClassVar_GenericAlias__origin___is_initvardataclasses_is_typea_moduleis_type_predicate_get_fielda_nameMemberDescriptorTypefield  cannot have a default factory' cannot have a ''default factory'mutable default  for field ' for field ' is not allowed: use default_factory_set_new_attribute_hash_set_none_hash_addflds_hash_exceptionCannot overwrite attribute __hash__ in class 'Cannot overwrite attribute __hash__ ''in class '_hash_action_process_classany_frozen_basehas_dataclass_basesbase_fieldscls_annotationscls_fields is a field but has no type annotationcannot inherit non-frozen dataclass from a frozen one'cannot inherit non-frozen dataclass from a ''frozen one'cannot inherit frozen dataclass from a non-frozen one'cannot inherit frozen dataclass from a ''non-frozen one'class_hashhas_explicit_hasheq must be true if order is true__dataclass_self__field_listCannot overwrite attribute  in class . Consider using functools.total_ordering'. Consider using ''functools.total_ordering'hash_action -> NoneReturns the same class as was passed in, with dunder methods
    added based on the fields defined in the class.

    Examines PEP 526 __annotations__ to determine fields.

    If init is true, an __init__() method is added to the class. If
    repr is true, a __repr__() method is added. If order is true, rich
    comparison dunder methods are added. If unsafe_hash is true, a
    __hash__() method function is added. If frozen is true, fields may
    not be assigned to after instance creation.
    class_or_instanceReturn a tuple describing the fields of this dataclass.

    Accepts a dataclass or an instance of one. Tuple elements are of
    type Field.
    must be called with a dataclass type or instance_is_dataclass_instanceReturns True if obj is an instance of a dataclass.Returns True if obj is a dataclass or an instance of a
    dataclass.dict_factoryReturn the fields of a dataclass instance as a new dictionary mapping
    field names to field values.

    Example usage:

      @dataclass
      class C:
          x: int
          y: int

      c = C(1, 2)
      assert asdict(c) == {'x': 1, 'y': 2}

    If given, 'dict_factory' will be used instead of built-in dict.
    The function applies recursively to field values that are
    dataclass instances. This will also look into built-in containers:
    tuples, lists, and dicts.
    asdict() should be called on dataclass instances_asdict_innertuple_factoryReturn the fields of a dataclass instance as a new tuple of field values.

    Example usage::

      @dataclass
      class C:
          x: int
          y: int

    c = C(1, 2)
    assert astuple(c) == (1, 2)

    If given, 'tuple_factory' will be used instead of built-in tuple.
    The function applies recursively to field values that are
    dataclass instances. This will also look into built-in containers:
    tuples, lists, and dicts.
    astuple() should be called on dataclass instances_astuple_innercls_nameReturn a new dynamically created dataclass.

    The dataclass name will be 'cls_name'.  'fields' is an iterable
    of either (name), (name, type) or (name, type, Field) objects. If type is
    omitted, use the string 'typing.Any'.  Field objects are created by
    the equivalent of calling 'field(name, type [, Field-info])'.

      C = make_dataclass('C', ['x', ('y', int), ('z', int, field(init=False))], bases=(Base,))

    is equivalent to:

      @dataclass
      class C(Base):
          x: 'typing.Any'
          y: int
          z: int = field(init=False)

    For the bases and namespace parameters, see the builtin type() function.

    The parameters init, repr, eq, order, unsafe_hash, and frozen are passed to
    dataclass().
    annstyping.AnytpInvalid field: Field names must be valid identifiers: Field names must not be keywords: Field name duplicated: new_classchangesReturn a new object replacing specified fields with new values.

    This is especially useful for frozen classes.  Example usage:

      @dataclass(frozen=True)
      class C:
          x: int
          y: int

      c = C(1, 2)
      c1 = replace(c, x=3)
      assert c1.x == 3 and c1.y == 2
      replace() should be called on dataclass instances is declared with init=False, it cannot be specified with replace()' is declared with ''init=False, it cannot be specified with ''replace()'InitVar  must be specified with replace()'must be specified with replace()'# Helper functions.# Conditions for adding methods.  The boxes indicate what action the# dataclass decorator takes.  For all of these tables, when I talk# about init=, repr=, eq=, order=, unsafe_hash=, or frozen=, I'm# referring to the arguments to the @dataclass decorator.  When# checking if a dunder method already exists, I mean check for an# entry in the class's __dict__.  I never check to see if an attribute# is defined in a base class.# Key:# +=========+=========================================+# + Value   | Meaning                                 |# | <blank> | No action: no method is added.          |# +---------+-----------------------------------------+# | add     | Generated method is added.              |# | raise   | TypeError is raised.                    |# | None    | Attribute is set to None.               |# __init__#   +--- init= parameter#   |#   v     |       |       |#         |  no   |  yes  |  <--- class has __init__ in __dict__?# +=======+=======+=======+# | False |       |       |# +-------+-------+-------+# | True  | add   |       |  <- the default# __repr__#    +--- repr= parameter#    |#    v    |       |       |#         |  no   |  yes  |  <--- class has __repr__ in __dict__?# __setattr__# __delattr__#    +--- frozen= parameter#         |  no   |  yes  |  <--- class has __setattr__ or __delattr__ in __dict__?# | False |       |       |  <- the default# | True  | add   | raise |# Raise because not adding these methods would break the "frozen-ness"# of the class.# __eq__#    +--- eq= parameter#         |  no   |  yes  |  <--- class has __eq__ in __dict__?# __lt__# __le__# __gt__# __ge__#    +--- order= parameter#         |  no   |  yes  |  <--- class has any comparison method in __dict__?# Raise because to allow this case would interfere with using# functools.total_ordering.# __hash__#    +------------------- unsafe_hash= parameter#    |       +----------- eq= parameter#    |       |       +--- frozen= parameter#    |       |       |#    v       v       v    |        |        |#                         |   no   |  yes   |  <--- class has explicitly defined __hash__# +=======+=======+=======+========+========+# | False | False | False |        |        | No __eq__, use the base class __hash__# +-------+-------+-------+--------+--------+# | False | False | True  |        |        | No __eq__, use the base class __hash__# | False | True  | False | None   |        | <-- the default, not hashable# | False | True  | True  | add    |        | Frozen, so hashable, allows override# | True  | False | False | add    | raise  | Has no __eq__, but hashable# | True  | False | True  | add    | raise  | Has no __eq__, but hashable# | True  | True  | False | add    | raise  | Not frozen, but hashable# | True  | True  | True  | add    | raise  | Frozen, so hashable# For boxes that are blank, __hash__ is untouched and therefore# inherited from the base class.  If the base is object, then# id-based hashing is used.# Note that a class may already have __hash__=None if it specified an# __eq__ method in the class body (not one that was created by# @dataclass).# See _hash_action (below) for a coded version of this table.# Raised when an attempt is made to modify a frozen class.# A sentinel object for default values to signal that a default# factory will be used.  This is given a nice repr() which will appear# in the function signature of dataclasses' constructors.# A sentinel object to detect if a parameter is supplied or not.  Use# a class to give it a better repr.# Since most per-field metadata will be unused, create an empty# read-only proxy that can be shared among all fields.# Markers for the various kinds of fields and pseudo-fields.# The name of an attribute on the class where we store the Field# objects.  Also used to check if a class is a Data Class.# The name of an attribute on the class that stores the parameters to# @dataclass.# The name of the function, that if it exists, is called at the end of# __init__.# String regex that string annotations for ClassVar or InitVar must match.# Allows "identifier.identifier[" or "identifier[".# https://bugs.python.org/issue33453 for details.# typing objects, e.g. List[int]# Instances of Field are only ever created from within this module,# and only from the field() function, although Field instances are# exposed externally as (conceptually) read-only objects.# name and type are filled in after the fact, not in __init__.# They're not known at the time this class is instantiated, but it's# convenient if they're available later.# When cls._FIELDS is filled in with a list of Field objects, the name# and type fields will have been populated.# Private: not to be used by user code.# This is used to support the PEP 487 __set_name__ protocol in the# case where we're using a field that contains a descriptor as a# default value.  For details on __set_name__, see# https://www.python.org/dev/peps/pep-0487/#implementation-details.# Note that in _process_class, this Field object is overwritten# with the default value, so the end result is a descriptor that# had __set_name__ called on it at the right time.# There is a __set_name__ method on the descriptor, call# This function is used instead of exposing Field creation directly,# so that a type checker can be told (via overloads) that this is a# function whose type depends on its parameters.# Return a string representing each field of obj_name as a tuple# member.  So, if fields is ['x', 'y'] and obj_name is "self",# return "(self.x,self.y)".# Special case for the 0-tuple.# Note the trailing comma, needed if this turns out to be a 1-tuple.# This function's logic is copied from "recursive_repr" function in# reprlib module to avoid dependency.# Decorator to make a repr function return "..." for a recursive# call.# Note that we mutate locals when exec() is called.  Caller# beware!  The only callers are internal to this module, so no# worries about external callers.# Compute the text of the entire function.# If we're a frozen class, then assign to our fields in __init__# via object.__setattr__.  Otherwise, just use a simple# assignment.# self_name is what "self" is called in this function: don't# hard-code "self", since that might be a field name.# Return the text of the line in the body of __init__ that will# initialize this field.# This field has a default factory.  If a parameter is# given, use it.  If not, call the factory.# This is a field that's not in the __init__ params, but# has a default factory function.  It needs to be# initialized here by calling the factory function,# because there's no other way to initialize it.# For a field initialized with a default=defaultvalue, the# class dict just has the default value# (cls.fieldname=defaultvalue).  But that won't work for a# default factory, the factory must be called in __init__# and we must assign that to self.fieldname.  We can't# fall back to the class dict's value, both because it's# not set, and because it might be different per-class# (which, after all, is why we have a factory function!).# No default factory.# There's no default, just do an assignment.# This field does not need initialization.  Signify that# to the caller by returning None.# Only test this now, so that we can create variables for the# default.  However, return None to signify that we're not going# to actually do the assignment statement for InitVars.# Now, actually generate the field assignment.# Return the __init__ parameter string for this field.  For# example, the equivalent of 'x:int=3' (except instead of 'int',# reference a variable set to int, and instead of '3', reference a# variable set to 3).# There's no default, and no default_factory, just output the# variable name and type.# There's a default, this will be the name that's used to look# it up.# There's a factory function.  Set a marker.# fields contains both real fields and InitVar pseudo-fields.# Make sure we don't have fields without defaults following fields# with defaults.  This actually would be caught when exec-ing the# function source code, but catching it here gives a better error# message, and future-proofs us in case we build up the function# using ast.# Only consider fields in the __init__ call.# line is None means that this field doesn't require# initialization (it's a pseudo-field).  Just skip it.# Does this class have a post-init function?# If no body lines, use 'pass'.# Special case for the zero-length tuple.# Create a comparison function.  If the fields in the object are# named 'x' and 'y', then self_tuple is the string# '(self.x,self.y)' and other_tuple is the string# '(other.x,other.y)'.# This test uses a typing internal class, but it's the best way to# test if this is a ClassVar.# The module we're checking against is the module we're# currently in (dataclasses.py).# Given a type annotation string, does it refer to a_type in# a_module?  For example, when checking that annotation denotes a# ClassVar, then a_module is typing, and a_type is# typing.ClassVar.# It's possible to look up a_module given a_type, but it involves# looking in sys.modules (again!), and seems like a waste since# the caller already knows a_module.# - annotation is a string type annotation# - cls is the class that this annotation was found in# - a_module is the module we want to match# - a_type is the type in that module we want to match# - is_type_predicate is a function called with (obj, a_module)#   that determines if obj is of the desired type.# Since this test does not do a local namespace lookup (and# instead only a module (global) lookup), there are some things it# gets wrong.# With string annotations, cv0 will be detected as a ClassVar:#   CV = ClassVar#   @dataclass#   class C0:#     cv0: CV# But in this example cv1 will not be detected as a ClassVar:#   class C1:#     CV = ClassVar#     cv1: CV# In C1, the code in this function (_is_type) will look up "CV" in# the module and not find it, so it will not consider cv1 as a# ClassVar.  This is a fairly obscure corner case, and the best# way to fix it would be to eval() the string "CV" with the# correct global and local namespaces.  However that would involve# a eval() penalty for every single field of every dataclass# that's defined.  It was judged not worth it.# No module name, assume the class's module did# "from dataclasses import InitVar".# Look up module_name in the class's module.# Return a Field object for this field name and type.  ClassVars# and InitVars are also returned, but marked as such (see# f._field_type).# If the default value isn't derived from Field, then it's only a# normal default value.  Convert it to a Field().# This is a field in __slots__, so it has no default value.# Only at this point do we know the name and the type.  Set them.# Assume it's a normal field until proven otherwise.  We're next# going to decide if it's a ClassVar or InitVar, everything else# is just a normal field.# In addition to checking for actual types here, also check for# string annotations.  get_type_hints() won't always work for us# (see https://github.com/python/typing/issues/508 for example),# plus it's expensive and would require an eval for every string# annotation.  So, make a best effort to see if this is a ClassVar# or InitVar using regex's and checking that the thing referenced# is actually of the correct type.# For the complete discussion, see https://bugs.python.org/issue33453# If typing has not been imported, then it's impossible for any# annotation to be a ClassVar.  So, only look for ClassVar if# typing has been imported by any module (not necessarily cls's# module).# If the type is InitVar, or if it's a matching string annotation,# then it's an InitVar.# Validations for individual fields.  This is delayed until now,# instead of in the Field() constructor, since only here do we# know the field name, which allows for better error reporting.# Special restrictions for ClassVar and InitVar.# Should I check for other field settings? default_factory# seems the most serious to check for.  Maybe add others.  For# example, how about init=False (or really,# init=<not-the-default-init-value>)?  It makes no sense for# ClassVar and InitVar to specify init=<anything>.# For real fields, disallow mutable defaults for known types.# Never overwrites an existing attribute.  Returns True if the# attribute already exists.# Decide if/how we're going to create a hash function.  Key is# (unsafe_hash, eq, frozen, does-hash-exist).  Value is the action to# take.  The common case is to do nothing, so instead of providing a# function that is a no-op, use None to signify that.# Raise an exception.#                +-------------------------------------- unsafe_hash?#                |      +------------------------------- eq?#                |      |      +------------------------ frozen?#                |      |      |      +----------------  has-explicit-hash?#                |      |      |      |#                |      |      |      |        +-------  action#                |      |      |      |        |#                v      v      v      v        v# See https://bugs.python.org/issue32929#msg312829 for an if-statement# version of this table.# Now that dicts retain insertion order, there's no reason to use# an ordered dict.  I am leveraging that ordering here, because# derived class fields overwrite base class fields, but the order# is defined by the base class, which is found first.# Theoretically this can happen if someone writes# a custom string to cls.__module__.  In which case# such dataclass won't be fully introspectable# (w.r.t. typing.get_type_hints) but will still function# correctly.# Find our base classes in reverse MRO order, and exclude# ourselves.  In reversed order so that more derived classes# override earlier field definitions in base classes.  As long as# we're iterating over them, see if any are frozen.# Only process classes that have been processed by our# decorator.  That is, they have a _FIELDS attribute.# Annotations that are defined in this class (not in base# classes).  If __annotations__ isn't present, then this class# adds no new annotations.  We use this to compute fields that are# added by this class.# Fields are found from cls_annotations, which is guaranteed to be# ordered.  Default values are from class attributes, if a field# has a default.  If the default value is a Field(), then it# contains additional info beyond (and possibly including) the# actual default value.  Pseudo-fields ClassVars and InitVars are# included, despite the fact that they're not real fields.  That's# dealt with later.# Now find fields in our class.  While doing so, validate some# things, and set the default values (as class attributes) where# we can.# If the class attribute (which is the default value for this# field) exists and is of type 'Field', replace it with the# real default.  This is so that normal class introspection# sees a real default value, not a Field.# If there's no default, delete the class attribute.# This happens if we specify field(repr=False), for# example (that is, we specified a field object, but# no default value).  Also if we're using a default# factory.  The class attribute should not be set at# all in the post-processed class.# Do we have any Field members that don't also have annotations?# Check rules that apply if we are derived from any dataclasses.# Raise an exception if any of our bases are frozen, but we're not.# Raise an exception if we're frozen, but none of our bases are.# Remember all of the fields on our class (including bases).  This# also marks this class as being a dataclass.# Was this class defined with an explicit __hash__?  Note that if# __eq__ is defined in this class, then python will automatically# set __hash__ to None.  This is a heuristic, as it's possible# that such a __hash__ == None was not auto-generated, but it# close enough.# If we're generating ordering methods, we must be generating the# eq methods.# Include InitVars and regular fields (so, not ClassVars).# The name to use for the "self"# param in __init__.  Use "self"# if possible.# Get the fields as a list, and include only real fields.  This is# used in all of the following methods.# Create __eq__ method.  There's no need for a __ne__ method,# since python will call __eq__ and negate it.# Create and set the ordering methods.# Decide if/how we're going to create a hash function.# No need to call _set_new_attribute here, since by the time# we're here the overwriting is unconditional.# Create a class doc-string.# See if we're being called as @dataclass or @dataclass().# We're called with parens.# We're called as @dataclass without parens.# Might it be worth caching this, per class?# Exclude pseudo-fields.  Note that fields is sorted by insertion# order, so the order of the tuple is as the fields were defined.# obj is a namedtuple.  Recurse into it, but the returned# object is another namedtuple of the same type.  This is# similar to how other list- or tuple-derived classes are# treated (see below), but we just need to create them# differently because a namedtuple's __init__ needs to be# called differently (see bpo-34363).# I'm not using namedtuple's _asdict()# method, because:# - it does not recurse in to the namedtuple fields and#   convert them to dicts (using dict_factory).# - I don't actually want to return a dict here.  The main#   use case here is json.dumps, and it handles converting#   namedtuples to lists.  Admittedly we're losing some#   information here when we produce a json list instead of a#   dict.  Note that if we returned dicts here instead of#   namedtuples, we could no longer call asdict() on a data#   structure where a namedtuple was used as a dict key.# Assume we can create an object of this type by passing in a# generator (which is not true for namedtuples, handled# above).# Copy namespace since we're going to mutate it.# While we're looking through the field names, validate that they# are identifiers, are not keywords, and not duplicates.# We use `types.new_class()` instead of simply `type()` to allow dynamic creation# of generic dataclassses.# We're going to mutate 'changes', but that's okay because it's a# new dict, even if called with 'replace(obj, **my_changes)'.# It's an error to have init=False fields in 'changes'.# If a field is not in 'changes', read its value from the provided obj.# Only consider normal fields or InitVars.# Error if this field is specified in changes.# Create the new object, which calls __init__() and# __post_init__() (if defined), using all of the init fields we've# added and/or left in 'changes'.  If there are values supplied in# changes that aren't fields, this will correctly raise a# TypeError.b'dataclass'u'dataclass'b'field'u'field'b'Field'u'Field'b'FrozenInstanceError'u'FrozenInstanceError'b'InitVar'u'InitVar'b'MISSING'u'MISSING'b'fields'u'fields'b'asdict'u'asdict'b'astuple'u'astuple'b'make_dataclass'u'make_dataclass'b'is_dataclass'u'is_dataclass'b'<factory>'u'<factory>'b'_FIELD'u'_FIELD'b'_FIELD_CLASSVAR'u'_FIELD_CLASSVAR'b'_FIELD_INITVAR'u'_FIELD_INITVAR'b'__dataclass_fields__'u'__dataclass_fields__'b'__dataclass_params__'u'__dataclass_params__'b'__post_init__'u'__post_init__'b'^(?:\s*(\w+)\s*\.)?\s*(\w+)'u'^(?:\s*(\w+)\s*\.)?\s*(\w+)'b'dataclasses.InitVar['u'dataclasses.InitVar['b'default_factory'u'default_factory'b'hash'u'hash'b'init'u'init'b'_field_type'u'_field_type'b'Field(name='u'Field(name='b',type='u',type='b',default='u',default='b',default_factory='u',default_factory='b',init='u',init='b',repr='u',repr='b',hash='u',hash='b',compare='u',compare='b',metadata='u',metadata='b',_field_type='u',_field_type='b'__set_name__'u'__set_name__'b'order'u'order'b'unsafe_hash'u'unsafe_hash'b'_DataclassParams(init='u'_DataclassParams(init='b',eq='u',eq='b',order='u',order='b',unsafe_hash='u',unsafe_hash='b',frozen='u',frozen='b'Return an object to identify dataclass fields.

    default is the default value of the field.  default_factory is a
    0-argument function called to initialize a field's value.  If init
    is True, the field will be a parameter to the class's __init__()
    function.  If repr is True, the field will be included in the
    object's repr().  If hash is True, the field will be included in
    the object's hash().  If compare is True, the field will be used
    in comparison functions.  metadata, if specified, must be a
    mapping which is stored but not otherwise examined by dataclass.

    It is an error to specify both default and default_factory.
    'u'Return an object to identify dataclass fields.

    default is the default value of the field.  default_factory is a
    0-argument function called to initialize a field's value.  If init
    is True, the field will be a parameter to the class's __init__()
    function.  If repr is True, the field will be included in the
    object's repr().  If hash is True, the field will be included in
    the object's hash().  If compare is True, the field will be used
    in comparison functions.  metadata, if specified, must be a
    mapping which is stored but not otherwise examined by dataclass.

    It is an error to specify both default and default_factory.
    'b'cannot specify both default and default_factory'u'cannot specify both default and default_factory'b'BUILTINS'u'BUILTINS'b'_return_type'u'_return_type'b'->_return_type'u'->_return_type'b' def 'u' def 'b':
'u':
'b'def __create_fn__('u'def __create_fn__('b'):
'u'):
'b'
 return 'u'
 return 'b'__create_fn__'u'__create_fn__'b'BUILTINS.object.__setattr__('u'BUILTINS.object.__setattr__('b'_dflt_'u'_dflt_'b'() if 'u'() if 'b' is _HAS_DEFAULT_FACTORY else 'u' is _HAS_DEFAULT_FACTORY else 'b'=_dflt_'u'=_dflt_'b'=_HAS_DEFAULT_FACTORY'u'=_HAS_DEFAULT_FACTORY'b':_type_'u':_type_'b'non-default argument 'u'non-default argument 'b' follows default argument'u' follows default argument'b'_type_'u'_type_'b'_HAS_DEFAULT_FACTORY'u'_HAS_DEFAULT_FACTORY'b'return self.__class__.__qualname__ + f"('u'return self.__class__.__qualname__ + f"('b'={{self.'u'={{self.'b'!r}}'u'!r}}'b')"'u')"'b'__setattr__'u'__setattr__'b'if type(self) is cls or name in 'u'if type(self) is cls or name in 'b' raise FrozenInstanceError(f"cannot assign to field {name!r}")'u' raise FrozenInstanceError(f"cannot assign to field {name!r}")'b'super(cls, self).__setattr__(name, value)'u'super(cls, self).__setattr__(name, value)'b'__delattr__'u'__delattr__'b' raise FrozenInstanceError(f"cannot delete field {name!r}")'u' raise FrozenInstanceError(f"cannot delete field {name!r}")'b'super(cls, self).__delattr__(name)'u'super(cls, self).__delattr__(name)'b'other'u'other'b'if other.__class__ is self.__class__:'u'if other.__class__ is self.__class__:'b' return 'u' return 'b'return NotImplemented'u'return NotImplemented'b'return hash('u'return hash('b'typing'u'typing'b'field 'u'field 'b' cannot have a default factory'u' cannot have a default factory'b'mutable default 'u'mutable default 'b' for field 'u' for field 'b' is not allowed: use default_factory'u' is not allowed: use default_factory'b'Cannot overwrite attribute __hash__ in class 'u'Cannot overwrite attribute __hash__ in class 'b'__annotations__'u'__annotations__'b' is a field but has no type annotation'u' is a field but has no type annotation'b'cannot inherit non-frozen dataclass from a frozen one'u'cannot inherit non-frozen dataclass from a frozen one'b'cannot inherit frozen dataclass from a non-frozen one'u'cannot inherit frozen dataclass from a non-frozen one'b'__eq__'u'__eq__'b'eq must be true if order is true'u'eq must be true if order is true'b'__dataclass_self__'u'__dataclass_self__'b'__lt__'u'__lt__'b'__le__'u'__le__'b'__gt__'u'__gt__'b'__ge__'u'__ge__'b'Cannot overwrite attribute 'u'Cannot overwrite attribute 'b' in class 'u' in class 'b'. Consider using functools.total_ordering'u'. Consider using functools.total_ordering'b' -> None'u' -> None'b'Returns the same class as was passed in, with dunder methods
    added based on the fields defined in the class.

    Examines PEP 526 __annotations__ to determine fields.

    If init is true, an __init__() method is added to the class. If
    repr is true, a __repr__() method is added. If order is true, rich
    comparison dunder methods are added. If unsafe_hash is true, a
    __hash__() method function is added. If frozen is true, fields may
    not be assigned to after instance creation.
    'u'Returns the same class as was passed in, with dunder methods
    added based on the fields defined in the class.

    Examines PEP 526 __annotations__ to determine fields.

    If init is true, an __init__() method is added to the class. If
    repr is true, a __repr__() method is added. If order is true, rich
    comparison dunder methods are added. If unsafe_hash is true, a
    __hash__() method function is added. If frozen is true, fields may
    not be assigned to after instance creation.
    'b'Return a tuple describing the fields of this dataclass.

    Accepts a dataclass or an instance of one. Tuple elements are of
    type Field.
    'u'Return a tuple describing the fields of this dataclass.

    Accepts a dataclass or an instance of one. Tuple elements are of
    type Field.
    'b'must be called with a dataclass type or instance'u'must be called with a dataclass type or instance'b'Returns True if obj is an instance of a dataclass.'u'Returns True if obj is an instance of a dataclass.'b'Returns True if obj is a dataclass or an instance of a
    dataclass.'u'Returns True if obj is a dataclass or an instance of a
    dataclass.'b'Return the fields of a dataclass instance as a new dictionary mapping
    field names to field values.

    Example usage:

      @dataclass
      class C:
          x: int
          y: int

      c = C(1, 2)
      assert asdict(c) == {'x': 1, 'y': 2}

    If given, 'dict_factory' will be used instead of built-in dict.
    The function applies recursively to field values that are
    dataclass instances. This will also look into built-in containers:
    tuples, lists, and dicts.
    'u'Return the fields of a dataclass instance as a new dictionary mapping
    field names to field values.

    Example usage:

      @dataclass
      class C:
          x: int
          y: int

      c = C(1, 2)
      assert asdict(c) == {'x': 1, 'y': 2}

    If given, 'dict_factory' will be used instead of built-in dict.
    The function applies recursively to field values that are
    dataclass instances. This will also look into built-in containers:
    tuples, lists, and dicts.
    'b'asdict() should be called on dataclass instances'u'asdict() should be called on dataclass instances'b'Return the fields of a dataclass instance as a new tuple of field values.

    Example usage::

      @dataclass
      class C:
          x: int
          y: int

    c = C(1, 2)
    assert astuple(c) == (1, 2)

    If given, 'tuple_factory' will be used instead of built-in tuple.
    The function applies recursively to field values that are
    dataclass instances. This will also look into built-in containers:
    tuples, lists, and dicts.
    'u'Return the fields of a dataclass instance as a new tuple of field values.

    Example usage::

      @dataclass
      class C:
          x: int
          y: int

    c = C(1, 2)
    assert astuple(c) == (1, 2)

    If given, 'tuple_factory' will be used instead of built-in tuple.
    The function applies recursively to field values that are
    dataclass instances. This will also look into built-in containers:
    tuples, lists, and dicts.
    'b'astuple() should be called on dataclass instances'u'astuple() should be called on dataclass instances'b'Return a new dynamically created dataclass.

    The dataclass name will be 'cls_name'.  'fields' is an iterable
    of either (name), (name, type) or (name, type, Field) objects. If type is
    omitted, use the string 'typing.Any'.  Field objects are created by
    the equivalent of calling 'field(name, type [, Field-info])'.

      C = make_dataclass('C', ['x', ('y', int), ('z', int, field(init=False))], bases=(Base,))

    is equivalent to:

      @dataclass
      class C(Base):
          x: 'typing.Any'
          y: int
          z: int = field(init=False)

    For the bases and namespace parameters, see the builtin type() function.

    The parameters init, repr, eq, order, unsafe_hash, and frozen are passed to
    dataclass().
    'u'Return a new dynamically created dataclass.

    The dataclass name will be 'cls_name'.  'fields' is an iterable
    of either (name), (name, type) or (name, type, Field) objects. If type is
    omitted, use the string 'typing.Any'.  Field objects are created by
    the equivalent of calling 'field(name, type [, Field-info])'.

      C = make_dataclass('C', ['x', ('y', int), ('z', int, field(init=False))], bases=(Base,))

    is equivalent to:

      @dataclass
      class C(Base):
          x: 'typing.Any'
          y: int
          z: int = field(init=False)

    For the bases and namespace parameters, see the builtin type() function.

    The parameters init, repr, eq, order, unsafe_hash, and frozen are passed to
    dataclass().
    'b'typing.Any'u'typing.Any'b'Invalid field: 'u'Invalid field: 'b'Field names must be valid identifiers: 'u'Field names must be valid identifiers: 'b'Field names must not be keywords: 'u'Field names must not be keywords: 'b'Field name duplicated: 'u'Field name duplicated: 'b'Return a new object replacing specified fields with new values.

    This is especially useful for frozen classes.  Example usage:

      @dataclass(frozen=True)
      class C:
          x: int
          y: int

      c = C(1, 2)
      c1 = replace(c, x=3)
      assert c1.x == 3 and c1.y == 2
      'u'Return a new object replacing specified fields with new values.

    This is especially useful for frozen classes.  Example usage:

      @dataclass(frozen=True)
      class C:
          x: int
          y: int

      c = C(1, 2)
      c1 = replace(c, x=3)
      assert c1.x == 3 and c1.y == 2
      'b'replace() should be called on dataclass instances'u'replace() should be called on dataclass instances'b' is declared with init=False, it cannot be specified with replace()'u' is declared with init=False, it cannot be specified with replace()'b'InitVar 'u'InitVar 'b' must be specified with replace()'u' must be specified with replace()'u'Python.Python39.lib.dataclasses'u'Python39.lib.dataclasses'u'lib.dataclasses'u'dataclasses'Concrete date/time and related types.

See http://www.iana.org/time-zones/repository/tz-link.html for
time zone and DST data sources.
_time3652059_MAXORDINAL_DAYS_IN_MONTH_DAYS_BEFORE_MONTHdim_is_leapyear -> 1 if leap year, else 0._days_before_yearyear -> number of days before January 1st of year._days_in_monthyear, month -> number of days in that month in that year._days_before_monthyear, month -> number of days in year preceding first day of month.month must be in 1..12_ymd2ordyear, month, day -> ordinal, considering 01-Jan-0001 as day 1.day must be in 1..%d_DI400Y_DI100Y_DI4Y_ord2ymdordinal -> (year, month, day), considering 01-Jan-0001 as day 1.n400n100n4n1leapyearprecedingJanFebMarAprMayJunJulAugSepOctNovDec_MONTHNAMESMonTueWedThuFriSatSun_DAYNAMES_build_struct_timehhdstflagwdaydnum_format_timetimespec{:02d}{:02d}:{:02d}{:02d}:{:02d}:{:02d}{:02d}:{:02d}:{:02d}.{:03d}milliseconds{:02d}:{:02d}:{:02d}.{:06d}specsUnknown timespec value_format_offset%s%02d:%02d:%02d.%06d_wrap_strftimefreplacezreplaceZreplacenewformat%06d%c%02d%02d%02d.%06d%c%02d%02d%02d%c%02d%02d_parse_isoformat_datedtstrInvalid date separator: %sInvalid date separator_parse_hh_mm_ss_fftstrlen_strtime_compsIncomplete time componentnext_charInvalid time separator: %cInvalid microsecond componentlen_remainder_parse_isoformat_timeIsoformat time too shorttz_postimestrtzitzstrMalformed time zone stringtz_compstd_check_tznametzinfo.tzname() must return None or string, not '%s'"tzinfo.tzname() must return None or string, ""not '%s'"_check_utc_offsettzinfo.%s() must return None or timedelta, not '%s'"tzinfo.%s() must return None ""or timedelta, not '%s'"%s()=%s, must be strictly between -timedelta(hours=24) and timedelta(hours=24)"%s()=%s, must be strictly between ""-timedelta(hours=24) and timedelta(hours=24)"_check_int_fieldinteger argument expected, got float__index__ returned non-int (type %s)__int__ returned non-int (type %s)an integer is required (got type %s)_check_date_fieldsyear must be in %d..%d_check_time_fieldshour must be in 0..2359minute must be in 0..59second must be in 0..59microsecond must be in 0..999999fold must be either 0 or 1_check_tzinfo_argtzinfo argument must be None or of a tzinfo subclass_cmperrorcan't compare '%s' to '%s'_divide_and_rounddivide a by b and round result to the nearest integer

    When the ratio is exactly half-way between two integers,
    the even integer is returned.
    greater_than_halfRepresent the difference between two datetime objects.

    Supported operators:

    - add, subtract timedelta
    - unary plus, minus, abs
    - compare to timedelta
    - multiply, divide by int

    In addition, datetime supports subtraction of two datetime objects
    returning a timedelta, and addition or subtraction of a datetime
    and a timedelta giving a datetime.

    Representation: (days, seconds, microseconds).  Why?  Because I
    felt like it.
    _seconds_microseconds_hashcodemodfdayfrac24.024.3600.03600.daysecondsfracdaysecondswholesecondsfrac1000000.01e6usdouble2100000.02.1e610000003100000.03.1e6999999999timedelta # of days is too large: %ddays=%dseconds=%dmicroseconds=%d%s.%s(%s)%d:%02d:%02dplural%d day%s, Total seconds in the duration.86400_to_microsecondsusec_getstateConcrete date type.

    Constructors:

    __new__()
    fromtimestamp()
    today()
    fromordinal()

    Operators:

    __repr__, __str__
    __eq__, __le__, __lt__, __ge__, __gt__, __hash__
    __add__, __radd__, __sub__ (add/radd only with timedelta arg)

    Methods:

    timetuple()
    toordinal()
    weekday()
    isoweekday(), isocalendar(), isoformat()
    ctime()
    strftime()

    Properties (readonly):
    year, month, day
    _year_month_dayConstructor.

        Arguments:

        year, month, day (required, base 1)
        Failed to encode latin1 string when unpickling a date object. pickle.load(data, encoding='latin1') is assumed."Failed to encode latin1 string when unpickling ""a date object. ""pickle.load(data, encoding='latin1') is assumed."__setstateConstruct a date from a POSIX timestamp (like time.time()).jdayConstruct a date from time.time().Construct a date from a proleptic Gregorian ordinal.

        January 1 of year 1 is day 1.  Only the year, month and day are
        non-zero in the result.
        date_stringConstruct a date from the output of date.isoformat().fromisoformat: argument must be strInvalid isoformat string: Construct a date from the ISO year, week number and weekday.

        This is the inverse of the date.isocalendar() functionYear is out of range: out_of_rangefirst_weekdayInvalid week: Invalid weekday:  (range is [1, 7])day_offset_isoweek1mondayday_1ord_dayConvert to formal string, for repr().

        >>> dt = datetime(2010, 1, 1)
        >>> repr(dt)
        'datetime.datetime(2010, 1, 1, 0, 0)'

        >>> dt = datetime(2010, 1, 1, tzinfo=timezone.utc)
        >>> repr(dt)
        'datetime.datetime(2010, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)'
        %s.%s(%d, %d, %d)Return ctime() style string.%s %s %2d 00:00:00 %04dFormat using strftime().must be str, not %sReturn the date formatted according to ISO.

        This is 'YYYY-MM-DD'.

        References:
        - http://www.w3.org/TR/NOTE-datetime
        - http://www.cl.cam.ac.uk/~mgk25/iso-time.html
        %04d-%02d-%02dyear (1-9999)month (1-12)day (1-31)Return local time tuple compatible with time.localtime().Return proleptic Gregorian ordinal for the year, month and day.

        January 1 of year 1 is day 1.  Only the year, month and day values
        contribute to the result.
        Return a new date with new values for the specified fields.m2Hash.Add a date to a timedelta.result out of rangeSubtract two dates, or a date and a timedelta.days1days2Return day of the week, where Monday == 0 ... Sunday == 6.Return day of the week, where Monday == 1 ... Sunday == 7.Return a named tuple containing ISO year, week number, and weekday.

        The first ISO week of the year is the (Mon-Sun) week
        containing the year's first Thursday; everything else derives
        from that.

        The first week is 1; Monday is 1 ... Sunday is 7.

        ISO calendar algorithm taken from
        http://www.phys.uu.nl/~vgent/calendar/isocalendar.htm
        (used with permission)
        week1monday52_IsoCalendarDateyhiylo_date_classAbstract base class for time zone info classes.

    Subclasses must override the name(), utcoffset() and dst() methods.
    datetime -> string name of time zone.tzinfo subclass must override tzname()datetime -> timedelta, positive for east of UTC, negative for west of UTCtzinfo subclass must override utcoffset()datetime -> DST offset as timedelta, positive for east of UTC.

        Return 0 if DST not in effect.  utcoffset() must include the DST
        offset.
        tzinfo subclass must override dst()datetime in UTC -> datetime in local time.fromutc() requires a datetime argumentdt.tzinfo is not selfdtofffromutc() requires a non-None utcoffset() result"fromutc() requires a non-None utcoffset() ""result"dtdstfromutc() requires a non-None dst() resultfromutc(): dt.dst gave inconsistent results; cannot convert"fromutc(): dt.dst gave inconsistent ""results; cannot convert"getinitargsIsoCalendarDate(year='(year=', week=, weekday=_tzinfo_classTime with time zone.

    Constructors:

    __new__()

    Operators:

    __repr__, __str__
    __eq__, __le__, __lt__, __ge__, __gt__, __hash__

    Methods:

    strftime()
    isoformat()
    utcoffset()
    tzname()
    dst()

    Properties (readonly):
    hour, minute, second, microsecond, tzinfo, fold
    _hour_minute_second_microsecond_tzinfoConstructor.

        Arguments:

        hour, minute (required)
        second, microsecond (default to zero)
        tzinfo (default to None)
        fold (keyword only, default to zero)
        0x7FFailed to encode latin1 string when unpickling a time object. pickle.load(data, encoding='latin1') is assumed."a time object. "hour (0-23)minute (0-59)second (0-59)microsecond (0-999999)timezone info objectallow_mixedmytzottzmyoffotoffbase_comparecannot compare naive and aware timesmyhhmmothhmmtzoffwhole minute_tzstrReturn formatted timezone offset (+xx:xx) or an empty string.Convert to formal string, for repr()., %d, %d, %d%s.%s(%d, %d%s), tzinfo=%r, fold=1)Return the time formatted according to ISO.

        The full format is 'HH:MM:SS.mmmmmm+zz:zz'. By default, the fractional
        part is omitted if self.microsecond == 0.

        The optional argument timespec specifies the number of additional
        terms of the time to include. Valid options are 'auto', 'hours',
        'minutes', 'seconds', 'milliseconds' and 'microseconds'.
        time_stringConstruct a time from the output of isoformat().Format using strftime().  The date part of the timestamp passed
        to underlying strftime should not be used.
        Return the timezone offset as timedelta, positive east of UTC
         (negative west of UTC).Return the timezone name.

        Note that the name is 100% informational -- there's no requirement that
        it mean anything in particular. For example, "GMT", "UTC", "-500",
        "-5:00", "EDT", "US/Eastern", "America/New York" are all valid replies.
        Return 0 if DST is not in effect, or the DST offset (as timedelta
        positive eastward) if DST is in effect.

        This is purely informational; the DST offset has already been added to
        the UTC offset returned by utcoffset() if applicable, so there's no
        need to consult dst() unless you're interested in displaying the DST
        info.
        Return a new time with new values for the specified fields.us2us3us1basestatebad tzinfo state arg_time_classdatetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])

    The year, month and day arguments are required. tzinfo may be None, or an
    instance of a tzinfo subclass. The remaining arguments may be ints.
    Failed to encode latin1 string when unpickling a datetime object. pickle.load(data, encoding='latin1') is assumed."a datetime object. "_fromtimestampConstruct a datetime from a POSIX timestamp (like time.time()).

        A timezone info object may be passed in as well.
        gmtimemax_fold_secondsprobe1transprobe2Construct a naive UTC datetime from a POSIX timestamp.Construct a datetime from time.time() and optional time zone info.Construct a UTC datetime from time.time().Construct a datetime from a given date and a given time.date argument must be a date instancetime argument must be a time instanceConstruct a datetime from the output of datetime.isoformat().dstrdate_componentstime_components_mktimeReturn integer POSIX timestamp.epochu1t1t2Return POSIX timestamp as float_EPOCHReturn UTC time tuple compatible with time.gmtime().Return the date part.Return the time part, with tzinfo None.Return the time part, with same tzinfo.Return a new datetime with new values for the specified fields._local_timezonelocaltmtm_gmtoffgmtoffzonetz argument must be an instance of tzinfomyoffset%s %s %2d %02d:%02d:%02d %04dReturn the time formatted according to ISO.

        The full format looks like 'YYYY-MM-DD HH:MM:SS.mmmmmm'.
        By default, the fractional part is omitted if self.microsecond == 0.

        If self.tzinfo is not None, the UTC offset is also attached, giving
        giving a full format of 'YYYY-MM-DD HH:MM:SS.mmmmmm+HH:MM'.

        Optional argument sep specifies the separator between date and
        time, default 'T'.

        The optional argument timespec specifies the number of additional
        terms of the time to include. Valid options are 'auto', 'hours',
        'minutes', 'seconds', 'milliseconds' and 'microseconds'.
        %04d-%02d-%02d%cConvert to string, for str().string, format -> new datetime parsed from a string (like time.strptime())._strptime_strptime_datetimeReturn the timezone offset as timedelta positive east of UTC (negative west of
        UTC).cannot compare naive and aware datetimesAdd a datetime and a timedelta.Subtract two datetimes, or a datetime and a timedelta.secs1secs2cannot mix naive and timezone-aware timefirstday_offset_Omittedoffset must be a timedelta_minoffset_maxoffsetoffset must be a timedelta strictly between -timedelta(hours=24) and timedelta(hours=24)."offset must be a timedelta ""strictly between -timedelta(hours=24) and ""timedelta(hours=24)."pickle supportConvert to formal string, for repr().

        >>> tz = timezone.utc
        >>> repr(tz)
        'datetime.timezone.utc'
        >>> tz = timezone(timedelta(hours=-5), 'EST')
        >>> repr(tz)
        "datetime.timezone(datetime.timedelta(-1, 68400), 'EST')"
        datetime.timezone.utc%s.%s(%r)%s.%s(%r, %r)utcoffset() argument must be a datetime instance or None"utcoffset() argument must be a datetime instance"" or None"_name_from_offsettzname() argument must be a datetime instance or None"tzname() argument must be a datetime instance"dst() argument must be a datetime instance or None"dst() argument must be a datetime instance"fromutc: dt.tzinfo is not self"fromutc: dt.tzinfo ""is not self"fromutc() argument must be a datetime instance or None"fromutc() argument must be a datetime instance"'.'# date.max.toordinal()# Utility functions, adapted from Python's Demo/classes/Dates.py, which# also assumes the current Gregorian calendar indefinitely extended in# both directions.  Difference:  Dates.py calls January 1 of year 0 day# number 1.  The code here calls January 1 of year 1 day number 1.  This is# to match the definition of the "proleptic Gregorian" calendar in Dershowitz# and Reingold's "Calendrical Calculations", where it's the base calendar# for all computations.  See the book for algorithms for converting between# proleptic Gregorian ordinals and many other calendar systems.# -1 is a placeholder for indexing purposes.# number of days in 400 years#    "    "   "   " 100   "#    "    "   "   "   4   "# A 4-year cycle has an extra leap day over what we'd get from pasting# together 4 single years.# Similarly, a 400-year cycle has an extra leap day over what we'd get from# pasting together 4 100-year cycles.# OTOH, a 100-year cycle has one fewer leap day than we'd get from# pasting together 25 4-year cycles.# n is a 1-based index, starting at 1-Jan-1.  The pattern of leap years# repeats exactly every 400 years.  The basic strategy is to find the# closest 400-year boundary at or before n, then work with the offset# from that boundary to n.  Life is much clearer if we subtract 1 from# n first -- then the values of n at 400-year boundaries are exactly# those divisible by _DI400Y:#     D  M   Y            n              n-1#     -- --- ----        ----------     ----------------#     31 Dec -400        -_DI400Y       -_DI400Y -1#      1 Jan -399         -_DI400Y +1   -_DI400Y      400-year boundary#     ...#     30 Dec  000        -1             -2#     31 Dec  000         0             -1#      1 Jan  001         1              0            400-year boundary#      2 Jan  001         2              1#      3 Jan  001         3              2#     31 Dec  400         _DI400Y        _DI400Y -1#      1 Jan  401         _DI400Y +1     _DI400Y      400-year boundary# ..., -399, 1, 401, ...# Now n is the (non-negative) offset, in days, from January 1 of year, to# the desired date.  Now compute how many 100-year cycles precede n.# Note that it's possible for n100 to equal 4!  In that case 4 full# 100-year cycles precede the desired day, which implies the desired# day is December 31 at the end of a 400-year cycle.# Now compute how many 4-year cycles precede it.# And now how many single years.  Again n1 can be 4, and again meaning# that the desired day is December 31 at the end of the 4-year cycle.# Now the year is correct, and n is the offset from January 1.  We find# the month via an estimate that's either exact or one too large.# estimate is too large# Now the year and month are correct, and n is the offset from the# start of that month:  we're done!# Month and day names.  For localized versions, see the calendar module.# Skip trailing microseconds when us==0.# Correctly substitute for %z and %Z escapes in strftime formats.# Don't call utcoffset() or tzname() unless actually needed.# the string to use for %f# the string to use for %z# the string to use for %Z# Scan format for %z and %Z escapes, replacing as needed.# strftime is going to have at this: escape %# Helpers for parsing the result of isoformat()# It is assumed that this function will only be called with a# string of length exactly 10, and (though this is not used) ASCII-only# Parses things of the form HH[:MM[:SS[.fff[fff]]]]# Format supported is HH[:MM[:SS[.fff[fff]]]][+HH:MM[:SS[.ffffff]]]# This is equivalent to re.search('[+-]', tstr), but faster# Valid time zone strings are:# HH:MM               len: 5# HH:MM:SS            len: 8# HH:MM:SS.ffffff     len: 15# Just raise TypeError if the arg isn't None or a string.# name is the offset-producing method, "utcoffset" or "dst".# offset is what it returned.# If offset isn't None or timedelta, raises TypeError.# If offset is None, returns None.# Else offset is checked for being in range.# If it is, its integer value is returned.  Else ValueError is raised.# Based on the reference implementation for divmod_near# in Objects/longobject.c.# round up if either r / b > 0.5, or r / b == 0.5 and q is odd.# The expression r / b > 0.5 is equivalent to 2 * r > b if b is# positive, 2 * r < b if b negative.# Doing this efficiently and accurately in C is going to be difficult# and error-prone, due to ubiquitous overflow possibilities, and that# C double doesn't have enough bits of precision to represent# microseconds over 10K years faithfully.  The code here tries to make# explicit where go-fast assumptions can be relied on, in order to# guide the C implementation; it's way more convoluted than speed-# ignoring auto-overflow-to-long idiomatic Python could be.# XXX Check that all inputs are ints or floats.# Final values, all integer.# s and us fit in 32-bit signed ints; d isn't bounded.# Normalize everything to days, seconds, microseconds.# Get rid of all fractions, and normalize s and us.# Take a deep breath <wink>.# can't overflow# days isn't referenced again before redefinition# daysecondsfrac isn't referenced again# seconds isn't referenced again before redefinition# exact value not critical# secondsfrac isn't referenced again# Just a little bit of carrying possible for microseconds and seconds.# Read-only field accessors# for CPython compatibility, we cannot use# our __class__ here, but need a real timedelta# Comparisons of timedelta objects with other.# Pickle support.# Pickle support# More informative error message.# Additional constructors# Year is bounded this way because 9999-12-31 is (9999, 52, 5)# ISO years have 53 weeks in them on years starting with a# Thursday and leap years starting on a Wednesday# Now compute the offset from (Y, 1, 1) in days:# Calculate the ordinal day for monday, week 1# Conversions to string# XXX These shouldn't depend on time.localtime(), because that# clips the usable dates to [1970 .. 2038).  At least ctime() is# easily done without using strftime() -- that's better too because# strftime("%c", ...) is locale specific.# Standard conversions, __eq__, __le__, __lt__, __ge__, __gt__,# __hash__ (and helpers)# Comparisons of date objects with other.# Computations# Day-of-the-week and week-of-the-year, according to ISO# 1-Jan-0001 is a Monday# Internally, week and day have origin 0# so functions w/ args named "date" can get at the class# See the long comment block at the end of this file for an# explanation of this algorithm.# This code is intended to pickle the object without making the# class public. See https://bugs.python.org/msg352381# Standard conversions, __hash__ (and helpers)# Comparisons of time objects with other.# arbitrary non-zero value# zero or None# Conversion to string# The year must be >= 1000 else Python's strftime implementation# can raise a bogus exception.# Timezone functions# so functions w/ args named "time" can get at the class# clamp out leap seconds if the platform has them# As of version 2015f max fold in IANA database is# 23 hours at 1969-09-30 13:00:00 in Kwajalein.# Let's probe 24 hours in the past to detect a transition:# On Windows localtime_s throws an OSError for negative values,# thus we can't perform fold detection for values of time less# than the max time fold. See comments in _datetimemodule's# version of this method for more details.# Split this at the separator# Our goal is to solve t = local(u) for u.# We found one solution, but it may not be the one we need.# Look for an earlier solution (if `fold` is 0), or a# later one (if `fold` is 1).# We have found both offsets a and b, but neither t - a nor t - b is# a solution.  This means t is in the gap.# Extract TZ data# Convert self to UTC, and attach the new time zone object.# Convert from UTC to tz's local time.# Ways to produce a string.# These are never zero# Comparisons of datetime objects with other.# Assume that allow_mixed means that we are called from __eq__# XXX What follows could be done more efficiently...# this will take offsets into account# Helper to calculate the day number of the Monday starting week 1# XXX This could be done more efficiently# See weekday() above# Sentinel value to disallow None# bpo-37642: These attributes are rounded to the nearest minute for backwards# compatibility, even though the constructor will accept a wider range of# values. This may change in the future.# Some time zone algebra.  For a datetime x, let#     x.n = x stripped of its timezone -- its naive time.#     x.o = x.utcoffset(), and assuming that doesn't raise an exception or#           return None#     x.d = x.dst(), and assuming that doesn't raise an exception or#     x.s = x's standard offset, x.o - x.d# Now some derived rules, where k is a duration (timedelta).# 1. x.o = x.s + x.d#    This follows from the definition of x.s.# 2. If x and y have the same tzinfo member, x.s = y.s.#    This is actually a requirement, an assumption we need to make about#    sane tzinfo classes.# 3. The naive UTC time corresponding to x is x.n - x.o.#    This is again a requirement for a sane tzinfo class.# 4. (x+k).s = x.s#    This follows from #2, and that datetime.timetz+timedelta preserves tzinfo.# 5. (x+k).n = x.n + k#    Again follows from how arithmetic is defined.# Now we can explain tz.fromutc(x).  Let's assume it's an interesting case# (meaning that the various tzinfo methods exist, and don't blow up or return# None when called).# The function wants to return a datetime y with timezone tz, equivalent to x.# x is already in UTC.# By #3, we want#     y.n - y.o = x.n                             [1]# The algorithm starts by attaching tz to x.n, and calling that y.  So# x.n = y.n at the start.  Then it wants to add a duration k to y, so that [1]# becomes true; in effect, we want to solve [2] for k:#    (y+k).n - (y+k).o = x.n                      [2]# By #1, this is the same as#    (y+k).n - ((y+k).s + (y+k).d) = x.n          [3]# By #5, (y+k).n = y.n + k, which equals x.n + k because x.n=y.n at the start.# Substituting that into [3],#    x.n + k - (y+k).s - (y+k).d = x.n; the x.n terms cancel, leaving#    k - (y+k).s - (y+k).d = 0; rearranging,#    k = (y+k).s - (y+k).d; by #4, (y+k).s == y.s, so#    k = y.s - (y+k).d# On the RHS, (y+k).d can't be computed directly, but y.s can be, and we# approximate k by ignoring the (y+k).d term at first.  Note that k can't be# very large, since all offset-returning methods return a duration of magnitude# less than 24 hours.  For that reason, if y is firmly in std time, (y+k).d must# be 0, so ignoring it has no consequence then.# In any case, the new value is#     z = y + y.s                                 [4]# It's helpful to step back at look at [4] from a higher level:  it's simply# mapping from UTC to tz's standard time.# At this point, if#     z.n - z.o = x.n                             [5]# we have an equivalent time, and are almost done.  The insecurity here is# at the start of daylight time.  Picture US Eastern for concreteness.  The wall# time jumps from 1:59 to 3:00, and wall hours of the form 2:MM don't make good# sense then.  The docs ask that an Eastern tzinfo class consider such a time to# be EDT (because it's "after 2"), which is a redundant spelling of 1:MM EST# on the day DST starts.  We want to return the 1:MM EST spelling because that's# the only spelling that makes sense on the local wall clock.# In fact, if [5] holds at this point, we do have the standard-time spelling,# but that takes a bit of proof.  We first prove a stronger result.  What's the# difference between the LHS and RHS of [5]?  Let#     diff = x.n - (z.n - z.o)                    [6]# Now#     z.n =                       by [4]#     (y + y.s).n =               by #5#     y.n + y.s =                 since y.n = x.n#     x.n + y.s =                 since z and y are have the same tzinfo member,#                                     y.s = z.s by #2#     x.n + z.s# Plugging that back into [6] gives#     diff =#     x.n - ((x.n + z.s) - z.o) =     expanding#     x.n - x.n - z.s + z.o =         cancelling#     - z.s + z.o =                   by #2#     z.d# So diff = z.d.# If [5] is true now, diff = 0, so z.d = 0 too, and we have the standard-time# spelling we wanted in the endcase described above.  We're done.  Contrarily,# if z.d = 0, then we have a UTC equivalent, and are also done.# If [5] is not true now, diff = z.d != 0, and z.d is the offset we need to# add to z (in effect, z is in tz's standard time, and we need to shift the# local clock into tz's daylight time).# Let#     z' = z + z.d = z + diff                     [7]# and we can again ask whether#     z'.n - z'.o = x.n                           [8]# If so, we're done.  If not, the tzinfo class is insane, according to the# assumptions we've made.  This also requires a bit of proof.  As before, let's# compute the difference between the LHS and RHS of [8] (and skipping some of# the justifications for the kinds of substitutions we've done several times# already):#     diff' = x.n - (z'.n - z'.o) =           replacing z'.n via [7]#             x.n  - (z.n + diff - z'.o) =    replacing diff via [6]#             x.n - (z.n + x.n - (z.n - z.o) - z'.o) =#             x.n - z.n - x.n + z.n - z.o + z'.o =    cancel x.n#             - z.n + z.n - z.o + z'.o =              cancel z.n#             - z.o + z'.o =                      #1 twice#             -z.s - z.d + z'.s + z'.d =          z and z' have same tzinfo#             z'.d - z.d# So z' is UTC-equivalent to x iff z'.d = z.d at this point.  If they are equal,# we've found the UTC-equivalent so are done.  In fact, we stop with [7] and# return z', not bothering to compute z'.d.# How could z.d and z'd differ?  z' = z + z.d [7], so merely moving z' by# a dst() offset, and starting *from* a time already in DST (we know z.d != 0),# would have to change the result dst() returns:  we start in DST, and moving# a little further into it takes us out of DST.# There isn't a sane case where this can happen.  The closest it gets is at# the end of DST, where there's an hour in UTC with no spelling in a hybrid# tzinfo class.  In US Eastern, that's 5:MM UTC = 0:MM EST = 1:MM EDT.  During# that hour, on an Eastern clock 1:MM is taken as being in standard time (6:MM# UTC) because the docs insist on that, but 0:MM is taken as being in daylight# time (4:MM UTC).  There is no local time mapping to 5:MM UTC.  The local# clock jumps from 1:59 back to 1:00 again, and repeats the 1:MM hour in# standard time.  Since that's what the local clock *does*, we want to map both# UTC hours 5:MM and 6:MM to 1:MM Eastern.  The result is ambiguous# in local time, but so it goes -- it's the way the local clock works.# When x = 5:MM UTC is the input to this algorithm, x.o=0, y.o=-5 and y.d=0,# so z=0:MM.  z.d=60 (minutes) then, so [5] doesn't hold and we keep going.# z' = z + z.d = 1:MM then, and z'.d=0, and z'.d - z.d = -60 != 0 so [8]# (correctly) concludes that z' is not UTC-equivalent to x.# Because we know z.d said z was in daylight time (else [5] would have held and# we would have stopped then), and we know z.d != z'.d (else [8] would have held# and we have stopped then), and there are only 2 possible values dst() can# return in Eastern, it follows that z'.d must be 0 (which it is in the example,# but the reasoning doesn't depend on the example -- it depends on there being# two possible dst() outcomes, one zero and the other non-zero).  Therefore# z' must be in standard time, and is the spelling we want in this case.# Note again that z' is not UTC-equivalent as far as the hybrid tzinfo class is# concerned (because it takes z' as being in standard time rather than the# daylight time we intend here), but returning it gives the real-life "local# clock repeats an hour" behavior when mapping the "unspellable" UTC hour into# tz.# When the input is 6:MM, z=1:MM and z.d=0, and we stop at once, again with# the 1:MM standard time spelling we want.# So how can this break?  One of the assumptions must be violated.  Two# possibilities:# 1) [2] effectively says that y.s is invariant across all y belong to a given#    time zone.  This isn't true if, for political reasons or continental drift,#    a region decides to change its base offset from UTC.# 2) There may be versions of "double daylight" time where the tail end of#    the analysis gives up a step too early.  I haven't thought about that#    enough to say.# In any case, it's clear that the default fromutc() is strong enough to handle# "almost all" time zones:  so long as the standard offset is invariant, it# doesn't matter if daylight time transition points change from year to year, or# if daylight time is skipped in some years; it doesn't matter how large or# small dst() may get within its bounds; and it doesn't even matter if some# perverse time zone returns a negative dst()).  So a breaking case must be# pretty bizarre, and a tzinfo subclass can override fromutc() if it is.# Clean up unused names# XXX Since import * above excludes names that start with _,# docstring does not get overwritten. In the future, it may be# appropriate to maintain a single module level docstring and# remove the following line.b'Concrete date/time and related types.

See http://www.iana.org/time-zones/repository/tz-link.html for
time zone and DST data sources.
'u'Concrete date/time and related types.

See http://www.iana.org/time-zones/repository/tz-link.html for
time zone and DST data sources.
'b'date'u'date'b'datetime'u'datetime'b'time'b'timedelta'u'timedelta'b'timezone'u'timezone'b'tzinfo'u'tzinfo'b'MINYEAR'u'MINYEAR'b'MAXYEAR'u'MAXYEAR'b'year -> 1 if leap year, else 0.'u'year -> 1 if leap year, else 0.'b'year -> number of days before January 1st of year.'u'year -> number of days before January 1st of year.'b'year, month -> number of days in that month in that year.'u'year, month -> number of days in that month in that year.'b'year, month -> number of days in year preceding first day of month.'u'year, month -> number of days in year preceding first day of month.'b'month must be in 1..12'u'month must be in 1..12'b'year, month, day -> ordinal, considering 01-Jan-0001 as day 1.'u'year, month, day -> ordinal, considering 01-Jan-0001 as day 1.'b'day must be in 1..%d'u'day must be in 1..%d'b'ordinal -> (year, month, day), considering 01-Jan-0001 as day 1.'u'ordinal -> (year, month, day), considering 01-Jan-0001 as day 1.'b'Jan'u'Jan'b'Feb'u'Feb'b'Mar'u'Mar'b'Apr'u'Apr'b'May'u'May'b'Jun'u'Jun'b'Jul'u'Jul'b'Aug'u'Aug'b'Sep'u'Sep'b'Oct'u'Oct'b'Nov'u'Nov'b'Dec'u'Dec'b'Mon'u'Mon'b'Tue'u'Tue'b'Wed'u'Wed'b'Thu'u'Thu'b'Fri'u'Fri'b'Sat'u'Sat'b'Sun'u'Sun'b'{:02d}'u'{:02d}'b'hours'u'hours'b'{:02d}:{:02d}'u'{:02d}:{:02d}'b'minutes'u'minutes'b'{:02d}:{:02d}:{:02d}'u'{:02d}:{:02d}:{:02d}'b'seconds'u'seconds'b'{:02d}:{:02d}:{:02d}.{:03d}'u'{:02d}:{:02d}:{:02d}.{:03d}'b'milliseconds'u'milliseconds'b'{:02d}:{:02d}:{:02d}.{:06d}'u'{:02d}:{:02d}:{:02d}.{:06d}'b'microseconds'u'microseconds'b'Unknown timespec value'u'Unknown timespec value'b'%s%02d:%02d'u'%s%02d:%02d'b':%02d'u':%02d'b'.%06d'u'.%06d'b'%06d'u'%06d'b'microsecond'u'microsecond'b'utcoffset'u'utcoffset'b'%c%02d%02d%02d.%06d'u'%c%02d%02d%02d.%06d'b'%c%02d%02d%02d'u'%c%02d%02d%02d'b'%c%02d%02d'u'%c%02d%02d'b'tzname'u'tzname'b'Invalid date separator: %s'u'Invalid date separator: %s'b'Invalid date separator'u'Invalid date separator'b'Incomplete time component'u'Incomplete time component'b'Invalid time separator: %c'u'Invalid time separator: %c'b'Invalid microsecond component'u'Invalid microsecond component'b'Isoformat time too short'u'Isoformat time too short'b'Malformed time zone string'u'Malformed time zone string'b'tzinfo.tzname() must return None or string, not '%s''u'tzinfo.tzname() must return None or string, not '%s''b'dst'u'dst'b'tzinfo.%s() must return None or timedelta, not '%s''u'tzinfo.%s() must return None or timedelta, not '%s''b'%s()=%s, must be strictly between -timedelta(hours=24) and timedelta(hours=24)'u'%s()=%s, must be strictly between -timedelta(hours=24) and timedelta(hours=24)'b'integer argument expected, got float'u'integer argument expected, got float'b'__index__ returned non-int (type %s)'u'__index__ returned non-int (type %s)'b'__int__ returned non-int (type %s)'u'__int__ returned non-int (type %s)'b'an integer is required (got type %s)'u'an integer is required (got type %s)'b'year must be in %d..%d'u'year must be in %d..%d'b'hour must be in 0..23'u'hour must be in 0..23'b'minute must be in 0..59'u'minute must be in 0..59'b'second must be in 0..59'u'second must be in 0..59'b'microsecond must be in 0..999999'u'microsecond must be in 0..999999'b'fold must be either 0 or 1'u'fold must be either 0 or 1'b'tzinfo argument must be None or of a tzinfo subclass'u'tzinfo argument must be None or of a tzinfo subclass'b'can't compare '%s' to '%s''u'can't compare '%s' to '%s''b'divide a by b and round result to the nearest integer

    When the ratio is exactly half-way between two integers,
    the even integer is returned.
    'u'divide a by b and round result to the nearest integer

    When the ratio is exactly half-way between two integers,
    the even integer is returned.
    'b'Represent the difference between two datetime objects.

    Supported operators:

    - add, subtract timedelta
    - unary plus, minus, abs
    - compare to timedelta
    - multiply, divide by int

    In addition, datetime supports subtraction of two datetime objects
    returning a timedelta, and addition or subtraction of a datetime
    and a timedelta giving a datetime.

    Representation: (days, seconds, microseconds).  Why?  Because I
    felt like it.
    'u'Represent the difference between two datetime objects.

    Supported operators:

    - add, subtract timedelta
    - unary plus, minus, abs
    - compare to timedelta
    - multiply, divide by int

    In addition, datetime supports subtraction of two datetime objects
    returning a timedelta, and addition or subtraction of a datetime
    and a timedelta giving a datetime.

    Representation: (days, seconds, microseconds).  Why?  Because I
    felt like it.
    'b'_days'u'_days'b'_seconds'u'_seconds'b'_microseconds'u'_microseconds'b'_hashcode'u'_hashcode'b'timedelta # of days is too large: %d'u'timedelta # of days is too large: %d'b'days=%d'u'days=%d'b'seconds=%d'u'seconds=%d'b'microseconds=%d'u'microseconds=%d'b'%s.%s(%s)'u'%s.%s(%s)'b'%d:%02d:%02d'u'%d:%02d:%02d'b'%d day%s, 'u'%d day%s, 'b'Total seconds in the duration.'u'Total seconds in the duration.'b'days'u'days'b'Concrete date type.

    Constructors:

    __new__()
    fromtimestamp()
    today()
    fromordinal()

    Operators:

    __repr__, __str__
    __eq__, __le__, __lt__, __ge__, __gt__, __hash__
    __add__, __radd__, __sub__ (add/radd only with timedelta arg)

    Methods:

    timetuple()
    toordinal()
    weekday()
    isoweekday(), isocalendar(), isoformat()
    ctime()
    strftime()

    Properties (readonly):
    year, month, day
    'u'Concrete date type.

    Constructors:

    __new__()
    fromtimestamp()
    today()
    fromordinal()

    Operators:

    __repr__, __str__
    __eq__, __le__, __lt__, __ge__, __gt__, __hash__
    __add__, __radd__, __sub__ (add/radd only with timedelta arg)

    Methods:

    timetuple()
    toordinal()
    weekday()
    isoweekday(), isocalendar(), isoformat()
    ctime()
    strftime()

    Properties (readonly):
    year, month, day
    'b'_year'u'_year'b'_month'u'_month'b'_day'u'_day'b'Constructor.

        Arguments:

        year, month, day (required, base 1)
        'u'Constructor.

        Arguments:

        year, month, day (required, base 1)
        'b'Failed to encode latin1 string when unpickling a date object. pickle.load(data, encoding='latin1') is assumed.'u'Failed to encode latin1 string when unpickling a date object. pickle.load(data, encoding='latin1') is assumed.'b'Construct a date from a POSIX timestamp (like time.time()).'u'Construct a date from a POSIX timestamp (like time.time()).'b'Construct a date from time.time().'u'Construct a date from time.time().'b'Construct a date from a proleptic Gregorian ordinal.

        January 1 of year 1 is day 1.  Only the year, month and day are
        non-zero in the result.
        'u'Construct a date from a proleptic Gregorian ordinal.

        January 1 of year 1 is day 1.  Only the year, month and day are
        non-zero in the result.
        'b'Construct a date from the output of date.isoformat().'u'Construct a date from the output of date.isoformat().'b'fromisoformat: argument must be str'u'fromisoformat: argument must be str'b'Invalid isoformat string: 'u'Invalid isoformat string: 'b'Construct a date from the ISO year, week number and weekday.

        This is the inverse of the date.isocalendar() function'u'Construct a date from the ISO year, week number and weekday.

        This is the inverse of the date.isocalendar() function'b'Year is out of range: 'u'Year is out of range: 'b'Invalid week: 'u'Invalid week: 'b'Invalid weekday: 'u'Invalid weekday: 'b' (range is [1, 7])'u' (range is [1, 7])'b'Convert to formal string, for repr().

        >>> dt = datetime(2010, 1, 1)
        >>> repr(dt)
        'datetime.datetime(2010, 1, 1, 0, 0)'

        >>> dt = datetime(2010, 1, 1, tzinfo=timezone.utc)
        >>> repr(dt)
        'datetime.datetime(2010, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)'
        'u'Convert to formal string, for repr().

        >>> dt = datetime(2010, 1, 1)
        >>> repr(dt)
        'datetime.datetime(2010, 1, 1, 0, 0)'

        >>> dt = datetime(2010, 1, 1, tzinfo=timezone.utc)
        >>> repr(dt)
        'datetime.datetime(2010, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)'
        'b'%s.%s(%d, %d, %d)'u'%s.%s(%d, %d, %d)'b'Return ctime() style string.'u'Return ctime() style string.'b'%s %s %2d 00:00:00 %04d'u'%s %s %2d 00:00:00 %04d'b'Format using strftime().'u'Format using strftime().'b'must be str, not %s'u'must be str, not %s'b'Return the date formatted according to ISO.

        This is 'YYYY-MM-DD'.

        References:
        - http://www.w3.org/TR/NOTE-datetime
        - http://www.cl.cam.ac.uk/~mgk25/iso-time.html
        'u'Return the date formatted according to ISO.

        This is 'YYYY-MM-DD'.

        References:
        - http://www.w3.org/TR/NOTE-datetime
        - http://www.cl.cam.ac.uk/~mgk25/iso-time.html
        'b'%04d-%02d-%02d'u'%04d-%02d-%02d'b'year (1-9999)'u'year (1-9999)'b'month (1-12)'u'month (1-12)'b'day (1-31)'u'day (1-31)'b'Return local time tuple compatible with time.localtime().'u'Return local time tuple compatible with time.localtime().'b'Return proleptic Gregorian ordinal for the year, month and day.

        January 1 of year 1 is day 1.  Only the year, month and day values
        contribute to the result.
        'u'Return proleptic Gregorian ordinal for the year, month and day.

        January 1 of year 1 is day 1.  Only the year, month and day values
        contribute to the result.
        'b'Return a new date with new values for the specified fields.'u'Return a new date with new values for the specified fields.'b'Hash.'u'Hash.'b'Add a date to a timedelta.'u'Add a date to a timedelta.'b'result out of range'u'result out of range'b'Subtract two dates, or a date and a timedelta.'u'Subtract two dates, or a date and a timedelta.'b'Return day of the week, where Monday == 0 ... Sunday == 6.'u'Return day of the week, where Monday == 0 ... Sunday == 6.'b'Return day of the week, where Monday == 1 ... Sunday == 7.'u'Return day of the week, where Monday == 1 ... Sunday == 7.'b'Return a named tuple containing ISO year, week number, and weekday.

        The first ISO week of the year is the (Mon-Sun) week
        containing the year's first Thursday; everything else derives
        from that.

        The first week is 1; Monday is 1 ... Sunday is 7.

        ISO calendar algorithm taken from
        http://www.phys.uu.nl/~vgent/calendar/isocalendar.htm
        (used with permission)
        'u'Return a named tuple containing ISO year, week number, and weekday.

        The first ISO week of the year is the (Mon-Sun) week
        containing the year's first Thursday; everything else derives
        from that.

        The first week is 1; Monday is 1 ... Sunday is 7.

        ISO calendar algorithm taken from
        http://www.phys.uu.nl/~vgent/calendar/isocalendar.htm
        (used with permission)
        'b'Abstract base class for time zone info classes.

    Subclasses must override the name(), utcoffset() and dst() methods.
    'u'Abstract base class for time zone info classes.

    Subclasses must override the name(), utcoffset() and dst() methods.
    'b'datetime -> string name of time zone.'u'datetime -> string name of time zone.'b'tzinfo subclass must override tzname()'u'tzinfo subclass must override tzname()'b'datetime -> timedelta, positive for east of UTC, negative for west of UTC'u'datetime -> timedelta, positive for east of UTC, negative for west of UTC'b'tzinfo subclass must override utcoffset()'u'tzinfo subclass must override utcoffset()'b'datetime -> DST offset as timedelta, positive for east of UTC.

        Return 0 if DST not in effect.  utcoffset() must include the DST
        offset.
        'u'datetime -> DST offset as timedelta, positive for east of UTC.

        Return 0 if DST not in effect.  utcoffset() must include the DST
        offset.
        'b'tzinfo subclass must override dst()'u'tzinfo subclass must override dst()'b'datetime in UTC -> datetime in local time.'u'datetime in UTC -> datetime in local time.'b'fromutc() requires a datetime argument'u'fromutc() requires a datetime argument'b'dt.tzinfo is not self'u'dt.tzinfo is not self'b'fromutc() requires a non-None utcoffset() result'u'fromutc() requires a non-None utcoffset() result'b'fromutc() requires a non-None dst() result'u'fromutc() requires a non-None dst() result'b'fromutc(): dt.dst gave inconsistent results; cannot convert'u'fromutc(): dt.dst gave inconsistent results; cannot convert'b'__getinitargs__'u'__getinitargs__'b'__getstate__'u'__getstate__'b'(year='u'(year='b', week='u', week='b', weekday='u', weekday='b'Time with time zone.

    Constructors:

    __new__()

    Operators:

    __repr__, __str__
    __eq__, __le__, __lt__, __ge__, __gt__, __hash__

    Methods:

    strftime()
    isoformat()
    utcoffset()
    tzname()
    dst()

    Properties (readonly):
    hour, minute, second, microsecond, tzinfo, fold
    'u'Time with time zone.

    Constructors:

    __new__()

    Operators:

    __repr__, __str__
    __eq__, __le__, __lt__, __ge__, __gt__, __hash__

    Methods:

    strftime()
    isoformat()
    utcoffset()
    tzname()
    dst()

    Properties (readonly):
    hour, minute, second, microsecond, tzinfo, fold
    'b'_hour'u'_hour'b'_minute'u'_minute'b'_second'u'_second'b'_microsecond'u'_microsecond'b'_tzinfo'u'_tzinfo'b'_fold'u'_fold'b'Constructor.

        Arguments:

        hour, minute (required)
        second, microsecond (default to zero)
        tzinfo (default to None)
        fold (keyword only, default to zero)
        'u'Constructor.

        Arguments:

        hour, minute (required)
        second, microsecond (default to zero)
        tzinfo (default to None)
        fold (keyword only, default to zero)
        'b'Failed to encode latin1 string when unpickling a time object. pickle.load(data, encoding='latin1') is assumed.'u'Failed to encode latin1 string when unpickling a time object. pickle.load(data, encoding='latin1') is assumed.'b'hour (0-23)'u'hour (0-23)'b'minute (0-59)'u'minute (0-59)'b'second (0-59)'u'second (0-59)'b'microsecond (0-999999)'u'microsecond (0-999999)'b'timezone info object'u'timezone info object'b'cannot compare naive and aware times'u'cannot compare naive and aware times'b'whole minute'u'whole minute'b'Return formatted timezone offset (+xx:xx) or an empty string.'u'Return formatted timezone offset (+xx:xx) or an empty string.'b'Convert to formal string, for repr().'u'Convert to formal string, for repr().'b', %d, %d'u', %d, %d'b', %d'u', %d'b'%s.%s(%d, %d%s)'u'%s.%s(%d, %d%s)'b', tzinfo=%r'u', tzinfo=%r'b', fold=1)'u', fold=1)'b'Return the time formatted according to ISO.

        The full format is 'HH:MM:SS.mmmmmm+zz:zz'. By default, the fractional
        part is omitted if self.microsecond == 0.

        The optional argument timespec specifies the number of additional
        terms of the time to include. Valid options are 'auto', 'hours',
        'minutes', 'seconds', 'milliseconds' and 'microseconds'.
        'u'Return the time formatted according to ISO.

        The full format is 'HH:MM:SS.mmmmmm+zz:zz'. By default, the fractional
        part is omitted if self.microsecond == 0.

        The optional argument timespec specifies the number of additional
        terms of the time to include. Valid options are 'auto', 'hours',
        'minutes', 'seconds', 'milliseconds' and 'microseconds'.
        'b'Construct a time from the output of isoformat().'u'Construct a time from the output of isoformat().'b'Format using strftime().  The date part of the timestamp passed
        to underlying strftime should not be used.
        'u'Format using strftime().  The date part of the timestamp passed
        to underlying strftime should not be used.
        'b'Return the timezone offset as timedelta, positive east of UTC
         (negative west of UTC).'u'Return the timezone offset as timedelta, positive east of UTC
         (negative west of UTC).'b'Return the timezone name.

        Note that the name is 100% informational -- there's no requirement that
        it mean anything in particular. For example, "GMT", "UTC", "-500",
        "-5:00", "EDT", "US/Eastern", "America/New York" are all valid replies.
        'u'Return the timezone name.

        Note that the name is 100% informational -- there's no requirement that
        it mean anything in particular. For example, "GMT", "UTC", "-500",
        "-5:00", "EDT", "US/Eastern", "America/New York" are all valid replies.
        'b'Return 0 if DST is not in effect, or the DST offset (as timedelta
        positive eastward) if DST is in effect.

        This is purely informational; the DST offset has already been added to
        the UTC offset returned by utcoffset() if applicable, so there's no
        need to consult dst() unless you're interested in displaying the DST
        info.
        'u'Return 0 if DST is not in effect, or the DST offset (as timedelta
        positive eastward) if DST is in effect.

        This is purely informational; the DST offset has already been added to
        the UTC offset returned by utcoffset() if applicable, so there's no
        need to consult dst() unless you're interested in displaying the DST
        info.
        'b'Return a new time with new values for the specified fields.'u'Return a new time with new values for the specified fields.'b'bad tzinfo state arg'u'bad tzinfo state arg'b'datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])

    The year, month and day arguments are required. tzinfo may be None, or an
    instance of a tzinfo subclass. The remaining arguments may be ints.
    'u'datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])

    The year, month and day arguments are required. tzinfo may be None, or an
    instance of a tzinfo subclass. The remaining arguments may be ints.
    'b'Failed to encode latin1 string when unpickling a datetime object. pickle.load(data, encoding='latin1') is assumed.'u'Failed to encode latin1 string when unpickling a datetime object. pickle.load(data, encoding='latin1') is assumed.'b'Construct a datetime from a POSIX timestamp (like time.time()).

        A timezone info object may be passed in as well.
        'u'Construct a datetime from a POSIX timestamp (like time.time()).

        A timezone info object may be passed in as well.
        'b'Construct a naive UTC datetime from a POSIX timestamp.'u'Construct a naive UTC datetime from a POSIX timestamp.'b'Construct a datetime from time.time() and optional time zone info.'u'Construct a datetime from time.time() and optional time zone info.'b'Construct a UTC datetime from time.time().'u'Construct a UTC datetime from time.time().'b'Construct a datetime from a given date and a given time.'u'Construct a datetime from a given date and a given time.'b'date argument must be a date instance'u'date argument must be a date instance'b'time argument must be a time instance'u'time argument must be a time instance'b'Construct a datetime from the output of datetime.isoformat().'u'Construct a datetime from the output of datetime.isoformat().'b'Return integer POSIX timestamp.'u'Return integer POSIX timestamp.'b'Return POSIX timestamp as float'u'Return POSIX timestamp as float'b'Return UTC time tuple compatible with time.gmtime().'u'Return UTC time tuple compatible with time.gmtime().'b'Return the date part.'u'Return the date part.'b'Return the time part, with tzinfo None.'u'Return the time part, with tzinfo None.'b'Return the time part, with same tzinfo.'u'Return the time part, with same tzinfo.'b'Return a new datetime with new values for the specified fields.'u'Return a new datetime with new values for the specified fields.'b'tz argument must be an instance of tzinfo'u'tz argument must be an instance of tzinfo'b'%s %s %2d %02d:%02d:%02d %04d'u'%s %s %2d %02d:%02d:%02d %04d'b'Return the time formatted according to ISO.

        The full format looks like 'YYYY-MM-DD HH:MM:SS.mmmmmm'.
        By default, the fractional part is omitted if self.microsecond == 0.

        If self.tzinfo is not None, the UTC offset is also attached, giving
        giving a full format of 'YYYY-MM-DD HH:MM:SS.mmmmmm+HH:MM'.

        Optional argument sep specifies the separator between date and
        time, default 'T'.

        The optional argument timespec specifies the number of additional
        terms of the time to include. Valid options are 'auto', 'hours',
        'minutes', 'seconds', 'milliseconds' and 'microseconds'.
        'u'Return the time formatted according to ISO.

        The full format looks like 'YYYY-MM-DD HH:MM:SS.mmmmmm'.
        By default, the fractional part is omitted if self.microsecond == 0.

        If self.tzinfo is not None, the UTC offset is also attached, giving
        giving a full format of 'YYYY-MM-DD HH:MM:SS.mmmmmm+HH:MM'.

        Optional argument sep specifies the separator between date and
        time, default 'T'.

        The optional argument timespec specifies the number of additional
        terms of the time to include. Valid options are 'auto', 'hours',
        'minutes', 'seconds', 'milliseconds' and 'microseconds'.
        'b'%04d-%02d-%02d%c'u'%04d-%02d-%02d%c'b'Convert to string, for str().'u'Convert to string, for str().'b'string, format -> new datetime parsed from a string (like time.strptime()).'u'string, format -> new datetime parsed from a string (like time.strptime()).'b'Return the timezone offset as timedelta positive east of UTC (negative west of
        UTC).'u'Return the timezone offset as timedelta positive east of UTC (negative west of
        UTC).'b'cannot compare naive and aware datetimes'u'cannot compare naive and aware datetimes'b'Add a datetime and a timedelta.'u'Add a datetime and a timedelta.'b'Subtract two datetimes, or a datetime and a timedelta.'u'Subtract two datetimes, or a datetime and a timedelta.'b'cannot mix naive and timezone-aware time'u'cannot mix naive and timezone-aware time'b'_offset'u'_offset'b'_name'u'_name'b'offset must be a timedelta'u'offset must be a timedelta'b'offset must be a timedelta strictly between -timedelta(hours=24) and timedelta(hours=24).'u'offset must be a timedelta strictly between -timedelta(hours=24) and timedelta(hours=24).'b'pickle support'u'pickle support'b'Convert to formal string, for repr().

        >>> tz = timezone.utc
        >>> repr(tz)
        'datetime.timezone.utc'
        >>> tz = timezone(timedelta(hours=-5), 'EST')
        >>> repr(tz)
        "datetime.timezone(datetime.timedelta(-1, 68400), 'EST')"
        'u'Convert to formal string, for repr().

        >>> tz = timezone.utc
        >>> repr(tz)
        'datetime.timezone.utc'
        >>> tz = timezone(timedelta(hours=-5), 'EST')
        >>> repr(tz)
        "datetime.timezone(datetime.timedelta(-1, 68400), 'EST')"
        'b'datetime.timezone.utc'u'datetime.timezone.utc'b'%s.%s(%r)'u'%s.%s(%r)'b'%s.%s(%r, %r)'u'%s.%s(%r, %r)'b'utcoffset() argument must be a datetime instance or None'u'utcoffset() argument must be a datetime instance or None'b'tzname() argument must be a datetime instance or None'u'tzname() argument must be a datetime instance or None'b'dst() argument must be a datetime instance or None'u'dst() argument must be a datetime instance or None'b'fromutc: dt.tzinfo is not self'u'fromutc: dt.tzinfo is not self'b'fromutc() argument must be a datetime instance or None'u'fromutc() argument must be a datetime instance or None'u'Python.Python39.lib.datetime'u'Python39.lib.datetime'u'lib.datetime'DISTUTILS_DEBUG# If DISTUTILS_DEBUG is anything other than the empty string, we run in# debug mode.b'DISTUTILS_DEBUG'u'DISTUTILS_DEBUG'u'Python39.lib.distutils.debug'u'lib.distutils.debug'u'distutils.debug'_decimal_pydecimalu'Python.Python39.lib.decimal'u'Python39.lib.decimal'u'lib.decimal'Implementation of JSONDecoder
scannerc_scanstringFLAGSPosInfNegInfSubclass of ValueError with the following additional properties:

    msg: The unformatted error message
    doc: The JSON document being parsed
    pos: The start index of doc where parsing failed
    lineno: The line corresponding to pos
    colno: The column corresponding to pos

    colno%s: line %d column %d (char %d)_CONSTANTS(.*?)(["\\\x00-\x1f])STRINGCHUNKBACKSLASH_decode_uXXXXescInvalid \uXXXX escapepy_scanstring_b_mScan the string s for a JSON string. End is the index of the
    character in s after the quote that started the JSON string.
    Unescapes all valid JSON string escape sequences and raises ValueError
    on attempt to decode an invalid string. If strict is False then literal
    control characters are allowed in the string.

    Returns a tuple of the decoded string and the index of the character in s
    after the end quote._appendUnterminated string starting atInvalid control character {0!r} atInvalid \escape: {0!r}uni0xd800563190xdbff\uuni2563200xdc000xdfff0x10000[ \t\n\r]*WHITESPACE 	
WHITESPACE_STRJSONObjects_and_endscan_once_wspairspairs_appendmemo_getnextcharExpecting property name enclosed in double quotesExpecting ':' delimiterExpecting valueExpecting ',' delimiterJSONArraySimple JSON <http://json.org> decoder

    Performs the following translations in decoding by default:

    +---------------+-------------------+
    | JSON          | Python            |
    +===============+===================+
    | object        | dict              |
    +---------------+-------------------+
    | array         | list              |
    +---------------+-------------------+
    | string        | str               |
    +---------------+-------------------+
    | number (int)  | int               |
    +---------------+-------------------+
    | number (real) | float             |
    +---------------+-------------------+
    | true          | True              |
    +---------------+-------------------+
    | false         | False             |
    +---------------+-------------------+
    | null          | None              |
    +---------------+-------------------+

    It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as
    their corresponding ``float`` values, which is outside the JSON spec.

    ``object_hook``, if specified, will be called with the result
        of every JSON object decoded and its return value will be used in
        place of the given ``dict``.  This can be used to provide custom
        deserializations (e.g. to support JSON-RPC class hinting).

        ``object_pairs_hook``, if specified will be called with the result of
        every JSON object decoded with an ordered list of pairs.  The return
        value of ``object_pairs_hook`` will be used instead of the ``dict``.
        This feature can be used to implement custom decoders.
        If ``object_hook`` is also defined, the ``object_pairs_hook`` takes
        priority.

        ``parse_float``, if specified, will be called with the string
        of every JSON float to be decoded. By default this is equivalent to
        float(num_str). This can be used to use another datatype or parser
        for JSON floats (e.g. decimal.Decimal).

        ``parse_int``, if specified, will be called with the string
        of every JSON int to be decoded. By default this is equivalent to
        int(num_str). This can be used to use another datatype or parser
        for JSON integers (e.g. float).

        ``parse_constant``, if specified, will be called with one of the
        following strings: -Infinity, Infinity, NaN.
        This can be used to raise an exception if invalid JSON numbers
        are encountered.

        If ``strict`` is false (true is the default), then control
        characters will be allowed inside strings.  Control characters in
        this context are those with character codes in the 0-31 range,
        including ``'\t'`` (tab), ``'\n'``, ``'\r'`` and ``'\0'``.
        parse_objectparse_arrayparse_stringReturn the Python representation of ``s`` (a ``str`` instance
        containing a JSON document).

        raw_decodeExtra dataDecode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.

        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.

        # Note that this exception is used from _json# Content is contains zero or more unescaped string characters# Terminator is the end of string, a literal control character,# or a backslash denoting that an escape sequence follows#msg = "Invalid control character %r at" % (terminator,)# If not a unicode escape sequence, must be in the lookup table# Use speedup if available# Use a slice to prevent IndexError from being raised, the following# check will raise a more specific ValueError if the string is empty# Normally we expect nextchar == '"'# Trivial empty object# To skip some function call overhead we optimize the fast paths where# the JSON key separator is ": " or just ":".# Look-ahead for trivial empty arrayb'Implementation of JSONDecoder
'u'Implementation of JSONDecoder
'b'Subclass of ValueError with the following additional properties:

    msg: The unformatted error message
    doc: The JSON document being parsed
    pos: The start index of doc where parsing failed
    lineno: The line corresponding to pos
    colno: The column corresponding to pos

    'u'Subclass of ValueError with the following additional properties:

    msg: The unformatted error message
    doc: The JSON document being parsed
    pos: The start index of doc where parsing failed
    lineno: The line corresponding to pos
    colno: The column corresponding to pos

    'b'%s: line %d column %d (char %d)'u'%s: line %d column %d (char %d)'b'(.*?)(["\\\x00-\x1f])'u'(.*?)(["\\\x00-\x1f])'b''u''b'Invalid \uXXXX escape'u'Invalid \uXXXX escape'b'Scan the string s for a JSON string. End is the index of the
    character in s after the quote that started the JSON string.
    Unescapes all valid JSON string escape sequences and raises ValueError
    on attempt to decode an invalid string. If strict is False then literal
    control characters are allowed in the string.

    Returns a tuple of the decoded string and the index of the character in s
    after the end quote.'u'Scan the string s for a JSON string. End is the index of the
    character in s after the quote that started the JSON string.
    Unescapes all valid JSON string escape sequences and raises ValueError
    on attempt to decode an invalid string. If strict is False then literal
    control characters are allowed in the string.

    Returns a tuple of the decoded string and the index of the character in s
    after the end quote.'b'Unterminated string starting at'u'Unterminated string starting at'b'Invalid control character {0!r} at'u'Invalid control character {0!r} at'b'Invalid \escape: {0!r}'u'Invalid \escape: {0!r}'b'\u'u'\u'b'[ \t\n\r]*'u'[ \t\n\r]*'b' 	
'u' 	
'b'Expecting property name enclosed in double quotes'u'Expecting property name enclosed in double quotes'b'Expecting ':' delimiter'u'Expecting ':' delimiter'b'Expecting value'u'Expecting value'b'Expecting ',' delimiter'u'Expecting ',' delimiter'b'Simple JSON <http://json.org> decoder

    Performs the following translations in decoding by default:

    +---------------+-------------------+
    | JSON          | Python            |
    +===============+===================+
    | object        | dict              |
    +---------------+-------------------+
    | array         | list              |
    +---------------+-------------------+
    | string        | str               |
    +---------------+-------------------+
    | number (int)  | int               |
    +---------------+-------------------+
    | number (real) | float             |
    +---------------+-------------------+
    | true          | True              |
    +---------------+-------------------+
    | false         | False             |
    +---------------+-------------------+
    | null          | None              |
    +---------------+-------------------+

    It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as
    their corresponding ``float`` values, which is outside the JSON spec.

    'u'Simple JSON <http://json.org> decoder

    Performs the following translations in decoding by default:

    +---------------+-------------------+
    | JSON          | Python            |
    +===============+===================+
    | object        | dict              |
    +---------------+-------------------+
    | array         | list              |
    +---------------+-------------------+
    | string        | str               |
    +---------------+-------------------+
    | number (int)  | int               |
    +---------------+-------------------+
    | number (real) | float             |
    +---------------+-------------------+
    | true          | True              |
    +---------------+-------------------+
    | false         | False             |
    +---------------+-------------------+
    | null          | None              |
    +---------------+-------------------+

    It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as
    their corresponding ``float`` values, which is outside the JSON spec.

    'b'``object_hook``, if specified, will be called with the result
        of every JSON object decoded and its return value will be used in
        place of the given ``dict``.  This can be used to provide custom
        deserializations (e.g. to support JSON-RPC class hinting).

        ``object_pairs_hook``, if specified will be called with the result of
        every JSON object decoded with an ordered list of pairs.  The return
        value of ``object_pairs_hook`` will be used instead of the ``dict``.
        This feature can be used to implement custom decoders.
        If ``object_hook`` is also defined, the ``object_pairs_hook`` takes
        priority.

        ``parse_float``, if specified, will be called with the string
        of every JSON float to be decoded. By default this is equivalent to
        float(num_str). This can be used to use another datatype or parser
        for JSON floats (e.g. decimal.Decimal).

        ``parse_int``, if specified, will be called with the string
        of every JSON int to be decoded. By default this is equivalent to
        int(num_str). This can be used to use another datatype or parser
        for JSON integers (e.g. float).

        ``parse_constant``, if specified, will be called with one of the
        following strings: -Infinity, Infinity, NaN.
        This can be used to raise an exception if invalid JSON numbers
        are encountered.

        If ``strict`` is false (true is the default), then control
        characters will be allowed inside strings.  Control characters in
        this context are those with character codes in the 0-31 range,
        including ``'\t'`` (tab), ``'\n'``, ``'\r'`` and ``'\0'``.
        'u'``object_hook``, if specified, will be called with the result
        of every JSON object decoded and its return value will be used in
        place of the given ``dict``.  This can be used to provide custom
        deserializations (e.g. to support JSON-RPC class hinting).

        ``object_pairs_hook``, if specified will be called with the result of
        every JSON object decoded with an ordered list of pairs.  The return
        value of ``object_pairs_hook`` will be used instead of the ``dict``.
        This feature can be used to implement custom decoders.
        If ``object_hook`` is also defined, the ``object_pairs_hook`` takes
        priority.

        ``parse_float``, if specified, will be called with the string
        of every JSON float to be decoded. By default this is equivalent to
        float(num_str). This can be used to use another datatype or parser
        for JSON floats (e.g. decimal.Decimal).

        ``parse_int``, if specified, will be called with the string
        of every JSON int to be decoded. By default this is equivalent to
        int(num_str). This can be used to use another datatype or parser
        for JSON integers (e.g. float).

        ``parse_constant``, if specified, will be called with one of the
        following strings: -Infinity, Infinity, NaN.
        This can be used to raise an exception if invalid JSON numbers
        are encountered.

        If ``strict`` is false (true is the default), then control
        characters will be allowed inside strings.  Control characters in
        this context are those with character codes in the 0-31 range,
        including ``'\t'`` (tab), ``'\n'``, ``'\r'`` and ``'\0'``.
        'b'Return the Python representation of ``s`` (a ``str`` instance
        containing a JSON document).

        'u'Return the Python representation of ``s`` (a ``str`` instance
        containing a JSON document).

        'b'Extra data'u'Extra data'b'Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.

        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.

        'u'Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.

        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.

        'u'Python39.lib.json.decoder'u'lib.json.decoder'u'json.decoder'u'decoder'_AnyCallableFCt.Callable[te.Concatenate[Context, P], R]t.Callable[P, R]Marks a callback as wanting to receive the current context
    object as first argument.
    P.argsP.kwargst.Callable[te.Concatenate[t.Any, P], R]Similar to :func:`pass_context`, but only pass the object on the
    context onwards (:attr:`Context.obj`).  This is useful if that object
    represents the state of a nested system.
    t.Callable[te.Concatenate[T, P], R]Given an object type this creates a decorator that will work
    similar to :func:`pass_obj` but instead of passing the object of the
    current context, it will find the innermost context of type
    :func:`object_type`.

    This generates a decorator that works roughly like this::

        from functools import update_wrapper

        def decorator(f):
            @pass_context
            def new_func(ctx, *args, **kwargs):
                obj = ctx.find_object(object_type)
                return ctx.invoke(f, obj, *args, **kwargs)
            return update_wrapper(new_func, f)
        return decorator

    :param object_type: the type of the object to pass.
    :param ensure: if set to `True`, a new object will be created and
                   remembered on the context if it's not there yet.
    Managed to invoke callback without a context object of type "Managed to invoke callback without a context"" object of type " existing." existing."pass_meta_keyt.Callable[[t.Callable[te.Concatenate[t.Any, P], R]], t.Callable[P, R]]doc_descriptionCreate a decorator that passes a key from
    :attr:`click.Context.meta` as the first argument to the decorated
    function.

    :param key: Key in ``Context.meta`` to pass.
    :param doc_description: Description of the object being passed,
        inserted into the decorator's docstring. Defaults to "the 'key'
        key from Context.meta".

    .. versionadded:: 8.0
    the  key from :attr:`click.Context.meta`Decorator that passes  as the first argument to the decorated function." as the first argument"" to the decorated function."CmdTypeCreates a new :class:`Command` and uses the decorated function as
    callback.  This will also automatically attach all decorated
    :func:`option`\s and :func:`argument`\s as parameters to the command.

    The name of the command defaults to the name of the function with
    underscores replaced by dashes.  If you want to change that, you can
    pass the intended name as the first argument.

    All keyword arguments are forwarded to the underlying command class.
    For the ``params`` argument, any decorated params are appended to
    the end of the list.

    Once decorated the function turns into a :class:`Command` instance
    that can be invoked as a command line utility or be attached to a
    command :class:`Group`.

    :param name: the name of the command.  This defaults to the function
                 name with underscores replaced by dashes.
    :param cls: the command class to instantiate.  This defaults to
                :class:`Command`.

    .. versionchanged:: 8.1
        This decorator can be applied without parentheses.

    .. versionchanged:: 8.1
        The ``params`` argument can be used. Decorated params are
        appended to the end of the list.
    Use 'command(cls=cls)(callable)' to specify a class.Attempted to convert a callback into a command twice.attr_params__click_params__decorator_paramsGrpTypeCreates a new :class:`Group` with a function as callback.  This
    works otherwise the same as :func:`command` just that the `cls`
    parameter is set to :class:`Group`.

    .. versionchanged:: 8.1
        This decorator can be applied without parentheses.
    _param_memoAttaches an argument to the command.  All positional arguments are
    passed as parameter declarations to :class:`Argument`; all keyword
    arguments are forwarded unchanged (except ``cls``).
    This is equivalent to creating an :class:`Argument` instance manually
    and attaching it to the :attr:`Command.params` list.

    For the default argument class, refer to :class:`Argument` and
    :class:`Parameter` for descriptions of parameters.

    :param cls: the argument class to instantiate.  This defaults to
                :class:`Argument`.
    :param param_decls: Passed as positional arguments to the constructor of
        ``cls``.
    :param attrs: Passed as keyword arguments to the constructor of ``cls``.
    Attaches an option to the command.  All positional arguments are
    passed as parameter declarations to :class:`Option`; all keyword
    arguments are forwarded unchanged (except ``cls``).
    This is equivalent to creating an :class:`Option` instance manually
    and attaching it to the :attr:`Command.params` list.

    For the default option class, refer to :class:`Option` and
    :class:`Parameter` for descriptions of parameters.

    :param cls: the option class to instantiate.  This defaults to
                :class:`Option`.
    :param param_decls: Passed as positional arguments to the constructor of
        ``cls``.
    :param attrs: Passed as keyword arguments to the constructor of ``cls``.
    Add a ``--yes`` option which shows a prompt before continuing if
    not passed. If the prompt is declined, the program will exit.

    :param param_decls: One or more option names. Defaults to the single
        value ``"--yes"``.
    :param kwargs: Extra arguments are passed to :func:`option`.
    --yesDo you want to continue?Confirm the action without prompting.Add a ``--password`` option which prompts for a password, hiding
    input and asking to enter the value again for confirmation.

    :param param_decls: One or more option names. Defaults to the single
        value ``"--password"``.
    :param kwargs: Extra arguments are passed to :func:`option`.
    --passwordpackage_nameAdd a ``--version`` option which immediately prints the version
    number and exits the program.

    If ``version`` is not provided, Click will try to detect it using
    :func:`importlib.metadata.version` to get the version for the
    ``package_name``. On Python < 3.8, the ``importlib_metadata``
    backport must be installed.

    If ``package_name`` is not provided, Click will try to detect it by
    inspecting the stack frames. This will be used to detect the
    version, so it must match the name of the installed package.

    :param version: The version number to show. If not provided, Click
        will try to detect it.
    :param param_decls: One or more option names. Defaults to the single
        value ``"--version"``.
    :param package_name: The package name to detect the version from. If
        not provided, Click will try to detect it.
    :param prog_name: The name of the CLI to show in the message. If not
        provided, it will be detected from the command.
    :param message: The message to show. The values ``%(prog)s``,
        ``%(package)s``, and ``%(version)s`` are available. Defaults to
        ``"%(prog)s, version %(version)s"``.
    :param kwargs: Extra arguments are passed to :func:`option`.
    :raise RuntimeError: ``version`` could not be detected.

    .. versionchanged:: 8.0
        Add the ``package_name`` parameter, and the ``%(package)s``
        value for messages.

    .. versionchanged:: 8.0
        Use :mod:`importlib.metadata` instead of ``pkg_resources``. The
        version is detected based on the package name, not the entry
        point name. The Python package name must match the installed
        package name, or be passed with ``package_name=``.
    %(prog)s, version %(version)s is not installed. Try passing 'package_name' instead." is not installed. Try passing"" 'package_name' instead."Could not determine the version for  automatically.Show the version and exit.Add a ``--help`` option which immediately prints the help page
    and exits the program.

    This is usually unnecessary, as the ``--help`` option is added to
    each command automatically unless ``add_help_option=False`` is
    passed.

    :param param_decls: One or more option names. Defaults to the single
        value ``"--help"``.
    :param kwargs: Extra arguments are passed to :func:`option`.
    # variant: no call, directly as decorator for a function.# variant: with positional name and with positional or keyword cls argument:# @command(namearg, CommandCls, ...) or @command(namearg, cls=CommandCls, ...)# variant: name omitted, cls _must_ be a keyword argument, @command(cls=CommandCls, ...)# variant: with optional string name, no cls argument provided.# @group(namearg, GroupCls, ...) or @group(namearg, cls=GroupCls, ...)# variant: name omitted, cls _must_ be a keyword argument, @group(cmd=GroupCls, ...)# break reference cycle# https://docs.python.org/3/library/inspect.html#the-interpreter-stack# Python < 3.8b'FC'u'FC'b't.Callable[te.Concatenate[Context, P], R]'u't.Callable[te.Concatenate[Context, P], R]'b't.Callable[P, R]'u't.Callable[P, R]'b'Marks a callback as wanting to receive the current context
    object as first argument.
    'u'Marks a callback as wanting to receive the current context
    object as first argument.
    'b'P.args'u'P.args'b'P.kwargs'u'P.kwargs'b't.Callable[te.Concatenate[t.Any, P], R]'u't.Callable[te.Concatenate[t.Any, P], R]'b'Similar to :func:`pass_context`, but only pass the object on the
    context onwards (:attr:`Context.obj`).  This is useful if that object
    represents the state of a nested system.
    'u'Similar to :func:`pass_context`, but only pass the object on the
    context onwards (:attr:`Context.obj`).  This is useful if that object
    represents the state of a nested system.
    'b't.Callable[te.Concatenate[T, P], R]'u't.Callable[te.Concatenate[T, P], R]'b'Given an object type this creates a decorator that will work
    similar to :func:`pass_obj` but instead of passing the object of the
    current context, it will find the innermost context of type
    :func:`object_type`.

    This generates a decorator that works roughly like this::

        from functools import update_wrapper

        def decorator(f):
            @pass_context
            def new_func(ctx, *args, **kwargs):
                obj = ctx.find_object(object_type)
                return ctx.invoke(f, obj, *args, **kwargs)
            return update_wrapper(new_func, f)
        return decorator

    :param object_type: the type of the object to pass.
    :param ensure: if set to `True`, a new object will be created and
                   remembered on the context if it's not there yet.
    'u'Given an object type this creates a decorator that will work
    similar to :func:`pass_obj` but instead of passing the object of the
    current context, it will find the innermost context of type
    :func:`object_type`.

    This generates a decorator that works roughly like this::

        from functools import update_wrapper

        def decorator(f):
            @pass_context
            def new_func(ctx, *args, **kwargs):
                obj = ctx.find_object(object_type)
                return ctx.invoke(f, obj, *args, **kwargs)
            return update_wrapper(new_func, f)
        return decorator

    :param object_type: the type of the object to pass.
    :param ensure: if set to `True`, a new object will be created and
                   remembered on the context if it's not there yet.
    'b'Managed to invoke callback without a context object of type 'u'Managed to invoke callback without a context object of type 'b' existing.'u' existing.'b't.Callable[[t.Callable[te.Concatenate[t.Any, P], R]], t.Callable[P, R]]'u't.Callable[[t.Callable[te.Concatenate[t.Any, P], R]], t.Callable[P, R]]'b'Create a decorator that passes a key from
    :attr:`click.Context.meta` as the first argument to the decorated
    function.

    :param key: Key in ``Context.meta`` to pass.
    :param doc_description: Description of the object being passed,
        inserted into the decorator's docstring. Defaults to "the 'key'
        key from Context.meta".

    .. versionadded:: 8.0
    'u'Create a decorator that passes a key from
    :attr:`click.Context.meta` as the first argument to the decorated
    function.

    :param key: Key in ``Context.meta`` to pass.
    :param doc_description: Description of the object being passed,
        inserted into the decorator's docstring. Defaults to "the 'key'
        key from Context.meta".

    .. versionadded:: 8.0
    'b'the 'u'the 'b' key from :attr:`click.Context.meta`'u' key from :attr:`click.Context.meta`'b'Decorator that passes 'u'Decorator that passes 'b' as the first argument to the decorated function.'u' as the first argument to the decorated function.'b'CmdType'u'CmdType'b'Creates a new :class:`Command` and uses the decorated function as
    callback.  This will also automatically attach all decorated
    :func:`option`\s and :func:`argument`\s as parameters to the command.

    The name of the command defaults to the name of the function with
    underscores replaced by dashes.  If you want to change that, you can
    pass the intended name as the first argument.

    All keyword arguments are forwarded to the underlying command class.
    For the ``params`` argument, any decorated params are appended to
    the end of the list.

    Once decorated the function turns into a :class:`Command` instance
    that can be invoked as a command line utility or be attached to a
    command :class:`Group`.

    :param name: the name of the command.  This defaults to the function
                 name with underscores replaced by dashes.
    :param cls: the command class to instantiate.  This defaults to
                :class:`Command`.

    .. versionchanged:: 8.1
        This decorator can be applied without parentheses.

    .. versionchanged:: 8.1
        The ``params`` argument can be used. Decorated params are
        appended to the end of the list.
    'u'Creates a new :class:`Command` and uses the decorated function as
    callback.  This will also automatically attach all decorated
    :func:`option`\s and :func:`argument`\s as parameters to the command.

    The name of the command defaults to the name of the function with
    underscores replaced by dashes.  If you want to change that, you can
    pass the intended name as the first argument.

    All keyword arguments are forwarded to the underlying command class.
    For the ``params`` argument, any decorated params are appended to
    the end of the list.

    Once decorated the function turns into a :class:`Command` instance
    that can be invoked as a command line utility or be attached to a
    command :class:`Group`.

    :param name: the name of the command.  This defaults to the function
                 name with underscores replaced by dashes.
    :param cls: the command class to instantiate.  This defaults to
                :class:`Command`.

    .. versionchanged:: 8.1
        This decorator can be applied without parentheses.

    .. versionchanged:: 8.1
        The ``params`` argument can be used. Decorated params are
        appended to the end of the list.
    'b'Use 'command(cls=cls)(callable)' to specify a class.'u'Use 'command(cls=cls)(callable)' to specify a class.'b'Attempted to convert a callback into a command twice.'u'Attempted to convert a callback into a command twice.'b'GrpType'u'GrpType'b'Creates a new :class:`Group` with a function as callback.  This
    works otherwise the same as :func:`command` just that the `cls`
    parameter is set to :class:`Group`.

    .. versionchanged:: 8.1
        This decorator can be applied without parentheses.
    'u'Creates a new :class:`Group` with a function as callback.  This
    works otherwise the same as :func:`command` just that the `cls`
    parameter is set to :class:`Group`.

    .. versionchanged:: 8.1
        This decorator can be applied without parentheses.
    'b'__click_params__'u'__click_params__'b'Attaches an argument to the command.  All positional arguments are
    passed as parameter declarations to :class:`Argument`; all keyword
    arguments are forwarded unchanged (except ``cls``).
    This is equivalent to creating an :class:`Argument` instance manually
    and attaching it to the :attr:`Command.params` list.

    For the default argument class, refer to :class:`Argument` and
    :class:`Parameter` for descriptions of parameters.

    :param cls: the argument class to instantiate.  This defaults to
                :class:`Argument`.
    :param param_decls: Passed as positional arguments to the constructor of
        ``cls``.
    :param attrs: Passed as keyword arguments to the constructor of ``cls``.
    'u'Attaches an argument to the command.  All positional arguments are
    passed as parameter declarations to :class:`Argument`; all keyword
    arguments are forwarded unchanged (except ``cls``).
    This is equivalent to creating an :class:`Argument` instance manually
    and attaching it to the :attr:`Command.params` list.

    For the default argument class, refer to :class:`Argument` and
    :class:`Parameter` for descriptions of parameters.

    :param cls: the argument class to instantiate.  This defaults to
                :class:`Argument`.
    :param param_decls: Passed as positional arguments to the constructor of
        ``cls``.
    :param attrs: Passed as keyword arguments to the constructor of ``cls``.
    'b'Attaches an option to the command.  All positional arguments are
    passed as parameter declarations to :class:`Option`; all keyword
    arguments are forwarded unchanged (except ``cls``).
    This is equivalent to creating an :class:`Option` instance manually
    and attaching it to the :attr:`Command.params` list.

    For the default option class, refer to :class:`Option` and
    :class:`Parameter` for descriptions of parameters.

    :param cls: the option class to instantiate.  This defaults to
                :class:`Option`.
    :param param_decls: Passed as positional arguments to the constructor of
        ``cls``.
    :param attrs: Passed as keyword arguments to the constructor of ``cls``.
    'u'Attaches an option to the command.  All positional arguments are
    passed as parameter declarations to :class:`Option`; all keyword
    arguments are forwarded unchanged (except ``cls``).
    This is equivalent to creating an :class:`Option` instance manually
    and attaching it to the :attr:`Command.params` list.

    For the default option class, refer to :class:`Option` and
    :class:`Parameter` for descriptions of parameters.

    :param cls: the option class to instantiate.  This defaults to
                :class:`Option`.
    :param param_decls: Passed as positional arguments to the constructor of
        ``cls``.
    :param attrs: Passed as keyword arguments to the constructor of ``cls``.
    'b'Add a ``--yes`` option which shows a prompt before continuing if
    not passed. If the prompt is declined, the program will exit.

    :param param_decls: One or more option names. Defaults to the single
        value ``"--yes"``.
    :param kwargs: Extra arguments are passed to :func:`option`.
    'u'Add a ``--yes`` option which shows a prompt before continuing if
    not passed. If the prompt is declined, the program will exit.

    :param param_decls: One or more option names. Defaults to the single
        value ``"--yes"``.
    :param kwargs: Extra arguments are passed to :func:`option`.
    'b'--yes'u'--yes'b'is_flag'u'is_flag'b'callback'u'callback'b'expose_value'u'expose_value'b'prompt'u'prompt'b'Do you want to continue?'u'Do you want to continue?'b'Confirm the action without prompting.'u'Confirm the action without prompting.'b'Add a ``--password`` option which prompts for a password, hiding
    input and asking to enter the value again for confirmation.

    :param param_decls: One or more option names. Defaults to the single
        value ``"--password"``.
    :param kwargs: Extra arguments are passed to :func:`option`.
    'u'Add a ``--password`` option which prompts for a password, hiding
    input and asking to enter the value again for confirmation.

    :param param_decls: One or more option names. Defaults to the single
        value ``"--password"``.
    :param kwargs: Extra arguments are passed to :func:`option`.
    'b'--password'u'--password'b'confirmation_prompt'u'confirmation_prompt'b'hide_input'u'hide_input'b'Add a ``--version`` option which immediately prints the version
    number and exits the program.

    If ``version`` is not provided, Click will try to detect it using
    :func:`importlib.metadata.version` to get the version for the
    ``package_name``. On Python < 3.8, the ``importlib_metadata``
    backport must be installed.

    If ``package_name`` is not provided, Click will try to detect it by
    inspecting the stack frames. This will be used to detect the
    version, so it must match the name of the installed package.

    :param version: The version number to show. If not provided, Click
        will try to detect it.
    :param param_decls: One or more option names. Defaults to the single
        value ``"--version"``.
    :param package_name: The package name to detect the version from. If
        not provided, Click will try to detect it.
    :param prog_name: The name of the CLI to show in the message. If not
        provided, it will be detected from the command.
    :param message: The message to show. The values ``%(prog)s``,
        ``%(package)s``, and ``%(version)s`` are available. Defaults to
        ``"%(prog)s, version %(version)s"``.
    :param kwargs: Extra arguments are passed to :func:`option`.
    :raise RuntimeError: ``version`` could not be detected.

    .. versionchanged:: 8.0
        Add the ``package_name`` parameter, and the ``%(package)s``
        value for messages.

    .. versionchanged:: 8.0
        Use :mod:`importlib.metadata` instead of ``pkg_resources``. The
        version is detected based on the package name, not the entry
        point name. The Python package name must match the installed
        package name, or be passed with ``package_name=``.
    'u'Add a ``--version`` option which immediately prints the version
    number and exits the program.

    If ``version`` is not provided, Click will try to detect it using
    :func:`importlib.metadata.version` to get the version for the
    ``package_name``. On Python < 3.8, the ``importlib_metadata``
    backport must be installed.

    If ``package_name`` is not provided, Click will try to detect it by
    inspecting the stack frames. This will be used to detect the
    version, so it must match the name of the installed package.

    :param version: The version number to show. If not provided, Click
        will try to detect it.
    :param param_decls: One or more option names. Defaults to the single
        value ``"--version"``.
    :param package_name: The package name to detect the version from. If
        not provided, Click will try to detect it.
    :param prog_name: The name of the CLI to show in the message. If not
        provided, it will be detected from the command.
    :param message: The message to show. The values ``%(prog)s``,
        ``%(package)s``, and ``%(version)s`` are available. Defaults to
        ``"%(prog)s, version %(version)s"``.
    :param kwargs: Extra arguments are passed to :func:`option`.
    :raise RuntimeError: ``version`` could not be detected.

    .. versionchanged:: 8.0
        Add the ``package_name`` parameter, and the ``%(package)s``
        value for messages.

    .. versionchanged:: 8.0
        Use :mod:`importlib.metadata` instead of ``pkg_resources``. The
        version is detected based on the package name, not the entry
        point name. The Python package name must match the installed
        package name, or be passed with ``package_name=``.
    'b'%(prog)s, version %(version)s'u'%(prog)s, version %(version)s'b' is not installed. Try passing 'package_name' instead.'u' is not installed. Try passing 'package_name' instead.'b'Could not determine the version for 'u'Could not determine the version for 'b' automatically.'u' automatically.'b'package'u'package'b'is_eager'u'is_eager'b'Show the version and exit.'u'Show the version and exit.'b'Add a ``--help`` option which immediately prints the help page
    and exits the program.

    This is usually unnecessary, as the ``--help`` option is added to
    each command automatically unless ``add_help_option=False`` is
    passed.

    :param param_decls: One or more option names. Defaults to the single
        value ``"--help"``.
    :param kwargs: Extra arguments are passed to :func:`option`.
    'u'Add a ``--help`` option which immediately prints the help page
    and exits the program.

    This is usually unnecessary, as the ``--help`` option is added to
    each command automatically unless ``add_help_option=False`` is
    passed.

    :param param_decls: One or more option names. Defaults to the single
        value ``"--help"``.
    :param kwargs: Extra arguments are passed to :func:`option`.
    'u'click.decorators'u'decorators'FILTERSDEFAULT_FILTERSTESTSDEFAULT_TESTSCyclergenerate_lorem_ipsumJoiner{%BLOCK_START_STRING%}BLOCK_END_STRINGVARIABLE_START_STRINGVARIABLE_END_STRING{#COMMENT_START_STRING#}COMMENT_END_STRINGLINE_STATEMENT_PREFIXLINE_COMMENT_PREFIXTRIM_BLOCKSLSTRIP_BLOCKSte.Literal['\n', '\r\n', '\r']NEWLINE_SEQUENCEKEEP_TRAILING_NEWLINElipsumcyclerjoinerDEFAULT_NAMESPACEcompiler.ascii_strnoopenerurlize.relurlize.targeturlize.extra_schemestruncate.leewayjson.dumps_kwargsext.i18n.trimmedDEFAULT_POLICIES# defaults for the parser / lexer# default filters, tests and namespace# default policiesb'{%'u'{%'b'%}'u'%}'b'{#'u'{#'b'#}'u'#}'b'te.Literal['\n', '\r\n', '\r']'u'te.Literal['\n', '\r\n', '\r']'b'dict'u'dict'b'lipsum'u'lipsum'b'cycler'u'cycler'b'joiner'u'joiner'b'namespace'u'namespace'b'compiler.ascii_str'u'compiler.ascii_str'b'noopener'u'noopener'b'urlize.rel'u'urlize.rel'b'urlize.target'u'urlize.target'b'urlize.extra_schemes'u'urlize.extra_schemes'b'truncate.leeway'u'truncate.leeway'b'sort_keys'u'sort_keys'b'json.dumps_kwargs'u'json.dumps_kwargs'b'ext.i18n.trimmed'u'ext.i18n.trimmed'u'jinja2.defaults'distutils.dep_util

Utility functions for simple, timestamp-based dependency of files
and groups of files; also, function based entirely on such
timestamp dependency analysis.DistutilsFileErrorReturn true if 'source' exists and is more recently modified than
    'target', or if 'source' exists and 'target' doesn't.  Return false if
    both exist and 'target' is the same age or younger than 'source'.
    Raise DistutilsFileError if 'source' does not exist.
    file '%s' does not existmtime1mtime2newer_pairwiseWalk two filename lists in parallel, testing if each source is newer
    than its corresponding target.  Return a pair of lists (sources,
    targets) where source is newer than target, according to the semantics
    of 'newer()'.
    'sources' and 'targets' must be same lengthn_sourcesn_targetsReturn true if 'target' is out-of-date with respect to any file
    listed in 'sources'.  In other words, if 'target' exists and is newer
    than every file in 'sources', return false; otherwise return true.
    'missing' controls what we do when a source file is missing; the
    default ("error") is to blow up with an OSError from inside 'stat()';
    if it is "ignore", we silently drop any missing source files; if it is
    "newer", any missing source files make us assume that 'target' is
    out-of-date (this is handy in "dry-run" mode: it'll make you pretend to
    carry out commands that wouldn't work because inputs are missing, but
    that doesn't matter because you're not actually going to run the
    commands).
    target_mtime# newer ()# build a pair of lists (sources, targets) where  source is newer# newer_pairwise ()# If the target doesn't even exist, then it's definitely out-of-date.# Otherwise we have to find out the hard way: if *any* source file# is more recent than 'target', then 'target' is out-of-date and# we can immediately return true.  If we fall through to the end# of the loop, then 'target' is up-to-date and we return false.# blow up when we stat() the file# missing source dropped from#  target's dependency list# missing source means target is#  out-of-date# newer_group ()b'distutils.dep_util

Utility functions for simple, timestamp-based dependency of files
and groups of files; also, function based entirely on such
timestamp dependency analysis.'u'distutils.dep_util

Utility functions for simple, timestamp-based dependency of files
and groups of files; also, function based entirely on such
timestamp dependency analysis.'b'Return true if 'source' exists and is more recently modified than
    'target', or if 'source' exists and 'target' doesn't.  Return false if
    both exist and 'target' is the same age or younger than 'source'.
    Raise DistutilsFileError if 'source' does not exist.
    'u'Return true if 'source' exists and is more recently modified than
    'target', or if 'source' exists and 'target' doesn't.  Return false if
    both exist and 'target' is the same age or younger than 'source'.
    Raise DistutilsFileError if 'source' does not exist.
    'b'file '%s' does not exist'u'file '%s' does not exist'b'Walk two filename lists in parallel, testing if each source is newer
    than its corresponding target.  Return a pair of lists (sources,
    targets) where source is newer than target, according to the semantics
    of 'newer()'.
    'u'Walk two filename lists in parallel, testing if each source is newer
    than its corresponding target.  Return a pair of lists (sources,
    targets) where source is newer than target, according to the semantics
    of 'newer()'.
    'b''sources' and 'targets' must be same length'u''sources' and 'targets' must be same length'b'Return true if 'target' is out-of-date with respect to any file
    listed in 'sources'.  In other words, if 'target' exists and is newer
    than every file in 'sources', return false; otherwise return true.
    'missing' controls what we do when a source file is missing; the
    default ("error") is to blow up with an OSError from inside 'stat()';
    if it is "ignore", we silently drop any missing source files; if it is
    "newer", any missing source files make us assume that 'target' is
    out-of-date (this is handy in "dry-run" mode: it'll make you pretend to
    carry out commands that wouldn't work because inputs are missing, but
    that doesn't matter because you're not actually going to run the
    commands).
    'u'Return true if 'target' is out-of-date with respect to any file
    listed in 'sources'.  In other words, if 'target' exists and is newer
    than every file in 'sources', return false; otherwise return true.
    'missing' controls what we do when a source file is missing; the
    default ("error") is to blow up with an OSError from inside 'stat()';
    if it is "ignore", we silently drop any missing source files; if it is
    "newer", any missing source files make us assume that 'target' is
    out-of-date (this is handy in "dry-run" mode: it'll make you pretend to
    carry out commands that wouldn't work because inputs are missing, but
    that doesn't matter because you're not actually going to run the
    commands).
    'u'Python39.lib.distutils.dep_util'u'lib.distutils.dep_util'u'distutils.dep_util'u'dep_util'
Module difflib -- helpers for computing deltas between objects.

Function get_close_matches(word, possibilities, n=3, cutoff=0.6):
    Use SequenceMatcher to return list of the best "good enough" matches.

Function context_diff(a, b):
    For two lists of strings, return a delta in context diff format.

Function ndiff(a, b):
    Return a delta: the difference between `a` and `b` (lists of strings).

Function restore(delta, which):
    Return one of the two sequences that generated an ndiff delta.

Function unified_diff(a, b):
    For two lists of strings, return a delta in unified diff format.

Class SequenceMatcher:
    A flexible class for comparing pairs of sequences of any type.

Class Differ:
    For producing human-readable deltas from sequences of lines of text.

Class HtmlDiff:
    For producing HTML side by side comparison with change highlights.
get_close_matchesSequenceMatcherDifferIS_CHARACTER_JUNKIS_LINE_JUNKcontext_diffunified_diffdiff_bytesHtmlDiffMatch_nlargesta b size_calculate_ratio
    SequenceMatcher is a flexible class for comparing pairs of sequences of
    any type, so long as the sequence elements are hashable.  The basic
    algorithm predates, and is a little fancier than, an algorithm
    published in the late 1980's by Ratcliff and Obershelp under the
    hyperbolic name "gestalt pattern matching".  The basic idea is to find
    the longest contiguous matching subsequence that contains no "junk"
    elements (R-O doesn't address junk).  The same idea is then applied
    recursively to the pieces of the sequences to the left and to the right
    of the matching subsequence.  This does not yield minimal edit
    sequences, but does tend to yield matches that "look right" to people.

    SequenceMatcher tries to compute a "human-friendly diff" between two
    sequences.  Unlike e.g. UNIX(tm) diff, the fundamental notion is the
    longest *contiguous* & junk-free matching subsequence.  That's what
    catches peoples' eyes.  The Windows(tm) windiff has another interesting
    notion, pairing up elements that appear uniquely in each sequence.
    That, and the method here, appear to yield more intuitive difference
    reports than does diff.  This method appears to be the least vulnerable
    to synching up on blocks of "junk lines", though (like blank lines in
    ordinary text files, or maybe "<P>" lines in HTML files).  That may be
    because this is the only method of the 3 that has a *concept* of
    "junk" <wink>.

    Example, comparing two strings, and considering blanks to be "junk":

    >>> s = SequenceMatcher(lambda x: x == " ",
    ...                     "private Thread currentThread;",
    ...                     "private volatile Thread currentThread;")
    >>>

    .ratio() returns a float in [0, 1], measuring the "similarity" of the
    sequences.  As a rule of thumb, a .ratio() value over 0.6 means the
    sequences are close matches:

    >>> print(round(s.ratio(), 3))
    0.866
    >>>

    If you're only interested in where the sequences match,
    .get_matching_blocks() is handy:

    >>> for block in s.get_matching_blocks():
    ...     print("a[%d] and b[%d] match for %d elements" % block)
    a[0] and b[0] match for 8 elements
    a[8] and b[17] match for 21 elements
    a[29] and b[38] match for 0 elements

    Note that the last tuple returned by .get_matching_blocks() is always a
    dummy, (len(a), len(b), 0), and this is the only case in which the last
    tuple element (number of elements matched) is 0.

    If you want to know how to change the first sequence into the second,
    use .get_opcodes():

    >>> for opcode in s.get_opcodes():
    ...     print("%6s a[%d:%d] b[%d:%d]" % opcode)
     equal a[0:8] b[0:8]
    insert a[8:8] b[8:17]
     equal a[8:29] b[17:38]

    See the Differ class for a fancy human-friendly file differencer, which
    uses SequenceMatcher both to compare sequences of lines, and to compare
    sequences of characters within similar (near-matching) lines.

    See also function get_close_matches() in this module, which shows how
    simple code building on SequenceMatcher can be used to do useful work.

    Timing:  Basic R-O is cubic time worst case and quadratic time expected
    case.  SequenceMatcher is quadratic time for the worst case and has
    expected-case behavior dependent in a complicated way on how many
    elements the sequences have in common; best case time is linear.

    Methods:

    __init__(isjunk=None, a='', b='')
        Construct a SequenceMatcher.

    set_seqs(a, b)
        Set the two sequences to be compared.

    set_seq1(a)
        Set the first sequence to be compared.

    set_seq2(b)
        Set the second sequence to be compared.

    find_longest_match(alo=0, ahi=None, blo=0, bhi=None)
        Find longest matching block in a[alo:ahi] and b[blo:bhi].

    get_matching_blocks()
        Return list of triples describing matching subsequences.

    get_opcodes()
        Return list of 5-tuples describing how to turn a into b.

    ratio()
        Return a measure of the sequences' similarity (float in [0,1]).

    quick_ratio()
        Return an upper bound on .ratio() relatively quickly.

    real_quick_ratio()
        Return an upper bound on ratio() very quickly.
    isjunkautojunkConstruct a SequenceMatcher.

        Optional arg isjunk is None (the default), or a one-argument
        function that takes a sequence element and returns true iff the
        element is junk.  None is equivalent to passing "lambda x: 0", i.e.
        no elements are considered to be junk.  For example, pass
            lambda x: x in " \t"
        if you're comparing lines as sequences of characters, and don't
        want to synch up on blanks or hard tabs.

        Optional arg a is the first of two sequences to be compared.  By
        default, an empty string.  The elements of a must be hashable.  See
        also .set_seqs() and .set_seq1().

        Optional arg b is the second of two sequences to be compared.  By
        default, an empty string.  The elements of b must be hashable. See
        also .set_seqs() and .set_seq2().

        Optional arg autojunk should be set to False to disable the
        "automatic junk heuristic" that treats popular elements as junk
        (see module documentation for more information).
        set_seqsSet the two sequences to be compared.

        >>> s = SequenceMatcher()
        >>> s.set_seqs("abcd", "bcde")
        >>> s.ratio()
        0.75
        set_seq1set_seq2Set the first sequence to be compared.

        The second sequence to be compared is not changed.

        >>> s = SequenceMatcher(None, "abcd", "bcde")
        >>> s.ratio()
        0.75
        >>> s.set_seq1("bcde")
        >>> s.ratio()
        1.0
        >>>

        SequenceMatcher computes and caches detailed information about the
        second sequence, so if you want to compare one sequence S against
        many sequences, use .set_seq2(S) once and call .set_seq1(x)
        repeatedly for each of the other sequences.

        See also set_seqs() and set_seq2().
        matching_blocksopcodesSet the second sequence to be compared.

        The first sequence to be compared is not changed.

        >>> s = SequenceMatcher(None, "abcd", "bcde")
        >>> s.ratio()
        0.75
        >>> s.set_seq2("abcd")
        >>> s.ratio()
        1.0
        >>>

        SequenceMatcher computes and caches detailed information about the
        second sequence, so if you want to compare one sequence S against
        many sequences, use .set_seq2(S) once and call .set_seq1(x)
        repeatedly for each of the other sequences.

        See also set_seqs() and set_seq1().
        fullbcount__chain_bb2jbjunkjunkbpopularpopularntestidxsfind_longest_matchaloahiblobhiFind longest matching block in a[alo:ahi] and b[blo:bhi].

        By default it will find the longest match in the entirety of a and b.

        If isjunk is not defined:

        Return (i,j,k) such that a[i:i+k] is equal to b[j:j+k], where
            alo <= i <= i+k <= ahi
            blo <= j <= j+k <= bhi
        and for all (i',j',k') meeting those conditions,
            k >= k'
            i <= i'
            and if i == i', j <= j'

        In other words, of all maximal matching blocks, return one that
        starts earliest in a, and of all those maximal matching blocks that
        start earliest in a, return the one that starts earliest in b.

        >>> s = SequenceMatcher(None, " abcd", "abcd abcd")
        >>> s.find_longest_match(0, 5, 0, 9)
        Match(a=0, b=4, size=5)

        If isjunk is defined, first the longest matching block is
        determined as above, but with the additional restriction that no
        junk element appears in the block.  Then that block is extended as
        far as possible by matching (only) junk elements on both sides.  So
        the resulting block never matches on junk except as identical junk
        happens to be adjacent to an "interesting" match.

        Here's the same example as before, but considering blanks to be
        junk.  That prevents " abcd" from matching the " abcd" at the tail
        end of the second sequence directly.  Instead only the "abcd" can
        match, and matches the leftmost "abcd" in the second sequence:

        >>> s = SequenceMatcher(lambda x: x==" ", " abcd", "abcd abcd")
        >>> s.find_longest_match(0, 5, 0, 9)
        Match(a=1, b=0, size=4)

        If no blocks match, return (alo, blo, 0).

        >>> s = SequenceMatcher(None, "ab", "c")
        >>> s.find_longest_match(0, 2, 0, 1)
        Match(a=0, b=0, size=0)
        isbjunkbestibestjbestsizej2lennothingj2lengetnewj2lenget_matching_blocksReturn list of triples describing matching subsequences.

        Each triple is of the form (i, j, n), and means that
        a[i:i+n] == b[j:j+n].  The triples are monotonically increasing in
        i and in j.  New in Python 2.5, it's also guaranteed that if
        (i, j, n) and (i', j', n') are adjacent triples in the list, and
        the second is not the last triple in the list, then i+n != i' or
        j+n != j'.  IOW, adjacent triples never describe adjacent equal
        blocks.

        The last triple is a dummy, (len(a), len(b), 0), and is the only
        triple with n==0.

        >>> s = SequenceMatcher(None, "abxcd", "abcd")
        >>> list(s.get_matching_blocks())
        [Match(a=0, b=0, size=2), Match(a=3, b=2, size=2), Match(a=5, b=4, size=0)]
        lalbj1k1non_adjacentk2get_opcodesReturn list of 5-tuples describing how to turn a into b.

        Each tuple is of the form (tag, i1, i2, j1, j2).  The first tuple
        has i1 == j1 == 0, and remaining tuples have i1 == the i2 from the
        tuple preceding it, and likewise for j1 == the previous j2.

        The tags are strings, with these meanings:

        'replace':  a[i1:i2] should be replaced by b[j1:j2]
        'delete':   a[i1:i2] should be deleted.
                    Note that j1==j2 in this case.
        'insert':   b[j1:j2] should be inserted at a[i1:i1].
                    Note that i1==i2 in this case.
        'equal':    a[i1:i2] == b[j1:j2]

        >>> a = "qabxcd"
        >>> b = "abycdf"
        >>> s = SequenceMatcher(None, a, b)
        >>> for tag, i1, i2, j1, j2 in s.get_opcodes():
        ...    print(("%7s a[%d:%d] (%s) b[%d:%d] (%s)" %
        ...           (tag, i1, i2, a[i1:i2], j1, j2, b[j1:j2])))
         delete a[0:1] (q) b[0:0] ()
          equal a[1:3] (ab) b[0:2] (ab)
        replace a[3:4] (x) b[2:3] (y)
          equal a[4:6] (cd) b[3:5] (cd)
         insert a[6:6] () b[5:6] (f)
        answeraibjequalget_grouped_opcodes Isolate change clusters by eliminating ranges with no changes.

        Return a generator of groups with up to n lines of context.
        Each group is in the same format as returned by get_opcodes().

        >>> from pprint import pprint
        >>> a = list(map(str, range(1,40)))
        >>> b = a[:]
        >>> b[8:8] = ['i']     # Make an insertion
        >>> b[20] += 'x'       # Make a replacement
        >>> b[23:28] = []      # Make a deletion
        >>> b[30] += 'y'       # Make another replacement
        >>> pprint(list(SequenceMatcher(None,a,b).get_grouped_opcodes()))
        [[('equal', 5, 8, 5, 8), ('insert', 8, 8, 8, 9), ('equal', 8, 11, 9, 12)],
         [('equal', 16, 19, 17, 20),
          ('replace', 19, 20, 20, 21),
          ('equal', 20, 22, 21, 23),
          ('delete', 22, 27, 23, 23),
          ('equal', 27, 30, 23, 26)],
         [('equal', 31, 34, 27, 30),
          ('replace', 34, 35, 30, 31),
          ('equal', 35, 38, 31, 34)]]
        codesnnratioReturn a measure of the sequences' similarity (float in [0,1]).

        Where T is the total number of elements in both sequences, and
        M is the number of matches, this is 2.0*M / T.
        Note that this is 1 if the sequences are identical, and 0 if
        they have nothing in common.

        .ratio() is expensive to compute if you haven't already computed
        .get_matching_blocks() or .get_opcodes(), in which case you may
        want to try .quick_ratio() or .real_quick_ratio() first to get an
        upper bound.

        >>> s = SequenceMatcher(None, "abcd", "bcde")
        >>> s.ratio()
        0.75
        >>> s.quick_ratio()
        0.75
        >>> s.real_quick_ratio()
        1.0
        triplequick_ratioReturn an upper bound on ratio() relatively quickly.

        This isn't defined beyond that it is an upper bound on .ratio(), and
        is faster to compute.
        availavailhasnumbreal_quick_ratioReturn an upper bound on ratio() very quickly.

        This isn't defined beyond that it is an upper bound on .ratio(), and
        is faster to compute than either .ratio() or .quick_ratio().
        0.6possibilitiesUse SequenceMatcher to return list of the best "good enough" matches.

    word is a sequence for which close matches are desired (typically a
    string).

    possibilities is a list of sequences against which to match word
    (typically a list of strings).

    Optional arg n (default 3) is the maximum number of close matches to
    return.  n must be > 0.

    Optional arg cutoff (default 0.6) is a float in [0, 1].  Possibilities
    that don't score at least that similar to word are ignored.

    The best (no more than n) matches among the possibilities are returned
    in a list, sorted by similarity score, most similar first.

    >>> get_close_matches("appel", ["ape", "apple", "peach", "puppy"])
    ['apple', 'ape']
    >>> import keyword as _keyword
    >>> get_close_matches("wheel", _keyword.kwlist)
    ['while']
    >>> get_close_matches("Apple", _keyword.kwlist)
    []
    >>> get_close_matches("accept", _keyword.kwlist)
    ['except']
    n must be > 0: %rcutoff must be in [0.0, 1.0]: %rscore_keep_original_wstag_sReplace whitespace with the original whitespace characters in `s`tag_c
    Differ is a class for comparing sequences of lines of text, and
    producing human-readable differences or deltas.  Differ uses
    SequenceMatcher both to compare sequences of lines, and to compare
    sequences of characters within similar (near-matching) lines.

    Each line of a Differ delta begins with a two-letter code:

        '- '    line unique to sequence 1
        '+ '    line unique to sequence 2
        '  '    line common to both sequences
        '? '    line not present in either input sequence

    Lines beginning with '? ' attempt to guide the eye to intraline
    differences, and were not present in either input sequence.  These lines
    can be confusing if the sequences contain tab characters.

    Note that Differ makes no claim to produce a *minimal* diff.  To the
    contrary, minimal diffs are often counter-intuitive, because they synch
    up anywhere possible, sometimes accidental matches 100 pages apart.
    Restricting synch points to contiguous matches preserves some notion of
    locality, at the occasional cost of producing a longer diff.

    Example: Comparing two texts.

    First we set up the texts, sequences of individual single-line strings
    ending with newlines (such sequences can also be obtained from the
    `readlines()` method of file-like objects):

    >>> text1 = '''  1. Beautiful is better than ugly.
    ...   2. Explicit is better than implicit.
    ...   3. Simple is better than complex.
    ...   4. Complex is better than complicated.
    ... '''.splitlines(keepends=True)
    >>> len(text1)
    4
    >>> text1[0][-1]
    '\n'
    >>> text2 = '''  1. Beautiful is better than ugly.
    ...   3.   Simple is better than complex.
    ...   4. Complicated is better than complex.
    ...   5. Flat is better than nested.
    ... '''.splitlines(keepends=True)

    Next we instantiate a Differ object:

    >>> d = Differ()

    Note that when instantiating a Differ object we may pass functions to
    filter out line and character 'junk'.  See Differ.__init__ for details.

    Finally, we compare the two:

    >>> result = list(d.compare(text1, text2))

    'result' is a list of strings, so let's pretty-print it:

    >>> from pprint import pprint as _pprint
    >>> _pprint(result)
    ['    1. Beautiful is better than ugly.\n',
     '-   2. Explicit is better than implicit.\n',
     '-   3. Simple is better than complex.\n',
     '+   3.   Simple is better than complex.\n',
     '?     ++\n',
     '-   4. Complex is better than complicated.\n',
     '?            ^                     ---- ^\n',
     '+   4. Complicated is better than complex.\n',
     '?           ++++ ^                      ^\n',
     '+   5. Flat is better than nested.\n']

    As a single multi-line string it looks like this:

    >>> print(''.join(result), end="")
        1. Beautiful is better than ugly.
    -   2. Explicit is better than implicit.
    -   3. Simple is better than complex.
    +   3.   Simple is better than complex.
    ?     ++
    -   4. Complex is better than complicated.
    ?            ^                     ---- ^
    +   4. Complicated is better than complex.
    ?           ++++ ^                      ^
    +   5. Flat is better than nested.

    Methods:

    __init__(linejunk=None, charjunk=None)
        Construct a text differencer, with optional filters.

    compare(a, b)
        Compare two sequences of lines; generate the resulting delta.
    linejunkcharjunk
        Construct a text differencer, with optional filters.

        The two optional keyword parameters are for filter functions:

        - `linejunk`: A function that should accept a single string argument,
          and return true iff the string is junk. The module-level function
          `IS_LINE_JUNK` may be used to filter out lines without visible
          characters, except for at most one splat ('#').  It is recommended
          to leave linejunk None; the underlying SequenceMatcher class has
          an adaptive notion of "noise" lines that's better than any static
          definition the author has ever been able to craft.

        - `charjunk`: A function that should accept a string of length 1. The
          module-level function `IS_CHARACTER_JUNK` may be used to filter out
          whitespace characters (a blank or tab; **note**: bad idea to include
          newline in this!).  Use of IS_CHARACTER_JUNK is recommended.
        
        Compare two sequences of lines; generate the resulting delta.

        Each sequence must contain individual single-line strings ending with
        newlines. Such sequences can be obtained from the `readlines()` method
        of file-like objects.  The delta generated also consists of newline-
        terminated strings, ready to be printed as-is via the writeline()
        method of a file-like object.

        Example:

        >>> print(''.join(Differ().compare('one\ntwo\nthree\n'.splitlines(True),
        ...                                'ore\ntree\nemu\n'.splitlines(True))),
        ...       end="")
        - one
        ?  ^
        + ore
        ?  ^
        - two
        - three
        ?  -
        + tree
        + emu
        cruncher_fancy_replace_dumpGenerate comparison results for a same-tagged range._plain_replace
        When replacing one block of lines with another, search the blocks
        for *similar* lines; the best-matching pair (if any) is used as a
        synch point, and intraline difference marking is done on the
        similar pair. Lots of work, but often worth it.

        Example:

        >>> d = Differ()
        >>> results = d._fancy_replace(['abcDefghiJkl\n'], 0, 1,
        ...                            ['abcdefGhijkl\n'], 0, 1)
        >>> print(''.join(results), end="")
        - abcDefghiJkl
        ?    ^  ^  ^
        + abcdefGhijkl
        ?    ^  ^  ^
        0.74best_ratioeqieqjbest_ibest_j_fancy_helperaeltbeltatagsbtagsai1ai2bj1bj2_qformatalinebline
        Format "?" output and deal with tabs.

        Example:

        >>> d = Differ()
        >>> results = d._qformat('\tabcDefghiJkl\n', '\tabcdefGhijkl\n',
        ...                      '  ^ ^  ^      ', '  ^ ^  ^      ')
        >>> for line in results: print(repr(line))
        ...
        '- \tabcDefghiJkl\n'
        '? \t ^ ^  ^\n'
        '+ \tabcdefGhijkl\n'
        '? \t ^ ^  ^\n'
        - ? + \s*(?:#\s*)?$pat
    Return True for ignorable line: iff `line` is blank or contains a single '#'.

    Examples:

    >>> IS_LINE_JUNK('\n')
    True
    >>> IS_LINE_JUNK('  #   \n')
    True
    >>> IS_LINE_JUNK('hello\n')
    False
    
    Return True for ignorable character: iff `ch` is a space or tab.

    Examples:

    >>> IS_CHARACTER_JUNK(' ')
    True
    >>> IS_CHARACTER_JUNK('\t')
    True
    >>> IS_CHARACTER_JUNK('\n')
    False
    >>> IS_CHARACTER_JUNK('x')
    False
    _format_range_unifiedConvert range to the "ed" formatbeginning{},{}fromfiledatetofiledatelineterm
    Compare two sequences of lines; generate the delta as a unified diff.

    Unified diffs are a compact way of showing line changes and a few
    lines of context.  The number of context lines is set by 'n' which
    defaults to three.

    By default, the diff control lines (those with ---, +++, or @@) are
    created with a trailing newline.  This is helpful so that inputs
    created from file.readlines() result in diffs that are suitable for
    file.writelines() since both the inputs and outputs have trailing
    newlines.

    For inputs that do not have trailing newlines, set the lineterm
    argument to "" so that the output will be uniformly newline free.

    The unidiff format normally has a header for filenames and modification
    times.  Any or all of these may be specified using strings for
    'fromfile', 'tofile', 'fromfiledate', and 'tofiledate'.
    The modification times are normally expressed in the ISO 8601 format.

    Example:

    >>> for line in unified_diff('one two three four'.split(),
    ...             'zero one tree four'.split(), 'Original', 'Current',
    ...             '2005-01-26 23:30:50', '2010-04-02 10:20:52',
    ...             lineterm=''):
    ...     print(line)                 # doctest: +NORMALIZE_WHITESPACE
    --- Original        2005-01-26 23:30:50
    +++ Current         2010-04-02 10:20:52
    @@ -1,4 +1,4 @@
    +zero
     one
    -two
    -three
    +tree
     four
    _check_types	{}fromdatetodate--- {}{}{}+++ {}{}{}file1_rangefile2_range@@ -{} +{} @@{}_format_range_context
    Compare two sequences of lines; generate the delta as a context diff.

    Context diffs are a compact way of showing line changes and a few
    lines of context.  The number of context lines is set by 'n' which
    defaults to three.

    By default, the diff control lines (those with *** or ---) are
    created with a trailing newline.  This is helpful so that inputs
    created from file.readlines() result in diffs that are suitable for
    file.writelines() since both the inputs and outputs have trailing
    newlines.

    For inputs that do not have trailing newlines, set the lineterm
    argument to "" so that the output will be uniformly newline free.

    The context diff format normally has a header for filenames and
    modification times.  Any or all of these may be specified using
    strings for 'fromfile', 'tofile', 'fromfiledate', and 'tofiledate'.
    The modification times are normally expressed in the ISO 8601 format.
    If not specified, the strings default to blanks.

    Example:

    >>> print(''.join(context_diff('one\ntwo\nthree\nfour\n'.splitlines(True),
    ...       'zero\none\ntree\nfour\n'.splitlines(True), 'Original', 'Current')),
    ...       end="")
    *** Original
    --- Current
    ***************
    *** 1,4 ****
      one
    ! two
    ! three
      four
    --- 1,4 ----
    + zero
      one
    ! tree
      four
    ! *** {}{}{}****************** {} ****{}--- {} ----{}lines to compare must be str, not %s (%r)all arguments must be str, not: %rdfunc
    Compare `a` and `b`, two sequences of lines represented as bytes rather
    than str. This is a wrapper for `dfunc`, which is typically either
    unified_diff() or context_diff(). Inputs are losslessly converted to
    strings so that `dfunc` only has to worry about strings, and encoded
    back to bytes on return. This is necessary to compare files with
    unknown or inconsistent encoding. All other inputs (except `n`) must be
    bytes rather than str.
    all arguments must be bytes, not %s (%r)
    Compare `a` and `b` (lists of strings); return a `Differ`-style delta.

    Optional keyword parameters `linejunk` and `charjunk` are for filter
    functions, or can be None:

    - linejunk: A function that should accept a single string argument and
      return true iff the string is junk.  The default is None, and is
      recommended; the underlying SequenceMatcher class has an adaptive
      notion of "noise" lines.

    - charjunk: A function that accepts a character (string of length
      1), and returns true iff the character is junk. The default is
      the module-level function IS_CHARACTER_JUNK, which filters out
      whitespace characters (a blank or tab; note: it's a bad idea to
      include newline in this!).

    Tools/scripts/ndiff.py is a command-line front-end to this function.

    Example:

    >>> diff = ndiff('one\ntwo\nthree\n'.splitlines(keepends=True),
    ...              'ore\ntree\nemu\n'.splitlines(keepends=True))
    >>> print(''.join(diff), end="")
    - one
    ?  ^
    + ore
    ?  ^
    - two
    - three
    ?  -
    + tree
    + emu
    _mdifffromlinestolinesReturns generator yielding marked up from/to side by side differences.

    Arguments:
    fromlines -- list of text lines to compared to tolines
    tolines -- list of text lines to be compared to fromlines
    context -- number of context lines to display on each side of difference,
               if None, all from/to text lines will be generated.
    linejunk -- passed on to ndiff (see ndiff documentation)
    charjunk -- passed on to ndiff (see ndiff documentation)

    This function returns an iterator which returns a tuple:
    (from line tuple, to line tuple, boolean flag)

    from/to line tuple -- (line num, line text)
        line num -- integer or None (to indicate a context separation)
        line text -- original line text with following markers inserted:
            '\0+' -- marks start of added text
            '\0-' -- marks start of deleted text
            '\0^' -- marks start of changed text
            '\1' -- marks end of added/deleted/changed text

    boolean flag -- None indicates context separation, True indicates
        either "from" or "to" line contains a change, otherwise False.

    This function/iterator was originally developed to generate side by side
    file difference for making HTML pages (see HtmlDiff class for example
    usage).

    Note, this function utilizes the ndiff function to generate the side by
    side difference markup.  Optional ndiff arguments may be passed to this
    function and they in turn will be passed to ndiff.
    (\++|\-+|\^+)change_rediff_lines_iterator_make_lineformat_keysidenum_linesReturns line of text with user's change markup and line formatting.

        lines -- list of lines from the ndiff generator to produce a line of
                 text from.  When producing the line of text to return, the
                 lines used are removed from this list.
        format_key -- '+' return first line in list with "add" markup around
                          the entire line.
                      '-' return first line in list with "delete" markup around
                          the entire line.
                      '?' return first line in list with add/delete/change
                          intraline markup (indices obtained from second line)
                      None return first line in list with no markup
        side -- indice into the num_lines list (0=from,1=to)
        num_lines -- from/to current line number.  This is NOT intended to be a
                     passed parameter.  It is present as a keyword argument to
                     maintain memory of the current line numbers between calls
                     of this function.

        Note, this function is purposefully not defined at the module scope so
        that data it needs from its parent function (within whose context it
        is defined) does not need to be of module scope.
        sub_inforecord_sub_infomatch_object_line_iteratorYields from/to lines of text with a change indication.

        This function is an iterator.  It itself pulls lines from a
        differencing iterator, processes them and yields them.  When it can
        it yields both a "from" and a "to" line, otherwise it will yield one
        or the other.  In addition to yielding the lines of from/to text, a
        boolean flag is yielded to indicate if the text line(s) have
        differences in them.

        Note, this function is purposefully not defined at the module scope so
        that data it needs from its parent function (within whose context it
        is defined) does not need to be of module scope.
        num_blanks_pendingnum_blanks_to_yield-?+?--++--?+--+from_lineto_line-+?-?++--+-_line_pair_iteratorYields from/to lines of text with a change indication.

        This function is an iterator.  It itself pulls lines from the line
        iterator.  Its difference from that iterator is that this function
        always yields a pair of from/to text lines (with the change
        indication).  If necessary it will collect single from/to lines
        until it has a matching pair from/to pair to yield.

        Note, this function is purposefully not defined at the module scope so
        that data it needs from its parent function (within whose context it
        is defined) does not need to be of module scope.
        line_iteratorfound_difffromDiffto_diffline_pair_iteratorlines_to_writecontextLines
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
          "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html>

<head>
    <meta http-equiv="Content-Type"
          content="text/html; charset=%(charset)s" />
    <title></title>
    <style type="text/css">%(styles)s
    </style>
</head>

<body>
    %(table)s%(legend)s
</body>

</html>_file_template
        table.diff {font-family:Courier; border:medium;}
        .diff_header {background-color:#e0e0e0}
        td.diff_header {text-align:right}
        .diff_next {background-color:#c0c0c0}
        .diff_add {background-color:#aaffaa}
        .diff_chg {background-color:#ffff77}
        .diff_sub {background-color:#ffaaaa}_styles
    <table class="diff" id="difflib_chg_%(prefix)s_top"
           cellspacing="0" cellpadding="0" rules="groups" >
        <colgroup></colgroup> <colgroup></colgroup> <colgroup></colgroup>
        <colgroup></colgroup> <colgroup></colgroup> <colgroup></colgroup>
        %(header_row)s
        <tbody>
%(data_rows)s        </tbody>
    </table>_table_template
    <table class="diff" summary="Legends">
        <tr> <th colspan="2"> Legends </th> </tr>
        <tr> <td> <table border="" summary="Colors">
                      <tr><th> Colors </th> </tr>
                      <tr><td class="diff_add">&nbsp;Added&nbsp;</td></tr>
                      <tr><td class="diff_chg">Changed</td> </tr>
                      <tr><td class="diff_sub">Deleted</td> </tr>
                  </table></td>
             <td> <table border="" summary="Links">
                      <tr><th colspan="2"> Links </th> </tr>
                      <tr><td>(f)irst change</td> </tr>
                      <tr><td>(n)ext change</td> </tr>
                      <tr><td>(t)op</td> </tr>
                  </table></td> </tr>
    </table>_legendFor producing HTML side by side comparison with change highlights.

    This class can be used to create an HTML table (or a complete HTML file
    containing the table) showing a side by side, line by line comparison
    of text with inter-line and intra-line change highlights.  The table can
    be generated in either full or contextual difference mode.

    The following methods are provided for HTML generation:

    make_table -- generates HTML for a single side by side table
    make_file -- generates complete HTML file with a single side by side table

    See tools/scripts/diff.py for an example usage of this class.
    _default_prefixwrapcolumnHtmlDiff instance initializer

        Arguments:
        tabsize -- tab stop spacing, defaults to 8.
        wrapcolumn -- column number where lines are broken and wrapped,
            defaults to None where lines are not wrapped.
        linejunk,charjunk -- keyword arguments passed into ndiff() (used by
            HtmlDiff() to generate the side by side HTML differences).  See
            ndiff() documentation for argument default values and descriptions.
        _tabsize_wrapcolumn_linejunk_charjunkfromdesctodescnumlinesReturns HTML file of side by side comparison with change highlights

        Arguments:
        fromlines -- list of "from" lines
        tolines -- list of "to" lines
        fromdesc -- "from" file column header string
        todesc -- "to" file column header string
        context -- set to True for contextual differences (defaults to False
            which shows full differences).
        numlines -- number of context lines.  When context is set True,
            controls number of lines displayed before and after the change.
            When context is False, controls the number of lines to place
            the "next" link anchors before the next change (so click of
            "next" link jumps to just before the change).
        charset -- charset of the HTML document
        styleslegendmake_tabletable_tab_newline_replaceReturns from/to line lists with tabs expanded and newlines removed.

        Instead of tab characters being replaced by the number of spaces
        needed to fill in to the next tab stop, this function will fill
        the space with tab characters.  This is done so that the difference
        algorithms can identify changes in a file when tabs are replaced by
        spaces and vice versa.  At the end of the HTML generation, the tab
        characters will be replaced with a nonbreakable space.
        expand_tabs_split_linedata_listBuilds list of text lines by splitting text lines at wrap point

        This function will determine if the input text line needs to be
        wrapped (split) into separate lines.  If so, the first wrap point
        will be determined and the first line appended to the output
        text line list.  This function is used recursively to handle
        the second part of the split line to further split it.
        line1line2_line_wrapperdiffsReturns iterator that splits (wraps) mdiff text linesfromdatatodatafromlinefromtexttolinetotext_collect_linesCollects mdiff output into separate lists

        Before storing the mdiff from/to data into a list, it is converted
        into a single line of text with HTML markup.
        flaglist_format_linelinenumReturns HTML markup of "from" / "to" text lines

        side -- 0 or 1 indicating "from" or "to" text
        flag -- indicates if difference on line
        linenum -- line number (used for line number column)
        text -- line text to be marked up
        %d id="%s%s"_prefix&nbsp;<td class="diff_header"%s>%s</td><td nowrap="nowrap">%s</td>_make_prefixCreate unique anchor prefixesfrom%d_fromprefixto%d_toprefix_convert_flagsMakes list of "next" linksnext_idnext_hrefnum_chgin_change id="difflib_chg_%s_%d"<a href="#difflib_chg_%s_%d">n</a><td></td><td>&nbsp;No Differences Found&nbsp;</td><td></td><td>&nbsp;Empty File&nbsp;</td><a href="#difflib_chg_%s_0">f</a><a href="#difflib_chg_%s_top">t</a>Returns HTML table of side by side comparison with change highlights

        Arguments:
        fromlines -- list of "from" lines
        tolines -- list of "to" lines
        fromdesc -- "from" file column header string
        todesc -- "to" file column header string
        context -- set to True for contextual differences (defaults to False
            which shows full differences).
        numlines -- number of context lines.  When context is set True,
            controls number of lines displayed before and after the change.
            When context is False, controls the number of lines to place
            the "next" link anchors before the next change (so click of
            "next" link jumps to just before the change).
        context_lines            <tr><td class="diff_next"%s>%s</td>%s<td class="diff_next">%s</td>%s</tr>
        </tbody>        
        <tbody>
<thead><tr>%s%s%s%s</tr></thead><th class="diff_next"><br /></th><th colspan="2" class="diff_header">%s</th>header_rowdata_rows +<span class="diff_add"> -<span class="diff_sub"> ^<span class="diff_chg"></span>which
    Generate one of the two sequences that generated a delta.

    Given a `delta` produced by `Differ.compare()` or `ndiff()`, extract
    lines originating from file 1 or 2 (parameter `which`), stripping off line
    prefixes.

    Examples:

    >>> diff = ndiff('one\ntwo\nthree\n'.splitlines(keepends=True),
    ...              'ore\ntree\nemu\n'.splitlines(keepends=True))
    >>> diff = list(diff)
    >>> print(''.join(restore(diff, 1)), end="")
    one
    two
    three
    >>> print(''.join(restore(diff, 2)), end="")
    ore
    tree
    emu
    unknown delta choice (must be 1 or 2): %rprefixes# Members:# a#      first sequence# b#      second sequence; differences are computed as "what do#      we need to do to 'a' to change it into 'b'?"# b2j#      for x in b, b2j[x] is a list of the indices (into b)#      at which x appears; junk and popular elements do not appear# fullbcount#      for x in b, fullbcount[x] == the number of times x#      appears in b; only materialized if really needed (used#      only for computing quick_ratio())# matching_blocks#      a list of (i, j, k) triples, where a[i:i+k] == b[j:j+k];#      ascending & non-overlapping in i and in j; terminated by#      a dummy (len(a), len(b), 0) sentinel# opcodes#      a list of (tag, i1, i2, j1, j2) tuples, where tag is#      one of#          'replace'   a[i1:i2] should be replaced by b[j1:j2]#          'delete'    a[i1:i2] should be deleted#          'insert'    b[j1:j2] should be inserted#          'equal'     a[i1:i2] == b[j1:j2]# isjunk#      a user-supplied function taking a sequence element and#      returning true iff the element is "junk" -- this has#      subtle but helpful effects on the algorithm, which I'll#      get around to writing up someday <0.9 wink>.#      DON'T USE!  Only __chain_b uses this.  Use "in self.bjunk".# bjunk#      the items in b for which isjunk is True.# bpopular#      nonjunk items in b treated as junk by the heuristic (if used).# For each element x in b, set b2j[x] to a list of the indices in# b where x appears; the indices are in increasing order; note that# the number of times x appears in b is len(b2j[x]) ...# when self.isjunk is defined, junk elements don't show up in this# map at all, which stops the central find_longest_match method# from starting any matching block at a junk element ...# b2j also does not contain entries for "popular" elements, meaning# elements that account for more than 1 + 1% of the total elements, and# when the sequence is reasonably large (>= 200 elements); this can# be viewed as an adaptive notion of semi-junk, and yields an enormous# speedup when, e.g., comparing program files with hundreds of# instances of "return NULL;" ...# note that this is only called when b changes; so for cross-product# kinds of matches, it's best to call set_seq2 once, then set_seq1# repeatedly# Because isjunk is a user-defined (not C) function, and we test# for junk a LOT, it's important to minimize the number of calls.# Before the tricks described here, __chain_b was by far the most# time-consuming routine in the whole module!  If anyone sees# Jim Roskind, thank him again for profile.py -- I never would# have guessed that.# The first trick is to build b2j ignoring the possibility# of junk.  I.e., we don't call isjunk at all yet.  Throwing# out the junk later is much cheaper than building b2j "right"# from the start.# Purge junk elements# separate loop avoids separate list of keys# Purge popular elements that are not junk# ditto; as fast for 1% deletion# CAUTION:  stripping common prefix or suffix would be incorrect.# E.g.,#    ab#    acab# Longest matching block is "ab", but if common prefix is# stripped, it's "a" (tied with "b").  UNIX(tm) diff does so# strip, so ends up claiming that ab is changed to acab by# inserting "ca" in the middle.  That's minimal but unintuitive:# "it's obvious" that someone inserted "ac" at the front.# Windiff ends up at the same place as diff, but by pairing up# the unique 'b's and then matching the first two 'a's.# find longest junk-free match# during an iteration of the loop, j2len[j] = length of longest# junk-free match ending with a[i-1] and b[j]# look at all instances of a[i] in b; note that because# b2j has no junk keys, the loop is skipped if a[i] is junk# a[i] matches b[j]# Extend the best by non-junk elements on each end.  In particular,# "popular" non-junk elements aren't in b2j, which greatly speeds# the inner loop above, but also means "the best" match so far# doesn't contain any junk *or* popular non-junk elements.# Now that we have a wholly interesting match (albeit possibly# empty!), we may as well suck up the matching junk on each# side of it too.  Can't think of a good reason not to, and it# saves post-processing the (possibly considerable) expense of# figuring out what to do with it.  In the case of an empty# interesting match, this is clearly the right thing to do,# because no other kind of match is possible in the regions.# This is most naturally expressed as a recursive algorithm, but# at least one user bumped into extreme use cases that exceeded# the recursion limit on their box.  So, now we maintain a list# ('queue`) of blocks we still need to look at, and append partial# results to `matching_blocks` in a loop; the matches are sorted# at the end.# a[alo:i] vs b[blo:j] unknown# a[i:i+k] same as b[j:j+k]# a[i+k:ahi] vs b[j+k:bhi] unknown# if k is 0, there was no matching block# It's possible that we have adjacent equal blocks in the# matching_blocks list now.  Starting with 2.5, this code was added# to collapse them.# Is this block adjacent to i1, j1, k1?# Yes, so collapse them -- this just increases the length of# the first block by the length of the second, and the first# block so lengthened remains the block to compare against.# Not adjacent.  Remember the first block (k1==0 means it's# the dummy we started with), and make the second block the# new block to compare against.# invariant:  we've pumped out correct diffs to change# a[:i] into b[:j], and the next matching block is# a[ai:ai+size] == b[bj:bj+size].  So we need to pump# out a diff to change a[i:ai] into b[j:bj], pump out# the matching block, and move (i,j) beyond the match# the list of matching blocks is terminated by a# sentinel with size 0# Fixup leading and trailing groups if they show no changes.# End the current group and start a new one whenever# there is a large range with no changes.# viewing a and b as multisets, set matches to the cardinality# of their intersection; this counts the number of matches# without regard to order, so is clearly an upper bound# avail[x] is the number of times x appears in 'b' less the# number of times we've seen it in 'a' so far ... kinda# can't have more matches than the number of elements in the# shorter sequence# Move the best scorers to head of list# Strip scores for the best n matches# dump the shorter block first -- reduces the burden on short-term# memory if the blocks are of very different sizes# don't synch up unless the lines have a similarity score of at# least cutoff; best_ratio tracks the best score seen so far# 1st indices of equal lines (if any)# search for the pair that matches best without being identical# (identical lines must be junk lines, & we don't want to synch up# on junk -- unless we have to)# computing similarity is expensive, so use the quick# upper bounds first -- have seen this speed up messy# compares by a factor of 3.# note that ratio() is only expensive to compute the first# time it's called on a sequence pair; the expensive part# of the computation is cached by cruncher# no non-identical "pretty close" pair# no identical pair either -- treat it as a straight replace# no close pair, but an identical pair -- synch up on that# there's a close pair, so forget the identical pair (if any)# a[best_i] very similar to b[best_j]; eqi is None iff they're not# identical# pump out diffs from before the synch point# do intraline marking on the synch pair# pump out a '-', '?', '+', '?' quad for the synched lines# the synch pair is identical# pump out diffs from after the synch point# With respect to junk, an earlier version of ndiff simply refused to# *start* a match with a junk element.  The result was cases like this:#     before: private Thread currentThread;#     after:  private volatile Thread currentThread;# If you consider whitespace to be junk, the longest contiguous match# not starting with junk is "e Thread currentThread".  So ndiff reported# that "e volatil" was inserted between the 't' and the 'e' in "private".# While an accurate view, to people that's absurd.  The current version# looks for matching blocks that are entirely junk-free, then extends the# longest one of those as far as possible but only with matching junk.# So now "currentThread" is matched, then extended to suck up the# preceding blank; then "private" is matched, and extended to suck up the# following blank; then "Thread" is matched; and finally ndiff reports# that "volatile " was inserted before "Thread".  The only quibble# remaining is that perhaps it was really the case that " volatile"# was inserted after "private".  I can live with that <wink>.###  Unified Diff# Per the diff spec at http://www.unix.org/single_unix_specification/# lines start numbering with one# empty ranges begin at line just before the range###  Context Diff# See http://www.unix.org/single_unix_specification/# Checking types is weird, but the alternative is garbled output when# someone passes mixed bytes and str to {unified,context}_diff(). E.g.# without this check, passing filenames as bytes results in output like#   --- b'oldfile.txt'#   +++ b'newfile.txt'# because of how str.format() incorporates bytes objects.# regular expression for finding intraline change indices# create the difference iterator to generate the differences# Handle case where no user markup is to be added, just return line of# text with user's line format to allow for usage of the line number.# Handle case of intraline changes# find intraline changes (store change type and indices in tuples)# process each tuple inserting our special marks that won't be# noticed by an xml/html escaper.# Handle case of add/delete entire line# if line of text is just a newline, insert a space so there is# something for the user to highlight and see.# insert marks that won't be noticed by an xml/html escaper.# Return line of text, first allow user's line formatter to do its# thing (such as adding the line number) then replace the special# marks with what the user's change markup.# Load up next 4 lines so we can look ahead, create strings which# are a concatenation of the first character of each of the 4 lines# so we can do some very readable comparisons.# When no more lines, pump out any remaining blank lines so the# corresponding add/delete lines get a matching blank line so# all line pairs get yielded at the next level.# simple intraline change# in delete block, add block coming: we do NOT want to get# caught up on blank lines yet, just process the delete line# in delete block and see an intraline change or unchanged line# coming: yield the delete line and then blanks# intraline change# delete FROM line# in add block, delete block coming: we do NOT want to get# caught up on blank lines yet, just process the add line# will be leaving an add block: yield blanks then add line# inside an add block, yield the add line# unchanged text, yield it to both sides# Catch up on the blank lines so when we yield the next from/to# pair, they are lined up.# Collecting lines of text until we have a from/to pair# Once we have a pair, remove them from the collection and yield it# Handle case where user does not want context differencing, just yield# them up without doing anything else with them.# Handle case where user wants context differencing.  We must do some# storage of lines until we know for sure that they are to be yielded.# Store lines up until we find a difference, note use of a# circular queue because we only need to keep around what# we need for context.# Yield lines that we have collected so far, but first yield# the user's separator.# Now yield the context lines after the change# If another change within the context, extend the context# Catch exception from next() and return normally# hide real spaces# expand tabs into spaces# replace spaces from expanded tabs back into tab characters# (we'll replace them with markup after we do differencing)# if blank line or context separator, just add it to the output list# if line text doesn't need wrapping, just add it to the output list# scan text looking for the wrap point, keeping track if the wrap# point is inside markers# wrap point is inside text, break it up into separate lines# if wrap point is inside markers, place end marker at end of first# line and start marker at beginning of second line because each# line will have its own table tag markup around it.# tack on first line onto the output list# use this routine again to wrap the remaining text# pull from/to data and flags from mdiff iterator# check for context separators and pass them through# for each from/to line split it at the wrap column to form# list of text lines.# yield from/to line in pairs inserting blank lines as# necessary when one side has more wrapped lines# pull from/to data and flags from mdiff style iterator# store HTML markup of the lines into the lists# exceptions occur for lines where context separators go# handle blank lines where linenum is '>' or ''# replace those things that would get confused with HTML symbols# make space non-breakable so they don't get compressed or line wrapped# Generate a unique anchor prefix so multiple tables# can exist on the same HTML page without conflicts.# store prefixes so line format method has access# all anchor names will be generated using the unique "to" prefix# process change flags, generating middle column of next anchors/links# at the beginning of a change, drop an anchor a few lines# (the context lines) before the change for the previous# link# at the beginning of a change, drop a link to the next# change# check for cases where there is no content to avoid exceptions# if not a change on first line, drop a link# redo the last link to link to the top# make unique anchor prefixes so that multiple tables may exist# on the same page without conflict.# change tabs to spaces before it gets more difficult after we insert# markup# create diffs iterator which generates side by side from/to data# set up iterator to wrap lines that exceed desired width# collect up from/to lines and flags into lists (also format the lines)# mdiff yields None on separator lines skip the bogus ones# generated for the first lineb'
Module difflib -- helpers for computing deltas between objects.

Function get_close_matches(word, possibilities, n=3, cutoff=0.6):
    Use SequenceMatcher to return list of the best "good enough" matches.

Function context_diff(a, b):
    For two lists of strings, return a delta in context diff format.

Function ndiff(a, b):
    Return a delta: the difference between `a` and `b` (lists of strings).

Function restore(delta, which):
    Return one of the two sequences that generated an ndiff delta.

Function unified_diff(a, b):
    For two lists of strings, return a delta in unified diff format.

Class SequenceMatcher:
    A flexible class for comparing pairs of sequences of any type.

Class Differ:
    For producing human-readable deltas from sequences of lines of text.

Class HtmlDiff:
    For producing HTML side by side comparison with change highlights.
'u'
Module difflib -- helpers for computing deltas between objects.

Function get_close_matches(word, possibilities, n=3, cutoff=0.6):
    Use SequenceMatcher to return list of the best "good enough" matches.

Function context_diff(a, b):
    For two lists of strings, return a delta in context diff format.

Function ndiff(a, b):
    Return a delta: the difference between `a` and `b` (lists of strings).

Function restore(delta, which):
    Return one of the two sequences that generated an ndiff delta.

Function unified_diff(a, b):
    For two lists of strings, return a delta in unified diff format.

Class SequenceMatcher:
    A flexible class for comparing pairs of sequences of any type.

Class Differ:
    For producing human-readable deltas from sequences of lines of text.

Class HtmlDiff:
    For producing HTML side by side comparison with change highlights.
'b'get_close_matches'u'get_close_matches'b'ndiff'u'ndiff'b'restore'u'restore'b'SequenceMatcher'u'SequenceMatcher'b'Differ'u'Differ'b'IS_CHARACTER_JUNK'u'IS_CHARACTER_JUNK'b'IS_LINE_JUNK'u'IS_LINE_JUNK'b'context_diff'u'context_diff'b'unified_diff'u'unified_diff'b'diff_bytes'u'diff_bytes'b'HtmlDiff'u'HtmlDiff'b'Match'u'Match'b'a b size'u'a b size'b'
    SequenceMatcher is a flexible class for comparing pairs of sequences of
    any type, so long as the sequence elements are hashable.  The basic
    algorithm predates, and is a little fancier than, an algorithm
    published in the late 1980's by Ratcliff and Obershelp under the
    hyperbolic name "gestalt pattern matching".  The basic idea is to find
    the longest contiguous matching subsequence that contains no "junk"
    elements (R-O doesn't address junk).  The same idea is then applied
    recursively to the pieces of the sequences to the left and to the right
    of the matching subsequence.  This does not yield minimal edit
    sequences, but does tend to yield matches that "look right" to people.

    SequenceMatcher tries to compute a "human-friendly diff" between two
    sequences.  Unlike e.g. UNIX(tm) diff, the fundamental notion is the
    longest *contiguous* & junk-free matching subsequence.  That's what
    catches peoples' eyes.  The Windows(tm) windiff has another interesting
    notion, pairing up elements that appear uniquely in each sequence.
    That, and the method here, appear to yield more intuitive difference
    reports than does diff.  This method appears to be the least vulnerable
    to synching up on blocks of "junk lines", though (like blank lines in
    ordinary text files, or maybe "<P>" lines in HTML files).  That may be
    because this is the only method of the 3 that has a *concept* of
    "junk" <wink>.

    Example, comparing two strings, and considering blanks to be "junk":

    >>> s = SequenceMatcher(lambda x: x == " ",
    ...                     "private Thread currentThread;",
    ...                     "private volatile Thread currentThread;")
    >>>

    .ratio() returns a float in [0, 1], measuring the "similarity" of the
    sequences.  As a rule of thumb, a .ratio() value over 0.6 means the
    sequences are close matches:

    >>> print(round(s.ratio(), 3))
    0.866
    >>>

    If you're only interested in where the sequences match,
    .get_matching_blocks() is handy:

    >>> for block in s.get_matching_blocks():
    ...     print("a[%d] and b[%d] match for %d elements" % block)
    a[0] and b[0] match for 8 elements
    a[8] and b[17] match for 21 elements
    a[29] and b[38] match for 0 elements

    Note that the last tuple returned by .get_matching_blocks() is always a
    dummy, (len(a), len(b), 0), and this is the only case in which the last
    tuple element (number of elements matched) is 0.

    If you want to know how to change the first sequence into the second,
    use .get_opcodes():

    >>> for opcode in s.get_opcodes():
    ...     print("%6s a[%d:%d] b[%d:%d]" % opcode)
     equal a[0:8] b[0:8]
    insert a[8:8] b[8:17]
     equal a[8:29] b[17:38]

    See the Differ class for a fancy human-friendly file differencer, which
    uses SequenceMatcher both to compare sequences of lines, and to compare
    sequences of characters within similar (near-matching) lines.

    See also function get_close_matches() in this module, which shows how
    simple code building on SequenceMatcher can be used to do useful work.

    Timing:  Basic R-O is cubic time worst case and quadratic time expected
    case.  SequenceMatcher is quadratic time for the worst case and has
    expected-case behavior dependent in a complicated way on how many
    elements the sequences have in common; best case time is linear.

    Methods:

    __init__(isjunk=None, a='', b='')
        Construct a SequenceMatcher.

    set_seqs(a, b)
        Set the two sequences to be compared.

    set_seq1(a)
        Set the first sequence to be compared.

    set_seq2(b)
        Set the second sequence to be compared.

    find_longest_match(alo=0, ahi=None, blo=0, bhi=None)
        Find longest matching block in a[alo:ahi] and b[blo:bhi].

    get_matching_blocks()
        Return list of triples describing matching subsequences.

    get_opcodes()
        Return list of 5-tuples describing how to turn a into b.

    ratio()
        Return a measure of the sequences' similarity (float in [0,1]).

    quick_ratio()
        Return an upper bound on .ratio() relatively quickly.

    real_quick_ratio()
        Return an upper bound on ratio() very quickly.
    'u'
    SequenceMatcher is a flexible class for comparing pairs of sequences of
    any type, so long as the sequence elements are hashable.  The basic
    algorithm predates, and is a little fancier than, an algorithm
    published in the late 1980's by Ratcliff and Obershelp under the
    hyperbolic name "gestalt pattern matching".  The basic idea is to find
    the longest contiguous matching subsequence that contains no "junk"
    elements (R-O doesn't address junk).  The same idea is then applied
    recursively to the pieces of the sequences to the left and to the right
    of the matching subsequence.  This does not yield minimal edit
    sequences, but does tend to yield matches that "look right" to people.

    SequenceMatcher tries to compute a "human-friendly diff" between two
    sequences.  Unlike e.g. UNIX(tm) diff, the fundamental notion is the
    longest *contiguous* & junk-free matching subsequence.  That's what
    catches peoples' eyes.  The Windows(tm) windiff has another interesting
    notion, pairing up elements that appear uniquely in each sequence.
    That, and the method here, appear to yield more intuitive difference
    reports than does diff.  This method appears to be the least vulnerable
    to synching up on blocks of "junk lines", though (like blank lines in
    ordinary text files, or maybe "<P>" lines in HTML files).  That may be
    because this is the only method of the 3 that has a *concept* of
    "junk" <wink>.

    Example, comparing two strings, and considering blanks to be "junk":

    >>> s = SequenceMatcher(lambda x: x == " ",
    ...                     "private Thread currentThread;",
    ...                     "private volatile Thread currentThread;")
    >>>

    .ratio() returns a float in [0, 1], measuring the "similarity" of the
    sequences.  As a rule of thumb, a .ratio() value over 0.6 means the
    sequences are close matches:

    >>> print(round(s.ratio(), 3))
    0.866
    >>>

    If you're only interested in where the sequences match,
    .get_matching_blocks() is handy:

    >>> for block in s.get_matching_blocks():
    ...     print("a[%d] and b[%d] match for %d elements" % block)
    a[0] and b[0] match for 8 elements
    a[8] and b[17] match for 21 elements
    a[29] and b[38] match for 0 elements

    Note that the last tuple returned by .get_matching_blocks() is always a
    dummy, (len(a), len(b), 0), and this is the only case in which the last
    tuple element (number of elements matched) is 0.

    If you want to know how to change the first sequence into the second,
    use .get_opcodes():

    >>> for opcode in s.get_opcodes():
    ...     print("%6s a[%d:%d] b[%d:%d]" % opcode)
     equal a[0:8] b[0:8]
    insert a[8:8] b[8:17]
     equal a[8:29] b[17:38]

    See the Differ class for a fancy human-friendly file differencer, which
    uses SequenceMatcher both to compare sequences of lines, and to compare
    sequences of characters within similar (near-matching) lines.

    See also function get_close_matches() in this module, which shows how
    simple code building on SequenceMatcher can be used to do useful work.

    Timing:  Basic R-O is cubic time worst case and quadratic time expected
    case.  SequenceMatcher is quadratic time for the worst case and has
    expected-case behavior dependent in a complicated way on how many
    elements the sequences have in common; best case time is linear.

    Methods:

    __init__(isjunk=None, a='', b='')
        Construct a SequenceMatcher.

    set_seqs(a, b)
        Set the two sequences to be compared.

    set_seq1(a)
        Set the first sequence to be compared.

    set_seq2(b)
        Set the second sequence to be compared.

    find_longest_match(alo=0, ahi=None, blo=0, bhi=None)
        Find longest matching block in a[alo:ahi] and b[blo:bhi].

    get_matching_blocks()
        Return list of triples describing matching subsequences.

    get_opcodes()
        Return list of 5-tuples describing how to turn a into b.

    ratio()
        Return a measure of the sequences' similarity (float in [0,1]).

    quick_ratio()
        Return an upper bound on .ratio() relatively quickly.

    real_quick_ratio()
        Return an upper bound on ratio() very quickly.
    'b'Construct a SequenceMatcher.

        Optional arg isjunk is None (the default), or a one-argument
        function that takes a sequence element and returns true iff the
        element is junk.  None is equivalent to passing "lambda x: 0", i.e.
        no elements are considered to be junk.  For example, pass
            lambda x: x in " \t"
        if you're comparing lines as sequences of characters, and don't
        want to synch up on blanks or hard tabs.

        Optional arg a is the first of two sequences to be compared.  By
        default, an empty string.  The elements of a must be hashable.  See
        also .set_seqs() and .set_seq1().

        Optional arg b is the second of two sequences to be compared.  By
        default, an empty string.  The elements of b must be hashable. See
        also .set_seqs() and .set_seq2().

        Optional arg autojunk should be set to False to disable the
        "automatic junk heuristic" that treats popular elements as junk
        (see module documentation for more information).
        'u'Construct a SequenceMatcher.

        Optional arg isjunk is None (the default), or a one-argument
        function that takes a sequence element and returns true iff the
        element is junk.  None is equivalent to passing "lambda x: 0", i.e.
        no elements are considered to be junk.  For example, pass
            lambda x: x in " \t"
        if you're comparing lines as sequences of characters, and don't
        want to synch up on blanks or hard tabs.

        Optional arg a is the first of two sequences to be compared.  By
        default, an empty string.  The elements of a must be hashable.  See
        also .set_seqs() and .set_seq1().

        Optional arg b is the second of two sequences to be compared.  By
        default, an empty string.  The elements of b must be hashable. See
        also .set_seqs() and .set_seq2().

        Optional arg autojunk should be set to False to disable the
        "automatic junk heuristic" that treats popular elements as junk
        (see module documentation for more information).
        'b'Set the two sequences to be compared.

        >>> s = SequenceMatcher()
        >>> s.set_seqs("abcd", "bcde")
        >>> s.ratio()
        0.75
        'u'Set the two sequences to be compared.

        >>> s = SequenceMatcher()
        >>> s.set_seqs("abcd", "bcde")
        >>> s.ratio()
        0.75
        'b'Set the first sequence to be compared.

        The second sequence to be compared is not changed.

        >>> s = SequenceMatcher(None, "abcd", "bcde")
        >>> s.ratio()
        0.75
        >>> s.set_seq1("bcde")
        >>> s.ratio()
        1.0
        >>>

        SequenceMatcher computes and caches detailed information about the
        second sequence, so if you want to compare one sequence S against
        many sequences, use .set_seq2(S) once and call .set_seq1(x)
        repeatedly for each of the other sequences.

        See also set_seqs() and set_seq2().
        'u'Set the first sequence to be compared.

        The second sequence to be compared is not changed.

        >>> s = SequenceMatcher(None, "abcd", "bcde")
        >>> s.ratio()
        0.75
        >>> s.set_seq1("bcde")
        >>> s.ratio()
        1.0
        >>>

        SequenceMatcher computes and caches detailed information about the
        second sequence, so if you want to compare one sequence S against
        many sequences, use .set_seq2(S) once and call .set_seq1(x)
        repeatedly for each of the other sequences.

        See also set_seqs() and set_seq2().
        'b'Set the second sequence to be compared.

        The first sequence to be compared is not changed.

        >>> s = SequenceMatcher(None, "abcd", "bcde")
        >>> s.ratio()
        0.75
        >>> s.set_seq2("abcd")
        >>> s.ratio()
        1.0
        >>>

        SequenceMatcher computes and caches detailed information about the
        second sequence, so if you want to compare one sequence S against
        many sequences, use .set_seq2(S) once and call .set_seq1(x)
        repeatedly for each of the other sequences.

        See also set_seqs() and set_seq1().
        'u'Set the second sequence to be compared.

        The first sequence to be compared is not changed.

        >>> s = SequenceMatcher(None, "abcd", "bcde")
        >>> s.ratio()
        0.75
        >>> s.set_seq2("abcd")
        >>> s.ratio()
        1.0
        >>>

        SequenceMatcher computes and caches detailed information about the
        second sequence, so if you want to compare one sequence S against
        many sequences, use .set_seq2(S) once and call .set_seq1(x)
        repeatedly for each of the other sequences.

        See also set_seqs() and set_seq1().
        'b'Find longest matching block in a[alo:ahi] and b[blo:bhi].

        By default it will find the longest match in the entirety of a and b.

        If isjunk is not defined:

        Return (i,j,k) such that a[i:i+k] is equal to b[j:j+k], where
            alo <= i <= i+k <= ahi
            blo <= j <= j+k <= bhi
        and for all (i',j',k') meeting those conditions,
            k >= k'
            i <= i'
            and if i == i', j <= j'

        In other words, of all maximal matching blocks, return one that
        starts earliest in a, and of all those maximal matching blocks that
        start earliest in a, return the one that starts earliest in b.

        >>> s = SequenceMatcher(None, " abcd", "abcd abcd")
        >>> s.find_longest_match(0, 5, 0, 9)
        Match(a=0, b=4, size=5)

        If isjunk is defined, first the longest matching block is
        determined as above, but with the additional restriction that no
        junk element appears in the block.  Then that block is extended as
        far as possible by matching (only) junk elements on both sides.  So
        the resulting block never matches on junk except as identical junk
        happens to be adjacent to an "interesting" match.

        Here's the same example as before, but considering blanks to be
        junk.  That prevents " abcd" from matching the " abcd" at the tail
        end of the second sequence directly.  Instead only the "abcd" can
        match, and matches the leftmost "abcd" in the second sequence:

        >>> s = SequenceMatcher(lambda x: x==" ", " abcd", "abcd abcd")
        >>> s.find_longest_match(0, 5, 0, 9)
        Match(a=1, b=0, size=4)

        If no blocks match, return (alo, blo, 0).

        >>> s = SequenceMatcher(None, "ab", "c")
        >>> s.find_longest_match(0, 2, 0, 1)
        Match(a=0, b=0, size=0)
        'u'Find longest matching block in a[alo:ahi] and b[blo:bhi].

        By default it will find the longest match in the entirety of a and b.

        If isjunk is not defined:

        Return (i,j,k) such that a[i:i+k] is equal to b[j:j+k], where
            alo <= i <= i+k <= ahi
            blo <= j <= j+k <= bhi
        and for all (i',j',k') meeting those conditions,
            k >= k'
            i <= i'
            and if i == i', j <= j'

        In other words, of all maximal matching blocks, return one that
        starts earliest in a, and of all those maximal matching blocks that
        start earliest in a, return the one that starts earliest in b.

        >>> s = SequenceMatcher(None, " abcd", "abcd abcd")
        >>> s.find_longest_match(0, 5, 0, 9)
        Match(a=0, b=4, size=5)

        If isjunk is defined, first the longest matching block is
        determined as above, but with the additional restriction that no
        junk element appears in the block.  Then that block is extended as
        far as possible by matching (only) junk elements on both sides.  So
        the resulting block never matches on junk except as identical junk
        happens to be adjacent to an "interesting" match.

        Here's the same example as before, but considering blanks to be
        junk.  That prevents " abcd" from matching the " abcd" at the tail
        end of the second sequence directly.  Instead only the "abcd" can
        match, and matches the leftmost "abcd" in the second sequence:

        >>> s = SequenceMatcher(lambda x: x==" ", " abcd", "abcd abcd")
        >>> s.find_longest_match(0, 5, 0, 9)
        Match(a=1, b=0, size=4)

        If no blocks match, return (alo, blo, 0).

        >>> s = SequenceMatcher(None, "ab", "c")
        >>> s.find_longest_match(0, 2, 0, 1)
        Match(a=0, b=0, size=0)
        'b'Return list of triples describing matching subsequences.

        Each triple is of the form (i, j, n), and means that
        a[i:i+n] == b[j:j+n].  The triples are monotonically increasing in
        i and in j.  New in Python 2.5, it's also guaranteed that if
        (i, j, n) and (i', j', n') are adjacent triples in the list, and
        the second is not the last triple in the list, then i+n != i' or
        j+n != j'.  IOW, adjacent triples never describe adjacent equal
        blocks.

        The last triple is a dummy, (len(a), len(b), 0), and is the only
        triple with n==0.

        >>> s = SequenceMatcher(None, "abxcd", "abcd")
        >>> list(s.get_matching_blocks())
        [Match(a=0, b=0, size=2), Match(a=3, b=2, size=2), Match(a=5, b=4, size=0)]
        'u'Return list of triples describing matching subsequences.

        Each triple is of the form (i, j, n), and means that
        a[i:i+n] == b[j:j+n].  The triples are monotonically increasing in
        i and in j.  New in Python 2.5, it's also guaranteed that if
        (i, j, n) and (i', j', n') are adjacent triples in the list, and
        the second is not the last triple in the list, then i+n != i' or
        j+n != j'.  IOW, adjacent triples never describe adjacent equal
        blocks.

        The last triple is a dummy, (len(a), len(b), 0), and is the only
        triple with n==0.

        >>> s = SequenceMatcher(None, "abxcd", "abcd")
        >>> list(s.get_matching_blocks())
        [Match(a=0, b=0, size=2), Match(a=3, b=2, size=2), Match(a=5, b=4, size=0)]
        'b'Return list of 5-tuples describing how to turn a into b.

        Each tuple is of the form (tag, i1, i2, j1, j2).  The first tuple
        has i1 == j1 == 0, and remaining tuples have i1 == the i2 from the
        tuple preceding it, and likewise for j1 == the previous j2.

        The tags are strings, with these meanings:

        'replace':  a[i1:i2] should be replaced by b[j1:j2]
        'delete':   a[i1:i2] should be deleted.
                    Note that j1==j2 in this case.
        'insert':   b[j1:j2] should be inserted at a[i1:i1].
                    Note that i1==i2 in this case.
        'equal':    a[i1:i2] == b[j1:j2]

        >>> a = "qabxcd"
        >>> b = "abycdf"
        >>> s = SequenceMatcher(None, a, b)
        >>> for tag, i1, i2, j1, j2 in s.get_opcodes():
        ...    print(("%7s a[%d:%d] (%s) b[%d:%d] (%s)" %
        ...           (tag, i1, i2, a[i1:i2], j1, j2, b[j1:j2])))
         delete a[0:1] (q) b[0:0] ()
          equal a[1:3] (ab) b[0:2] (ab)
        replace a[3:4] (x) b[2:3] (y)
          equal a[4:6] (cd) b[3:5] (cd)
         insert a[6:6] () b[5:6] (f)
        'u'Return list of 5-tuples describing how to turn a into b.

        Each tuple is of the form (tag, i1, i2, j1, j2).  The first tuple
        has i1 == j1 == 0, and remaining tuples have i1 == the i2 from the
        tuple preceding it, and likewise for j1 == the previous j2.

        The tags are strings, with these meanings:

        'replace':  a[i1:i2] should be replaced by b[j1:j2]
        'delete':   a[i1:i2] should be deleted.
                    Note that j1==j2 in this case.
        'insert':   b[j1:j2] should be inserted at a[i1:i1].
                    Note that i1==i2 in this case.
        'equal':    a[i1:i2] == b[j1:j2]

        >>> a = "qabxcd"
        >>> b = "abycdf"
        >>> s = SequenceMatcher(None, a, b)
        >>> for tag, i1, i2, j1, j2 in s.get_opcodes():
        ...    print(("%7s a[%d:%d] (%s) b[%d:%d] (%s)" %
        ...           (tag, i1, i2, a[i1:i2], j1, j2, b[j1:j2])))
         delete a[0:1] (q) b[0:0] ()
          equal a[1:3] (ab) b[0:2] (ab)
        replace a[3:4] (x) b[2:3] (y)
          equal a[4:6] (cd) b[3:5] (cd)
         insert a[6:6] () b[5:6] (f)
        'b'equal'u'equal'b' Isolate change clusters by eliminating ranges with no changes.

        Return a generator of groups with up to n lines of context.
        Each group is in the same format as returned by get_opcodes().

        >>> from pprint import pprint
        >>> a = list(map(str, range(1,40)))
        >>> b = a[:]
        >>> b[8:8] = ['i']     # Make an insertion
        >>> b[20] += 'x'       # Make a replacement
        >>> b[23:28] = []      # Make a deletion
        >>> b[30] += 'y'       # Make another replacement
        >>> pprint(list(SequenceMatcher(None,a,b).get_grouped_opcodes()))
        [[('equal', 5, 8, 5, 8), ('insert', 8, 8, 8, 9), ('equal', 8, 11, 9, 12)],
         [('equal', 16, 19, 17, 20),
          ('replace', 19, 20, 20, 21),
          ('equal', 20, 22, 21, 23),
          ('delete', 22, 27, 23, 23),
          ('equal', 27, 30, 23, 26)],
         [('equal', 31, 34, 27, 30),
          ('replace', 34, 35, 30, 31),
          ('equal', 35, 38, 31, 34)]]
        'u' Isolate change clusters by eliminating ranges with no changes.

        Return a generator of groups with up to n lines of context.
        Each group is in the same format as returned by get_opcodes().

        >>> from pprint import pprint
        >>> a = list(map(str, range(1,40)))
        >>> b = a[:]
        >>> b[8:8] = ['i']     # Make an insertion
        >>> b[20] += 'x'       # Make a replacement
        >>> b[23:28] = []      # Make a deletion
        >>> b[30] += 'y'       # Make another replacement
        >>> pprint(list(SequenceMatcher(None,a,b).get_grouped_opcodes()))
        [[('equal', 5, 8, 5, 8), ('insert', 8, 8, 8, 9), ('equal', 8, 11, 9, 12)],
         [('equal', 16, 19, 17, 20),
          ('replace', 19, 20, 20, 21),
          ('equal', 20, 22, 21, 23),
          ('delete', 22, 27, 23, 23),
          ('equal', 27, 30, 23, 26)],
         [('equal', 31, 34, 27, 30),
          ('replace', 34, 35, 30, 31),
          ('equal', 35, 38, 31, 34)]]
        'b'Return a measure of the sequences' similarity (float in [0,1]).

        Where T is the total number of elements in both sequences, and
        M is the number of matches, this is 2.0*M / T.
        Note that this is 1 if the sequences are identical, and 0 if
        they have nothing in common.

        .ratio() is expensive to compute if you haven't already computed
        .get_matching_blocks() or .get_opcodes(), in which case you may
        want to try .quick_ratio() or .real_quick_ratio() first to get an
        upper bound.

        >>> s = SequenceMatcher(None, "abcd", "bcde")
        >>> s.ratio()
        0.75
        >>> s.quick_ratio()
        0.75
        >>> s.real_quick_ratio()
        1.0
        'u'Return a measure of the sequences' similarity (float in [0,1]).

        Where T is the total number of elements in both sequences, and
        M is the number of matches, this is 2.0*M / T.
        Note that this is 1 if the sequences are identical, and 0 if
        they have nothing in common.

        .ratio() is expensive to compute if you haven't already computed
        .get_matching_blocks() or .get_opcodes(), in which case you may
        want to try .quick_ratio() or .real_quick_ratio() first to get an
        upper bound.

        >>> s = SequenceMatcher(None, "abcd", "bcde")
        >>> s.ratio()
        0.75
        >>> s.quick_ratio()
        0.75
        >>> s.real_quick_ratio()
        1.0
        'b'Return an upper bound on ratio() relatively quickly.

        This isn't defined beyond that it is an upper bound on .ratio(), and
        is faster to compute.
        'u'Return an upper bound on ratio() relatively quickly.

        This isn't defined beyond that it is an upper bound on .ratio(), and
        is faster to compute.
        'b'Return an upper bound on ratio() very quickly.

        This isn't defined beyond that it is an upper bound on .ratio(), and
        is faster to compute than either .ratio() or .quick_ratio().
        'u'Return an upper bound on ratio() very quickly.

        This isn't defined beyond that it is an upper bound on .ratio(), and
        is faster to compute than either .ratio() or .quick_ratio().
        'b'Use SequenceMatcher to return list of the best "good enough" matches.

    word is a sequence for which close matches are desired (typically a
    string).

    possibilities is a list of sequences against which to match word
    (typically a list of strings).

    Optional arg n (default 3) is the maximum number of close matches to
    return.  n must be > 0.

    Optional arg cutoff (default 0.6) is a float in [0, 1].  Possibilities
    that don't score at least that similar to word are ignored.

    The best (no more than n) matches among the possibilities are returned
    in a list, sorted by similarity score, most similar first.

    >>> get_close_matches("appel", ["ape", "apple", "peach", "puppy"])
    ['apple', 'ape']
    >>> import keyword as _keyword
    >>> get_close_matches("wheel", _keyword.kwlist)
    ['while']
    >>> get_close_matches("Apple", _keyword.kwlist)
    []
    >>> get_close_matches("accept", _keyword.kwlist)
    ['except']
    'u'Use SequenceMatcher to return list of the best "good enough" matches.

    word is a sequence for which close matches are desired (typically a
    string).

    possibilities is a list of sequences against which to match word
    (typically a list of strings).

    Optional arg n (default 3) is the maximum number of close matches to
    return.  n must be > 0.

    Optional arg cutoff (default 0.6) is a float in [0, 1].  Possibilities
    that don't score at least that similar to word are ignored.

    The best (no more than n) matches among the possibilities are returned
    in a list, sorted by similarity score, most similar first.

    >>> get_close_matches("appel", ["ape", "apple", "peach", "puppy"])
    ['apple', 'ape']
    >>> import keyword as _keyword
    >>> get_close_matches("wheel", _keyword.kwlist)
    ['while']
    >>> get_close_matches("Apple", _keyword.kwlist)
    []
    >>> get_close_matches("accept", _keyword.kwlist)
    ['except']
    'b'n must be > 0: %r'u'n must be > 0: %r'b'cutoff must be in [0.0, 1.0]: %r'u'cutoff must be in [0.0, 1.0]: %r'b'Replace whitespace with the original whitespace characters in `s`'u'Replace whitespace with the original whitespace characters in `s`'b'
    Differ is a class for comparing sequences of lines of text, and
    producing human-readable differences or deltas.  Differ uses
    SequenceMatcher both to compare sequences of lines, and to compare
    sequences of characters within similar (near-matching) lines.

    Each line of a Differ delta begins with a two-letter code:

        '- '    line unique to sequence 1
        '+ '    line unique to sequence 2
        '  '    line common to both sequences
        '? '    line not present in either input sequence

    Lines beginning with '? ' attempt to guide the eye to intraline
    differences, and were not present in either input sequence.  These lines
    can be confusing if the sequences contain tab characters.

    Note that Differ makes no claim to produce a *minimal* diff.  To the
    contrary, minimal diffs are often counter-intuitive, because they synch
    up anywhere possible, sometimes accidental matches 100 pages apart.
    Restricting synch points to contiguous matches preserves some notion of
    locality, at the occasional cost of producing a longer diff.

    Example: Comparing two texts.

    First we set up the texts, sequences of individual single-line strings
    ending with newlines (such sequences can also be obtained from the
    `readlines()` method of file-like objects):

    >>> text1 = '''  1. Beautiful is better than ugly.
    ...   2. Explicit is better than implicit.
    ...   3. Simple is better than complex.
    ...   4. Complex is better than complicated.
    ... '''.splitlines(keepends=True)
    >>> len(text1)
    4
    >>> text1[0][-1]
    '\n'
    >>> text2 = '''  1. Beautiful is better than ugly.
    ...   3.   Simple is better than complex.
    ...   4. Complicated is better than complex.
    ...   5. Flat is better than nested.
    ... '''.splitlines(keepends=True)

    Next we instantiate a Differ object:

    >>> d = Differ()

    Note that when instantiating a Differ object we may pass functions to
    filter out line and character 'junk'.  See Differ.__init__ for details.

    Finally, we compare the two:

    >>> result = list(d.compare(text1, text2))

    'result' is a list of strings, so let's pretty-print it:

    >>> from pprint import pprint as _pprint
    >>> _pprint(result)
    ['    1. Beautiful is better than ugly.\n',
     '-   2. Explicit is better than implicit.\n',
     '-   3. Simple is better than complex.\n',
     '+   3.   Simple is better than complex.\n',
     '?     ++\n',
     '-   4. Complex is better than complicated.\n',
     '?            ^                     ---- ^\n',
     '+   4. Complicated is better than complex.\n',
     '?           ++++ ^                      ^\n',
     '+   5. Flat is better than nested.\n']

    As a single multi-line string it looks like this:

    >>> print(''.join(result), end="")
        1. Beautiful is better than ugly.
    -   2. Explicit is better than implicit.
    -   3. Simple is better than complex.
    +   3.   Simple is better than complex.
    ?     ++
    -   4. Complex is better than complicated.
    ?            ^                     ---- ^
    +   4. Complicated is better than complex.
    ?           ++++ ^                      ^
    +   5. Flat is better than nested.

    Methods:

    __init__(linejunk=None, charjunk=None)
        Construct a text differencer, with optional filters.

    compare(a, b)
        Compare two sequences of lines; generate the resulting delta.
    'u'
    Differ is a class for comparing sequences of lines of text, and
    producing human-readable differences or deltas.  Differ uses
    SequenceMatcher both to compare sequences of lines, and to compare
    sequences of characters within similar (near-matching) lines.

    Each line of a Differ delta begins with a two-letter code:

        '- '    line unique to sequence 1
        '+ '    line unique to sequence 2
        '  '    line common to both sequences
        '? '    line not present in either input sequence

    Lines beginning with '? ' attempt to guide the eye to intraline
    differences, and were not present in either input sequence.  These lines
    can be confusing if the sequences contain tab characters.

    Note that Differ makes no claim to produce a *minimal* diff.  To the
    contrary, minimal diffs are often counter-intuitive, because they synch
    up anywhere possible, sometimes accidental matches 100 pages apart.
    Restricting synch points to contiguous matches preserves some notion of
    locality, at the occasional cost of producing a longer diff.

    Example: Comparing two texts.

    First we set up the texts, sequences of individual single-line strings
    ending with newlines (such sequences can also be obtained from the
    `readlines()` method of file-like objects):

    >>> text1 = '''  1. Beautiful is better than ugly.
    ...   2. Explicit is better than implicit.
    ...   3. Simple is better than complex.
    ...   4. Complex is better than complicated.
    ... '''.splitlines(keepends=True)
    >>> len(text1)
    4
    >>> text1[0][-1]
    '\n'
    >>> text2 = '''  1. Beautiful is better than ugly.
    ...   3.   Simple is better than complex.
    ...   4. Complicated is better than complex.
    ...   5. Flat is better than nested.
    ... '''.splitlines(keepends=True)

    Next we instantiate a Differ object:

    >>> d = Differ()

    Note that when instantiating a Differ object we may pass functions to
    filter out line and character 'junk'.  See Differ.__init__ for details.

    Finally, we compare the two:

    >>> result = list(d.compare(text1, text2))

    'result' is a list of strings, so let's pretty-print it:

    >>> from pprint import pprint as _pprint
    >>> _pprint(result)
    ['    1. Beautiful is better than ugly.\n',
     '-   2. Explicit is better than implicit.\n',
     '-   3. Simple is better than complex.\n',
     '+   3.   Simple is better than complex.\n',
     '?     ++\n',
     '-   4. Complex is better than complicated.\n',
     '?            ^                     ---- ^\n',
     '+   4. Complicated is better than complex.\n',
     '?           ++++ ^                      ^\n',
     '+   5. Flat is better than nested.\n']

    As a single multi-line string it looks like this:

    >>> print(''.join(result), end="")
        1. Beautiful is better than ugly.
    -   2. Explicit is better than implicit.
    -   3. Simple is better than complex.
    +   3.   Simple is better than complex.
    ?     ++
    -   4. Complex is better than complicated.
    ?            ^                     ---- ^
    +   4. Complicated is better than complex.
    ?           ++++ ^                      ^
    +   5. Flat is better than nested.

    Methods:

    __init__(linejunk=None, charjunk=None)
        Construct a text differencer, with optional filters.

    compare(a, b)
        Compare two sequences of lines; generate the resulting delta.
    'b'
        Construct a text differencer, with optional filters.

        The two optional keyword parameters are for filter functions:

        - `linejunk`: A function that should accept a single string argument,
          and return true iff the string is junk. The module-level function
          `IS_LINE_JUNK` may be used to filter out lines without visible
          characters, except for at most one splat ('#').  It is recommended
          to leave linejunk None; the underlying SequenceMatcher class has
          an adaptive notion of "noise" lines that's better than any static
          definition the author has ever been able to craft.

        - `charjunk`: A function that should accept a string of length 1. The
          module-level function `IS_CHARACTER_JUNK` may be used to filter out
          whitespace characters (a blank or tab; **note**: bad idea to include
          newline in this!).  Use of IS_CHARACTER_JUNK is recommended.
        'u'
        Construct a text differencer, with optional filters.

        The two optional keyword parameters are for filter functions:

        - `linejunk`: A function that should accept a single string argument,
          and return true iff the string is junk. The module-level function
          `IS_LINE_JUNK` may be used to filter out lines without visible
          characters, except for at most one splat ('#').  It is recommended
          to leave linejunk None; the underlying SequenceMatcher class has
          an adaptive notion of "noise" lines that's better than any static
          definition the author has ever been able to craft.

        - `charjunk`: A function that should accept a string of length 1. The
          module-level function `IS_CHARACTER_JUNK` may be used to filter out
          whitespace characters (a blank or tab; **note**: bad idea to include
          newline in this!).  Use of IS_CHARACTER_JUNK is recommended.
        'b'
        Compare two sequences of lines; generate the resulting delta.

        Each sequence must contain individual single-line strings ending with
        newlines. Such sequences can be obtained from the `readlines()` method
        of file-like objects.  The delta generated also consists of newline-
        terminated strings, ready to be printed as-is via the writeline()
        method of a file-like object.

        Example:

        >>> print(''.join(Differ().compare('one\ntwo\nthree\n'.splitlines(True),
        ...                                'ore\ntree\nemu\n'.splitlines(True))),
        ...       end="")
        - one
        ?  ^
        + ore
        ?  ^
        - two
        - three
        ?  -
        + tree
        + emu
        'u'
        Compare two sequences of lines; generate the resulting delta.

        Each sequence must contain individual single-line strings ending with
        newlines. Such sequences can be obtained from the `readlines()` method
        of file-like objects.  The delta generated also consists of newline-
        terminated strings, ready to be printed as-is via the writeline()
        method of a file-like object.

        Example:

        >>> print(''.join(Differ().compare('one\ntwo\nthree\n'.splitlines(True),
        ...                                'ore\ntree\nemu\n'.splitlines(True))),
        ...       end="")
        - one
        ?  ^
        + ore
        ?  ^
        - two
        - three
        ?  -
        + tree
        + emu
        'b'Generate comparison results for a same-tagged range.'u'Generate comparison results for a same-tagged range.'b'
        When replacing one block of lines with another, search the blocks
        for *similar* lines; the best-matching pair (if any) is used as a
        synch point, and intraline difference marking is done on the
        similar pair. Lots of work, but often worth it.

        Example:

        >>> d = Differ()
        >>> results = d._fancy_replace(['abcDefghiJkl\n'], 0, 1,
        ...                            ['abcdefGhijkl\n'], 0, 1)
        >>> print(''.join(results), end="")
        - abcDefghiJkl
        ?    ^  ^  ^
        + abcdefGhijkl
        ?    ^  ^  ^
        'u'
        When replacing one block of lines with another, search the blocks
        for *similar* lines; the best-matching pair (if any) is used as a
        synch point, and intraline difference marking is done on the
        similar pair. Lots of work, but often worth it.

        Example:

        >>> d = Differ()
        >>> results = d._fancy_replace(['abcDefghiJkl\n'], 0, 1,
        ...                            ['abcdefGhijkl\n'], 0, 1)
        >>> print(''.join(results), end="")
        - abcDefghiJkl
        ?    ^  ^  ^
        + abcdefGhijkl
        ?    ^  ^  ^
        'b'
        Format "?" output and deal with tabs.

        Example:

        >>> d = Differ()
        >>> results = d._qformat('\tabcDefghiJkl\n', '\tabcdefGhijkl\n',
        ...                      '  ^ ^  ^      ', '  ^ ^  ^      ')
        >>> for line in results: print(repr(line))
        ...
        '- \tabcDefghiJkl\n'
        '? \t ^ ^  ^\n'
        '+ \tabcdefGhijkl\n'
        '? \t ^ ^  ^\n'
        'u'
        Format "?" output and deal with tabs.

        Example:

        >>> d = Differ()
        >>> results = d._qformat('\tabcDefghiJkl\n', '\tabcdefGhijkl\n',
        ...                      '  ^ ^  ^      ', '  ^ ^  ^      ')
        >>> for line in results: print(repr(line))
        ...
        '- \tabcDefghiJkl\n'
        '? \t ^ ^  ^\n'
        '+ \tabcdefGhijkl\n'
        '? \t ^ ^  ^\n'
        'b'- 'u'- 'b'? 'u'? 'b'+ 'u'+ 'b'\s*(?:#\s*)?$'u'\s*(?:#\s*)?$'b'
    Return True for ignorable line: iff `line` is blank or contains a single '#'.

    Examples:

    >>> IS_LINE_JUNK('\n')
    True
    >>> IS_LINE_JUNK('  #   \n')
    True
    >>> IS_LINE_JUNK('hello\n')
    False
    'u'
    Return True for ignorable line: iff `line` is blank or contains a single '#'.

    Examples:

    >>> IS_LINE_JUNK('\n')
    True
    >>> IS_LINE_JUNK('  #   \n')
    True
    >>> IS_LINE_JUNK('hello\n')
    False
    'b'
    Return True for ignorable character: iff `ch` is a space or tab.

    Examples:

    >>> IS_CHARACTER_JUNK(' ')
    True
    >>> IS_CHARACTER_JUNK('\t')
    True
    >>> IS_CHARACTER_JUNK('\n')
    False
    >>> IS_CHARACTER_JUNK('x')
    False
    'u'
    Return True for ignorable character: iff `ch` is a space or tab.

    Examples:

    >>> IS_CHARACTER_JUNK(' ')
    True
    >>> IS_CHARACTER_JUNK('\t')
    True
    >>> IS_CHARACTER_JUNK('\n')
    False
    >>> IS_CHARACTER_JUNK('x')
    False
    'b'Convert range to the "ed" format'u'Convert range to the "ed" format'b'{},{}'u'{},{}'b'
    Compare two sequences of lines; generate the delta as a unified diff.

    Unified diffs are a compact way of showing line changes and a few
    lines of context.  The number of context lines is set by 'n' which
    defaults to three.

    By default, the diff control lines (those with ---, +++, or @@) are
    created with a trailing newline.  This is helpful so that inputs
    created from file.readlines() result in diffs that are suitable for
    file.writelines() since both the inputs and outputs have trailing
    newlines.

    For inputs that do not have trailing newlines, set the lineterm
    argument to "" so that the output will be uniformly newline free.

    The unidiff format normally has a header for filenames and modification
    times.  Any or all of these may be specified using strings for
    'fromfile', 'tofile', 'fromfiledate', and 'tofiledate'.
    The modification times are normally expressed in the ISO 8601 format.

    Example:

    >>> for line in unified_diff('one two three four'.split(),
    ...             'zero one tree four'.split(), 'Original', 'Current',
    ...             '2005-01-26 23:30:50', '2010-04-02 10:20:52',
    ...             lineterm=''):
    ...     print(line)                 # doctest: +NORMALIZE_WHITESPACE
    --- Original        2005-01-26 23:30:50
    +++ Current         2010-04-02 10:20:52
    @@ -1,4 +1,4 @@
    +zero
     one
    -two
    -three
    +tree
     four
    'u'
    Compare two sequences of lines; generate the delta as a unified diff.

    Unified diffs are a compact way of showing line changes and a few
    lines of context.  The number of context lines is set by 'n' which
    defaults to three.

    By default, the diff control lines (those with ---, +++, or @@) are
    created with a trailing newline.  This is helpful so that inputs
    created from file.readlines() result in diffs that are suitable for
    file.writelines() since both the inputs and outputs have trailing
    newlines.

    For inputs that do not have trailing newlines, set the lineterm
    argument to "" so that the output will be uniformly newline free.

    The unidiff format normally has a header for filenames and modification
    times.  Any or all of these may be specified using strings for
    'fromfile', 'tofile', 'fromfiledate', and 'tofiledate'.
    The modification times are normally expressed in the ISO 8601 format.

    Example:

    >>> for line in unified_diff('one two three four'.split(),
    ...             'zero one tree four'.split(), 'Original', 'Current',
    ...             '2005-01-26 23:30:50', '2010-04-02 10:20:52',
    ...             lineterm=''):
    ...     print(line)                 # doctest: +NORMALIZE_WHITESPACE
    --- Original        2005-01-26 23:30:50
    +++ Current         2010-04-02 10:20:52
    @@ -1,4 +1,4 @@
    +zero
     one
    -two
    -three
    +tree
     four
    'b'	{}'u'	{}'b'--- {}{}{}'u'--- {}{}{}'b'+++ {}{}{}'u'+++ {}{}{}'b'@@ -{} +{} @@{}'u'@@ -{} +{} @@{}'b'
    Compare two sequences of lines; generate the delta as a context diff.

    Context diffs are a compact way of showing line changes and a few
    lines of context.  The number of context lines is set by 'n' which
    defaults to three.

    By default, the diff control lines (those with *** or ---) are
    created with a trailing newline.  This is helpful so that inputs
    created from file.readlines() result in diffs that are suitable for
    file.writelines() since both the inputs and outputs have trailing
    newlines.

    For inputs that do not have trailing newlines, set the lineterm
    argument to "" so that the output will be uniformly newline free.

    The context diff format normally has a header for filenames and
    modification times.  Any or all of these may be specified using
    strings for 'fromfile', 'tofile', 'fromfiledate', and 'tofiledate'.
    The modification times are normally expressed in the ISO 8601 format.
    If not specified, the strings default to blanks.

    Example:

    >>> print(''.join(context_diff('one\ntwo\nthree\nfour\n'.splitlines(True),
    ...       'zero\none\ntree\nfour\n'.splitlines(True), 'Original', 'Current')),
    ...       end="")
    *** Original
    --- Current
    ***************
    *** 1,4 ****
      one
    ! two
    ! three
      four
    --- 1,4 ----
    + zero
      one
    ! tree
      four
    'u'
    Compare two sequences of lines; generate the delta as a context diff.

    Context diffs are a compact way of showing line changes and a few
    lines of context.  The number of context lines is set by 'n' which
    defaults to three.

    By default, the diff control lines (those with *** or ---) are
    created with a trailing newline.  This is helpful so that inputs
    created from file.readlines() result in diffs that are suitable for
    file.writelines() since both the inputs and outputs have trailing
    newlines.

    For inputs that do not have trailing newlines, set the lineterm
    argument to "" so that the output will be uniformly newline free.

    The context diff format normally has a header for filenames and
    modification times.  Any or all of these may be specified using
    strings for 'fromfile', 'tofile', 'fromfiledate', and 'tofiledate'.
    The modification times are normally expressed in the ISO 8601 format.
    If not specified, the strings default to blanks.

    Example:

    >>> print(''.join(context_diff('one\ntwo\nthree\nfour\n'.splitlines(True),
    ...       'zero\none\ntree\nfour\n'.splitlines(True), 'Original', 'Current')),
    ...       end="")
    *** Original
    --- Current
    ***************
    *** 1,4 ****
      one
    ! two
    ! three
      four
    --- 1,4 ----
    + zero
      one
    ! tree
      four
    'b'! 'u'! 'b'*** {}{}{}'u'*** {}{}{}'b'***************'u'***************'b'*** {} ****{}'u'*** {} ****{}'b'--- {} ----{}'u'--- {} ----{}'b'lines to compare must be str, not %s (%r)'u'lines to compare must be str, not %s (%r)'b'all arguments must be str, not: %r'u'all arguments must be str, not: %r'b'
    Compare `a` and `b`, two sequences of lines represented as bytes rather
    than str. This is a wrapper for `dfunc`, which is typically either
    unified_diff() or context_diff(). Inputs are losslessly converted to
    strings so that `dfunc` only has to worry about strings, and encoded
    back to bytes on return. This is necessary to compare files with
    unknown or inconsistent encoding. All other inputs (except `n`) must be
    bytes rather than str.
    'u'
    Compare `a` and `b`, two sequences of lines represented as bytes rather
    than str. This is a wrapper for `dfunc`, which is typically either
    unified_diff() or context_diff(). Inputs are losslessly converted to
    strings so that `dfunc` only has to worry about strings, and encoded
    back to bytes on return. This is necessary to compare files with
    unknown or inconsistent encoding. All other inputs (except `n`) must be
    bytes rather than str.
    'b'all arguments must be bytes, not %s (%r)'u'all arguments must be bytes, not %s (%r)'b'
    Compare `a` and `b` (lists of strings); return a `Differ`-style delta.

    Optional keyword parameters `linejunk` and `charjunk` are for filter
    functions, or can be None:

    - linejunk: A function that should accept a single string argument and
      return true iff the string is junk.  The default is None, and is
      recommended; the underlying SequenceMatcher class has an adaptive
      notion of "noise" lines.

    - charjunk: A function that accepts a character (string of length
      1), and returns true iff the character is junk. The default is
      the module-level function IS_CHARACTER_JUNK, which filters out
      whitespace characters (a blank or tab; note: it's a bad idea to
      include newline in this!).

    Tools/scripts/ndiff.py is a command-line front-end to this function.

    Example:

    >>> diff = ndiff('one\ntwo\nthree\n'.splitlines(keepends=True),
    ...              'ore\ntree\nemu\n'.splitlines(keepends=True))
    >>> print(''.join(diff), end="")
    - one
    ?  ^
    + ore
    ?  ^
    - two
    - three
    ?  -
    + tree
    + emu
    'u'
    Compare `a` and `b` (lists of strings); return a `Differ`-style delta.

    Optional keyword parameters `linejunk` and `charjunk` are for filter
    functions, or can be None:

    - linejunk: A function that should accept a single string argument and
      return true iff the string is junk.  The default is None, and is
      recommended; the underlying SequenceMatcher class has an adaptive
      notion of "noise" lines.

    - charjunk: A function that accepts a character (string of length
      1), and returns true iff the character is junk. The default is
      the module-level function IS_CHARACTER_JUNK, which filters out
      whitespace characters (a blank or tab; note: it's a bad idea to
      include newline in this!).

    Tools/scripts/ndiff.py is a command-line front-end to this function.

    Example:

    >>> diff = ndiff('one\ntwo\nthree\n'.splitlines(keepends=True),
    ...              'ore\ntree\nemu\n'.splitlines(keepends=True))
    >>> print(''.join(diff), end="")
    - one
    ?  ^
    + ore
    ?  ^
    - two
    - three
    ?  -
    + tree
    + emu
    'b'Returns generator yielding marked up from/to side by side differences.

    Arguments:
    fromlines -- list of text lines to compared to tolines
    tolines -- list of text lines to be compared to fromlines
    context -- number of context lines to display on each side of difference,
               if None, all from/to text lines will be generated.
    linejunk -- passed on to ndiff (see ndiff documentation)
    charjunk -- passed on to ndiff (see ndiff documentation)

    This function returns an iterator which returns a tuple:
    (from line tuple, to line tuple, boolean flag)

    from/to line tuple -- (line num, line text)
        line num -- integer or None (to indicate a context separation)
        line text -- original line text with following markers inserted:
            '\0+' -- marks start of added text
            '\0-' -- marks start of deleted text
            '\0^' -- marks start of changed text
            '\1' -- marks end of added/deleted/changed text

    boolean flag -- None indicates context separation, True indicates
        either "from" or "to" line contains a change, otherwise False.

    This function/iterator was originally developed to generate side by side
    file difference for making HTML pages (see HtmlDiff class for example
    usage).

    Note, this function utilizes the ndiff function to generate the side by
    side difference markup.  Optional ndiff arguments may be passed to this
    function and they in turn will be passed to ndiff.
    'u'Returns generator yielding marked up from/to side by side differences.

    Arguments:
    fromlines -- list of text lines to compared to tolines
    tolines -- list of text lines to be compared to fromlines
    context -- number of context lines to display on each side of difference,
               if None, all from/to text lines will be generated.
    linejunk -- passed on to ndiff (see ndiff documentation)
    charjunk -- passed on to ndiff (see ndiff documentation)

    This function returns an iterator which returns a tuple:
    (from line tuple, to line tuple, boolean flag)

    from/to line tuple -- (line num, line text)
        line num -- integer or None (to indicate a context separation)
        line text -- original line text with following markers inserted:
            '\0+' -- marks start of added text
            '\0-' -- marks start of deleted text
            '\0^' -- marks start of changed text
            '\1' -- marks end of added/deleted/changed text

    boolean flag -- None indicates context separation, True indicates
        either "from" or "to" line contains a change, otherwise False.

    This function/iterator was originally developed to generate side by side
    file difference for making HTML pages (see HtmlDiff class for example
    usage).

    Note, this function utilizes the ndiff function to generate the side by
    side difference markup.  Optional ndiff arguments may be passed to this
    function and they in turn will be passed to ndiff.
    'b'(\++|\-+|\^+)'u'(\++|\-+|\^+)'b'Returns line of text with user's change markup and line formatting.

        lines -- list of lines from the ndiff generator to produce a line of
                 text from.  When producing the line of text to return, the
                 lines used are removed from this list.
        format_key -- '+' return first line in list with "add" markup around
                          the entire line.
                      '-' return first line in list with "delete" markup around
                          the entire line.
                      '?' return first line in list with add/delete/change
                          intraline markup (indices obtained from second line)
                      None return first line in list with no markup
        side -- indice into the num_lines list (0=from,1=to)
        num_lines -- from/to current line number.  This is NOT intended to be a
                     passed parameter.  It is present as a keyword argument to
                     maintain memory of the current line numbers between calls
                     of this function.

        Note, this function is purposefully not defined at the module scope so
        that data it needs from its parent function (within whose context it
        is defined) does not need to be of module scope.
        'u'Returns line of text with user's change markup and line formatting.

        lines -- list of lines from the ndiff generator to produce a line of
                 text from.  When producing the line of text to return, the
                 lines used are removed from this list.
        format_key -- '+' return first line in list with "add" markup around
                          the entire line.
                      '-' return first line in list with "delete" markup around
                          the entire line.
                      '?' return first line in list with add/delete/change
                          intraline markup (indices obtained from second line)
                      None return first line in list with no markup
        side -- indice into the num_lines list (0=from,1=to)
        num_lines -- from/to current line number.  This is NOT intended to be a
                     passed parameter.  It is present as a keyword argument to
                     maintain memory of the current line numbers between calls
                     of this function.

        Note, this function is purposefully not defined at the module scope so
        that data it needs from its parent function (within whose context it
        is defined) does not need to be of module scope.
        'b''u''b'Yields from/to lines of text with a change indication.

        This function is an iterator.  It itself pulls lines from a
        differencing iterator, processes them and yields them.  When it can
        it yields both a "from" and a "to" line, otherwise it will yield one
        or the other.  In addition to yielding the lines of from/to text, a
        boolean flag is yielded to indicate if the text line(s) have
        differences in them.

        Note, this function is purposefully not defined at the module scope so
        that data it needs from its parent function (within whose context it
        is defined) does not need to be of module scope.
        'u'Yields from/to lines of text with a change indication.

        This function is an iterator.  It itself pulls lines from a
        differencing iterator, processes them and yields them.  When it can
        it yields both a "from" and a "to" line, otherwise it will yield one
        or the other.  In addition to yielding the lines of from/to text, a
        boolean flag is yielded to indicate if the text line(s) have
        differences in them.

        Note, this function is purposefully not defined at the module scope so
        that data it needs from its parent function (within whose context it
        is defined) does not need to be of module scope.
        'b'X'u'X'b'-?+?'u'-?+?'b'--++'u'--++'b'--?+'u'--?+'b'--+'u'--+'b'-+?'u'-+?'b'-?+'u'-?+'b'+--'u'+--'b'+-'u'+-'b'Yields from/to lines of text with a change indication.

        This function is an iterator.  It itself pulls lines from the line
        iterator.  Its difference from that iterator is that this function
        always yields a pair of from/to text lines (with the change
        indication).  If necessary it will collect single from/to lines
        until it has a matching pair from/to pair to yield.

        Note, this function is purposefully not defined at the module scope so
        that data it needs from its parent function (within whose context it
        is defined) does not need to be of module scope.
        'u'Yields from/to lines of text with a change indication.

        This function is an iterator.  It itself pulls lines from the line
        iterator.  Its difference from that iterator is that this function
        always yields a pair of from/to text lines (with the change
        indication).  If necessary it will collect single from/to lines
        until it has a matching pair from/to pair to yield.

        Note, this function is purposefully not defined at the module scope so
        that data it needs from its parent function (within whose context it
        is defined) does not need to be of module scope.
        'b'
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
          "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html>

<head>
    <meta http-equiv="Content-Type"
          content="text/html; charset=%(charset)s" />
    <title></title>
    <style type="text/css">%(styles)s
    </style>
</head>

<body>
    %(table)s%(legend)s
</body>

</html>'u'
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
          "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html>

<head>
    <meta http-equiv="Content-Type"
          content="text/html; charset=%(charset)s" />
    <title></title>
    <style type="text/css">%(styles)s
    </style>
</head>

<body>
    %(table)s%(legend)s
</body>

</html>'b'
        table.diff {font-family:Courier; border:medium;}
        .diff_header {background-color:#e0e0e0}
        td.diff_header {text-align:right}
        .diff_next {background-color:#c0c0c0}
        .diff_add {background-color:#aaffaa}
        .diff_chg {background-color:#ffff77}
        .diff_sub {background-color:#ffaaaa}'u'
        table.diff {font-family:Courier; border:medium;}
        .diff_header {background-color:#e0e0e0}
        td.diff_header {text-align:right}
        .diff_next {background-color:#c0c0c0}
        .diff_add {background-color:#aaffaa}
        .diff_chg {background-color:#ffff77}
        .diff_sub {background-color:#ffaaaa}'b'
    <table class="diff" id="difflib_chg_%(prefix)s_top"
           cellspacing="0" cellpadding="0" rules="groups" >
        <colgroup></colgroup> <colgroup></colgroup> <colgroup></colgroup>
        <colgroup></colgroup> <colgroup></colgroup> <colgroup></colgroup>
        %(header_row)s
        <tbody>
%(data_rows)s        </tbody>
    </table>'u'
    <table class="diff" id="difflib_chg_%(prefix)s_top"
           cellspacing="0" cellpadding="0" rules="groups" >
        <colgroup></colgroup> <colgroup></colgroup> <colgroup></colgroup>
        <colgroup></colgroup> <colgroup></colgroup> <colgroup></colgroup>
        %(header_row)s
        <tbody>
%(data_rows)s        </tbody>
    </table>'b'
    <table class="diff" summary="Legends">
        <tr> <th colspan="2"> Legends </th> </tr>
        <tr> <td> <table border="" summary="Colors">
                      <tr><th> Colors </th> </tr>
                      <tr><td class="diff_add">&nbsp;Added&nbsp;</td></tr>
                      <tr><td class="diff_chg">Changed</td> </tr>
                      <tr><td class="diff_sub">Deleted</td> </tr>
                  </table></td>
             <td> <table border="" summary="Links">
                      <tr><th colspan="2"> Links </th> </tr>
                      <tr><td>(f)irst change</td> </tr>
                      <tr><td>(n)ext change</td> </tr>
                      <tr><td>(t)op</td> </tr>
                  </table></td> </tr>
    </table>'u'
    <table class="diff" summary="Legends">
        <tr> <th colspan="2"> Legends </th> </tr>
        <tr> <td> <table border="" summary="Colors">
                      <tr><th> Colors </th> </tr>
                      <tr><td class="diff_add">&nbsp;Added&nbsp;</td></tr>
                      <tr><td class="diff_chg">Changed</td> </tr>
                      <tr><td class="diff_sub">Deleted</td> </tr>
                  </table></td>
             <td> <table border="" summary="Links">
                      <tr><th colspan="2"> Links </th> </tr>
                      <tr><td>(f)irst change</td> </tr>
                      <tr><td>(n)ext change</td> </tr>
                      <tr><td>(t)op</td> </tr>
                  </table></td> </tr>
    </table>'b'For producing HTML side by side comparison with change highlights.

    This class can be used to create an HTML table (or a complete HTML file
    containing the table) showing a side by side, line by line comparison
    of text with inter-line and intra-line change highlights.  The table can
    be generated in either full or contextual difference mode.

    The following methods are provided for HTML generation:

    make_table -- generates HTML for a single side by side table
    make_file -- generates complete HTML file with a single side by side table

    See tools/scripts/diff.py for an example usage of this class.
    'u'For producing HTML side by side comparison with change highlights.

    This class can be used to create an HTML table (or a complete HTML file
    containing the table) showing a side by side, line by line comparison
    of text with inter-line and intra-line change highlights.  The table can
    be generated in either full or contextual difference mode.

    The following methods are provided for HTML generation:

    make_table -- generates HTML for a single side by side table
    make_file -- generates complete HTML file with a single side by side table

    See tools/scripts/diff.py for an example usage of this class.
    'b'HtmlDiff instance initializer

        Arguments:
        tabsize -- tab stop spacing, defaults to 8.
        wrapcolumn -- column number where lines are broken and wrapped,
            defaults to None where lines are not wrapped.
        linejunk,charjunk -- keyword arguments passed into ndiff() (used by
            HtmlDiff() to generate the side by side HTML differences).  See
            ndiff() documentation for argument default values and descriptions.
        'u'HtmlDiff instance initializer

        Arguments:
        tabsize -- tab stop spacing, defaults to 8.
        wrapcolumn -- column number where lines are broken and wrapped,
            defaults to None where lines are not wrapped.
        linejunk,charjunk -- keyword arguments passed into ndiff() (used by
            HtmlDiff() to generate the side by side HTML differences).  See
            ndiff() documentation for argument default values and descriptions.
        'b'Returns HTML file of side by side comparison with change highlights

        Arguments:
        fromlines -- list of "from" lines
        tolines -- list of "to" lines
        fromdesc -- "from" file column header string
        todesc -- "to" file column header string
        context -- set to True for contextual differences (defaults to False
            which shows full differences).
        numlines -- number of context lines.  When context is set True,
            controls number of lines displayed before and after the change.
            When context is False, controls the number of lines to place
            the "next" link anchors before the next change (so click of
            "next" link jumps to just before the change).
        charset -- charset of the HTML document
        'u'Returns HTML file of side by side comparison with change highlights

        Arguments:
        fromlines -- list of "from" lines
        tolines -- list of "to" lines
        fromdesc -- "from" file column header string
        todesc -- "to" file column header string
        context -- set to True for contextual differences (defaults to False
            which shows full differences).
        numlines -- number of context lines.  When context is set True,
            controls number of lines displayed before and after the change.
            When context is False, controls the number of lines to place
            the "next" link anchors before the next change (so click of
            "next" link jumps to just before the change).
        charset -- charset of the HTML document
        'b'Returns from/to line lists with tabs expanded and newlines removed.

        Instead of tab characters being replaced by the number of spaces
        needed to fill in to the next tab stop, this function will fill
        the space with tab characters.  This is done so that the difference
        algorithms can identify changes in a file when tabs are replaced by
        spaces and vice versa.  At the end of the HTML generation, the tab
        characters will be replaced with a nonbreakable space.
        'u'Returns from/to line lists with tabs expanded and newlines removed.

        Instead of tab characters being replaced by the number of spaces
        needed to fill in to the next tab stop, this function will fill
        the space with tab characters.  This is done so that the difference
        algorithms can identify changes in a file when tabs are replaced by
        spaces and vice versa.  At the end of the HTML generation, the tab
        characters will be replaced with a nonbreakable space.
        'b'Builds list of text lines by splitting text lines at wrap point

        This function will determine if the input text line needs to be
        wrapped (split) into separate lines.  If so, the first wrap point
        will be determined and the first line appended to the output
        text line list.  This function is used recursively to handle
        the second part of the split line to further split it.
        'u'Builds list of text lines by splitting text lines at wrap point

        This function will determine if the input text line needs to be
        wrapped (split) into separate lines.  If so, the first wrap point
        will be determined and the first line appended to the output
        text line list.  This function is used recursively to handle
        the second part of the split line to further split it.
        'b'Returns iterator that splits (wraps) mdiff text lines'u'Returns iterator that splits (wraps) mdiff text lines'b'Collects mdiff output into separate lists

        Before storing the mdiff from/to data into a list, it is converted
        into a single line of text with HTML markup.
        'u'Collects mdiff output into separate lists

        Before storing the mdiff from/to data into a list, it is converted
        into a single line of text with HTML markup.
        'b'Returns HTML markup of "from" / "to" text lines

        side -- 0 or 1 indicating "from" or "to" text
        flag -- indicates if difference on line
        linenum -- line number (used for line number column)
        text -- line text to be marked up
        'u'Returns HTML markup of "from" / "to" text lines

        side -- 0 or 1 indicating "from" or "to" text
        flag -- indicates if difference on line
        linenum -- line number (used for line number column)
        text -- line text to be marked up
        'b'%d'u'%d'b' id="%s%s"'u' id="%s%s"'b'&nbsp;'u'&nbsp;'b'<td class="diff_header"%s>%s</td><td nowrap="nowrap">%s</td>'u'<td class="diff_header"%s>%s</td><td nowrap="nowrap">%s</td>'b'Create unique anchor prefixes'u'Create unique anchor prefixes'b'from%d_'u'from%d_'b'to%d_'u'to%d_'b'Makes list of "next" links'u'Makes list of "next" links'b' id="difflib_chg_%s_%d"'u' id="difflib_chg_%s_%d"'b'<a href="#difflib_chg_%s_%d">n</a>'u'<a href="#difflib_chg_%s_%d">n</a>'b'<td></td><td>&nbsp;No Differences Found&nbsp;</td>'u'<td></td><td>&nbsp;No Differences Found&nbsp;</td>'b'<td></td><td>&nbsp;Empty File&nbsp;</td>'u'<td></td><td>&nbsp;Empty File&nbsp;</td>'b'<a href="#difflib_chg_%s_0">f</a>'u'<a href="#difflib_chg_%s_0">f</a>'b'<a href="#difflib_chg_%s_top">t</a>'u'<a href="#difflib_chg_%s_top">t</a>'b'Returns HTML table of side by side comparison with change highlights

        Arguments:
        fromlines -- list of "from" lines
        tolines -- list of "to" lines
        fromdesc -- "from" file column header string
        todesc -- "to" file column header string
        context -- set to True for contextual differences (defaults to False
            which shows full differences).
        numlines -- number of context lines.  When context is set True,
            controls number of lines displayed before and after the change.
            When context is False, controls the number of lines to place
            the "next" link anchors before the next change (so click of
            "next" link jumps to just before the change).
        'u'Returns HTML table of side by side comparison with change highlights

        Arguments:
        fromlines -- list of "from" lines
        tolines -- list of "to" lines
        fromdesc -- "from" file column header string
        todesc -- "to" file column header string
        context -- set to True for contextual differences (defaults to False
            which shows full differences).
        numlines -- number of context lines.  When context is set True,
            controls number of lines displayed before and after the change.
            When context is False, controls the number of lines to place
            the "next" link anchors before the next change (so click of
            "next" link jumps to just before the change).
        'b'            <tr><td class="diff_next"%s>%s</td>%s'u'            <tr><td class="diff_next"%s>%s</td>%s'b'<td class="diff_next">%s</td>%s</tr>
'u'<td class="diff_next">%s</td>%s</tr>
'b'        </tbody>        
        <tbody>
'u'        </tbody>        
        <tbody>
'b'<thead><tr>%s%s%s%s</tr></thead>'u'<thead><tr>%s%s%s%s</tr></thead>'b'<th class="diff_next"><br /></th>'u'<th class="diff_next"><br /></th>'b'<th colspan="2" class="diff_header">%s</th>'u'<th colspan="2" class="diff_header">%s</th>'b' +'u' +'b'<span class="diff_add">'u'<span class="diff_add">'b' -'u' -'b'<span class="diff_sub">'u'<span class="diff_sub">'b' ^'u' ^'b'<span class="diff_chg">'u'<span class="diff_chg">'b'</span>'u'</span>'b'
    Generate one of the two sequences that generated a delta.

    Given a `delta` produced by `Differ.compare()` or `ndiff()`, extract
    lines originating from file 1 or 2 (parameter `which`), stripping off line
    prefixes.

    Examples:

    >>> diff = ndiff('one\ntwo\nthree\n'.splitlines(keepends=True),
    ...              'ore\ntree\nemu\n'.splitlines(keepends=True))
    >>> diff = list(diff)
    >>> print(''.join(restore(diff, 1)), end="")
    one
    two
    three
    >>> print(''.join(restore(diff, 2)), end="")
    ore
    tree
    emu
    'u'
    Generate one of the two sequences that generated a delta.

    Given a `delta` produced by `Differ.compare()` or `ndiff()`, extract
    lines originating from file 1 or 2 (parameter `which`), stripping off line
    prefixes.

    Examples:

    >>> diff = ndiff('one\ntwo\nthree\n'.splitlines(keepends=True),
    ...              'ore\ntree\nemu\n'.splitlines(keepends=True))
    >>> diff = list(diff)
    >>> print(''.join(restore(diff, 1)), end="")
    one
    two
    three
    >>> print(''.join(restore(diff, 2)), end="")
    ore
    tree
    emu
    'b'unknown delta choice (must be 1 or 2): %r'u'unknown delta choice (must be 1 or 2): %r'u'Python.Python39.lib.difflib'u'Python39.lib.difflib'u'lib.difflib'u'difflib'distutils.dir_util

Utility functions for manipulating directories and directory trees.DistutilsInternalError_path_createdCreate a directory and any missing ancestor directories.

    If the directory already exists (or if 'name' is the empty string, which
    means the current directory, which of course exists), then do nothing.
    Raise DistutilsFileError if unable to create some directory along the way
    (eg. some sub-path exists, but is a file rather than a directory).
    If 'verbose' is true, print a one-line summary of each mkdir to stdout.
    Return the list of directories actually created.
    mkpath: 'name' must be a string (got %r)normpathcreated_dirstailsabs_headcreating %scould not create '%s': %screate_treebase_dirCreate all the empty directories under 'base_dir' needed to put 'files'
    there.

    'base_dir' is just the name of a directory which doesn't necessarily
    exist yet; 'files' is a list of filenames to be interpreted relative to
    'base_dir'.  'base_dir' + the directory portion of every file in 'files'
    will be created if it doesn't already exist.  'mode', 'verbose' and
    'dry_run' flags are as for 'mkpath()'.
    need_dircopy_treepreserve_modepreserve_timespreserve_symlinksCopy an entire directory tree 'src' to a new location 'dst'.

    Both 'src' and 'dst' must be directory names.  If 'src' is not a
    directory, raise DistutilsFileError.  If 'dst' does not exist, it is
    created with 'mkpath()'.  The end result of the copy is that every
    file in 'src' is copied to 'dst', and directories under 'src' are
    recursively copied to 'dst'.  Return the list of files that were
    copied or might have been copied, using their output name.  The
    return value is unaffected by 'update' or 'dry_run': it is simply
    the list of all files under 'src', with the names changed to be
    under 'dst'.

    'preserve_mode' and 'preserve_times' are the same as for
    'copy_file'; note that they only apply to regular files, not to
    directories.  If 'preserve_symlinks' is true, symlinks will be
    copied as symlinks (on platforms that support them!); otherwise
    (the default), the destination of the symlink will be copied.
    'update' and 'verbose' are the same as for 'copy_file'.
    copy_filecannot copy tree '%s': not a directoryerror listing files in '%s': %soutputsdst_name.nfsislinkreadlinklink_destlinking %s -> %s_build_cmdtuplecmdtuplesHelper for remove_tree().real_fremove_treeRecursively remove an entire directory tree.

    Any errors are ignored (apart from being reported to stdout if 'verbose'
    is true).
    removing '%s' (and everything under it)error removing %s: %sensure_relativeTake the full path 'path', and make it a relative path.

    This is useful to make 'path' the second argument to os.path.join().
    drive# cache for by mkpath() -- in addition to cheapening redundant calls,# eliminates redundant "creating /foo/bar/baz" messages in dry-run mode# I don't use os.makedirs because a) it's new to Python 1.5.2, and# b) it blows up if the directory already exists (I want to silently# succeed in that case).# Detect a common bug -- name is None# XXX what's the better way to handle verbosity? print as we create# each directory in the path (the current behaviour), or only announce# the creation of the whole path? (quite easy to do the latter since# we're not using a recursive algorithm)# stack of lone dirs to create# push next higher dir onto stack# now 'head' contains the deepest directory that already exists# (that is, the child of 'head' in 'name' is the highest directory# that does *not* exist)#print "head = %s, d = %s: " % (head, d),# First get the list of directories to create# Now create them# skip NFS rename files# remove dir from cache if it's already thereb'distutils.dir_util

Utility functions for manipulating directories and directory trees.'u'distutils.dir_util

Utility functions for manipulating directories and directory trees.'b'Create a directory and any missing ancestor directories.

    If the directory already exists (or if 'name' is the empty string, which
    means the current directory, which of course exists), then do nothing.
    Raise DistutilsFileError if unable to create some directory along the way
    (eg. some sub-path exists, but is a file rather than a directory).
    If 'verbose' is true, print a one-line summary of each mkdir to stdout.
    Return the list of directories actually created.
    'u'Create a directory and any missing ancestor directories.

    If the directory already exists (or if 'name' is the empty string, which
    means the current directory, which of course exists), then do nothing.
    Raise DistutilsFileError if unable to create some directory along the way
    (eg. some sub-path exists, but is a file rather than a directory).
    If 'verbose' is true, print a one-line summary of each mkdir to stdout.
    Return the list of directories actually created.
    'b'mkpath: 'name' must be a string (got %r)'u'mkpath: 'name' must be a string (got %r)'b'creating %s'u'creating %s'b'could not create '%s': %s'u'could not create '%s': %s'b'Create all the empty directories under 'base_dir' needed to put 'files'
    there.

    'base_dir' is just the name of a directory which doesn't necessarily
    exist yet; 'files' is a list of filenames to be interpreted relative to
    'base_dir'.  'base_dir' + the directory portion of every file in 'files'
    will be created if it doesn't already exist.  'mode', 'verbose' and
    'dry_run' flags are as for 'mkpath()'.
    'u'Create all the empty directories under 'base_dir' needed to put 'files'
    there.

    'base_dir' is just the name of a directory which doesn't necessarily
    exist yet; 'files' is a list of filenames to be interpreted relative to
    'base_dir'.  'base_dir' + the directory portion of every file in 'files'
    will be created if it doesn't already exist.  'mode', 'verbose' and
    'dry_run' flags are as for 'mkpath()'.
    'b'Copy an entire directory tree 'src' to a new location 'dst'.

    Both 'src' and 'dst' must be directory names.  If 'src' is not a
    directory, raise DistutilsFileError.  If 'dst' does not exist, it is
    created with 'mkpath()'.  The end result of the copy is that every
    file in 'src' is copied to 'dst', and directories under 'src' are
    recursively copied to 'dst'.  Return the list of files that were
    copied or might have been copied, using their output name.  The
    return value is unaffected by 'update' or 'dry_run': it is simply
    the list of all files under 'src', with the names changed to be
    under 'dst'.

    'preserve_mode' and 'preserve_times' are the same as for
    'copy_file'; note that they only apply to regular files, not to
    directories.  If 'preserve_symlinks' is true, symlinks will be
    copied as symlinks (on platforms that support them!); otherwise
    (the default), the destination of the symlink will be copied.
    'update' and 'verbose' are the same as for 'copy_file'.
    'u'Copy an entire directory tree 'src' to a new location 'dst'.

    Both 'src' and 'dst' must be directory names.  If 'src' is not a
    directory, raise DistutilsFileError.  If 'dst' does not exist, it is
    created with 'mkpath()'.  The end result of the copy is that every
    file in 'src' is copied to 'dst', and directories under 'src' are
    recursively copied to 'dst'.  Return the list of files that were
    copied or might have been copied, using their output name.  The
    return value is unaffected by 'update' or 'dry_run': it is simply
    the list of all files under 'src', with the names changed to be
    under 'dst'.

    'preserve_mode' and 'preserve_times' are the same as for
    'copy_file'; note that they only apply to regular files, not to
    directories.  If 'preserve_symlinks' is true, symlinks will be
    copied as symlinks (on platforms that support them!); otherwise
    (the default), the destination of the symlink will be copied.
    'update' and 'verbose' are the same as for 'copy_file'.
    'b'cannot copy tree '%s': not a directory'u'cannot copy tree '%s': not a directory'b'error listing files in '%s': %s'u'error listing files in '%s': %s'b'.nfs'u'.nfs'b'linking %s -> %s'u'linking %s -> %s'b'Helper for remove_tree().'u'Helper for remove_tree().'b'Recursively remove an entire directory tree.

    Any errors are ignored (apart from being reported to stdout if 'verbose'
    is true).
    'u'Recursively remove an entire directory tree.

    Any errors are ignored (apart from being reported to stdout if 'verbose'
    is true).
    'b'removing '%s' (and everything under it)'u'removing '%s' (and everything under it)'b'error removing %s: %s'u'error removing %s: %s'b'Take the full path 'path', and make it a relative path.

    This is useful to make 'path' the second argument to os.path.join().
    'u'Take the full path 'path', and make it a relative path.

    This is useful to make 'path' the second argument to os.path.join().
    'u'Python39.lib.distutils.dir_util'u'lib.distutils.dir_util'u'distutils.dir_util'u'dir_util'Disassembler of Python byte code into mnemonics.opcode_opcodes_allcode_infodisdisassembledistbdiscofindlinestartsfindlabelsshow_codeget_instructionsInstructionBytecode_have_codeFORMAT_VALUEFORMAT_VALUE_CONVERTERSMAKE_FUNCTIONkwdefaultsclosureMAKE_FUNCTION_FLAGS_try_compileAttempts to compile the given source, first as an expression and
       then as a statement if the first approach fails.

       Utility function to accept strings in functions that otherwise
       expect code objects
    Disassemble classes, methods, functions, and other compiled objects.

    With no argument, disassemble the last traceback.

    Compiled objects currently include generator objects, async generator
    objects, and coroutine objects, all of which store their code object
    in a special attribute.
    ag_codeDisassembly of %s:Sorry:co_code_disassemble_recursive_disassemble_bytes_disassemble_strdon't know how to disassemble %s objectsDisassemble a traceback (default: last traceback).no last traceback to disassembletb_lastiOPTIMIZEDNEWLOCALSVARARGSVARKEYWORDSNESTEDGENERATORNOFREECOROUTINEITERABLE_COROUTINEASYNC_GENERATORCOMPILER_FLAG_NAMESpretty_flagsReturn pretty representation of code flags._get_code_objectHelper to handle methods, compiled or raw code objects, and strings.<disassembly>Formatted details of methods, functions, or code._format_code_infoName:              %sFilename:          %sArgument count:    %sco_argcountPositional-only arguments: %sco_posonlyargcountKw-only arguments: %sco_kwonlyargcountNumber of locals:  %sco_nlocalsStack size:        %sco_stacksizeFlags:             %sConstants:i_c%4d: %rco_namesNames:i_n%4d: %sco_varnamesVariable names:co_freevarsFree variables:co_cellvarsCell variables:Print details of methods, functions, or code to *file*.

    If *file* is not provided, the output is printed on stdout.
    _Instructionopname opcode arg argval argrepr offset starts_line is_jump_targetHuman readable name for operationopnameNumeric code for operationNumeric argument to operation (if any), otherwise NoneResolved arg value (if known), otherwise same as argargvalHuman readable description of operation argumentargreprStart index of operation within bytecode sequenceLine started by this opcode (if any), otherwise Nonestarts_lineTrue if other code jumps to here, otherwise Falseis_jump_target_OPNAME_WIDTH_OPARG_WIDTHDetails for a bytecode operation

       Defined fields:
         opname - human readable name for operation
         opcode - numeric code for operation
         arg - numeric argument to operation (if any), otherwise None
         argval - resolved arg value (if known), otherwise same as arg
         argrepr - human readable description of operation argument
         offset - start index of operation within bytecode sequence
         starts_line - line started by this opcode (if any), otherwise None
         is_jump_target - True if other code jumps to here, otherwise False
    _disassemblelineno_widthmark_as_currentoffset_widthFormat instruction details for inclusion in disassembly output

        *lineno_width* sets the width of the line number field (0 omits it)
        *mark_as_current* inserts a '-->' marker arrow as part of the line
        *offset_width* sets the width of the instruction offset field
        %%%ddlineno_fmt   first_lineIterator for the opcodes in methods, functions or code

    Generates a series of Instruction named tuples giving the details of
    each operations in the supplied code.

    If *first_line* is not None, it indicates the line number that should
    be reported for the first source line in the disassembled code.
    Otherwise, the source line information (if any) is taken directly from
    the disassembled code object.
    cell_nameslinestartsline_offset_get_instructions_bytes_get_const_infoconst_indexconst_listHelper to get optional details about const references

       Returns the dereferenced constant and its repr if the constant
       list is defined.
       Otherwise returns the constant index and its repr().
    _get_name_infoname_indexname_listHelper to get optional details about named references

       Returns the dereferenced name as both value and repr if the name
       list is defined.
       Otherwise returns the name index and its repr().
    varnamesIterate over the instructions in a bytecode string.

    Generates a sequence of Instruction namedtuples giving the details of each
    opcode.  Additional information about the code's runtime environment
    (e.g. variable names, constants) can be specified using optional
    arguments.

    labels_unpack_opargshasconsthasnamehasjrelto haslocalhascomparecmp_ophasfreewith formatlastiDisassemble a code object.Disassembly of %r:show_linenomaxlinenomaxoffset10000instrnew_source_lineis_current_instrCompile the source string, then disassemble the code object.<dis>extended_argHAVE_ARGUMENTEXTENDED_ARGDetect all offsets in a byte code which are jump targets.

    Return the list of offsets.

    hasjabsFind the offsets in a byte code which are start of lines in the source.

    Generate pairs (offset, lineno) as described in Python/compile.c.

    co_lnotabbyte_incrementsline_incrementsbytecode_lenlastlinenobyte_incrline_incr0x100The bytecode operations of a piece of code

    Instantiate this with a function, method, other compiled object, string of
    code, or a code object (as returned by compile()).

    Iterating over this yields the bytecode operations as Instruction instances.
    current_offsetcodeobj_line_offset_cell_names_linestarts_original_object{}({!r})from_traceback Construct a Bytecode from the given traceback Return formatted information about the code object.Return a formatted view of the bytecode operations.Simple test program to disassemble a file.# Extract functions from methods.# Extract compiled code objects from...# ...a function, or#...a generator object, or#...an asynchronous generator object, or#...a coroutine.# Perform the disassembly.# Class or module# Code object# Raw bytecode# Source code# The inspect module interrogates this dictionary to build its# list of CO_* constants. It is also used by pretty_flags to# turn the co_flags field into a human readable list.# Handle source code.# By now, if we don't have a code object, we can't disassemble x.# Column: Source code line number# Column: Current instruction indicator# Column: Jump target marker# Column: Instruction offset from start of code sequence# Column: Opcode name# Column: Opcode argument# Column: Opcode argument details#  Set argval to the dereferenced value of the argument when#  available, and argrepr to the string representation of argval.#    _disassemble_bytes needs the string repr of the#    raw name index for LOAD_GLOBAL, LOAD_CONST, etc.# Omit the line number column entirely if we have no line number info# XXX For backwards compatibility# The rest of the lnotab byte offsets are past the end of# the bytecode, so the lines were optimized away.# line_increments is an array of 8-bit signed integersb'Disassembler of Python byte code into mnemonics.'u'Disassembler of Python byte code into mnemonics.'b'code_info'u'code_info'b'dis'u'dis'b'disassemble'u'disassemble'b'distb'u'distb'b'disco'u'disco'b'findlinestarts'u'findlinestarts'b'findlabels'u'findlabels'b'show_code'u'show_code'b'get_instructions'u'get_instructions'b'Instruction'u'Instruction'b'Bytecode'u'Bytecode'b'FORMAT_VALUE'u'FORMAT_VALUE'b'MAKE_FUNCTION'u'MAKE_FUNCTION'b'kwdefaults'u'kwdefaults'b'closure'u'closure'b'Attempts to compile the given source, first as an expression and
       then as a statement if the first approach fails.

       Utility function to accept strings in functions that otherwise
       expect code objects
    'u'Attempts to compile the given source, first as an expression and
       then as a statement if the first approach fails.

       Utility function to accept strings in functions that otherwise
       expect code objects
    'b'Disassemble classes, methods, functions, and other compiled objects.

    With no argument, disassemble the last traceback.

    Compiled objects currently include generator objects, async generator
    objects, and coroutine objects, all of which store their code object
    in a special attribute.
    'u'Disassemble classes, methods, functions, and other compiled objects.

    With no argument, disassemble the last traceback.

    Compiled objects currently include generator objects, async generator
    objects, and coroutine objects, all of which store their code object
    in a special attribute.
    'b'__code__'u'__code__'b'ag_code'u'ag_code'b'Disassembly of %s:'u'Disassembly of %s:'b'Sorry:'u'Sorry:'b'co_code'u'co_code'b'don't know how to disassemble %s objects'u'don't know how to disassemble %s objects'b'Disassemble a traceback (default: last traceback).'u'Disassemble a traceback (default: last traceback).'b'no last traceback to disassemble'u'no last traceback to disassemble'b'OPTIMIZED'u'OPTIMIZED'b'NEWLOCALS'u'NEWLOCALS'b'VARARGS'u'VARARGS'b'VARKEYWORDS'u'VARKEYWORDS'b'NESTED'u'NESTED'b'GENERATOR'u'GENERATOR'b'NOFREE'u'NOFREE'b'COROUTINE'u'COROUTINE'b'ITERABLE_COROUTINE'u'ITERABLE_COROUTINE'b'ASYNC_GENERATOR'u'ASYNC_GENERATOR'b'Return pretty representation of code flags.'u'Return pretty representation of code flags.'b'Helper to handle methods, compiled or raw code objects, and strings.'u'Helper to handle methods, compiled or raw code objects, and strings.'b'<disassembly>'u'<disassembly>'b'Formatted details of methods, functions, or code.'u'Formatted details of methods, functions, or code.'b'Name:              %s'u'Name:              %s'b'Filename:          %s'u'Filename:          %s'b'Argument count:    %s'u'Argument count:    %s'b'Positional-only arguments: %s'u'Positional-only arguments: %s'b'Kw-only arguments: %s'u'Kw-only arguments: %s'b'Number of locals:  %s'u'Number of locals:  %s'b'Stack size:        %s'u'Stack size:        %s'b'Flags:             %s'u'Flags:             %s'b'Constants:'u'Constants:'b'%4d: %r'u'%4d: %r'b'Names:'u'Names:'b'%4d: %s'u'%4d: %s'b'Variable names:'u'Variable names:'b'Free variables:'u'Free variables:'b'Cell variables:'u'Cell variables:'b'Print details of methods, functions, or code to *file*.

    If *file* is not provided, the output is printed on stdout.
    'u'Print details of methods, functions, or code to *file*.

    If *file* is not provided, the output is printed on stdout.
    'b'_Instruction'u'_Instruction'b'opname opcode arg argval argrepr offset starts_line is_jump_target'u'opname opcode arg argval argrepr offset starts_line is_jump_target'b'Human readable name for operation'u'Human readable name for operation'b'Numeric code for operation'u'Numeric code for operation'b'Numeric argument to operation (if any), otherwise None'u'Numeric argument to operation (if any), otherwise None'b'Resolved arg value (if known), otherwise same as arg'u'Resolved arg value (if known), otherwise same as arg'b'Human readable description of operation argument'u'Human readable description of operation argument'b'Start index of operation within bytecode sequence'u'Start index of operation within bytecode sequence'b'Line started by this opcode (if any), otherwise None'u'Line started by this opcode (if any), otherwise None'b'True if other code jumps to here, otherwise False'u'True if other code jumps to here, otherwise False'b'Details for a bytecode operation

       Defined fields:
         opname - human readable name for operation
         opcode - numeric code for operation
         arg - numeric argument to operation (if any), otherwise None
         argval - resolved arg value (if known), otherwise same as arg
         argrepr - human readable description of operation argument
         offset - start index of operation within bytecode sequence
         starts_line - line started by this opcode (if any), otherwise None
         is_jump_target - True if other code jumps to here, otherwise False
    'u'Details for a bytecode operation

       Defined fields:
         opname - human readable name for operation
         opcode - numeric code for operation
         arg - numeric argument to operation (if any), otherwise None
         argval - resolved arg value (if known), otherwise same as arg
         argrepr - human readable description of operation argument
         offset - start index of operation within bytecode sequence
         starts_line - line started by this opcode (if any), otherwise None
         is_jump_target - True if other code jumps to here, otherwise False
    'b'Format instruction details for inclusion in disassembly output

        *lineno_width* sets the width of the line number field (0 omits it)
        *mark_as_current* inserts a '-->' marker arrow as part of the line
        *offset_width* sets the width of the instruction offset field
        'u'Format instruction details for inclusion in disassembly output

        *lineno_width* sets the width of the line number field (0 omits it)
        *mark_as_current* inserts a '-->' marker arrow as part of the line
        *offset_width* sets the width of the instruction offset field
        'b'%%%dd'u'%%%dd'b'   'u'   'b'Iterator for the opcodes in methods, functions or code

    Generates a series of Instruction named tuples giving the details of
    each operations in the supplied code.

    If *first_line* is not None, it indicates the line number that should
    be reported for the first source line in the disassembled code.
    Otherwise, the source line information (if any) is taken directly from
    the disassembled code object.
    'u'Iterator for the opcodes in methods, functions or code

    Generates a series of Instruction named tuples giving the details of
    each operations in the supplied code.

    If *first_line* is not None, it indicates the line number that should
    be reported for the first source line in the disassembled code.
    Otherwise, the source line information (if any) is taken directly from
    the disassembled code object.
    'b'Helper to get optional details about const references

       Returns the dereferenced constant and its repr if the constant
       list is defined.
       Otherwise returns the constant index and its repr().
    'u'Helper to get optional details about const references

       Returns the dereferenced constant and its repr if the constant
       list is defined.
       Otherwise returns the constant index and its repr().
    'b'Helper to get optional details about named references

       Returns the dereferenced name as both value and repr if the name
       list is defined.
       Otherwise returns the name index and its repr().
    'u'Helper to get optional details about named references

       Returns the dereferenced name as both value and repr if the name
       list is defined.
       Otherwise returns the name index and its repr().
    'b'Iterate over the instructions in a bytecode string.

    Generates a sequence of Instruction namedtuples giving the details of each
    opcode.  Additional information about the code's runtime environment
    (e.g. variable names, constants) can be specified using optional
    arguments.

    'u'Iterate over the instructions in a bytecode string.

    Generates a sequence of Instruction namedtuples giving the details of each
    opcode.  Additional information about the code's runtime environment
    (e.g. variable names, constants) can be specified using optional
    arguments.

    'b'to 'u'to 'b'with format'u'with format'b'Disassemble a code object.'u'Disassemble a code object.'b'Disassembly of %r:'u'Disassembly of %r:'b'Compile the source string, then disassemble the code object.'u'Compile the source string, then disassemble the code object.'b'<dis>'u'<dis>'b'Detect all offsets in a byte code which are jump targets.

    Return the list of offsets.

    'u'Detect all offsets in a byte code which are jump targets.

    Return the list of offsets.

    'b'Find the offsets in a byte code which are start of lines in the source.

    Generate pairs (offset, lineno) as described in Python/compile.c.

    'u'Find the offsets in a byte code which are start of lines in the source.

    Generate pairs (offset, lineno) as described in Python/compile.c.

    'b'The bytecode operations of a piece of code

    Instantiate this with a function, method, other compiled object, string of
    code, or a code object (as returned by compile()).

    Iterating over this yields the bytecode operations as Instruction instances.
    'u'The bytecode operations of a piece of code

    Instantiate this with a function, method, other compiled object, string of
    code, or a code object (as returned by compile()).

    Iterating over this yields the bytecode operations as Instruction instances.
    'b'{}({!r})'u'{}({!r})'b' Construct a Bytecode from the given traceback 'u' Construct a Bytecode from the given traceback 'b'Return formatted information about the code object.'u'Return formatted information about the code object.'b'Return a formatted view of the bytecode operations.'u'Return a formatted view of the bytecode operations.'b'Simple test program to disassemble a file.'u'Simple test program to disassemble a file.'u'Python.Python39.lib.dis'u'Python39.lib.dis'u'lib.dis'Module doctest -- a framework for running examples in docstrings.

In simplest use, end each module M to be tested with:

def _test():
    import doctest
    doctest.testmod()

if __name__ == "__main__":
    _test()

Then running the module as a script will cause the examples in the
docstrings to get executed and verified:

python M.py

This won't display anything unless an example fails, in which case the
failing example(s) and the cause(s) of the failure(s) are printed to stdout
(why not stderr? because stderr is a lame hack <0.2 wink>), and the final
line of output is "Test failed.".

Run it with the -v switch instead:

python M.py -v

and a detailed report of all examples tried is printed to stdout, along
with assorted summaries at the end.

You can force verbose mode by passing "verbose=True" to testmod, or prohibit
it by passing "verbose=False".  In either of those cases, sys.argv is not
examined by testmod.

There are a variety of other ways to run doctests, including integration
with the unittest framework, and support for running non-Python text
files containing doctests.  There are also many ways to override parts
of doctest's default behaviors.  See the Library Reference Manual for
details.
reStructuredText en__docformat__register_optionflagDONT_ACCEPT_TRUE_FOR_1DONT_ACCEPT_BLANKLINENORMALIZE_WHITESPACEELLIPSISSKIPIGNORE_EXCEPTION_DETAILCOMPARISON_FLAGSREPORT_UDIFFREPORT_CDIFFREPORT_NDIFFREPORT_ONLY_FIRST_FAILUREREPORTING_FLAGSFAIL_FASTExampleDocTestDocTestParserDocTestFinderDocTestRunnerOutputCheckerDocTestFailureUnexpectedExceptionDebugRunnertestfilerun_docstring_examplesDocTestSuiteDocFileSuiteset_unittest_reportflagsscript_from_examplestestsourcedebug_srcpdbTestResultsfailed attemptedOPTIONFLAGS_BY_NAME<BLANKLINE>BLANKLINE_MARKERELLIPSIS_MARKER_extract_future_flagsglobs
    Return the compiler-flags associated with the future features that
    have been imported into the given namespace (globs).
    _normalize_module
    Return the module specified by `module`.  In particular:
      - If `module` is a module, then return module.
      - If `module` is a string, then import and return the
        module with that name.
      - If `module` is None, then return the calling module.
        The calling module is assumed to be the module of
        the stack frame at the given depth in the call stack.
    ismoduleExpected a module, string, or None_newline_convert_load_testfilemodule_relative_module_relative_pathfile_contents
    Add the given number of space characters to the beginning of
    every non-blank line in `s`, and return the result.
    (?m)^(?!$)_exception_traceback
    Return a string containing a traceback message for the given
    exc_info tuple (as returned by sys.exc_info()).
    excout_SpoofOut_ellipsis_matchwantgot
    Essentially the only subtle case:
    >>> _ellipsis_match('aa...aa', 'aaa')
    False
    startposendpos_comment_lineReturn a commented form of the given line_strip_exception_details_OutputRedirectingPdbPdb
    A specialized version of the python debugger that redirects stdout
    to a given stream when interacting with the user.  Stdout is *not*
    redirected when traced code is executed.
    __out__debugger_usednosigintsave_stdouttest_pathExpected a module: %rModule-relative files may not have absolute pathsbasedirfullpathCan't resolve paths relative to the module %r (it has no __file__)"Can't resolve paths relative to the module ""%r (it has no __file__)"
    A single doctest example, consisting of source code and expected
    output.  `Example` defines the following attributes:

      - source: A single Python statement, always ending with a newline.
        The constructor adds a newline if needed.

      - want: The expected output from running the source code (either
        from stdout, or a traceback in case of exception).  `want` ends
        with a newline unless it's empty, in which case it's an empty
        string.  The constructor adds a newline if needed.

      - exc_msg: The exception message generated by the example, if
        the example is expected to generate an exception; or `None` if
        it is not expected to generate an exception.  This exception
        message is compared against the return value of
        `traceback.format_exception_only()`.  `exc_msg` ends with a
        newline unless it's `None`.  The constructor adds a newline
        if needed.

      - lineno: The line number within the DocTest string containing
        this Example where the Example begins.  This line number is
        zero-based, with respect to the beginning of the DocTest.

      - indent: The example's indentation in the DocTest string.
        I.e., the number of space characters that precede the
        example's first prompt.

      - options: A dictionary mapping from option flags to True or
        False, which is used to override default options for this
        example.  Any option flags not contained in this dictionary
        are left at their default value (as specified by the
        DocTestRunner's optionflags).  By default, no options are set.
    exc_msg
    A collection of doctest examples that should be run in a single
    namespace.  Each `DocTest` defines the following attributes:

      - examples: the list of examples.

      - globs: The namespace (aka globals) that the examples should
        be run in.

      - name: A name identifying the DocTest (typically, the name of
        the object whose docstring this DocTest was extracted from).

      - filename: The name of the file that this DocTest was extracted
        from, or `None` if the filename is unknown.

      - lineno: The line number within filename where this DocTest
        begins, or `None` if the line number is unavailable.  This
        line number is zero-based, with respect to the beginning of
        the file.

      - docstring: The string that the examples were extracted from,
        or `None` if the string is unavailable.
    examples
        Create a new DocTest containing the given examples.  The
        DocTest's globals are initialized with a copy of `globs`.
        DocTest no longer accepts str; use DocTestParser insteadno examples1 example%d examples<%s %s from %s:%s (%s)>
    A class used to parse strings containing doctest examples.
    
        # Source consists of a PS1 line followed by zero or more PS2 lines.
        (?P<source>
            (?:^(?P<indent> [ ]*) >>>    .*)    # PS1 line
            (?:\n           [ ]*  \.\.\. .*)*)  # PS2 lines
        \n?
        # Want consists of any non-blank lines that do not start with PS1.
        (?P<want> (?:(?![ ]*$)    # Not a blank line
                     (?![ ]*>>>)  # Not a line starting with PS1
                     .+$\n?       # But any other line
                  )*)
        r'''_EXAMPLE_RE
        # Grab the traceback header.  Different versions of Python have
        # said different things on the first traceback line.
        ^(?P<hdr> Traceback\ \(
            (?: most\ recent\ call\ last
            |   innermost\ last
            ) \) :
        )
        \s* $                # toss trailing whitespace on the header.
        (?P<stack> .*?)      # don't blink: absorb stuff until...
        ^ (?P<msg> \w+ .*)   #     a line *starts* with alphanum.
        _EXCEPTION_RE^[ ]*(#.*)?$_IS_BLANK_OR_COMMENT
        Divide the given string into examples and intervening text,
        and return them as a list of alternating Examples and strings.
        Line numbers for the Examples are 0-based.  The optional
        argument `name` is a name identifying this string, and is only
        used for error messages.
        _min_indentmin_indentcharno_parse_exampleget_doctest
        Extract all doctest examples from the given string, and
        collect them into a `DocTest` object.

        `globs`, `name`, `filename`, and `lineno` are attributes for
        the new `DocTest` object.  See the documentation for `DocTest`
        for more information.
        get_examples
        Extract all doctest examples from the given string, and return
        them as a list of `Example` objects.  Line numbers are
        0-based, because it's most common in doctests that nothing
        interesting appears on the same line as opening triple-quote,
        and so the first interesting line is called "line 1" then.

        The optional argument `name` is a name identifying this
        string, and is only used for error messages.
        
        Given a regular expression match from `_EXAMPLE_RE` (`m`),
        return a pair `(source, want)`, where `source` is the matched
        example's source code (with prompts and indentation stripped);
        and `want` is the example's expected output (with indentation
        stripped).

        `name` is the string's name, and `lineno` is the line number
        where the example starts; both are used for error messages.
        source_lines_check_prompt_blank_check_prefixslwant_lines *$wl_find_options#\s*doctest:\s*([^\n\'"]*)$_OPTION_DIRECTIVE_RE
        Return a dictionary containing option overrides extracted from
        option directives in the given source string.

        `name` is the string's name, and `lineno` is the line number
        where the example starts; both are used for error messages.
        line %r of the doctest for %s has an invalid option: %r'line %r of the doctest for %s ''has an invalid option: %r'line %r of the doctest for %s has an option directive on a line with no example: %r'line %r of the doctest for %s has an option ''directive on a line with no example: %r'^([ ]*)(?=\S)_INDENT_REReturn the minimum indentation of any non-blank line in `s`indents
        Given the lines of a source string (including prompts and
        leading indentation), check to make sure that every prompt is
        followed by a space character.  If any line is not followed by
        a space character, then raise ValueError.
        line %r of the docstring for %s lacks blank after %s: %r'line %r of the docstring for %s ''lacks blank after %s: %r'
        Check that every line in the given list starts with the given
        prefix; if any line does not, then raise a ValueError.
        line %r of the docstring for %s has inconsistent leading whitespace: %r'line %r of the docstring for %s has ''inconsistent leading whitespace: %r'
    A class used to extract the DocTests that are relevant to a given
    object, from its docstring and the docstrings of its contained
    objects.  Doctests can currently be extracted from the following
    object types: modules, functions, classes, methods, staticmethods,
    classmethods, and properties.
    recurseexclude_empty
        Create a new doctest finder.

        The optional argument `parser` specifies a class or
        function that should be used to create new DocTest objects (or
        objects that implement the same interface as DocTest).  The
        signature for this factory function should match the signature
        of the DocTest constructor.

        If the optional argument `recurse` is false, then `find` will
        only examine the given object, and not any contained objects.

        If the optional argument `exclude_empty` is false, then `find`
        will include tests for objects with empty docstrings.
        _verbose_recurse_exclude_emptyextraglobs
        Return a list of the DocTests that are defined by the given
        object's docstring, or by any of its contained objects'
        docstrings.

        The optional parameter `module` is the module that contains
        the given object.  If the module is not specified or is None, then
        the test finder will attempt to automatically determine the
        correct module.  The object's module is used:

            - As a default namespace, if `globs` is not specified.
            - To prevent the DocTestFinder from extracting DocTests
              from objects that are imported from other modules.
            - To find the name of the file containing the object.
            - To help find the line number of the object within its
              file.

        Contained objects whose module does not match `module` are ignored.

        If `module` is False, no attempt to find the module will be made.
        This is obscure, of use mostly in tests:  if `module` is False, or
        is None but cannot be found automatically, then all objects are
        considered to belong to the (non-existent) module, so all contained
        objects will (recursively) be searched for doctests.

        The globals for each DocTest is formed by combining `globs`
        and `extraglobs` (bindings in `extraglobs` override bindings
        in `globs`).  A new copy of the globals dictionary is created
        for each DocTest.  If `globs` is not specified, then it
        defaults to the module's `__dict__`, if specified, or {}
        otherwise.  If `extraglobs` is not specified, then it defaults
        to {}.

        DocTestFinder.find: name must be given when obj.__name__ doesn't exist: %r"DocTestFinder.find: name must be given ""when obj.__name__ doesn't exist: %r"getmodulegetsourcefilegetfile<]>getlines_find_from_module
        Return true if the given object is defined in the given
        module.
        ismethoddescriptorobj_modisclassobject must be a class or function
        Find tests for the given object and any contained objects, and
        add them to `tests`.
        Finding tests in %s_get_testvalnameisroutineunwrap__test__DocTestFinder.find: __test__ keys must be strings: %r"DocTestFinder.find: __test__ keys ""must be strings: %r"DocTestFinder.find: __test__ values must be strings, functions, methods, classes, or modules: %r"DocTestFinder.find: __test__ values ""must be strings, functions, methods, ""classes, or modules: %r"%s.__test__.%s
        Return a DocTest for the given object, if it defines a docstring;
        otherwise, return None.
        _find_lineno
        Return a line number of the given object's docstring.  Note:
        this method assumes that the object has a docstring.
        ^\s*class\s*%s\bistracebackisframeiscode(^|.*:)\s*\w*("|\')
    A class used to run DocTest test cases, and accumulate statistics.
    The `run` method is used to process a single DocTest case.  It
    returns a tuple `(f, t)`, where `t` is the number of test cases
    tried, and `f` is the number of test cases that failed.

        >>> tests = DocTestFinder().find(_TestClass)
        >>> runner = DocTestRunner(verbose=False)
        >>> tests.sort(key = lambda test: test.name)
        >>> for test in tests:
        ...     print(test.name, '->', runner.run(test))
        _TestClass -> TestResults(failed=0, attempted=2)
        _TestClass.__init__ -> TestResults(failed=0, attempted=2)
        _TestClass.get -> TestResults(failed=0, attempted=2)
        _TestClass.square -> TestResults(failed=0, attempted=1)

    The `summarize` method prints a summary of all the test cases that
    have been run by the runner, and returns an aggregated `(f, t)`
    tuple:

        >>> runner.summarize(verbose=1)
        4 items passed all tests:
           2 tests in _TestClass
           2 tests in _TestClass.__init__
           2 tests in _TestClass.get
           1 tests in _TestClass.square
        7 tests in 4 items.
        7 passed and 0 failed.
        Test passed.
        TestResults(failed=0, attempted=7)

    The aggregated number of tried examples and failed examples is
    also available via the `tries` and `failures` attributes:

        >>> runner.tries
        7
        >>> runner.failures
        0

    The comparison between expected outputs and actual outputs is done
    by an `OutputChecker`.  This comparison may be customized with a
    number of option flags; see the documentation for `testmod` for
    more information.  If the option flags are insufficient, then the
    comparison may also be customized by passing a subclass of
    `OutputChecker` to the constructor.

    The test runner's display output can be controlled in two ways.
    First, an output function (`out) can be passed to
    `TestRunner.run`; this function will be called with strings that
    should be displayed.  It defaults to `sys.stdout.write`.  If
    capturing the output is not sufficient, then the display output
    can be also customized by subclassing DocTestRunner, and
    overriding the methods `report_start`, `report_success`,
    `report_unexpected_exception`, and `report_failure`.
    DIVIDERchecker
        Create a new test runner.

        Optional keyword arg `checker` is the `OutputChecker` that
        should be used to compare the expected outputs and actual
        outputs of doctest examples.

        Optional keyword arg 'verbose' prints lots of stuff if true,
        only failures if false; by default, it's true iff '-v' is in
        sys.argv.

        Optional argument `optionflags` can be used to control how the
        test runner compares expected output to actual output, and how
        it displays failures.  See the documentation for `testmod` for
        more information.
        _checker-voriginal_optionflagstries_name2ft_fakeoutreport_startexample
        Report that the test runner is about to process the given
        example.  (Only displays a message if verbose=True)
        Trying:
Expecting:
Expecting nothing
report_success
        Report that the given example ran successfully.  (Only
        displays a message if verbose=True)
        ok
report_failure
        Report that the given example failed.
        _failure_headeroutput_differencereport_unexpected_exception
        Report that the given example raised an unexpected exception.
        Exception raised:
File "%s", line %s, in %sLine %s, in %sFailed example:__runcompileflags
        Run the examples in `test`.  Write the outcome of each example
        with one of the `DocTestRunner.report_*` methods, using the
        writer function `out`.  `compileflags` is the set of compiler
        flags that should be used to execute examples.  Return a tuple
        `(f, t)`, where `t` is the number of examples tried, and `f`
        is the number of examples that failed.  The examples are run
        in the namespace `test.globs`.
        SUCCESSBOOMexamplenumoptionflag<doctest %s[%d]>unknown outcome__record_outcome
        Record the fact that the given DocTest (`test`) generated `f`
        failures out of `t` tried examples.
        f2<doctest (?P<name>.+)\[(?P<examplenum>\d+)\]>$r'<doctest 'r'(?P<name>.+)'r'\[(?P<examplenum>\d+)\]>$'__LINECACHE_FILENAME_RE__patched_linecache_getlinesmodule_globalssave_linecache_getlinesclear_globs
        Run the examples in `test`, and display the results using the
        writer function `out`.

        The examples are run in the namespace `test.globs`.  If
        `clear_globs` is true (the default), then this namespace will
        be cleared after the test runs, to help with garbage
        collection.  If you would like to examine the namespace after
        the test completes, then use `clear_globs=False`.

        `compileflags` gives the set of flags that should be used by
        the Python compiler when running the examples.  If not
        specified, then it will default to the set of future-import
        flags that apply to `globs`.

        The output of each example is checked using
        `DocTestRunner.check_output`, and the results are formatted by
        the `DocTestRunner.report_*` methods.
        save_tracesave_set_tracesave_displayhooksummarize
        Print a summary of all the test cases that have been run by
        this DocTestRunner, and return a tuple `(f, t)`, where `f` is
        the total number of failed examples, and `t` is the total
        number of tried examples.

        The optional `verbose` argument controls how detailed the
        summary is.  If the verbosity is not specified, then the
        DocTestRunner's verbosity is used.
        notestspassedfailedtotalttotalfitems had no tests:items passed all tests: %3d tests in %sitems had failures: %3d of %3d in %stests initems.passed andfailed.***Test Failed***failures.Test passed.merge
    A class used to check the whether the actual output from a doctest
    example matches the expected output.  `OutputChecker` defines two
    methods: `check_output`, which compares a given pair of outputs,
    and returns true if they match; and `output_difference`, which
    returns a string describing the differences between two outputs.
    _toAscii
        Convert string to hex-escaped ASCII string.
        
        Return True iff the actual output from an example (`got`)
        matches the expected output (`want`).  These strings are
        always considered to match if they are identical; but
        depending on what option flags the test runner is using,
        several non-exact match types are also possible.  See the
        documentation for `TestRunner` for more information about
        option flags.
        True
1
False
0
(?m)^%s\s*?$(?m)^[^\S\n]+$_do_a_fancy_diff
        Return a string describing the differences between the
        expected output for a given example (`example`) and the actual
        output (`got`).  `optionflags` is the set of option flags used
        to compare `want` and `got`.
        (?m)^[ ]*(?=
)got_linesunified diff with -expected +actualcontext diff with expected followed by actualenginendiff with -expected +actualBad diff optionDifferences (%s):
Expected:
%sGot:
%sExpected:
%sGot nothing
Expected nothing
Got:
%sExpected nothing
Got nothing
A DocTest example has failed in debugging mode.

    The exception instance has variables:

    - test: the DocTest object being run

    - example: the Example object that failed

    - got: the actual output
    A DocTest example has encountered an unexpected exception

    The exception instance has variables:

    - test: the DocTest object being run

    - example: the Example object that failed

    - exc_info: the exception info
    Run doc tests but raise an exception as soon as there is a failure.

       If an unexpected exception occurs, an UnexpectedException is raised.
       It contains the test, the example, and the original exception:

         >>> runner = DebugRunner(verbose=False)
         >>> test = DocTestParser().get_doctest('>>> raise KeyError\n42',
         ...                                    {}, 'foo', 'foo.py', 0)
         >>> try:
         ...     runner.run(test)
         ... except UnexpectedException as f:
         ...     failure = f

         >>> failure.test is test
         True

         >>> failure.example.want
         '42\n'

         >>> exc_info = failure.exc_info
         >>> raise exc_info[1] # Already has the traceback
         Traceback (most recent call last):
         ...
         KeyError

       We wrap the original exception to give the calling application
       access to the test and example information.

       If the output doesn't match, then a DocTestFailure is raised:

         >>> test = DocTestParser().get_doctest('''
         ...      >>> x = 1
         ...      >>> x
         ...      2
         ...      ''', {}, 'foo', 'foo.py', 0)

         >>> try:
         ...    runner.run(test)
         ... except DocTestFailure as f:
         ...    failure = f

       DocTestFailure objects provide access to the test:

         >>> failure.test is test
         True

       As well as to the example:

         >>> failure.example.want
         '2\n'

       and the actual output:

         >>> failure.got
         '1\n'

       If a failure or error occurs, the globals are left intact:

         >>> del test.globs['__builtins__']
         >>> test.globs
         {'x': 1}

         >>> test = DocTestParser().get_doctest('''
         ...      >>> x = 2
         ...      >>> raise KeyError
         ...      ''', {}, 'foo', 'foo.py', 0)

         >>> runner.run(test)
         Traceback (most recent call last):
         ...
         doctest.UnexpectedException: <DocTest foo from foo.py:0 (2 examples)>

         >>> del test.globs['__builtins__']
         >>> test.globs
         {'x': 2}

       But the globals are cleared if there is no error:

         >>> test = DocTestParser().get_doctest('''
         ...      >>> x = 2
         ...      ''', {}, 'foo', 'foo.py', 0)

         >>> runner.run(test)
         TestResults(failed=0, attempted=1)

         >>> test.globs
         {}

       reportraise_on_errorm=None, name=None, globs=None, verbose=None, report=True,
       optionflags=0, extraglobs=None, raise_on_error=False,
       exclude_empty=False

    Test examples in docstrings in functions and classes reachable
    from module m (or the current module if m is not supplied), starting
    with m.__doc__.

    Also test examples reachable from dict m.__test__ if it exists and is
    not None.  m.__test__ maps names to functions, classes and strings;
    function and class docstrings are tested even if the name is private;
    strings are tested directly, as if they were docstrings.

    Return (#failures, #tests).

    See help(doctest) for an overview.

    Optional keyword arg "name" gives the name of the module; by default
    use m.__name__.

    Optional keyword arg "globs" gives a dict to be used as the globals
    when executing examples; by default, use m.__dict__.  A copy of this
    dict is actually used for each docstring, so that each docstring's
    examples start with a clean slate.

    Optional keyword arg "extraglobs" gives a dictionary that should be
    merged into the globals that are used to execute examples.  By
    default, no extra globals are used.  This is new in 2.4.

    Optional keyword arg "verbose" prints lots of stuff if true, prints
    only failures if false; by default, it's true iff "-v" is in sys.argv.

    Optional keyword arg "report" prints a summary at the end when true,
    else prints nothing at the end.  In verbose mode, the summary is
    detailed, else very brief (in fact, empty if all tests passed).

    Optional keyword arg "optionflags" or's together module constants,
    and defaults to 0.  This is new in 2.3.  Possible values (see the
    docs for details):

        DONT_ACCEPT_TRUE_FOR_1
        DONT_ACCEPT_BLANKLINE
        NORMALIZE_WHITESPACE
        ELLIPSIS
        SKIP
        IGNORE_EXCEPTION_DETAIL
        REPORT_UDIFF
        REPORT_CDIFF
        REPORT_NDIFF
        REPORT_ONLY_FIRST_FAILURE

    Optional keyword arg "raise_on_error" raises an exception on the
    first unexpected exception or failure. This allows failures to be
    post-mortem debugged.

    Advanced tomfoolery:  testmod runs methods of a local instance of
    class doctest.Tester, then merges the results into (or creates)
    global Tester instance doctest.master.  Methods of doctest.master
    can be called directly too, if you want to do something unusual.
    Passing report=0 to testmod is especially useful then, to delay
    displaying a summary.  Invoke doctest.master.summarize(verbose)
    when you're done fiddling.
    testmod: module required; %r
    Test examples in the given file.  Return (#failures, #tests).

    Optional keyword arg "module_relative" specifies how filenames
    should be interpreted:

      - If "module_relative" is True (the default), then "filename"
         specifies a module-relative path.  By default, this path is
         relative to the calling module's directory; but if the
         "package" argument is specified, then it is relative to that
         package.  To ensure os-independence, "filename" should use
         "/" characters to separate path segments, and should not
         be an absolute path (i.e., it may not begin with "/").

      - If "module_relative" is False, then "filename" specifies an
        os-specific path.  The path may be absolute or relative (to
        the current working directory).

    Optional keyword arg "name" gives the name of the test; by default
    use the file's basename.

    Optional keyword argument "package" is a Python package or the
    name of a Python package whose directory should be used as the
    base directory for a module relative filename.  If no package is
    specified, then the calling module's directory is used as the base
    directory for module relative filenames.  It is an error to
    specify "package" if "module_relative" is False.

    Optional keyword arg "globs" gives a dict to be used as the globals
    when executing examples; by default, use {}.  A copy of this dict
    is actually used for each docstring, so that each docstring's
    examples start with a clean slate.

    Optional keyword arg "extraglobs" gives a dictionary that should be
    merged into the globals that are used to execute examples.  By
    default, no extra globals are used.

    Optional keyword arg "verbose" prints lots of stuff if true, prints
    only failures if false; by default, it's true iff "-v" is in sys.argv.

    Optional keyword arg "report" prints a summary at the end when true,
    else prints nothing at the end.  In verbose mode, the summary is
    detailed, else very brief (in fact, empty if all tests passed).

    Optional keyword arg "optionflags" or's together module constants,
    and defaults to 0.  Possible values (see the docs for details):

        DONT_ACCEPT_TRUE_FOR_1
        DONT_ACCEPT_BLANKLINE
        NORMALIZE_WHITESPACE
        ELLIPSIS
        SKIP
        IGNORE_EXCEPTION_DETAIL
        REPORT_UDIFF
        REPORT_CDIFF
        REPORT_NDIFF
        REPORT_ONLY_FIRST_FAILURE

    Optional keyword arg "raise_on_error" raises an exception on the
    first unexpected exception or failure. This allows failures to be
    post-mortem debugged.

    Optional keyword arg "parser" specifies a DocTestParser (or
    subclass) that should be used to extract tests from the files.

    Optional keyword arg "encoding" specifies an encoding that should
    be used to convert the file to unicode.

    Advanced tomfoolery:  testmod runs methods of a local instance of
    class doctest.Tester, then merges the results into (or creates)
    global Tester instance doctest.master.  Methods of doctest.master
    can be called directly too, if you want to do something unusual.
    Passing report=0 to testmod is especially useful then, to delay
    displaying a summary.  Invoke doctest.master.summarize(verbose)
    when you're done fiddling.
    Package may only be specified for module-relative paths."Package may only be specified for module-""relative paths."NoName
    Test examples in the given object's docstring (`f`), using `globs`
    as globals.  Optional argument `name` is used in failure messages.
    If the optional argument `verbose` is true, then generate output
    even if there are no failures.

    `compileflags` gives the set of flags that should be used by the
    Python compiler when running the examples.  If not specified, then
    it will default to the set of future-import flags that apply to
    `globs`.

    Optional keyword arg `optionflags` specifies options for the
    testing and output.  See the documentation for `testmod` for more
    information.
    _unittest_reportflagsSets the unittest option flags.

    The old flag is returned so that a runner could restore the old
    value if it wished to:

      >>> import doctest
      >>> old = doctest._unittest_reportflags
      >>> doctest.set_unittest_reportflags(REPORT_NDIFF |
      ...                          REPORT_ONLY_FIRST_FAILURE) == old
      True

      >>> doctest._unittest_reportflags == (REPORT_NDIFF |
      ...                                   REPORT_ONLY_FIRST_FAILURE)
      True

    Only reporting flags can be set:

      >>> doctest.set_unittest_reportflags(ELLIPSIS)
      Traceback (most recent call last):
      ...
      ValueError: ('Only reporting flags allowed', 8)

      >>> doctest.set_unittest_reportflags(old) == (REPORT_NDIFF |
      ...                                   REPORT_ONLY_FIRST_FAILURE)
      True
    Only reporting flags allowedDocTestCase_dt_optionflags_dt_checker_dt_test_dt_setUp_dt_tearDownformat_failureunknown line numberlnameFailed doctest test for %s
  File "%s", line %s, in %s

%s'Failed doctest test for %s\n''  File "%s", line %s, in %s\n\n%s'Run the test case without results and without catching exceptions

           The unit test framework includes a debug method on test cases
           and test suites to support post-mortem debugging.  The test code
           is run in such a way that errors are not caught.  This way a
           caller can catch the errors and initiate post-mortem debugging.

           The DocTestCase provides a debug method that raises
           UnexpectedException errors if there is an unexpected
           exception:

             >>> test = DocTestParser().get_doctest('>>> raise KeyError\n42',
             ...                {}, 'foo', 'foo.py', 0)
             >>> case = DocTestCase(test)
             >>> try:
             ...     case.debug()
             ... except UnexpectedException as f:
             ...     failure = f

           The UnexpectedException contains the test, the example, and
           the original exception:

             >>> failure.test is test
             True

             >>> failure.example.want
             '42\n'

             >>> exc_info = failure.exc_info
             >>> raise exc_info[1] # Already has the traceback
             Traceback (most recent call last):
             ...
             KeyError

           If the output doesn't match, then a DocTestFailure is raised:

             >>> test = DocTestParser().get_doctest('''
             ...      >>> x = 1
             ...      >>> x
             ...      2
             ...      ''', {}, 'foo', 'foo.py', 0)
             >>> case = DocTestCase(test)

             >>> try:
             ...    case.debug()
             ... except DocTestFailure as f:
             ...    failure = f

           DocTestFailure objects provide access to the test:

             >>> failure.test is test
             True

           As well as to the example:

             >>> failure.example.want
             '2\n'

           and the actual output:

             >>> failure.got
             '1\n'

           Doctest: SkipDocTestCaseDocTestSuite will not work with -O2 and abovetest_skipSkipping tests from %s_DocTestSuite_removeTestAtIndextest_finder
    Convert doctest tests for a module to a unittest test suite.

    This converts each documentation string in a module that
    contains doctest tests to a unittest test case.  If any of the
    tests in a doc string fail, then the test case fails.  An exception
    is raised showing the name of the file containing the test and a
    (sometimes approximate) line number.

    The `module` argument provides the module to be tested.  The argument
    can be either a module or a module name.

    If no argument is given, the calling module is used.

    A number of options may be provided as keyword arguments:

    setUp
      A set-up function.  This is called before running the
      tests in each file. The setUp function will be passed a DocTest
      object.  The setUp function can access the test globals as the
      globs attribute of the test passed.

    tearDown
      A tear-down function.  This is called after running the
      tests in each file.  The tearDown function will be passed a DocTest
      object.  The tearDown function can access the test globals as the
      globs attribute of the test passed.

    globs
      A dictionary containing initial global variables for the tests.

    optionflags
       A set of doctest option flags expressed as an integer.
    DocFileCaseFailed doctest test for %s
  File "%s", line 0

%sDocFileTestA unittest suite for one or more doctest files.

    The path to each doctest file is given as a string; the
    interpretation of that string depends on the keyword argument
    "module_relative".

    A number of options may be provided as keyword arguments:

    module_relative
      If "module_relative" is True, then the given file paths are
      interpreted as os-independent module-relative paths.  By
      default, these paths are relative to the calling module's
      directory; but if the "package" argument is specified, then
      they are relative to that package.  To ensure os-independence,
      "filename" should use "/" characters to separate path
      segments, and may not be an absolute path (i.e., it may not
      begin with "/").

      If "module_relative" is False, then the given file paths are
      interpreted as os-specific paths.  These paths may be absolute
      or relative (to the current working directory).

    package
      A Python package or the name of a Python package whose directory
      should be used as the base directory for module relative paths.
      If "package" is not specified, then the calling module's
      directory is used as the base directory for module relative
      filenames.  It is an error to specify "package" if
      "module_relative" is False.

    setUp
      A set-up function.  This is called before running the
      tests in each file. The setUp function will be passed a DocTest
      object.  The setUp function can access the test globals as the
      globs attribute of the test passed.

    tearDown
      A tear-down function.  This is called after running the
      tests in each file.  The tearDown function will be passed a DocTest
      object.  The tearDown function can access the test globals as the
      globs attribute of the test passed.

    globs
      A dictionary containing initial global variables for the tests.

    optionflags
      A set of doctest option flags expressed as an integer.

    parser
      A DocTestParser (or subclass) that should be used to extract
      tests from the files.

    encoding
      An encoding that will be used to convert the files to unicode.
    Extract script from text with examples.

       Converts text with examples to a Python script.  Example input is
       converted to regular code.  Example output and all other words
       are converted to comments:

       >>> text = '''
       ...       Here are examples of simple math.
       ...
       ...           Python has super accurate integer addition
       ...
       ...           >>> 2 + 2
       ...           5
       ...
       ...           And very friendly error messages:
       ...
       ...           >>> 1/0
       ...           To Infinity
       ...           And
       ...           Beyond
       ...
       ...           You can use logic if you want:
       ...
       ...           >>> if 0:
       ...           ...    blah
       ...           ...    blah
       ...           ...
       ...
       ...           Ho hum
       ...           '''

       >>> print(script_from_examples(text))
       # Here are examples of simple math.
       #
       #     Python has super accurate integer addition
       #
       2 + 2
       # Expected:
       ## 5
       #
       #     And very friendly error messages:
       #
       1/0
       # Expected:
       ## To Infinity
       ## And
       ## Beyond
       #
       #     You can use logic if you want:
       #
       if 0:
          blah
          blah
       #
       #     Ho hum
       <BLANKLINE>
       piece# Expected:## Extract the test sources from a doctest docstring as a script.

    Provide the module (or dotted name of the module) containing the
    test to be debugged and the name (within the module) of the object
    with the doc string with tests to be debugged.
    not found in teststestsrcpmDebug a single doctest docstring, in argument `src`'debug_scriptDebug a test script.  `src` is the script, as a string.interactionexec(%r)Debug a single doctest docstring.

    Provide the module (or dotted name of the module) containing the
    test to be debugged and the name (within the module) of the object
    with the docstring with tests to be debugged.
    _TestClass
    A pointless class, for sanity-checking of docstring testing.

    Methods:
        square()
        get()

    >>> _TestClass(13).get() + _TestClass(-12).get()
    1
    >>> hex(_TestClass(13).square().get())
    '0xa9'
    val -> _TestClass object with associated value val.

        >>> t = _TestClass(123)
        >>> print(t.get())
        123
        squaresquare() -> square TestClass's associated value

        >>> _TestClass(13).square().get()
        169
        get() -> return TestClass's associated value.

        >>> x = _TestClass(-42)
        >>> print(x.get())
        -42
        
                      Example of a string object, searched as-is.
                      >>> x = 1; y = 2
                      >>> x + y, x * y
                      (3, 2)
                      
                                    In 2.2, boolean expressions displayed
                                    0 or 1.  By default, we still accept
                                    them.  This can be disabled by passing
                                    DONT_ACCEPT_TRUE_FOR_1 to the new
                                    optionflags argument.
                                    >>> 4 == 4
                                    1
                                    >>> 4 == 4
                                    True
                                    >>> 4 > 4
                                    0
                                    >>> 4 > 4
                                    False
                                    bool-int equivalence
                Blank lines can be marked with <BLANKLINE>:
                    >>> print('foo\n\nbar\n')
                    foo
                    <BLANKLINE>
                    bar
                    <BLANKLINE>
            blank lines
                If the ellipsis flag is used, then '...' can be used to
                elide substrings in the desired output:
                    >>> print(list(range(1000))) #doctest: +ELLIPSIS
                    [0, 1, 2, ..., 999]
            
                If the whitespace normalization flag is used, then
                differences in whitespace are ignored.
                    >>> print(list(range(30))) #doctest: +NORMALIZE_WHITESPACE
                    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
                     27, 28, 29]
            whitespace normalizationdoctest runner--verboseprint very verbose output for all tests-o--optionspecify a doctest option flag to apply to the test run; may be specified more than once to apply multiple options'specify a doctest option flag to apply'' to the test run; may be specified more'' than once to apply multiple options'-f--fail-faststop running tests after first failure (this is a shorthand for -o FAIL_FAST, and is in addition to any other -o options)'stop running tests after first failure (this'' is a shorthand for -o FAIL_FAST, and is'' in addition to any other -o options)'file containing the tests to runtestfilesfail_fast# Module doctest.# Released to the public domain 16-Jan-2001, by Tim Peters (tim@python.org).# Major enhancements and refactoring by:#     Jim Fulton#     Edward Loper# Provided as-is; use at your own risk; no warranty; no promises; enjoy!# 0, Option Flags# 1. Utility Functions# 2. Example & DocTest# 3. Doctest Parser# 4. Doctest Finder# 5. Doctest Runner# 6. Test Functions# 7. Unittest Support# 8. Debugging Support# There are 4 basic classes:#  - Example: a <source, want> pair, plus an intra-docstring line number.#  - DocTest: a collection of examples, parsed from a docstring, plus#    info about where the docstring came from (name, filename, lineno).#  - DocTestFinder: extracts DocTests from a given object's docstring and#    its contained objects' docstrings.#  - DocTestRunner: runs DocTest cases, and accumulates statistics.# So the basic picture is:#                             list of:# +------+                   +---------+                   +-------+# |object| --DocTestFinder-> | DocTest | --DocTestRunner-> |results|#                            | Example |#                            |   ...   |#                            +---------+# Option constants.# Create a new flag unless `name` is already known.# Special string markers for use in `want` strings:######################################################################## Table of Contents#  1. Utility Functions#  2. Example & DocTest -- store test cases#  3. DocTest Parser -- extracts examples from strings#  4. DocTest Finder -- extracts test cases from objects#  5. DocTest Runner -- runs test cases#  6. Test Functions -- convenient wrappers for testing#  7. Unittest Support#  8. Debugging Support#  9. Example Usage## 1. Utility Functions# We have two cases to cover and we need to make sure we do# them in the right order# get_data() opens files as 'rb', so one must do the equivalent# conversion as universal newlines would do.# This regexp matches the start of non-blank lines:# Get a traceback message.# Override some StringIO methods.# If anything at all was written, make sure there's a trailing# newline.  There's no way for the expected output to indicate# that a trailing newline is missing.# Worst-case linear-time ellipsis matching.# Find "the real" strings.# Deal with exact matches possibly needed at one or both ends.# starts with exact match# ends with exact match# Exact end matches required more characters than we have, as in# _ellipsis_match('aa...aa', 'aaa')# For the rest, we only need to find the leftmost non-overlapping# match for each piece.  If there's no overall match that way alone,# there's no overall match period.# w may be '' at times, if there are consecutive ellipses, or# due to an ellipsis at the start or end of `want`.  That's OK.# Search for an empty string succeeds, and doesn't change startpos.# Support for IGNORE_EXCEPTION_DETAIL.# Get rid of everything except the exception name; in particular, drop# the possibly dotted module path (if any) and the exception message (if# any).  We assume that a colon is never part of a dotted name, or of an# exception name.# E.g., given#    "foo.bar.MyError: la di da"# return "MyError"# Or for "abc.def" or "abc.def:\n" return "def".# The exception name must appear on the first line.# retain up to the first colon (if any)# retain just the exception name# do not play signal games in the pdb# still use input() to get user input# Calling set_continue unconditionally would break unit test# coverage reporting, as Bdb.set_continue calls sys.settrace(None).# Redirect stdout to the given stream.# Call Pdb's trace dispatch method.# [XX] Normalize with respect to os.path.pardir?# Normalize the path. On Windows, replace "/" with "\".# Find the base directory for the path.# A normal module/package# An interactive session.# A module w/o __file__ (this includes builtins)# Combine the base directory and the test path.## 2. Example & DocTest## - An "example" is a <source, want> pair, where "source" is a##   fragment of source code, and "want" is the expected output for##   "source."  The Example class also includes information about##   where the example was extracted from.## - A "doctest" is a collection of examples, typically extracted from##   a string (such as an object's docstring).  The DocTest class also##   includes information about where the string was extracted from.# Normalize inputs.# Store properties.# This lets us sort tests by name:## 3. DocTestParser# This regular expression is used to find doctest examples in a# string.  It defines three groups: `source` is the source code# (including leading indentation and prompts); `indent` is the# indentation of the first (PS1) line of the source code; and# `want` is the expected output (including leading indentation).# A regular expression for handling `want` strings that contain# expected exceptions.  It divides `want` into three pieces:#    - the traceback header line (`hdr`)#    - the traceback stack (`stack`)#    - the exception message (`msg`), as generated by#      traceback.format_exception_only()# `msg` may have multiple lines.  We assume/require that the# exception message is the first non-indented line starting with a word# character following the traceback header line.# A callable returning a true value iff its argument is a blank line# or contains a single comment.# If all lines begin with the same indentation, then strip it.# Find all doctest examples in the string:# Add the pre-example text to ‚ˇ â  à◊rW    